

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Apr 06 12:41:15 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F47J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32  0000                     
    33                           ; Version 1.41
    34                           ; Generated 25/01/2017 GMT
    35                           ; 
    36                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F47J53 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     _RPINR16	set	3831
    68  0000                     _RPOR8	set	3784
    69  0000                     _PPSCON	set	3775
    70  0000                     _RCREG2	set	4010
    71  0000                     _TXREG2	set	4009
    72  0000                     _TXSTA2bits	set	4008
    73  0000                     _TXREG1	set	4014
    74  0000                     _TXSTA1bits	set	4013
    75  0000                     _SPBRGH2	set	3965
    76  0000                     _SPBRG2	set	4011
    77  0000                     _BAUDCON2bits	set	3964
    78  0000                     _TXSTA2	set	4008
    79  0000                     _RCSTA2	set	3996
    80  0000                     _SPBRGH1	set	3967
    81  0000                     _SPBRG1	set	4016
    82  0000                     _BAUDCON1bits	set	3966
    83  0000                     _RCSTA1	set	4012
    84  0000                     _TXSTA1	set	4013
    85  0000                     _INTCON	set	4082
    86  0000                     _OSCTUNEbits	set	3995
    87  0000                     _OSCCONbits	set	4051
    88  0000                     _PORTDbits	set	3971
    89  0000                     _TRISDbits	set	3989
    90  0000                     _TRISAbits	set	3986
    91  0000                     _RCREG1	set	4015
    92  0000                     _LATAbits	set	3977
    93  0000                     _RCIF	set	31989
    94  0000                     _TRISB5	set	31901
    95  0000                     _TRISB4	set	31900
    96  0000                     _RC2IE	set	32029
    97  0000                     _TRISC6	set	31910
    98  0000                     _TRISC7	set	31911
    99  0000                     _RC1IE	set	31981
   100  0000                     _RC2IF	set	32037
   101  0000                     _RC1IF	set	31989
   102                           
   103                           	psect	smallconst
   104  000F00                     __psmallconst:
   105                           	opt stack 0
   106  000F00  00                 	db	0
   107  000F01                     STR_1:
   108  000F01  4C                 	db	76	;'L'
   109  000F02  20                 	db	32
   110  000F03  35                 	db	53	;'5'
   111  000F04  30                 	db	48	;'0'
   112  000F05  00                 	db	0
   113  000F06                     STR_2:
   114  000F06  44                 	db	68	;'D'
   115  000F07  20                 	db	32
   116  000F08  38                 	db	56	;'8'
   117  000F09  00                 	db	0
   118  0000                     
   119                           ; #config settings
   120  000F0A  00                 	db	0	; dummy byte at the end
   121  0000                     
   122                           	psect	cinit
   123  00131C                     __pcinit:
   124                           	opt stack 0
   125  00131C                     start_initialization:
   126                           	opt stack 0
   127  00131C                     __initialization:
   128                           	opt stack 0
   129                           
   130                           ; Clear objects allocated to BANK0 (140 bytes)
   131  00131C  EE00  F060         	lfsr	0,__pbssBANK0
   132  001320  0E8C               	movlw	140
   133  001322                     clear_0:
   134  001322  6AEE               	clrf	postinc0,c
   135  001324  06E8               	decf	wreg,f,c
   136  001326  E1FD               	bnz	clear_0
   137                           
   138                           ; Clear objects allocated to COMRAM (25 bytes)
   139  001328  EE00  F025         	lfsr	0,__pbssCOMRAM
   140  00132C  0E19               	movlw	25
   141  00132E                     clear_1:
   142  00132E  6AEE               	clrf	postinc0,c
   143  001330  06E8               	decf	wreg,f,c
   144  001332  E1FD               	bnz	clear_1
   145  001334                     end_of_initialization:
   146                           	opt stack 0
   147  001334                     __end_of__initialization:
   148                           	opt stack 0
   149  001334  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   150  001336  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   151  001338  0100               	movlb	0
   152  00133A  EF86  F007         	goto	_main	;jump to C main() function
   153                           postinc0	equ	0xFEE
   154                           wreg	equ	0xFE8
   155                           
   156                           	psect	bssCOMRAM
   157  000025                     __pbssCOMRAM:
   158                           	opt stack 0
   159  000025                     _parsedString:
   160                           	opt stack 0
   161  000025                     	ds	16
   162  000035                     wait_ms@timel:
   163                           	opt stack 0
   164  000035                     	ds	4
   165  000039                     parseString@F8386:
   166                           	opt stack 0
   167  000039                     	ds	3
   168  00003C                     _index:
   169                           	opt stack 0
   170  00003C                     	ds	2
   171                           postinc0	equ	0xFEE
   172                           wreg	equ	0xFE8
   173                           
   174                           	psect	bssBANK0
   175  000060                     __pbssBANK0:
   176                           	opt stack 0
   177  000060                     _allDataString:
   178                           	opt stack 0
   179  000060                     	ds	70
   180  0000A6                     _tmpString:
   181                           	opt stack 0
   182  0000A6                     	ds	70
   183                           postinc0	equ	0xFEE
   184                           wreg	equ	0xFE8
   185                           
   186                           	psect	cstackBANK0
   187  0000EC                     __pcstackBANK0:
   188                           	opt stack 0
   189  0000EC                     ??_strlen:
   190  0000EC                     ?___lmul:
   191                           	opt stack 0
   192  0000EC                     UART_Init@baudrate:
   193                           	opt stack 0
   194  0000EC                     ___lmul@multiplier:
   195                           	opt stack 0
   196                           
   197                           ; 4 bytes @ 0x0
   198  0000EC                     	ds	2
   199  0000EE                     strlen@cp:
   200                           	opt stack 0
   201                           
   202                           ; 2 bytes @ 0x2
   203  0000EE                     	ds	2
   204  0000F0                     writeString@str:
   205                           	opt stack 0
   206  0000F0                     clearBuffer@i:
   207                           	opt stack 0
   208  0000F0                     ___lmul@multiplicand:
   209                           	opt stack 0
   210                           
   211                           ; 4 bytes @ 0x4
   212  0000F0                     	ds	2
   213  0000F2                     writeString@dev:
   214                           	opt stack 0
   215                           
   216                           ; 1 bytes @ 0x6
   217  0000F2                     	ds	1
   218  0000F3                     ??_writeString:
   219                           
   220                           ; 1 bytes @ 0x7
   221  0000F3                     	ds	1
   222  0000F4                     ___lmul@product:
   223                           	opt stack 0
   224                           
   225                           ; 4 bytes @ 0x8
   226  0000F4                     	ds	1
   227  0000F5                     writeString@i:
   228                           	opt stack 0
   229                           
   230                           ; 2 bytes @ 0x9
   231  0000F5                     	ds	3
   232  0000F8                     main@var:
   233                           	opt stack 0
   234                           
   235                           ; 1 bytes @ 0xC
   236  0000F8                     	ds	1
   237                           postinc0	equ	0xFEE
   238                           wreg	equ	0xFE8
   239                           
   240                           	psect	cstackCOMRAM
   241  000001                     __pcstackCOMRAM:
   242                           	opt stack 0
   243  000001                     appendChar@data:
   244                           	opt stack 0
   245                           
   246                           ; 1 bytes @ 0x0
   247  000001                     	ds	1
   248  000002                     ??_high_isr:
   249                           
   250                           ; 1 bytes @ 0x1
   251  000002                     	ds	15
   252  000011                     ??_low_isr:
   253                           
   254                           ; 1 bytes @ 0x10
   255  000011                     	ds	17
   256  000022                     ??_copyTmpBuffer:
   257  000022                     ?_strlen:
   258                           	opt stack 0
   259  000022                     UART_Write@dev:
   260                           	opt stack 0
   261  000022                     wait_ms@time:
   262                           	opt stack 0
   263  000022                     strlen@s:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x21
   267  000022                     	ds	1
   268  000023                     UART_Write@data:
   269                           	opt stack 0
   270  000023                     copyTmpBuffer@i:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x22
   274  000023                     	ds	1
   275  000024                     writeResult@dev:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x23
   279  000024                     	ds	1
   280  000025                     postinc0	equ	0xFEE
   281                           wreg	equ	0xFE8
   282                           
   283                           ; 1 bytes @ 0x24
   284 ;;
   285 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   286 ;;
   287 ;; *************** function _main *****************
   288 ;; Defined at:
   289 ;;		line 39 in file "main.c"
   290 ;; Parameters:    Size  Location     Type
   291 ;;		None
   292 ;; Auto vars:     Size  Location     Type
   293 ;;  var             1   12[BANK0 ] unsigned char 
   294 ;;  result          1    0        unsigned char 
   295 ;; Return value:  Size  Location     Type
   296 ;;                  1    wreg      void 
   297 ;; Registers used:
   298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   299 ;; Tracked objects:
   300 ;;		On entry : 0/0
   301 ;;		On exit  : 0/0
   302 ;;		Unchanged: 0/0
   303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   305 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   307 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   308 ;;Total ram usage:        1 bytes
   309 ;; Hardware stack levels required when called:    6
   310 ;; This function calls:
   311 ;;		_ConfigureOscillator
   312 ;;		_InitApp
   313 ;;		_UART_Init
   314 ;;		_UART_Write
   315 ;;		_clearBuffer
   316 ;;		_copyTmpBuffer
   317 ;;		_isItLongEnough
   318 ;;		_isValid
   319 ;;		_wait_ms
   320 ;;		_writeResult
   321 ;;		_writeString
   322 ;; This function is called by:
   323 ;;		Startup code after reset
   324 ;; This function uses a non-reentrant model
   325 ;;
   326                           
   327                           	psect	text0
   328  000F0C                     __ptext0:
   329                           	opt stack 0
   330  000F0C                     _main:
   331                           	opt stack 25
   332                           
   333                           ;main.c: 45: ConfigureOscillator();
   334                           
   335                           ;incstack = 0
   336  000F0C  ECD1  F009         	call	_ConfigureOscillator	;wreg free
   337                           
   338                           ;main.c: 48: InitApp();
   339  000F10  EC9F  F009         	call	_InitApp	;wreg free
   340                           
   341                           ;main.c: 50: UART_Init(19200);
   342  000F14  0E00               	movlw	0
   343  000F16  0100               	movlb	0	; () banked
   344  000F18  6FEC               	movwf	UART_Init@baudrate& (0+255),b
   345  000F1A  0E4B               	movlw	75
   346  000F1C  6FED               	movwf	(UART_Init@baudrate+1)& (0+255),b
   347  000F1E  0E00               	movlw	0
   348  000F20  6FEE               	movwf	(UART_Init@baudrate+2)& (0+255),b
   349  000F22  0E00               	movlw	0
   350  000F24  6FEF               	movwf	(UART_Init@baudrate+3)& (0+255),b
   351  000F26  EC63  F009         	call	_UART_Init	;wreg free
   352                           
   353                           ;main.c: 51: writeString("L 50", 1);
   354  000F2A  0E01               	movlw	low STR_1
   355  000F2C  0100               	movlb	0	; () banked
   356  000F2E  6FF0               	movwf	writeString@str& (0+255),b
   357  000F30  0E0F               	movlw	high STR_1
   358  000F32  0100               	movlb	0	; () banked
   359  000F34  6FF1               	movwf	(writeString@str+1)& (0+255),b
   360  000F36  0E01               	movlw	1
   361  000F38  0100               	movlb	0	; () banked
   362  000F3A  6FF2               	movwf	writeString@dev& (0+255),b
   363  000F3C  EC67  F008         	call	_writeString	;wreg free
   364                           
   365                           ;main.c: 52: UART_Write(0x0D,1);
   366  000F40  0E01               	movlw	1
   367  000F42  6E22               	movwf	UART_Write@dev,c
   368  000F44  0E0D               	movlw	13
   369  000F46  ECAE  F009         	call	_UART_Write
   370                           
   371                           ;main.c: 53: writeString("D 8", 1);
   372  000F4A  0E06               	movlw	low STR_2
   373  000F4C  0100               	movlb	0	; () banked
   374  000F4E  6FF0               	movwf	writeString@str& (0+255),b
   375  000F50  0E0F               	movlw	high STR_2
   376  000F52  0100               	movlb	0	; () banked
   377  000F54  6FF1               	movwf	(writeString@str+1)& (0+255),b
   378  000F56  0E01               	movlw	1
   379  000F58  0100               	movlb	0	; () banked
   380  000F5A  6FF2               	movwf	writeString@dev& (0+255),b
   381  000F5C  EC67  F008         	call	_writeString	;wreg free
   382                           
   383                           ;main.c: 54: UART_Write(0x0D,1);
   384  000F60  0E01               	movlw	1
   385  000F62  6E22               	movwf	UART_Write@dev,c
   386  000F64  0E0D               	movlw	13
   387  000F66  ECAE  F009         	call	_UART_Write
   388                           
   389                           ;main.c: 56: uint8_t var = 0;
   390  000F6A  0E00               	movlw	0
   391  000F6C  0100               	movlb	0	; () banked
   392  000F6E  6FF8               	movwf	main@var& (0+255),b
   393                           
   394                           ; BSR set to: 0
   395                           ;main.c: 57: char result;
   396                           ;main.c: 60: TRISAbits.TRISA0 = 0;
   397  000F70  9092               	bcf	3986,0,c	;volatile
   398                           
   399                           ; BSR set to: 0
   400                           ;main.c: 61: TRISAbits.TRISA1 = 0;
   401  000F72  9292               	bcf	3986,1,c	;volatile
   402                           
   403                           ; BSR set to: 0
   404                           ;main.c: 62: LATAbits.LATA0 = 0;
   405  000F74  9089               	bcf	3977,0,c	;volatile
   406                           
   407                           ; BSR set to: 0
   408                           ;main.c: 63: LATAbits.LATA1 = 0;
   409  000F76  9289               	bcf	3977,1,c	;volatile
   410                           
   411                           ; BSR set to: 0
   412                           ;main.c: 64: TRISDbits.TRISD3 = 1;
   413  000F78  8695               	bsf	3989,3,c	;volatile
   414                           
   415                           ; BSR set to: 0
   416                           ;main.c: 66: clearBuffer();
   417  000F7A  ECFD  F008         	call	_clearBuffer	;wreg free
   418  000F7E                     l1560:
   419                           
   420                           ;main.c: 71: if(isItLongEnough()){
   421  000F7E  ECC8  F009         	call	_isItLongEnough	;wreg free
   422  000F82  0900               	iorlw	0
   423  000F84  B4D8               	btfsc	status,2,c
   424  000F86  D014               	goto	l52
   425                           
   426                           ;main.c: 72: if(isValid()){
   427  000F88  EC46  F009         	call	_isValid	;wreg free
   428  000F8C  0900               	iorlw	0
   429  000F8E  B4D8               	btfsc	status,2,c
   430  000F90  D00C               	goto	l1572
   431                           
   432                           ;main.c: 73: LATAbits.LATA1 = 1;
   433  000F92  8289               	bsf	3977,1,c	;volatile
   434                           
   435                           ;main.c: 74: wait_ms(1000);
   436  000F94  0E03               	movlw	3
   437  000F96  6E23               	movwf	wait_ms@time+1,c
   438  000F98  0EE8               	movlw	232
   439  000F9A  6E22               	movwf	wait_ms@time,c
   440  000F9C  ECD0  F008         	call	_wait_ms	;wreg free
   441                           
   442                           ;main.c: 75: copyTmpBuffer();
   443  000FA0  EC26  F009         	call	_copyTmpBuffer	;wreg free
   444                           
   445                           ;main.c: 76: clearBuffer();
   446  000FA4  ECFD  F008         	call	_clearBuffer	;wreg free
   447                           
   448                           ;main.c: 77: }else{
   449  000FA8  D004               	goto	l55
   450  000FAA                     l1572:
   451                           
   452                           ;main.c: 78: clearBuffer();
   453  000FAA  ECFD  F008         	call	_clearBuffer	;wreg free
   454                           
   455                           ;main.c: 79: }
   456                           ;main.c: 80: }else{
   457  000FAE  D001               	goto	l55
   458  000FB0                     l52:
   459                           
   460                           ;main.c: 81: LATAbits.LATA1 = 0;
   461  000FB0  9289               	bcf	3977,1,c	;volatile
   462  000FB2                     l55:
   463                           
   464                           ;main.c: 82: }
   465                           ;main.c: 84: if(!PORTDbits.RD3){
   466  000FB2  B683               	btfsc	3971,3,c	;volatile
   467  000FB4  D7E4               	goto	l1560
   468                           
   469                           ;main.c: 85: writeResult(2);
   470  000FB6  0E02               	movlw	2
   471  000FB8  EC7C  F009         	call	_writeResult
   472  000FBC  D7E0               	goto	l1560
   473  000FBE                     __end_of_main:
   474                           	opt stack 0
   475                           postinc0	equ	0xFEE
   476                           wreg	equ	0xFE8
   477                           status	equ	0xFD8
   478                           
   479 ;; *************** function _writeResult *****************
   480 ;; Defined at:
   481 ;;		line 56 in file "bufferhandler.c"
   482 ;; Parameters:    Size  Location     Type
   483 ;;  dev             1    wreg     unsigned char 
   484 ;; Auto vars:     Size  Location     Type
   485 ;;  dev             1   35[COMRAM] unsigned char 
   486 ;; Return value:  Size  Location     Type
   487 ;;                  1    wreg      void 
   488 ;; Registers used:
   489 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   490 ;; Tracked objects:
   491 ;;		On entry : 0/0
   492 ;;		On exit  : 0/0
   493 ;;		Unchanged: 0/0
   494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   496 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   498 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   499 ;;Total ram usage:        1 bytes
   500 ;; Hardware stack levels used:    1
   501 ;; Hardware stack levels required when called:    5
   502 ;; This function calls:
   503 ;;		_wait_ms
   504 ;;		_writeString
   505 ;; This function is called by:
   506 ;;		_main
   507 ;; This function uses a non-reentrant model
   508 ;;
   509                           
   510                           	psect	text1
   511  0012F8                     __ptext1:
   512                           	opt stack 0
   513  0012F8                     _writeResult:
   514                           	opt stack 25
   515                           
   516                           ;incstack = 0
   517                           ;writeResult@dev stored from wreg
   518  0012F8  6E24               	movwf	writeResult@dev,c
   519                           
   520                           ;bufferhandler.c: 58: writeString(allDataString, dev);
   521  0012FA  0E60               	movlw	low _allDataString
   522  0012FC  0100               	movlb	0	; () banked
   523  0012FE  6FF0               	movwf	writeString@str& (0+255),b
   524  001300  0E00               	movlw	high _allDataString
   525  001302  0100               	movlb	0	; () banked
   526  001304  6FF1               	movwf	(writeString@str+1)& (0+255),b
   527  001306  C024  F0F2         	movff	writeResult@dev,writeString@dev
   528  00130A  EC67  F008         	call	_writeString	;wreg free
   529                           
   530                           ;bufferhandler.c: 59: wait_ms(1000);
   531  00130E  0E03               	movlw	3
   532  001310  6E23               	movwf	wait_ms@time+1,c
   533  001312  0EE8               	movlw	232
   534  001314  6E22               	movwf	wait_ms@time,c
   535  001316  ECD0  F008         	call	_wait_ms	;wreg free
   536  00131A  0012               	return		;funcret
   537  00131C                     __end_of_writeResult:
   538                           	opt stack 0
   539                           postinc0	equ	0xFEE
   540                           wreg	equ	0xFE8
   541                           status	equ	0xFD8
   542                           
   543 ;; *************** function _writeString *****************
   544 ;; Defined at:
   545 ;;		line 97 in file "uart.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;  str             2    4[BANK0 ] PTR unsigned char 
   548 ;;		 -> allDataString(70), STR_2(4), STR_1(5), 
   549 ;;  dev             1    6[BANK0 ] unsigned char 
   550 ;; Auto vars:     Size  Location     Type
   551 ;;  i               2    9[BANK0 ] int 
   552 ;; Return value:  Size  Location     Type
   553 ;;                  1    wreg      void 
   554 ;; Registers used:
   555 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   556 ;; Tracked objects:
   557 ;;		On entry : 0/0
   558 ;;		On exit  : 0/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   561 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   562 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   563 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   564 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   565 ;;Total ram usage:        7 bytes
   566 ;; Hardware stack levels used:    1
   567 ;; Hardware stack levels required when called:    4
   568 ;; This function calls:
   569 ;;		_UART_Write
   570 ;;		_strlen
   571 ;; This function is called by:
   572 ;;		_main
   573 ;;		_writeResult
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577                           	psect	text2
   578  0010CE                     __ptext2:
   579                           	opt stack 0
   580  0010CE                     _writeString:
   581                           	opt stack 26
   582                           
   583                           ;uart.c: 99: for(int i = 0; i<strlen(str); i++)
   584                           
   585                           ;incstack = 0
   586  0010CE  0E00               	movlw	0
   587  0010D0  0100               	movlb	0	; () banked
   588  0010D2  6FF6               	movwf	(writeString@i+1)& (0+255),b
   589  0010D4  0E00               	movlw	0
   590  0010D6  6FF5               	movwf	writeString@i& (0+255),b
   591  0010D8  D024               	goto	l1452
   592  0010DA                     l1448:
   593                           
   594                           ; BSR set to: 0
   595                           ;uart.c: 100: {
   596                           ;uart.c: 101: UART_Write(str[i], dev);
   597  0010DA  C0F2  F022         	movff	writeString@dev,UART_Write@dev
   598  0010DE  0100               	movlb	0	; () banked
   599  0010E0  51F5               	movf	writeString@i& (0+255),w,b
   600  0010E2  0100               	movlb	0	; () banked
   601  0010E4  25F0               	addwf	writeString@str& (0+255),w,b
   602  0010E6  0100               	movlb	0	; () banked
   603  0010E8  6FF3               	movwf	??_writeString& (0+255),b
   604  0010EA  0100               	movlb	0	; () banked
   605  0010EC  51F6               	movf	(writeString@i+1)& (0+255),w,b
   606  0010EE  0100               	movlb	0	; () banked
   607  0010F0  21F1               	addwfc	(writeString@str+1)& (0+255),w,b
   608  0010F2  0100               	movlb	0	; () banked
   609  0010F4  6FF4               	movwf	(??_writeString+1)& (0+255),b
   610  0010F6  C0F3  FFF6         	movff	??_writeString,tblptrl
   611  0010FA  C0F4  FFF7         	movff	??_writeString+1,tblptrh
   612  0010FE  0E00               	movlw	low (__smallconst shr (0+16))
   613  001100  6EF8               	movwf	tblptru,c
   614  001102  0E0E               	movlw	(high __ramtop+-1)
   615  001104  64F7               	cpfsgt	tblptrh,c
   616  001106  D003               	bra	u827
   617  001108  0008               	tblrd		*
   618  00110A  50F5               	movf	tablat,w,c
   619  00110C  D005               	bra	u820
   620  00110E                     u827:
   621  00110E  CFF6 FFE9          	movff	tblptrl,fsr0l
   622  001112  CFF7 FFEA          	movff	tblptrh,fsr0h
   623  001116  50EF               	movf	indf0,w,c
   624  001118                     u820:
   625  001118  ECAE  F009         	call	_UART_Write
   626  00111C  0100               	movlb	0	; () banked
   627  00111E  4BF5               	infsnz	writeString@i& (0+255),f,b
   628  001120  2BF6               	incf	(writeString@i+1)& (0+255),f,b
   629  001122                     l1452:
   630                           
   631                           ; BSR set to: 0
   632  001122  C0F0  F022         	movff	writeString@str,strlen@s
   633  001126  C0F1  F023         	movff	writeString@str+1,strlen@s+1
   634  00112A  ECA0  F008         	call	_strlen	;wreg free
   635  00112E  5022               	movf	?_strlen,w,c
   636  001130  0100               	movlb	0	; () banked
   637  001132  5DF5               	subwf	writeString@i& (0+255),w,b
   638  001134  5023               	movf	?_strlen+1,w,c
   639  001136  0100               	movlb	0	; () banked
   640  001138  59F6               	subwfb	(writeString@i+1)& (0+255),w,b
   641  00113A  B0D8               	btfsc	status,0,c
   642  00113C  0012               	return	
   643  00113E  D7CD               	goto	l1448
   644  001140                     __end_of_writeString:
   645                           	opt stack 0
   646                           tblptru	equ	0xFF8
   647                           tblptrh	equ	0xFF7
   648                           tblptrl	equ	0xFF6
   649                           tablat	equ	0xFF5
   650                           indf0	equ	0xFEF
   651                           postinc0	equ	0xFEE
   652                           fsr0h	equ	0xFEA
   653                           fsr0l	equ	0xFE9
   654                           wreg	equ	0xFE8
   655                           status	equ	0xFD8
   656                           
   657 ;; *************** function _UART_Write *****************
   658 ;; Defined at:
   659 ;;		line 61 in file "uart.c"
   660 ;; Parameters:    Size  Location     Type
   661 ;;  data            1    wreg     unsigned char 
   662 ;;  dev             1   33[COMRAM] unsigned char 
   663 ;; Auto vars:     Size  Location     Type
   664 ;;  data            1   34[COMRAM] unsigned char 
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		wreg, status,2, status,0
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   674 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   675 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   677 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   678 ;;Total ram usage:        2 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; Hardware stack levels required when called:    3
   681 ;; This function calls:
   682 ;;		Nothing
   683 ;; This function is called by:
   684 ;;		_main
   685 ;;		_writeString
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689                           	psect	text3
   690  00135C                     __ptext3:
   691                           	opt stack 0
   692  00135C                     _UART_Write:
   693                           	opt stack 26
   694                           
   695                           ; BSR set to: 0
   696                           ;incstack = 0
   697                           ;UART_Write@data stored from wreg
   698  00135C  6E23               	movwf	UART_Write@data,c
   699                           
   700                           ;uart.c: 63: if (dev == 1)
   701  00135E  0422               	decf	UART_Write@dev,w,c
   702  001360  A4D8               	btfss	status,2,c
   703  001362  D005               	goto	l148
   704  001364                     l144:
   705  001364  A2AD               	btfss	4013,1,c	;volatile
   706  001366  D7FE               	goto	l144
   707                           
   708                           ;uart.c: 66: TXREG1 = data;
   709  001368  C023  FFAE         	movff	UART_Write@data,4014	;volatile
   710                           
   711                           ;uart.c: 67: }
   712  00136C  0012               	return	
   713  00136E                     l148:
   714  00136E  A2A8               	btfss	4008,1,c	;volatile
   715  001370  D7FE               	goto	l148
   716                           
   717                           ;uart.c: 71: TXREG2 = data;
   718  001372  C023  FFA9         	movff	UART_Write@data,4009	;volatile
   719  001376  0012               	return	
   720  001378                     __end_of_UART_Write:
   721                           	opt stack 0
   722                           tblptru	equ	0xFF8
   723                           tblptrh	equ	0xFF7
   724                           tblptrl	equ	0xFF6
   725                           tablat	equ	0xFF5
   726                           indf0	equ	0xFEF
   727                           postinc0	equ	0xFEE
   728                           fsr0h	equ	0xFEA
   729                           fsr0l	equ	0xFE9
   730                           wreg	equ	0xFE8
   731                           status	equ	0xFD8
   732                           
   733 ;; *************** function _wait_ms *****************
   734 ;; Defined at:
   735 ;;		line 35 in file "system.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;  time            2   33[COMRAM] int 
   738 ;; Auto vars:     Size  Location     Type
   739 ;;		None
   740 ;; Return value:  Size  Location     Type
   741 ;;                  1    wreg      void 
   742 ;; Registers used:
   743 ;;		wreg, status,2, status,0, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   749 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   752 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   753 ;;Total ram usage:        2 bytes
   754 ;; Hardware stack levels used:    1
   755 ;; Hardware stack levels required when called:    4
   756 ;; This function calls:
   757 ;;		___lmul
   758 ;; This function is called by:
   759 ;;		_main
   760 ;;		_writeResult
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764                           	psect	text4
   765  0011A0                     __ptext4:
   766                           	opt stack 0
   767  0011A0                     _wait_ms:
   768                           	opt stack 25
   769                           
   770                           ;system.c: 37: static long timel = 0;
   771                           ;system.c: 38: timel = time * 1000l;
   772                           
   773                           ;incstack = 0
   774  0011A0  C022  F0EC         	movff	wait_ms@time,___lmul@multiplier
   775  0011A4  C023  F0ED         	movff	wait_ms@time+1,___lmul@multiplier+1
   776  0011A8  0100               	movlb	0	; () banked
   777  0011AA  0E00               	movlw	0
   778  0011AC  BFED               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
   779  0011AE  0EFF               	movlw	-1
   780  0011B0  6FEE               	movwf	(___lmul@multiplier+2)& (0+255),b
   781  0011B2  6FEF               	movwf	(___lmul@multiplier+3)& (0+255),b
   782  0011B4  0EE8               	movlw	232
   783  0011B6  0100               	movlb	0	; () banked
   784  0011B8  6FF0               	movwf	___lmul@multiplicand& (0+255),b
   785  0011BA  0E03               	movlw	3
   786  0011BC  6FF1               	movwf	(___lmul@multiplicand+1)& (0+255),b
   787  0011BE  0E00               	movlw	0
   788  0011C0  6FF2               	movwf	(___lmul@multiplicand+2)& (0+255),b
   789  0011C2  0E00               	movlw	0
   790  0011C4  6FF3               	movwf	(___lmul@multiplicand+3)& (0+255),b
   791  0011C6  EC2C  F008         	call	___lmul	;wreg free
   792  0011CA  C0EC  F035         	movff	?___lmul,wait_ms@timel
   793  0011CE  C0ED  F036         	movff	?___lmul+1,wait_ms@timel+1
   794  0011D2  C0EE  F037         	movff	?___lmul+2,wait_ms@timel+2
   795  0011D6  C0EF  F038         	movff	?___lmul+3,wait_ms@timel+3
   796                           
   797                           ;system.c: 39: for( ; timel; timel--);
   798  0011DA  D008               	goto	l71
   799  0011DC                     l1456:
   800  0011DC  0EFF               	movlw	255
   801  0011DE  2635               	addwf	wait_ms@timel,f,c
   802  0011E0  0EFF               	movlw	255
   803  0011E2  2236               	addwfc	wait_ms@timel+1,f,c
   804  0011E4  0EFF               	movlw	255
   805  0011E6  2237               	addwfc	wait_ms@timel+2,f,c
   806  0011E8  0EFF               	movlw	255
   807  0011EA  2238               	addwfc	wait_ms@timel+3,f,c
   808  0011EC                     l71:
   809  0011EC  5035               	movf	wait_ms@timel,w,c
   810  0011EE  1036               	iorwf	wait_ms@timel+1,w,c
   811  0011F0  1037               	iorwf	wait_ms@timel+2,w,c
   812  0011F2  1038               	iorwf	wait_ms@timel+3,w,c
   813  0011F4  B4D8               	btfsc	status,2,c
   814  0011F6  0012               	return	
   815  0011F8  D7F1               	goto	l1456
   816  0011FA                     __end_of_wait_ms:
   817                           	opt stack 0
   818                           tblptru	equ	0xFF8
   819                           tblptrh	equ	0xFF7
   820                           tblptrl	equ	0xFF6
   821                           tablat	equ	0xFF5
   822                           indf0	equ	0xFEF
   823                           postinc0	equ	0xFEE
   824                           fsr0h	equ	0xFEA
   825                           fsr0l	equ	0xFE9
   826                           wreg	equ	0xFE8
   827                           status	equ	0xFD8
   828                           
   829 ;; *************** function ___lmul *****************
   830 ;; Defined at:
   831 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;  multiplier      4    0[BANK0 ] unsigned long 
   834 ;;  multiplicand    4    4[BANK0 ] unsigned long 
   835 ;; Auto vars:     Size  Location     Type
   836 ;;  product         4    8[BANK0 ] unsigned long 
   837 ;; Return value:  Size  Location     Type
   838 ;;                  4    0[BANK0 ] unsigned long 
   839 ;; Registers used:
   840 ;;		wreg, status,2, status,0
   841 ;; Tracked objects:
   842 ;;		On entry : 0/0
   843 ;;		On exit  : 0/0
   844 ;;		Unchanged: 0/0
   845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   846 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   847 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   849 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   850 ;;Total ram usage:       12 bytes
   851 ;; Hardware stack levels used:    1
   852 ;; Hardware stack levels required when called:    3
   853 ;; This function calls:
   854 ;;		Nothing
   855 ;; This function is called by:
   856 ;;		_wait_ms
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           	psect	text5
   861  001058                     __ptext5:
   862                           	opt stack 0
   863  001058                     ___lmul:
   864                           	opt stack 25
   865                           
   866                           ;incstack = 0
   867  001058  0E00               	movlw	0
   868  00105A  0100               	movlb	0	; () banked
   869  00105C  6FF4               	movwf	___lmul@product& (0+255),b
   870  00105E  0E00               	movlw	0
   871  001060  6FF5               	movwf	(___lmul@product+1)& (0+255),b
   872  001062  0E00               	movlw	0
   873  001064  6FF6               	movwf	(___lmul@product+2)& (0+255),b
   874  001066  0E00               	movlw	0
   875  001068  6FF7               	movwf	(___lmul@product+3)& (0+255),b
   876  00106A                     l1438:
   877                           
   878                           ; BSR set to: 0
   879  00106A  0100               	movlb	0	; () banked
   880  00106C  A1EC               	btfss	___lmul@multiplier& (0+255),0,b
   881  00106E  D010               	goto	l1442
   882                           
   883                           ; BSR set to: 0
   884  001070  0100               	movlb	0	; () banked
   885  001072  51F0               	movf	___lmul@multiplicand& (0+255),w,b
   886  001074  0100               	movlb	0	; () banked
   887  001076  27F4               	addwf	___lmul@product& (0+255),f,b
   888  001078  0100               	movlb	0	; () banked
   889  00107A  51F1               	movf	(___lmul@multiplicand+1)& (0+255),w,b
   890  00107C  0100               	movlb	0	; () banked
   891  00107E  23F5               	addwfc	(___lmul@product+1)& (0+255),f,b
   892  001080  0100               	movlb	0	; () banked
   893  001082  51F2               	movf	(___lmul@multiplicand+2)& (0+255),w,b
   894  001084  0100               	movlb	0	; () banked
   895  001086  23F6               	addwfc	(___lmul@product+2)& (0+255),f,b
   896  001088  0100               	movlb	0	; () banked
   897  00108A  51F3               	movf	(___lmul@multiplicand+3)& (0+255),w,b
   898  00108C  0100               	movlb	0	; () banked
   899  00108E  23F7               	addwfc	(___lmul@product+3)& (0+255),f,b
   900  001090                     l1442:
   901                           
   902                           ; BSR set to: 0
   903  001090  0100               	movlb	0	; () banked
   904  001092  90D8               	bcf	status,0,c
   905  001094  37F0               	rlcf	___lmul@multiplicand& (0+255),f,b
   906  001096  37F1               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
   907  001098  37F2               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
   908  00109A  37F3               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
   909                           
   910                           ; BSR set to: 0
   911  00109C  0100               	movlb	0	; () banked
   912  00109E  90D8               	bcf	status,0,c
   913  0010A0  33EF               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
   914  0010A2  33EE               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
   915  0010A4  33ED               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
   916  0010A6  33EC               	rrcf	___lmul@multiplier& (0+255),f,b
   917  0010A8  0100               	movlb	0	; () banked
   918  0010AA  51EC               	movf	___lmul@multiplier& (0+255),w,b
   919  0010AC  0100               	movlb	0	; () banked
   920  0010AE  11ED               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
   921  0010B0  0100               	movlb	0	; () banked
   922  0010B2  11EE               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
   923  0010B4  0100               	movlb	0	; () banked
   924  0010B6  11EF               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
   925  0010B8  A4D8               	btfss	status,2,c
   926  0010BA  D7D7               	goto	l1438
   927                           
   928                           ; BSR set to: 0
   929  0010BC  C0F4  F0EC         	movff	___lmul@product,?___lmul
   930  0010C0  C0F5  F0ED         	movff	___lmul@product+1,?___lmul+1
   931  0010C4  C0F6  F0EE         	movff	___lmul@product+2,?___lmul+2
   932  0010C8  C0F7  F0EF         	movff	___lmul@product+3,?___lmul+3
   933                           
   934                           ; BSR set to: 0
   935  0010CC  0012               	return		;funcret
   936  0010CE                     __end_of___lmul:
   937                           	opt stack 0
   938                           tblptru	equ	0xFF8
   939                           tblptrh	equ	0xFF7
   940                           tblptrl	equ	0xFF6
   941                           tablat	equ	0xFF5
   942                           indf0	equ	0xFEF
   943                           postinc0	equ	0xFEE
   944                           fsr0h	equ	0xFEA
   945                           fsr0l	equ	0xFE9
   946                           wreg	equ	0xFE8
   947                           status	equ	0xFD8
   948                           
   949 ;; *************** function _isValid *****************
   950 ;; Defined at:
   951 ;;		line 70 in file "bufferhandler.c"
   952 ;; Parameters:    Size  Location     Type
   953 ;;		None
   954 ;; Auto vars:     Size  Location     Type
   955 ;;		None
   956 ;; Return value:  Size  Location     Type
   957 ;;                  1    wreg      unsigned char 
   958 ;; Registers used:
   959 ;;		wreg, status,2, status,0
   960 ;; Tracked objects:
   961 ;;		On entry : 0/0
   962 ;;		On exit  : 0/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   969 ;;Total ram usage:        0 bytes
   970 ;; Hardware stack levels used:    1
   971 ;; Hardware stack levels required when called:    3
   972 ;; This function calls:
   973 ;;		Nothing
   974 ;; This function is called by:
   975 ;;		_main
   976 ;; This function uses a non-reentrant model
   977 ;;
   978                           
   979                           	psect	text6
   980  00128C                     __ptext6:
   981                           	opt stack 0
   982  00128C                     _isValid:
   983                           	opt stack 27
   984                           
   985                           ;bufferhandler.c: 71: if(tmpString[0] == 0x54 &&
   986                           ;bufferhandler.c: 72: tmpString[1] == 0x59 &&
   987                           ;bufferhandler.c: 73: tmpString[2] == 0x52 &&
   988                           ;bufferhandler.c: 74: tmpString[3] == 0x49 &&
   989                           ;bufferhandler.c: 75: tmpString[4] == 0x5F){
   990                           
   991                           ; BSR set to: 0
   992                           ;incstack = 0
   993  00128C  0E54               	movlw	84
   994  00128E  0100               	movlb	0	; () banked
   995  001290  19A6               	xorwf	_tmpString& (0+255),w,b
   996  001292  A4D8               	btfss	status,2,c
   997  001294  D016               	goto	l1520
   998                           
   999                           ; BSR set to: 0
  1000  001296  0E59               	movlw	89
  1001  001298  0100               	movlb	0	; () banked
  1002  00129A  19A7               	xorwf	(_tmpString+1)& (0+255),w,b
  1003  00129C  A4D8               	btfss	status,2,c
  1004  00129E  D011               	goto	l1520
  1005                           
  1006                           ; BSR set to: 0
  1007  0012A0  0E52               	movlw	82
  1008  0012A2  0100               	movlb	0	; () banked
  1009  0012A4  19A8               	xorwf	(_tmpString+2)& (0+255),w,b
  1010  0012A6  A4D8               	btfss	status,2,c
  1011  0012A8  D00C               	goto	l1520
  1012                           
  1013                           ; BSR set to: 0
  1014  0012AA  0E49               	movlw	73
  1015  0012AC  0100               	movlb	0	; () banked
  1016  0012AE  19A9               	xorwf	(_tmpString+3)& (0+255),w,b
  1017  0012B0  A4D8               	btfss	status,2,c
  1018  0012B2  D007               	goto	l1520
  1019                           
  1020                           ; BSR set to: 0
  1021  0012B4  0E5F               	movlw	95
  1022  0012B6  0100               	movlb	0	; () banked
  1023  0012B8  19AA               	xorwf	(_tmpString+4)& (0+255),w,b
  1024  0012BA  A4D8               	btfss	status,2,c
  1025  0012BC  D002               	goto	l1520
  1026                           
  1027                           ; BSR set to: 0
  1028                           ;bufferhandler.c: 76: return 1;
  1029  0012BE  0E01               	movlw	1
  1030                           
  1031                           ; BSR set to: 0
  1032  0012C0  0012               	return	
  1033  0012C2                     l1520:
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;bufferhandler.c: 77: }
  1037                           ;bufferhandler.c: 78: return 0;
  1038  0012C2  0E00               	movlw	0
  1039  0012C4  0012               	return	
  1040  0012C6                     __end_of_isValid:
  1041                           	opt stack 0
  1042                           tblptru	equ	0xFF8
  1043                           tblptrh	equ	0xFF7
  1044                           tblptrl	equ	0xFF6
  1045                           tablat	equ	0xFF5
  1046                           indf0	equ	0xFEF
  1047                           postinc0	equ	0xFEE
  1048                           fsr0h	equ	0xFEA
  1049                           fsr0l	equ	0xFE9
  1050                           wreg	equ	0xFE8
  1051                           status	equ	0xFD8
  1052                           
  1053 ;; *************** function _isItLongEnough *****************
  1054 ;; Defined at:
  1055 ;;		line 33 in file "bufferhandler.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;		None
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;		None
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      unsigned char 
  1062 ;; Registers used:
  1063 ;;		wreg, status,2, status,0
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1073 ;;Total ram usage:        0 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; Hardware stack levels required when called:    3
  1076 ;; This function calls:
  1077 ;;		Nothing
  1078 ;; This function is called by:
  1079 ;;		_main
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           	psect	text7
  1084  001390                     __ptext7:
  1085                           	opt stack 0
  1086  001390                     _isItLongEnough:
  1087                           	opt stack 27
  1088                           
  1089                           ;bufferhandler.c: 35: if(index == 64){
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;incstack = 0
  1093  001390  0E40               	movlw	64
  1094  001392  183C               	xorwf	_index,w,c
  1095  001394  103D               	iorwf	_index+1,w,c
  1096  001396  A4D8               	btfss	status,2,c
  1097  001398  D002               	goto	l1502
  1098                           
  1099                           ;bufferhandler.c: 36: return 1;
  1100  00139A  0E01               	movlw	1
  1101                           
  1102                           ;bufferhandler.c: 37: }else{
  1103  00139C  0012               	return	
  1104  00139E                     l1502:
  1105                           
  1106                           ;bufferhandler.c: 38: return 0;
  1107  00139E  0E00               	movlw	0
  1108  0013A0  0012               	return	
  1109  0013A2                     __end_of_isItLongEnough:
  1110                           	opt stack 0
  1111                           tblptru	equ	0xFF8
  1112                           tblptrh	equ	0xFF7
  1113                           tblptrl	equ	0xFF6
  1114                           tablat	equ	0xFF5
  1115                           indf0	equ	0xFEF
  1116                           postinc0	equ	0xFEE
  1117                           fsr0h	equ	0xFEA
  1118                           fsr0l	equ	0xFE9
  1119                           wreg	equ	0xFE8
  1120                           status	equ	0xFD8
  1121                           
  1122 ;; *************** function _copyTmpBuffer *****************
  1123 ;; Defined at:
  1124 ;;		line 50 in file "bufferhandler.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;		None
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;  i               2   34[COMRAM] int 
  1129 ;; Return value:  Size  Location     Type
  1130 ;;                  1    wreg      void 
  1131 ;; Registers used:
  1132 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1133 ;; Tracked objects:
  1134 ;;		On entry : 0/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1139 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1140 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1141 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1142 ;;Total ram usage:        3 bytes
  1143 ;; Hardware stack levels used:    1
  1144 ;; Hardware stack levels required when called:    3
  1145 ;; This function calls:
  1146 ;;		Nothing
  1147 ;; This function is called by:
  1148 ;;		_main
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152                           	psect	text8
  1153  00124C                     __ptext8:
  1154                           	opt stack 0
  1155  00124C                     _copyTmpBuffer:
  1156                           	opt stack 27
  1157                           
  1158                           ;bufferhandler.c: 51: for(int i = 0; i<index; i++){
  1159                           
  1160                           ;incstack = 0
  1161  00124C  0E00               	movlw	0
  1162  00124E  6E24               	movwf	copyTmpBuffer@i+1,c
  1163  001250  0E00               	movlw	0
  1164  001252  6E23               	movwf	copyTmpBuffer@i,c
  1165  001254  D010               	goto	l1530
  1166  001256                     l1526:
  1167                           
  1168                           ;bufferhandler.c: 52: allDataString[i] = tmpString[i];
  1169  001256  0EA6               	movlw	low _tmpString
  1170  001258  2423               	addwf	copyTmpBuffer@i,w,c
  1171  00125A  6ED9               	movwf	fsr2l,c
  1172  00125C  0E00               	movlw	high _tmpString
  1173  00125E  2024               	addwfc	copyTmpBuffer@i+1,w,c
  1174  001260  6EDA               	movwf	fsr2h,c
  1175  001262  0E60               	movlw	low _allDataString
  1176  001264  2423               	addwf	copyTmpBuffer@i,w,c
  1177  001266  6EE1               	movwf	fsr1l,c
  1178  001268  0E00               	movlw	high _allDataString
  1179  00126A  2024               	addwfc	copyTmpBuffer@i+1,w,c
  1180  00126C  6EE2               	movwf	fsr1h,c
  1181  00126E  CFDF FFE7          	movff	indf2,indf1
  1182  001272  4A23               	infsnz	copyTmpBuffer@i,f,c
  1183  001274  2A24               	incf	copyTmpBuffer@i+1,f,c
  1184  001276                     l1530:
  1185  001276  503C               	movf	_index,w,c
  1186  001278  5C23               	subwf	copyTmpBuffer@i,w,c
  1187  00127A  5024               	movf	copyTmpBuffer@i+1,w,c
  1188  00127C  0A80               	xorlw	128
  1189  00127E  6E22               	movwf	??_copyTmpBuffer& (0+255),c
  1190  001280  503D               	movf	_index+1,w,c
  1191  001282  0A80               	xorlw	128
  1192  001284  5822               	subwfb	??_copyTmpBuffer& (0+255),w,c
  1193  001286  B0D8               	btfsc	status,0,c
  1194  001288  0012               	return	
  1195  00128A  D7E5               	goto	l1526
  1196  00128C                     __end_of_copyTmpBuffer:
  1197                           	opt stack 0
  1198                           tblptru	equ	0xFF8
  1199                           tblptrh	equ	0xFF7
  1200                           tblptrl	equ	0xFF6
  1201                           tablat	equ	0xFF5
  1202                           indf0	equ	0xFEF
  1203                           postinc0	equ	0xFEE
  1204                           fsr0h	equ	0xFEA
  1205                           fsr0l	equ	0xFE9
  1206                           wreg	equ	0xFE8
  1207                           indf1	equ	0xFE7
  1208                           fsr1h	equ	0xFE2
  1209                           fsr1l	equ	0xFE1
  1210                           indf2	equ	0xFDF
  1211                           fsr2h	equ	0xFDA
  1212                           fsr2l	equ	0xFD9
  1213                           status	equ	0xFD8
  1214                           
  1215 ;; *************** function _clearBuffer *****************
  1216 ;; Defined at:
  1217 ;;		line 42 in file "bufferhandler.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;		None
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;  i               2    4[BANK0 ] int 
  1222 ;; Return value:  Size  Location     Type
  1223 ;;                  1    wreg      void 
  1224 ;; Registers used:
  1225 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1226 ;; Tracked objects:
  1227 ;;		On entry : 0/0
  1228 ;;		On exit  : 0/0
  1229 ;;		Unchanged: 0/0
  1230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1232 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1234 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1235 ;;Total ram usage:        2 bytes
  1236 ;; Hardware stack levels used:    1
  1237 ;; Hardware stack levels required when called:    4
  1238 ;; This function calls:
  1239 ;;		_strlen
  1240 ;; This function is called by:
  1241 ;;		_main
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           	psect	text9
  1246  0011FA                     __ptext9:
  1247                           	opt stack 0
  1248  0011FA                     _clearBuffer:
  1249                           	opt stack 26
  1250                           
  1251                           ;bufferhandler.c: 43: for(int i = 0; i<strlen(tmpString); i++){
  1252                           
  1253                           ;incstack = 0
  1254  0011FA  0E00               	movlw	0
  1255  0011FC  0100               	movlb	0	; () banked
  1256  0011FE  6FF1               	movwf	(clearBuffer@i+1)& (0+255),b
  1257  001200  0E00               	movlw	0
  1258  001202  6FF0               	movwf	clearBuffer@i& (0+255),b
  1259  001204  D00D               	goto	l1490
  1260  001206                     l1486:
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;bufferhandler.c: 44: tmpString[i] = "";
  1264  001206  0EA6               	movlw	low _tmpString
  1265  001208  0100               	movlb	0	; () banked
  1266  00120A  25F0               	addwf	clearBuffer@i& (0+255),w,b
  1267  00120C  6ED9               	movwf	fsr2l,c
  1268  00120E  0E00               	movlw	high _tmpString
  1269  001210  0100               	movlb	0	; () banked
  1270  001212  21F1               	addwfc	(clearBuffer@i+1)& (0+255),w,b
  1271  001214  6EDA               	movwf	fsr2h,c
  1272  001216  0E05               	movlw	low (STR_1+4)
  1273  001218  6EDF               	movwf	indf2,c
  1274                           
  1275                           ; BSR set to: 0
  1276  00121A  0100               	movlb	0	; () banked
  1277  00121C  4BF0               	infsnz	clearBuffer@i& (0+255),f,b
  1278  00121E  2BF1               	incf	(clearBuffer@i+1)& (0+255),f,b
  1279  001220                     l1490:
  1280                           
  1281                           ; BSR set to: 0
  1282  001220  0EA6               	movlw	low _tmpString
  1283  001222  6E22               	movwf	strlen@s,c
  1284  001224  0E00               	movlw	high _tmpString
  1285  001226  6E23               	movwf	strlen@s+1,c
  1286  001228  ECA0  F008         	call	_strlen	;wreg free
  1287  00122C  5022               	movf	?_strlen,w,c
  1288  00122E  0100               	movlb	0	; () banked
  1289  001230  5DF0               	subwf	clearBuffer@i& (0+255),w,b
  1290  001232  5023               	movf	?_strlen+1,w,c
  1291  001234  0100               	movlb	0	; () banked
  1292  001236  59F1               	subwfb	(clearBuffer@i+1)& (0+255),w,b
  1293  001238  A0D8               	btfss	status,0,c
  1294  00123A  D7E5               	goto	l1486
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;bufferhandler.c: 45: }
  1298                           ;bufferhandler.c: 46: tmpString[0] = '\0';
  1299                           
  1300                           ; BSR set to: 0
  1301  00123C  0E00               	movlw	0
  1302  00123E  0100               	movlb	0	; () banked
  1303  001240  6FA6               	movwf	_tmpString& (0+255),b
  1304                           
  1305                           ;bufferhandler.c: 47: index = 0;
  1306  001242  0E00               	movlw	0
  1307  001244  6E3D               	movwf	_index+1,c
  1308  001246  0E00               	movlw	0
  1309  001248  6E3C               	movwf	_index,c
  1310                           
  1311                           ; BSR set to: 0
  1312  00124A  0012               	return		;funcret
  1313  00124C                     __end_of_clearBuffer:
  1314                           	opt stack 0
  1315                           tblptru	equ	0xFF8
  1316                           tblptrh	equ	0xFF7
  1317                           tblptrl	equ	0xFF6
  1318                           tablat	equ	0xFF5
  1319                           indf0	equ	0xFEF
  1320                           postinc0	equ	0xFEE
  1321                           fsr0h	equ	0xFEA
  1322                           fsr0l	equ	0xFE9
  1323                           wreg	equ	0xFE8
  1324                           indf1	equ	0xFE7
  1325                           fsr1h	equ	0xFE2
  1326                           fsr1l	equ	0xFE1
  1327                           indf2	equ	0xFDF
  1328                           fsr2h	equ	0xFDA
  1329                           fsr2l	equ	0xFD9
  1330                           status	equ	0xFD8
  1331                           
  1332 ;; *************** function _strlen *****************
  1333 ;; Defined at:
  1334 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  1335 ;; Parameters:    Size  Location     Type
  1336 ;;  s               2   33[COMRAM] PTR const unsigned char 
  1337 ;;		 -> allDataString(70), tmpString(70), STR_2(4), STR_1(5), 
  1338 ;; Auto vars:     Size  Location     Type
  1339 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
  1340 ;;		 -> allDataString(70), tmpString(70), STR_2(4), STR_1(5), 
  1341 ;; Return value:  Size  Location     Type
  1342 ;;                  2   33[COMRAM] unsigned int 
  1343 ;; Registers used:
  1344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  1345 ;; Tracked objects:
  1346 ;;		On entry : 0/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1350 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1351 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1352 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1353 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1354 ;;Total ram usage:        6 bytes
  1355 ;; Hardware stack levels used:    1
  1356 ;; Hardware stack levels required when called:    3
  1357 ;; This function calls:
  1358 ;;		Nothing
  1359 ;; This function is called by:
  1360 ;;		_writeString
  1361 ;;		_clearBuffer
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365                           	psect	text10
  1366  001140                     __ptext10:
  1367                           	opt stack 0
  1368  001140                     _strlen:
  1369                           	opt stack 26
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;incstack = 0
  1373  001140  C022  F0EE         	movff	strlen@s,strlen@cp
  1374  001144  C023  F0EF         	movff	strlen@s+1,strlen@cp+1
  1375  001148  D003               	goto	l1430
  1376  00114A                     l1428:
  1377  00114A  0100               	movlb	0	; () banked
  1378  00114C  4BEE               	infsnz	strlen@cp& (0+255),f,b
  1379  00114E  2BEF               	incf	(strlen@cp+1)& (0+255),f,b
  1380  001150                     l1430:
  1381  001150  C0EE  FFF6         	movff	strlen@cp,tblptrl
  1382  001154  C0EF  FFF7         	movff	strlen@cp+1,tblptrh
  1383  001158  0E00               	movlw	low (__smallconst shr (0+16))
  1384  00115A  6EF8               	movwf	tblptru,c
  1385  00115C  0E0E               	movlw	(high __ramtop+-1)
  1386  00115E  64F7               	cpfsgt	tblptrh,c
  1387  001160  D003               	bra	u787
  1388  001162  0008               	tblrd		*
  1389  001164  50F5               	movf	tablat,w,c
  1390  001166  D005               	bra	u780
  1391  001168                     u787:
  1392  001168  CFF6 FFE9          	movff	tblptrl,fsr0l
  1393  00116C  CFF7 FFEA          	movff	tblptrh,fsr0h
  1394  001170  50EF               	movf	indf0,w,c
  1395  001172                     u780:
  1396  001172  0900               	iorlw	0
  1397  001174  A4D8               	btfss	status,2,c
  1398  001176  D7E9               	goto	l1428
  1399  001178  C022  F0EC         	movff	strlen@s,??_strlen
  1400  00117C  C023  F0ED         	movff	strlen@s+1,??_strlen+1
  1401  001180  0100               	movlb	0	; () banked
  1402  001182  1FEC               	comf	??_strlen& (0+255),f,b
  1403  001184  1FED               	comf	(??_strlen+1)& (0+255),f,b
  1404  001186  4BEC               	infsnz	??_strlen& (0+255),f,b
  1405  001188  2BED               	incf	(??_strlen+1)& (0+255),f,b
  1406  00118A  0100               	movlb	0	; () banked
  1407  00118C  51EE               	movf	strlen@cp& (0+255),w,b
  1408  00118E  0100               	movlb	0	; () banked
  1409  001190  25EC               	addwf	??_strlen& (0+255),w,b
  1410  001192  6E22               	movwf	?_strlen,c
  1411  001194  0100               	movlb	0	; () banked
  1412  001196  51EF               	movf	(strlen@cp+1)& (0+255),w,b
  1413  001198  0100               	movlb	0	; () banked
  1414  00119A  21ED               	addwfc	(??_strlen+1)& (0+255),w,b
  1415  00119C  6E23               	movwf	?_strlen+1,c
  1416  00119E  0012               	return	
  1417  0011A0                     __end_of_strlen:
  1418                           	opt stack 0
  1419                           tblptru	equ	0xFF8
  1420                           tblptrh	equ	0xFF7
  1421                           tblptrl	equ	0xFF6
  1422                           tablat	equ	0xFF5
  1423                           indf0	equ	0xFEF
  1424                           postinc0	equ	0xFEE
  1425                           fsr0h	equ	0xFEA
  1426                           fsr0l	equ	0xFE9
  1427                           wreg	equ	0xFE8
  1428                           indf1	equ	0xFE7
  1429                           fsr1h	equ	0xFE2
  1430                           fsr1l	equ	0xFE1
  1431                           indf2	equ	0xFDF
  1432                           fsr2h	equ	0xFDA
  1433                           fsr2l	equ	0xFD9
  1434                           status	equ	0xFD8
  1435                           
  1436 ;; *************** function _UART_Init *****************
  1437 ;; Defined at:
  1438 ;;		line 31 in file "uart.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;  baudrate        4    0[BANK0 ] const long 
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;		None
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      unsigned char 
  1445 ;; Registers used:
  1446 ;;		wreg, status,2
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1452 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1455 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1456 ;;Total ram usage:        4 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; Hardware stack levels required when called:    3
  1459 ;; This function calls:
  1460 ;;		Nothing
  1461 ;; This function is called by:
  1462 ;;		_main
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           	psect	text11
  1467  0012C6                     __ptext11:
  1468                           	opt stack 0
  1469  0012C6                     _UART_Init:
  1470                           	opt stack 27
  1471                           
  1472                           ;uart.c: 35: TXSTA1 = 0x24;
  1473                           
  1474                           ; BSR set to: 0
  1475                           ;incstack = 0
  1476  0012C6  0E24               	movlw	36
  1477  0012C8  6EAD               	movwf	4013,c	;volatile
  1478                           
  1479                           ;uart.c: 36: RCSTA1 = 0x90;
  1480  0012CA  0E90               	movlw	144
  1481  0012CC  6EAC               	movwf	4012,c	;volatile
  1482                           
  1483                           ;uart.c: 37: RC1IE = 1;
  1484  0012CE  8A9D               	bsf	3997,5,c	;volatile
  1485                           
  1486                           ;uart.c: 38: BAUDCON1bits.BRG16 = 0;
  1487  0012D0  967E               	bcf	3966,3,c	;volatile
  1488                           
  1489                           ;uart.c: 39: SPBRG1 = 155;
  1490  0012D2  0E9B               	movlw	155
  1491  0012D4  6EB0               	movwf	4016,c	;volatile
  1492                           
  1493                           ;uart.c: 40: SPBRGH1 = 155;
  1494  0012D6  0E9B               	movlw	155
  1495  0012D8  6E7F               	movwf	3967,c	;volatile
  1496                           
  1497                           ;uart.c: 41: TRISC7 = 1;
  1498  0012DA  8E94               	bsf	3988,7,c	;volatile
  1499                           
  1500                           ;uart.c: 42: TRISC6 = 0;
  1501  0012DC  9C94               	bcf	3988,6,c	;volatile
  1502                           
  1503                           ;uart.c: 46: RCSTA2 = 0b10010000;
  1504  0012DE  0E90               	movlw	144
  1505  0012E0  6E9C               	movwf	3996,c	;volatile
  1506                           
  1507                           ;uart.c: 47: TXSTA2 = 0b00100100;
  1508  0012E2  0E24               	movlw	36
  1509  0012E4  6EA8               	movwf	4008,c	;volatile
  1510                           
  1511                           ;uart.c: 48: RC2IE = 1;
  1512  0012E6  8AA3               	bsf	4003,5,c	;volatile
  1513                           
  1514                           ;uart.c: 49: BAUDCON2bits.BRG16 = 0;
  1515  0012E8  967C               	bcf	3964,3,c	;volatile
  1516                           
  1517                           ;uart.c: 50: SPBRG2 = 25;
  1518  0012EA  0E19               	movlw	25
  1519  0012EC  6EAB               	movwf	4011,c	;volatile
  1520                           
  1521                           ;uart.c: 51: SPBRGH2 = 25;
  1522  0012EE  0E19               	movlw	25
  1523  0012F0  6E7D               	movwf	3965,c	;volatile
  1524                           
  1525                           ;uart.c: 52: TRISB4 = 1;
  1526  0012F2  8893               	bsf	3987,4,c	;volatile
  1527                           
  1528                           ;uart.c: 53: TRISB5 = 0;
  1529  0012F4  9A93               	bcf	3987,5,c	;volatile
  1530  0012F6  0012               	return	
  1531  0012F8                     __end_of_UART_Init:
  1532                           	opt stack 0
  1533                           tblptru	equ	0xFF8
  1534                           tblptrh	equ	0xFF7
  1535                           tblptrl	equ	0xFF6
  1536                           tablat	equ	0xFF5
  1537                           indf0	equ	0xFEF
  1538                           postinc0	equ	0xFEE
  1539                           fsr0h	equ	0xFEA
  1540                           fsr0l	equ	0xFE9
  1541                           wreg	equ	0xFE8
  1542                           indf1	equ	0xFE7
  1543                           fsr1h	equ	0xFE2
  1544                           fsr1l	equ	0xFE1
  1545                           indf2	equ	0xFDF
  1546                           fsr2h	equ	0xFDA
  1547                           fsr2l	equ	0xFD9
  1548                           status	equ	0xFD8
  1549                           
  1550 ;; *************** function _InitApp *****************
  1551 ;; Defined at:
  1552 ;;		line 29 in file "user.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;		None
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;		None
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  1    wreg      void 
  1559 ;; Registers used:
  1560 ;;		wreg, status,2
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1570 ;;Total ram usage:        0 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    3
  1573 ;; This function calls:
  1574 ;;		Nothing
  1575 ;; This function is called by:
  1576 ;;		_main
  1577 ;; This function uses a non-reentrant model
  1578 ;;
  1579                           
  1580                           	psect	text12
  1581  00133E                     __ptext12:
  1582                           	opt stack 0
  1583  00133E                     _InitApp:
  1584                           	opt stack 27
  1585                           
  1586                           ;user.c: 33: PPSCON = 0b00000000;
  1587                           
  1588                           ;incstack = 0
  1589  00133E  0E00               	movlw	0
  1590  001340  010E               	movlb	14	; () banked
  1591  001342  6FBF               	movwf	191,b	;volatile
  1592                           
  1593                           ;user.c: 34: RPOR8 = 0b00000110;
  1594  001344  0E06               	movlw	6
  1595  001346  010E               	movlb	14	; () banked
  1596  001348  6FC8               	movwf	200,b	;volatile
  1597                           
  1598                           ;user.c: 35: RPINR16 = 0b00000111;
  1599  00134A  0E07               	movlw	7
  1600  00134C  010E               	movlb	14	; () banked
  1601  00134E  6FF7               	movwf	247,b	;volatile
  1602                           
  1603                           ;user.c: 36: PPSCON = 0b00000001;
  1604  001350  0E01               	movlw	1
  1605  001352  010E               	movlb	14	; () banked
  1606  001354  6FBF               	movwf	191,b	;volatile
  1607                           
  1608                           ;user.c: 39: INTCON = 0xC0;
  1609  001356  0EC0               	movlw	192
  1610  001358  6EF2               	movwf	intcon,c	;volatile
  1611                           
  1612                           ; BSR set to: 14
  1613  00135A  0012               	return		;funcret
  1614  00135C                     __end_of_InitApp:
  1615                           	opt stack 0
  1616                           tblptru	equ	0xFF8
  1617                           tblptrh	equ	0xFF7
  1618                           tblptrl	equ	0xFF6
  1619                           tablat	equ	0xFF5
  1620                           intcon	equ	0xFF2
  1621                           indf0	equ	0xFEF
  1622                           postinc0	equ	0xFEE
  1623                           fsr0h	equ	0xFEA
  1624                           fsr0l	equ	0xFE9
  1625                           wreg	equ	0xFE8
  1626                           indf1	equ	0xFE7
  1627                           fsr1h	equ	0xFE2
  1628                           fsr1l	equ	0xFE1
  1629                           indf2	equ	0xFDF
  1630                           fsr2h	equ	0xFDA
  1631                           fsr2l	equ	0xFD9
  1632                           status	equ	0xFD8
  1633                           
  1634 ;; *************** function _ConfigureOscillator *****************
  1635 ;; Defined at:
  1636 ;;		line 24 in file "system.c"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;		None
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;		None
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  1    wreg      void 
  1643 ;; Registers used:
  1644 ;;		wreg, status,2
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1654 ;;Total ram usage:        0 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:    3
  1657 ;; This function calls:
  1658 ;;		Nothing
  1659 ;; This function is called by:
  1660 ;;		_main
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           	psect	text13
  1665  0013A2                     __ptext13:
  1666                           	opt stack 0
  1667  0013A2                     _ConfigureOscillator:
  1668                           	opt stack 27
  1669                           
  1670                           ;system.c: 26: OSCCONbits.IRCF = 0b110;
  1671                           
  1672                           ; BSR set to: 14
  1673                           ;incstack = 0
  1674  0013A2  50D3               	movf	4051,w,c	;volatile
  1675  0013A4  0B8F               	andlw	-113
  1676  0013A6  0960               	iorlw	96
  1677  0013A8  6ED3               	movwf	4051,c	;volatile
  1678                           
  1679                           ;system.c: 27: OSCTUNEbits.PLLEN = 0b1;
  1680  0013AA  8C9B               	bsf	3995,6,c	;volatile
  1681  0013AC  0012               	return		;funcret
  1682  0013AE                     __end_of_ConfigureOscillator:
  1683                           	opt stack 0
  1684                           tblptru	equ	0xFF8
  1685                           tblptrh	equ	0xFF7
  1686                           tblptrl	equ	0xFF6
  1687                           tablat	equ	0xFF5
  1688                           intcon	equ	0xFF2
  1689                           indf0	equ	0xFEF
  1690                           postinc0	equ	0xFEE
  1691                           fsr0h	equ	0xFEA
  1692                           fsr0l	equ	0xFE9
  1693                           wreg	equ	0xFE8
  1694                           indf1	equ	0xFE7
  1695                           fsr1h	equ	0xFE2
  1696                           fsr1l	equ	0xFE1
  1697                           indf2	equ	0xFDF
  1698                           fsr2h	equ	0xFDA
  1699                           fsr2l	equ	0xFD9
  1700                           status	equ	0xFD8
  1701                           
  1702 ;; *************** function _low_isr *****************
  1703 ;; Defined at:
  1704 ;;		line 66 in file "interrupts.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;		None
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;		None
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  1    wreg      void 
  1711 ;; Registers used:
  1712 ;;		None
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1720 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1721 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1722 ;;Total ram usage:       17 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    2
  1725 ;; This function calls:
  1726 ;;		Nothing
  1727 ;; This function is called by:
  1728 ;;		Interrupt level 1
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           	psect	intcodelo
  1733  000018                     __pintcodelo:
  1734                           	opt stack 0
  1735  000018                     _low_isr:
  1736                           	opt stack 25
  1737                           
  1738                           ;incstack = 0
  1739  000018  803E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1740  00001A  CFD8 F011          	movff	status,??_low_isr
  1741  00001E  CFE8 F012          	movff	wreg,??_low_isr+1
  1742  000022  CFE0 F013          	movff	bsr,??_low_isr+2
  1743  000026  CFFA F014          	movff	pclath,??_low_isr+3
  1744  00002A  CFFB F015          	movff	pclatu,??_low_isr+4
  1745  00002E  CFE9 F016          	movff	fsr0l,??_low_isr+5
  1746  000032  CFEA F017          	movff	fsr0h,??_low_isr+6
  1747  000036  CFE1 F018          	movff	fsr1l,??_low_isr+7
  1748  00003A  CFE2 F019          	movff	fsr1h,??_low_isr+8
  1749  00003E  CFD9 F01A          	movff	fsr2l,??_low_isr+9
  1750  000042  CFDA F01B          	movff	fsr2h,??_low_isr+10
  1751  000046  CFF3 F01C          	movff	prodl,??_low_isr+11
  1752  00004A  CFF4 F01D          	movff	prodh,??_low_isr+12
  1753  00004E  CFF6 F01E          	movff	tblptrl,??_low_isr+13
  1754  000052  CFF7 F01F          	movff	tblptrh,??_low_isr+14
  1755  000056  CFF8 F020          	movff	tblptru,??_low_isr+15
  1756  00005A  CFF5 F021          	movff	tablat,??_low_isr+16
  1757  00005E  C021  FFF5         	movff	??_low_isr+16,tablat
  1758  000062  C020  FFF8         	movff	??_low_isr+15,tblptru
  1759  000066  C01F  FFF7         	movff	??_low_isr+14,tblptrh
  1760  00006A  C01E  FFF6         	movff	??_low_isr+13,tblptrl
  1761  00006E  C01D  FFF4         	movff	??_low_isr+12,prodh
  1762  000072  C01C  FFF3         	movff	??_low_isr+11,prodl
  1763  000076  C01B  FFDA         	movff	??_low_isr+10,fsr2h
  1764  00007A  C01A  FFD9         	movff	??_low_isr+9,fsr2l
  1765  00007E  C019  FFE2         	movff	??_low_isr+8,fsr1h
  1766  000082  C018  FFE1         	movff	??_low_isr+7,fsr1l
  1767  000086  C017  FFEA         	movff	??_low_isr+6,fsr0h
  1768  00008A  C016  FFE9         	movff	??_low_isr+5,fsr0l
  1769  00008E  C015  FFFB         	movff	??_low_isr+4,pclatu
  1770  000092  C014  FFFA         	movff	??_low_isr+3,pclath
  1771  000096  C013  FFE0         	movff	??_low_isr+2,bsr
  1772  00009A  C012  FFE8         	movff	??_low_isr+1,wreg
  1773  00009E  C011  FFD8         	movff	??_low_isr,status
  1774  0000A2  903E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1775  0000A4  0010               	retfie	
  1776  0000A6                     __end_of_low_isr:
  1777                           	opt stack 0
  1778                           pclatu	equ	0xFFB
  1779                           pclath	equ	0xFFA
  1780                           tblptru	equ	0xFF8
  1781                           tblptrh	equ	0xFF7
  1782                           tblptrl	equ	0xFF6
  1783                           tablat	equ	0xFF5
  1784                           prodh	equ	0xFF4
  1785                           prodl	equ	0xFF3
  1786                           intcon	equ	0xFF2
  1787                           indf0	equ	0xFEF
  1788                           postinc0	equ	0xFEE
  1789                           fsr0h	equ	0xFEA
  1790                           fsr0l	equ	0xFE9
  1791                           wreg	equ	0xFE8
  1792                           indf1	equ	0xFE7
  1793                           fsr1h	equ	0xFE2
  1794                           fsr1l	equ	0xFE1
  1795                           bsr	equ	0xFE0
  1796                           indf2	equ	0xFDF
  1797                           fsr2h	equ	0xFDA
  1798                           fsr2l	equ	0xFD9
  1799                           status	equ	0xFD8
  1800                           
  1801 ;; *************** function _high_isr *****************
  1802 ;; Defined at:
  1803 ;;		line 30 in file "interrupts.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;		None
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;		None
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  1    wreg      void 
  1810 ;; Registers used:
  1811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1812 ;; Tracked objects:
  1813 ;;		On entry : 0/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1819 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1820 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1821 ;;Total ram usage:       15 bytes
  1822 ;; Hardware stack levels used:    1
  1823 ;; Hardware stack levels required when called:    1
  1824 ;; This function calls:
  1825 ;;		_appendChar
  1826 ;; This function is called by:
  1827 ;;		Interrupt level 2
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           	psect	intcode
  1832  000008                     __pintcode:
  1833                           	opt stack 0
  1834  000008                     _high_isr:
  1835                           	opt stack 25
  1836                           
  1837                           ;incstack = 0
  1838  000008  823E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1839  00000A  EFDF  F007         	goto	int_func
  1840                           pclatu	equ	0xFFB
  1841                           pclath	equ	0xFFA
  1842                           tblptru	equ	0xFF8
  1843                           tblptrh	equ	0xFF7
  1844                           tblptrl	equ	0xFF6
  1845                           tablat	equ	0xFF5
  1846                           prodh	equ	0xFF4
  1847                           prodl	equ	0xFF3
  1848                           intcon	equ	0xFF2
  1849                           indf0	equ	0xFEF
  1850                           postinc0	equ	0xFEE
  1851                           fsr0h	equ	0xFEA
  1852                           fsr0l	equ	0xFE9
  1853                           wreg	equ	0xFE8
  1854                           indf1	equ	0xFE7
  1855                           fsr1h	equ	0xFE2
  1856                           fsr1l	equ	0xFE1
  1857                           bsr	equ	0xFE0
  1858                           indf2	equ	0xFDF
  1859                           fsr2h	equ	0xFDA
  1860                           fsr2l	equ	0xFD9
  1861                           status	equ	0xFD8
  1862                           
  1863                           	psect	intcode_body
  1864  000FBE                     __pintcode_body:
  1865                           	opt stack 25
  1866  000FBE                     int_func:
  1867                           	opt stack 25
  1868  000FBE  CFFA F003          	movff	pclath,??_high_isr+1
  1869  000FC2  CFFB F004          	movff	pclatu,??_high_isr+2
  1870  000FC6  CFE9 F005          	movff	fsr0l,??_high_isr+3
  1871  000FCA  CFEA F006          	movff	fsr0h,??_high_isr+4
  1872  000FCE  CFE1 F007          	movff	fsr1l,??_high_isr+5
  1873  000FD2  CFE2 F008          	movff	fsr1h,??_high_isr+6
  1874  000FD6  CFD9 F009          	movff	fsr2l,??_high_isr+7
  1875  000FDA  CFDA F00A          	movff	fsr2h,??_high_isr+8
  1876  000FDE  CFF3 F00B          	movff	prodl,??_high_isr+9
  1877  000FE2  CFF4 F00C          	movff	prodh,??_high_isr+10
  1878  000FE6  CFF6 F00D          	movff	tblptrl,??_high_isr+11
  1879  000FEA  CFF7 F00E          	movff	tblptrh,??_high_isr+12
  1880  000FEE  CFF8 F00F          	movff	tblptru,??_high_isr+13
  1881  000FF2  CFF5 F010          	movff	tablat,??_high_isr+14
  1882                           
  1883                           ;interrupts.c: 45: if(RC1IF){
  1884  000FF6  AA9E               	btfss	3998,5,c	;volatile
  1885  000FF8  D00F               	goto	i2l1260
  1886                           
  1887                           ;interrupts.c: 46: LATAbits.LATA0 = !LATAbits.LATA0;
  1888  000FFA  B089               	btfsc	3977,0,c	;volatile
  1889  000FFC  D003               	goto	i2u51_40
  1890  000FFE  6A02               	clrf	??_high_isr& (0+255),c
  1891  001000  2A02               	incf	??_high_isr& (0+255),f,c
  1892  001002  D001               	goto	i2u52_48
  1893  001004                     i2u51_40:
  1894  001004  6A02               	clrf	??_high_isr& (0+255),c
  1895  001006                     i2u52_48:
  1896  001006  5089               	movf	3977,w,c	;volatile
  1897  001008  1802               	xorwf	??_high_isr,w,c
  1898  00100A  0BFE               	andlw	-2
  1899  00100C  1802               	xorwf	??_high_isr,w,c
  1900  00100E  6E89               	movwf	3977,c	;volatile
  1901                           
  1902                           ;interrupts.c: 47: appendChar(RCREG1);
  1903  001010  50AF               	movf	4015,w,c	;volatile
  1904  001012  ECBC  F009         	call	_appendChar
  1905                           
  1906                           ;interrupts.c: 49: RC1IF = 0;
  1907  001016  9A9E               	bcf	3998,5,c	;volatile
  1908  001018                     i2l1260:
  1909                           
  1910                           ;interrupts.c: 50: }
  1911                           ;interrupts.c: 52: if(RC2IF){
  1912  001018  BAA4               	btfsc	4004,5,c	;volatile
  1913                           
  1914                           ;interrupts.c: 57: RC2IF = 0;
  1915  00101A  9AA4               	bcf	4004,5,c	;volatile
  1916  00101C  C010  FFF5         	movff	??_high_isr+14,tablat
  1917  001020  C00F  FFF8         	movff	??_high_isr+13,tblptru
  1918  001024  C00E  FFF7         	movff	??_high_isr+12,tblptrh
  1919  001028  C00D  FFF6         	movff	??_high_isr+11,tblptrl
  1920  00102C  C00C  FFF4         	movff	??_high_isr+10,prodh
  1921  001030  C00B  FFF3         	movff	??_high_isr+9,prodl
  1922  001034  C00A  FFDA         	movff	??_high_isr+8,fsr2h
  1923  001038  C009  FFD9         	movff	??_high_isr+7,fsr2l
  1924  00103C  C008  FFE2         	movff	??_high_isr+6,fsr1h
  1925  001040  C007  FFE1         	movff	??_high_isr+5,fsr1l
  1926  001044  C006  FFEA         	movff	??_high_isr+4,fsr0h
  1927  001048  C005  FFE9         	movff	??_high_isr+3,fsr0l
  1928  00104C  C004  FFFB         	movff	??_high_isr+2,pclatu
  1929  001050  C003  FFFA         	movff	??_high_isr+1,pclath
  1930  001054  923E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1931  001056  0011               	retfie		f
  1932  001058                     __end_of_high_isr:
  1933                           	opt stack 0
  1934                           pclatu	equ	0xFFB
  1935                           pclath	equ	0xFFA
  1936                           tblptru	equ	0xFF8
  1937                           tblptrh	equ	0xFF7
  1938                           tblptrl	equ	0xFF6
  1939                           tablat	equ	0xFF5
  1940                           prodh	equ	0xFF4
  1941                           prodl	equ	0xFF3
  1942                           intcon	equ	0xFF2
  1943                           indf0	equ	0xFEF
  1944                           postinc0	equ	0xFEE
  1945                           fsr0h	equ	0xFEA
  1946                           fsr0l	equ	0xFE9
  1947                           wreg	equ	0xFE8
  1948                           indf1	equ	0xFE7
  1949                           fsr1h	equ	0xFE2
  1950                           fsr1l	equ	0xFE1
  1951                           bsr	equ	0xFE0
  1952                           indf2	equ	0xFDF
  1953                           fsr2h	equ	0xFDA
  1954                           fsr2l	equ	0xFD9
  1955                           status	equ	0xFD8
  1956                           
  1957 ;; *************** function _appendChar *****************
  1958 ;; Defined at:
  1959 ;;		line 27 in file "bufferhandler.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;  data            1    wreg     unsigned char 
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  data            1    0[COMRAM] unsigned char 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1974 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1976 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1977 ;;Total ram usage:        1 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; This function calls:
  1980 ;;		Nothing
  1981 ;; This function is called by:
  1982 ;;		_high_isr
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text16
  1987  001378                     __ptext16:
  1988                           	opt stack 0
  1989  001378                     _appendChar:
  1990                           	opt stack 25
  1991                           
  1992                           ;incstack = 0
  1993                           ;appendChar@data stored from wreg
  1994  001378  6E01               	movwf	appendChar@data,c
  1995                           
  1996                           ;bufferhandler.c: 28: tmpString[index] = data;
  1997  00137A  0EA6               	movlw	low _tmpString
  1998  00137C  243C               	addwf	_index,w,c
  1999  00137E  6ED9               	movwf	fsr2l,c
  2000  001380  0E00               	movlw	high _tmpString
  2001  001382  203D               	addwfc	_index+1,w,c
  2002  001384  6EDA               	movwf	fsr2h,c
  2003  001386  C001  FFDF         	movff	appendChar@data,indf2
  2004                           
  2005                           ;bufferhandler.c: 29: index++;
  2006  00138A  4A3C               	infsnz	_index,f,c
  2007  00138C  2A3D               	incf	_index+1,f,c
  2008  00138E  0012               	return		;funcret
  2009  001390                     __end_of_appendChar:
  2010                           	opt stack 0
  2011                           pclatu	equ	0xFFB
  2012                           pclath	equ	0xFFA
  2013                           tblptru	equ	0xFF8
  2014                           tblptrh	equ	0xFF7
  2015                           tblptrl	equ	0xFF6
  2016                           tablat	equ	0xFF5
  2017                           prodh	equ	0xFF4
  2018                           prodl	equ	0xFF3
  2019                           intcon	equ	0xFF2
  2020                           indf0	equ	0xFEF
  2021                           postinc0	equ	0xFEE
  2022                           fsr0h	equ	0xFEA
  2023                           fsr0l	equ	0xFE9
  2024                           wreg	equ	0xFE8
  2025                           indf1	equ	0xFE7
  2026                           fsr1h	equ	0xFE2
  2027                           fsr1l	equ	0xFE1
  2028                           bsr	equ	0xFE0
  2029                           indf2	equ	0xFDF
  2030                           fsr2h	equ	0xFDA
  2031                           fsr2l	equ	0xFD9
  2032                           status	equ	0xFD8
  2033                           pclatu	equ	0xFFB
  2034                           pclath	equ	0xFFA
  2035                           tblptru	equ	0xFF8
  2036                           tblptrh	equ	0xFF7
  2037                           tblptrl	equ	0xFF6
  2038                           tablat	equ	0xFF5
  2039                           prodh	equ	0xFF4
  2040                           prodl	equ	0xFF3
  2041                           intcon	equ	0xFF2
  2042                           indf0	equ	0xFEF
  2043                           postinc0	equ	0xFEE
  2044                           fsr0h	equ	0xFEA
  2045                           fsr0l	equ	0xFE9
  2046                           wreg	equ	0xFE8
  2047                           indf1	equ	0xFE7
  2048                           fsr1h	equ	0xFE2
  2049                           fsr1l	equ	0xFE1
  2050                           bsr	equ	0xFE0
  2051                           indf2	equ	0xFDF
  2052                           fsr2h	equ	0xFDA
  2053                           fsr2l	equ	0xFD9
  2054                           status	equ	0xFD8
  2055                           
  2056                           	psect	rparam
  2057  0000                     pclatu	equ	0xFFB
  2058                           pclath	equ	0xFFA
  2059                           tblptru	equ	0xFF8
  2060                           tblptrh	equ	0xFF7
  2061                           tblptrl	equ	0xFF6
  2062                           tablat	equ	0xFF5
  2063                           prodh	equ	0xFF4
  2064                           prodl	equ	0xFF3
  2065                           intcon	equ	0xFF2
  2066                           indf0	equ	0xFEF
  2067                           postinc0	equ	0xFEE
  2068                           fsr0h	equ	0xFEA
  2069                           fsr0l	equ	0xFE9
  2070                           wreg	equ	0xFE8
  2071                           indf1	equ	0xFE7
  2072                           fsr1h	equ	0xFE2
  2073                           fsr1l	equ	0xFE1
  2074                           bsr	equ	0xFE0
  2075                           indf2	equ	0xFDF
  2076                           fsr2h	equ	0xFDA
  2077                           fsr2l	equ	0xFD9
  2078                           status	equ	0xFD8
  2079                           
  2080                           	psect	temp
  2081  00003E                     btemp:
  2082                           	opt stack 0
  2083  00003E                     	ds	1
  2084  0000                     int$flags	set	btemp
  2085                           pclatu	equ	0xFFB
  2086                           pclath	equ	0xFFA
  2087                           tblptru	equ	0xFF8
  2088                           tblptrh	equ	0xFF7
  2089                           tblptrl	equ	0xFF6
  2090                           tablat	equ	0xFF5
  2091                           prodh	equ	0xFF4
  2092                           prodl	equ	0xFF3
  2093                           intcon	equ	0xFF2
  2094                           indf0	equ	0xFEF
  2095                           postinc0	equ	0xFEE
  2096                           fsr0h	equ	0xFEA
  2097                           fsr0l	equ	0xFE9
  2098                           wreg	equ	0xFE8
  2099                           indf1	equ	0xFE7
  2100                           fsr1h	equ	0xFE2
  2101                           fsr1l	equ	0xFE1
  2102                           bsr	equ	0xFE0
  2103                           indf2	equ	0xFDF
  2104                           fsr2h	equ	0xFDA
  2105                           fsr2l	equ	0xFD9
  2106                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    0
    Data        0
    BSS         165
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      61
    BANK0           160     13     153
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 70
		 -> allDataString(BANK0[70]), tmpString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 70
		 -> allDataString(BANK0[70]), tmpString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 

    sp__createCHG	PTR unsigned char  size(2) Largest target is 1
		 -> STR_4(CODE[1]), 

    writeString@str	PTR unsigned char  size(2) Largest target is 70
		 -> allDataString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_copyTmpBuffer
    _main->_writeResult
    _writeResult->_wait_ms
    _writeString->_UART_Write
    _writeString->_strlen
    _clearBuffer->_strlen

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_appendChar

Critical Paths under _main in BANK0

    _writeString->_strlen
    _wait_ms->___lmul
    _clearBuffer->_strlen

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    4526
                                             12 BANK0      1     1      0
                _ConfigureOscillator
                            _InitApp
                          _UART_Init
                         _UART_Write
                        _clearBuffer
                      _copyTmpBuffer
                     _isItLongEnough
                            _isValid
                            _wait_ms
                        _writeResult
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeResult                                          1     1      0    1851
                                             35 COMRAM     1     1      0
                            _wait_ms
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeString                                          7     4      3    1231
                                              4 BANK0      7     4      3
                         _UART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           2     1      1     324
                                             33 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _wait_ms                                              2     0      2     589
                                             33 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     404
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _isValid                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _isItLongEnough                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _copyTmpBuffer                                        3     3      0      99
                                             33 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _clearBuffer                                          2     2      0     352
                                              4 BANK0      2     2      0
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     284
                                             33 COMRAM     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4      77
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                             16 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            15    15      0      22
                                              1 COMRAM    15    15      0
                         _appendChar
 ---------------------------------------------------------------------------------
 (6) _appendChar                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _UART_Init
   _UART_Write
   _clearBuffer
     _strlen
   _copyTmpBuffer
   _isItLongEnough
   _isValid
   _wait_ms
     ___lmul
   _writeResult
     _wait_ms
       ___lmul
     _writeString
       _UART_Write
       _strlen
   _writeString
     _UART_Write
     _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)
   _appendChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      D      99       5       95.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      3D       1       64.9%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D6       6        0.0%
DATA                 0      0      D6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Apr 06 12:41:15 2017

                          l52 0FB0                            l71 11EC                            l55 0FB2  
              writeResult@dev 0024                            bsr 000FE0                  __CFG_CP0$OFF 000000  
                         l144 1364                           l148 136E                           u820 1118  
                         u827 110E                           u780 1172                           u787 1168  
                         wreg 000FE8                    _TXSTA1bits 000FAD                  __CFG_IESO$ON 000000  
                  _TXSTA2bits 000FA8                          l1430 1150                          l1502 139E  
                        l1520 12C2                          l1530 1276                          l1442 1090  
                        l1428 114A                          l1452 1122                          l1526 1256  
                        l1438 106A                          l1456 11DC                          l1448 10DA  
                        l1560 0F7E                          l1490 1220                          l1572 0FAA  
                        l1486 1206            __CFG_WPFP$PAGE_127 000000                 _copyTmpBuffer 124C  
                        STR_1 0F01                          STR_2 0F06                          STR_3 0F05  
                        _RCIF 007CF5                 __CFG_FCMEN$ON 000000                          _main 0F0C  
                        fsr0h 000FEA                          fsr1h 000FE2                          indf0 000FEF  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf1 000FE7  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 003E                          prodh 000FF4                          prodl 000FF3  
                        start 00A6                writeString@dev 00F2                  ___param_bank 000000  
              writeString@str 00F0               __end_of_InitApp 135C                 __CFG_PLLDIV$1 000000  
                _BAUDCON1bits 000F7E                  _BAUDCON2bits 000F7C                         ?_main 0001  
                       _RC1IE 007CED                         _RC1IF 007CF5                         _RC2IE 007D1D  
                       _RC2IF 007D25                   _writeResult 12F8                         _RPOR8 000EC8  
         _ConfigureOscillator 13A2                   _writeString 10CE           ___lmul@multiplicand 00F0  
            ??_isItLongEnough 0022                   ?_UART_Write 0022            __size_of_UART_Init 0032  
             __end_of_isValid 12C6                         _index 003C                ?_copyTmpBuffer 0001  
              __CFG_CLKOEC$ON 000000               __end_of_low_isr 00A6                         pclath 000FFA  
                       tablat 000FF5               __end_of_wait_ms 11FA                         status 000FD8  
        ?_ConfigureOscillator 0001          __size_of_clearBuffer 0052       __CFG_DSWDTOSC$INTOSCREF 000000  
             __initialization 131C                  __end_of_main 0FBE                        ??_main 0025  
               __activetblptr 000003                        i2l1260 1018                __CFG_WDTEN$OFF 000000  
                      _INTCON 000FF2                        _RCREG1 000FAF                        _RCREG2 000FAA  
                      _RCSTA1 000FAC                        _RCSTA2 000F9C                        _SPBRG1 000FB0  
                      _SPBRG2 000FAB                        _PPSCON 000EBF                        _TRISB4 007C9C  
                      _TRISB5 007C9D                __CFG_WPCFG$OFF 000000                        _TRISC6 007CA6  
                      _TRISC7 007CA7                        _TXREG1 000FAE                        _TXREG2 000FA9  
                      _TXSTA1 000FAD                        _TXSTA2 000FA8                     ??_InitApp 0022  
       ??_ConfigureOscillator 0022                __CFG_WPDIS$OFF 000000                __CFG_XINST$OFF 000000  
           __end_of_UART_Init 12F8              __end_of_high_isr 1058                        ___lmul 1058  
         __size_of_UART_Write 001C                __CFG_STVREN$ON 000000                        clear_0 1322  
                      clear_1 132E                        _strlen 1140                     ??_isValid 0022  
                __mediumconst 0000                     ??_low_isr 0011                        tblptrh 000FF7  
             ??_copyTmpBuffer 0022                        tblptrl 000FF6                        tblptru 000FF8  
                   ??_wait_ms 0024               __CFG_DSBOREN$ON 000000          __CFG_LS48MHZ$SYS48X8 000000  
                  __accesstop 0060       __end_of__initialization 1334                 ___rparam_used 000001  
             __CFG_IOL1WAY$ON 000000          __CFG_WPEND$PAGE_WPFP 000000                __pcstackCOMRAM 0001  
             __CFG_DSWDTEN$ON 000000               __CFG_DSWDTPS$G2 000000               __CFG_OSC$INTOSC 000000  
                  __pbssBANK0 0060                       ?___lmul 00EC                ___lmul@product 00F4  
                  _appendChar 1378                       ?_strlen 0022                 _allDataString 0060  
                ?_writeResult 0001                  ?_writeString 00F0                  ??_UART_Write 0023  
                     i2u51_40 1004                       i2u52_48 1006                       _SPBRGH1 000F7F  
                     _SPBRGH2 000F7D                       _RPINR16 000EF7                     ?_high_isr 0001  
                     _InitApp 133E                       __Hparam 0000                       __Lparam 0000  
             __size_of___lmul 0076            __end_of_UART_Write 1378                  __psmallconst 0F00  
                     __pcinit 131C                       __ramtop 0F00                       __ptext0 0F0C  
                     __ptext1 12F8                       __ptext2 10CE                       __ptext3 135C  
                     __ptext4 11A0                       __ptext5 1058                       __ptext6 128C  
                     __ptext7 1390                       __ptext8 124C                       __ptext9 11FA  
                     _isValid 128C               __size_of_strlen 0060                       _low_isr 0018  
                     _wait_ms 11A0                       main@var 00F8                    ??_high_isr 0002  
              __pintcode_body 0FBE          end_of_initialization 1334                 ??_clearBuffer 0024  
                     int_func 0FBE                       postinc0 000FEE                   wait_ms@time 0022  
                     strlen@s 0022                     _UART_Init 12C6                     _PORTDbits 000F83  
                 ?_appendChar 0001                UART_Write@data 0023              __CFG_CPUDIV$OSC1 000000  
                   _TRISAbits 000F92                     _TRISDbits 000F95             __CFG_SOSCSEL$HIGH 000000  
 __end_of_ConfigureOscillator 13AE                  writeString@i 00F5       __size_of_isItLongEnough 0012  
         __CFG_MSSP7B_EN$MSK7 000000           __end_of_clearBuffer 124C                __end_of___lmul 10CE  
                  ?_UART_Init 00EC                __end_of_strlen 11A0           start_initialization 131C  
        __size_of_writeResult 0024          __size_of_writeString 0072         __end_of_copyTmpBuffer 128C  
         __size_of_appendChar 0018                      ??___lmul 0022             __CFG_ADCSEL$BIT10 000000  
                    ??_strlen 00EC                   __pbssCOMRAM 0025                 __pcstackBANK0 00EC  
           __size_of_high_isr 1050                   _clearBuffer 11FA                      ?_InitApp 0001  
                   __pintcode 0008                   __pintcodelo 0018                   ??_UART_Init 0022  
                    ?_isValid 0001                   __smallconst 0F00          __CFG_RTCOSC$T1OSCREF 000000  
                    ?_low_isr 0001                      ?_wait_ms 0022                copyTmpBuffer@i 0023  
              _isItLongEnough 1390                      _LATAbits 000F89              __CFG_WDTPS$32768 000000  
                _parsedString 0025                  clearBuffer@i 00F0                 UART_Write@dev 0022  
                   _tmpString 00A6             UART_Init@baudrate 00EC                  ??_appendChar 0001  
            parseString@F8386 0039             __CFG_CFGPLLEN$OFF 000000             ___lmul@multiplier 00EC  
      __end_of_isItLongEnough 13A2            __end_of_appendChar 1390              __size_of_InitApp 001E  
                    __Hrparam 0000                      __Lrparam 0000              __size_of_isValid 003A  
            __size_of_low_isr 008E                      __ptext10 1140                      __ptext11 12C6  
                    __ptext12 133E                      __ptext13 13A2                      __ptext16 1378  
            __size_of_wait_ms 005A                      _high_isr 0008               ?_isItLongEnough 0001  
               __size_of_main 00B2                appendChar@data 0001  __size_of_ConfigureOscillator 000C  
                    int$flags 003E                 ??_writeResult 0024                 ??_writeString 00F3  
                 _OSCTUNEbits 000F9B                      intlevel1 0000                      intlevel2 0000  
                ?_clearBuffer 0001                    _OSCCONbits 000FD3        __size_of_copyTmpBuffer 0040  
                wait_ms@timel 0035                      strlen@cp 00EE                    _UART_Write 135C  
         __end_of_writeResult 131C           __end_of_writeString 1140  
