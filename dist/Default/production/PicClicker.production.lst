

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Apr 24 22:25:33 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F47J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 1.41
    45                           ; Generated 25/01/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F47J53 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataCOMRAM
    80  0019E6                     __pidataCOMRAM:
    81                           	opt stack 0
    82                           
    83                           ;initializer for _parsedString
    84  0019E6  53                 	db	83
    85  0019E7  4F                 	db	79
    86  0019E8  43                 	db	67
    87  0019E9  78                 	db	120
    88  0019EA  78                 	db	120
    89  0019EB  3B                 	db	59
    90  0019EC  43                 	db	67
    91  0019ED  48                 	db	72
    92  0019EE  47                 	db	71
    93  0019EF  78                 	db	120
    94  0019F0  3B                 	db	59
    95  0019F1  41                 	db	65
    96  0019F2  43                 	db	67
    97  0019F3  4B                 	db	75
    98  0019F4  3B                 	db	59
    99  0019F5  00                 	db	0
   100  0019F6  00                 	db	0
   101  0000                     _RPINR16	set	3831
   102  0000                     _RPOR8	set	3784
   103  0000                     _PPSCON	set	3775
   104  0000                     _RCREG2	set	4010
   105  0000                     _TXREG2	set	4009
   106  0000                     _TXSTA2bits	set	4008
   107  0000                     _TXREG1	set	4014
   108  0000                     _TXSTA1bits	set	4013
   109  0000                     _SPBRGH2	set	3965
   110  0000                     _SPBRG2	set	4011
   111  0000                     _BAUDCON2bits	set	3964
   112  0000                     _TXSTA2	set	4008
   113  0000                     _RCSTA2	set	3996
   114  0000                     _SPBRGH1	set	3967
   115  0000                     _SPBRG1	set	4016
   116  0000                     _BAUDCON1bits	set	3966
   117  0000                     _RCSTA1	set	4012
   118  0000                     _TXSTA1	set	4013
   119  0000                     _INTCON	set	4082
   120  0000                     _OSCTUNEbits	set	3995
   121  0000                     _OSCCONbits	set	4051
   122  0000                     _PORTDbits	set	3971
   123  0000                     _TRISDbits	set	3989
   124  0000                     _TRISAbits	set	3986
   125  0000                     _RCREG1	set	4015
   126  0000                     _LATAbits	set	3977
   127  0000                     _RCIF	set	31989
   128  0000                     _TRISB5	set	31901
   129  0000                     _TRISB4	set	31900
   130  0000                     _RC2IE	set	32029
   131  0000                     _TRISC6	set	31910
   132  0000                     _TRISC7	set	31911
   133  0000                     _RC1IE	set	31981
   134  0000                     _RC2IF	set	32037
   135  0000                     _RC1IF	set	31989
   136                           
   137                           	psect	smallconst
   138  000F00                     __psmallconst:
   139                           	opt stack 0
   140  000F00  00                 	db	0
   141  000F01                     STR_1:
   142  000F01  4C                 	db	76	;'L'
   143  000F02  20                 	db	32
   144  000F03  35                 	db	53	;'5'
   145  000F04  30                 	db	48	;'0'
   146  000F05  00                 	db	0
   147  000F06                     STR_2:
   148  000F06  44                 	db	68	;'D'
   149  000F07  20                 	db	32
   150  000F08  38                 	db	56	;'8'
   151  000F09  00                 	db	0
   152  0000                     
   153                           ; #config settings
   154  000F0A  00                 	db	0	; dummy byte at the end
   155  0000                     
   156                           	psect	cinit
   157  00181E                     __pcinit:
   158                           	opt stack 0
   159  00181E                     start_initialization:
   160                           	opt stack 0
   161  00181E                     __initialization:
   162                           	opt stack 0
   163                           
   164                           ; Initialize objects allocated to COMRAM (17 bytes)
   165                           ; load TBLPTR registers with __pidataCOMRAM
   166  00181E  0EE6               	movlw	low __pidataCOMRAM
   167  001820  6EF6               	movwf	tblptrl,c
   168  001822  0E19               	movlw	high __pidataCOMRAM
   169  001824  6EF7               	movwf	tblptrh,c
   170  001826  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   171  001828  6EF8               	movwf	tblptru,c
   172  00182A  EE00  F027         	lfsr	0,__pdataCOMRAM
   173  00182E  EE10 F011          	lfsr	1,17
   174  001832                     copy_data0:
   175  001832  0009               	tblrd		*+
   176  001834  CFF5 FFEE          	movff	tablat,postinc0
   177  001838  50E5               	movf	postdec1,w,c
   178  00183A  50E1               	movf	fsr1l,w,c
   179  00183C  E1FA               	bnz	copy_data0
   180                           
   181                           ; Clear objects allocated to BANK1 (70 bytes)
   182  00183E  EE01  F000         	lfsr	0,__pbssBANK1
   183  001842  0E46               	movlw	70
   184  001844                     clear_0:
   185  001844  6AEE               	clrf	postinc0,c
   186  001846  06E8               	decf	wreg,f,c
   187  001848  E1FD               	bnz	clear_0
   188                           
   189                           ; Clear objects allocated to BANK0 (105 bytes)
   190  00184A  EE00  F060         	lfsr	0,__pbssBANK0
   191  00184E  0E69               	movlw	105
   192  001850                     clear_1:
   193  001850  6AEE               	clrf	postinc0,c
   194  001852  06E8               	decf	wreg,f,c
   195  001854  E1FD               	bnz	clear_1
   196                           
   197                           ; Clear objects allocated to COMRAM (6 bytes)
   198  001856  6A3D               	clrf	(__pbssCOMRAM+5)& (0+255),c
   199  001858  6A3C               	clrf	(__pbssCOMRAM+4)& (0+255),c
   200  00185A  6A3B               	clrf	(__pbssCOMRAM+3)& (0+255),c
   201  00185C  6A3A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   202  00185E  6A39               	clrf	(__pbssCOMRAM+1)& (0+255),c
   203  001860  6A38               	clrf	__pbssCOMRAM& (0+255),c
   204  001862                     end_of_initialization:
   205                           	opt stack 0
   206  001862                     __end_of__initialization:
   207                           	opt stack 0
   208  001862  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   209  001864  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   210  001866  0100               	movlb	0
   211  001868  EF8E  F009         	goto	_main	;jump to C main() function
   212                           tblptru	equ	0xFF8
   213                           tblptrh	equ	0xFF7
   214                           tblptrl	equ	0xFF6
   215                           tablat	equ	0xFF5
   216                           postinc0	equ	0xFEE
   217                           wreg	equ	0xFE8
   218                           postdec1	equ	0xFE5
   219                           fsr1l	equ	0xFE1
   220                           
   221                           	psect	bssCOMRAM
   222  000038                     __pbssCOMRAM:
   223                           	opt stack 0
   224  000038                     wait_ms@timel:
   225                           	opt stack 0
   226  000038                     	ds	4
   227  00003C                     _index:
   228                           	opt stack 0
   229  00003C                     	ds	2
   230                           tblptru	equ	0xFF8
   231                           tblptrh	equ	0xFF7
   232                           tblptrl	equ	0xFF6
   233                           tablat	equ	0xFF5
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           postdec1	equ	0xFE5
   237                           fsr1l	equ	0xFE1
   238                           
   239                           	psect	dataCOMRAM
   240  000027                     __pdataCOMRAM:
   241                           	opt stack 0
   242  000027                     _parsedString:
   243                           	opt stack 0
   244  000027                     	ds	17
   245                           tblptru	equ	0xFF8
   246                           tblptrh	equ	0xFF7
   247                           tblptrl	equ	0xFF6
   248                           tablat	equ	0xFF5
   249                           postinc0	equ	0xFEE
   250                           wreg	equ	0xFE8
   251                           postdec1	equ	0xFE5
   252                           fsr1l	equ	0xFE1
   253                           
   254                           	psect	bssBANK0
   255  000060                     __pbssBANK0:
   256                           	opt stack 0
   257  000060                     _positions:
   258                           	opt stack 0
   259  000060                     	ds	22
   260  000076                     _toCharArray:
   261                           	opt stack 0
   262  000076                     	ds	4
   263  00007A                     _charSOC:
   264                           	opt stack 0
   265  00007A                     	ds	3
   266  00007D                     _tmpString:
   267                           	opt stack 0
   268  00007D                     	ds	70
   269  0000C3                     _SOC:
   270                           	opt stack 0
   271  0000C3                     	ds	6
   272                           tblptru	equ	0xFF8
   273                           tblptrh	equ	0xFF7
   274                           tblptrl	equ	0xFF6
   275                           tablat	equ	0xFF5
   276                           postinc0	equ	0xFEE
   277                           wreg	equ	0xFE8
   278                           postdec1	equ	0xFE5
   279                           fsr1l	equ	0xFE1
   280                           
   281                           	psect	bssBANK1
   282  000100                     __pbssBANK1:
   283                           	opt stack 0
   284  000100                     _allDataString:
   285                           	opt stack 0
   286  000100                     	ds	70
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           tblptrl	equ	0xFF6
   290                           tablat	equ	0xFF5
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           postdec1	equ	0xFE5
   294                           fsr1l	equ	0xFE1
   295                           
   296                           	psect	cstackBANK0
   297  0000C9                     __pcstackBANK0:
   298                           	opt stack 0
   299  0000C9                     ?___lmul:
   300                           	opt stack 0
   301  0000C9                     ___awdiv@counter:
   302                           	opt stack 0
   303  0000C9                     ___awmod@counter:
   304                           	opt stack 0
   305  0000C9                     ___wmul@product:
   306                           	opt stack 0
   307  0000C9                     strlen@cp:
   308                           	opt stack 0
   309  0000C9                     ___lmul@multiplier:
   310                           	opt stack 0
   311                           
   312                           ; 4 bytes @ 0x0
   313  0000C9                     	ds	1
   314  0000CA                     ___awdiv@sign:
   315                           	opt stack 0
   316  0000CA                     ___awmod@sign:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x1
   320  0000CA                     	ds	1
   321  0000CB                     ?_transformToTwoDigitNumber:
   322                           	opt stack 0
   323  0000CB                     ?_checkPos:
   324                           	opt stack 0
   325  0000CB                     writeString@str:
   326                           	opt stack 0
   327  0000CB                     clearBuffer@i:
   328                           	opt stack 0
   329  0000CB                     transformToTwoDigitNumber@number:
   330                           	opt stack 0
   331  0000CB                     checkPos@pos:
   332                           	opt stack 0
   333  0000CB                     ___awdiv@quotient:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x2
   337  0000CB                     	ds	2
   338  0000CD                     writeString@dev:
   339                           	opt stack 0
   340  0000CD                     transformToTwoDigitNumber@size:
   341                           	opt stack 0
   342  0000CD                     checkPos@i:
   343                           	opt stack 0
   344  0000CD                     ___lmul@multiplicand:
   345                           	opt stack 0
   346                           
   347                           ; 4 bytes @ 0x4
   348  0000CD                     	ds	1
   349  0000CE                     ??_writeString:
   350                           
   351                           ; 1 bytes @ 0x5
   352  0000CE                     	ds	1
   353  0000CF                     ??_checkString:
   354  0000CF                     ??_transformToTwoDigitNumber:
   355                           
   356                           ; 1 bytes @ 0x6
   357  0000CF                     	ds	1
   358  0000D0                     writeString@i:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x7
   362  0000D0                     	ds	1
   363  0000D1                     wait_ms@time:
   364                           	opt stack 0
   365  0000D1                     transformToTwoDigitNumber@result:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x8
   369  0000D1                     	ds	2
   370  0000D3                     checkString@i:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0xA
   374  0000D3                     	ds	2
   375  0000D5                     ??_parseString:
   376                           
   377                           ; 1 bytes @ 0xC
   378  0000D5                     	ds	4
   379  0000D9                     parseString@chgStop:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x10
   383  0000D9                     	ds	2
   384  0000DB                     parseString@tmpSOC:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x12
   388  0000DB                     	ds	1
   389  0000DC                     parseString@socSize:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x13
   393  0000DC                     	ds	2
   394  0000DE                     parseString@chgStart:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x15
   398  0000DE                     	ds	2
   399  0000E0                     parseString@CHG:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x17
   403  0000E0                     	ds	1
   404  0000E1                     parseString@socStartPos:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x18
   408  0000E1                     	ds	2
   409  0000E3                     parseString@socEndPos:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x1A
   413  0000E3                     	ds	2
   414  0000E5                     parseString@k:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x1C
   418  0000E5                     	ds	2
   419  0000E7                     parseString@i:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x1E
   423  0000E7                     	ds	2
   424  0000E9                     parseString@tmp:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x20
   428  0000E9                     	ds	2
   429  0000EB                     main@var:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x22
   433  0000EB                     	ds	1
   434                           tblptru	equ	0xFF8
   435                           tblptrh	equ	0xFF7
   436                           tblptrl	equ	0xFF6
   437                           tablat	equ	0xFF5
   438                           postinc0	equ	0xFEE
   439                           wreg	equ	0xFE8
   440                           postdec1	equ	0xFE5
   441                           fsr1l	equ	0xFE1
   442                           
   443                           	psect	cstackCOMRAM
   444  000001                     __pcstackCOMRAM:
   445                           	opt stack 0
   446  000001                     appendChar@data:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x0
   450  000001                     	ds	1
   451  000002                     ??_high_isr:
   452                           
   453                           ; 1 bytes @ 0x1
   454  000002                     	ds	15
   455  000011                     ??_low_isr:
   456                           
   457                           ; 1 bytes @ 0x10
   458  000011                     	ds	17
   459  000022                     ??_copyTmpBuffer:
   460  000022                     ?_strlen:
   461                           	opt stack 0
   462  000022                     ?_lenHelper:
   463                           	opt stack 0
   464  000022                     ?___wmul:
   465                           	opt stack 0
   466  000022                     ?___awdiv:
   467                           	opt stack 0
   468  000022                     ?___awmod:
   469                           	opt stack 0
   470  000022                     UART_Write@dev:
   471                           	opt stack 0
   472  000022                     lenHelper@x:
   473                           	opt stack 0
   474  000022                     ___wmul@multiplier:
   475                           	opt stack 0
   476  000022                     ___awdiv@dividend:
   477                           	opt stack 0
   478  000022                     ___awmod@dividend:
   479                           	opt stack 0
   480  000022                     strlen@s:
   481                           	opt stack 0
   482  000022                     UART_Init@baudrate:
   483                           	opt stack 0
   484  000022                     ___lmul@product:
   485                           	opt stack 0
   486                           
   487                           ; 4 bytes @ 0x21
   488  000022                     	ds	1
   489  000023                     UART_Write@data:
   490                           	opt stack 0
   491  000023                     copyTmpBuffer@i:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x22
   495  000023                     	ds	1
   496  000024                     ??_strlen:
   497  000024                     ___wmul@multiplicand:
   498                           	opt stack 0
   499  000024                     ___awdiv@divisor:
   500                           	opt stack 0
   501  000024                     ___awmod@divisor:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x23
   505  000024                     	ds	2
   506  000026                     writeResult@dev:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x25
   510  000026                     	ds	1
   511  000027                     tblptru	equ	0xFF8
   512                           tblptrh	equ	0xFF7
   513                           tblptrl	equ	0xFF6
   514                           tablat	equ	0xFF5
   515                           postinc0	equ	0xFEE
   516                           wreg	equ	0xFE8
   517                           postdec1	equ	0xFE5
   518                           fsr1l	equ	0xFE1
   519                           
   520                           ; 1 bytes @ 0x26
   521 ;;
   522 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   523 ;;
   524 ;; *************** function _main *****************
   525 ;; Defined at:
   526 ;;		line 39 in file "main.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;		None
   529 ;; Auto vars:     Size  Location     Type
   530 ;;  var             1   34[BANK0 ] unsigned char 
   531 ;;  result          1    0        unsigned char 
   532 ;; Return value:  Size  Location     Type
   533 ;;                  1    wreg      void 
   534 ;; Registers used:
   535 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   542 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   544 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   545 ;;Total ram usage:        1 bytes
   546 ;; Hardware stack levels required when called:    7
   547 ;; This function calls:
   548 ;;		_ConfigureOscillator
   549 ;;		_InitApp
   550 ;;		_UART_Init
   551 ;;		_UART_Write
   552 ;;		_clearBuffer
   553 ;;		_copyTmpBuffer
   554 ;;		_isItLongEnough
   555 ;;		_isValid
   556 ;;		_parseString
   557 ;;		_wait_ms
   558 ;;		_writeResult
   559 ;;		_writeString
   560 ;; This function is called by:
   561 ;;		Startup code after reset
   562 ;; This function uses a non-reentrant model
   563 ;;
   564                           
   565                           	psect	text0
   566  00131C                     __ptext0:
   567                           	opt stack 0
   568  00131C                     _main:
   569                           	opt stack 24
   570                           
   571                           ;main.c: 45: ConfigureOscillator();
   572                           
   573                           ;incstack = 0
   574  00131C  ECFC  F00C         	call	_ConfigureOscillator	;wreg free
   575                           
   576                           ;main.c: 48: InitApp();
   577  001320  ECBE  F00C         	call	_InitApp	;wreg free
   578                           
   579                           ;main.c: 50: UART_Init(19200);
   580  001324  0E00               	movlw	0
   581  001326  6E22               	movwf	UART_Init@baudrate,c
   582  001328  0E4B               	movlw	75
   583  00132A  6E23               	movwf	UART_Init@baudrate+1,c
   584  00132C  0E00               	movlw	0
   585  00132E  6E24               	movwf	UART_Init@baudrate+2,c
   586  001330  0E00               	movlw	0
   587  001332  6E25               	movwf	UART_Init@baudrate+3,c
   588  001334  EC90  F00C         	call	_UART_Init	;wreg free
   589                           
   590                           ;main.c: 51: writeString("L 50", 1);
   591  001338  0E01               	movlw	low STR_1
   592  00133A  0100               	movlb	0	; () banked
   593  00133C  6FCB               	movwf	writeString@str& (0+255),b
   594  00133E  0E0F               	movlw	high STR_1
   595  001340  0100               	movlb	0	; () banked
   596  001342  6FCC               	movwf	(writeString@str+1)& (0+255),b
   597  001344  0E01               	movlw	1
   598  001346  0100               	movlb	0	; () banked
   599  001348  6FCD               	movwf	writeString@dev& (0+255),b
   600  00134A  ECC3  F00A         	call	_writeString	;wreg free
   601                           
   602                           ;main.c: 52: UART_Write(0x0D,1);
   603  00134E  0E01               	movlw	1
   604  001350  6E22               	movwf	UART_Write@dev,c
   605  001352  0E0D               	movlw	13
   606  001354  ECCD  F00C         	call	_UART_Write
   607                           
   608                           ;main.c: 53: writeString("D 8", 1);
   609  001358  0E06               	movlw	low STR_2
   610  00135A  0100               	movlb	0	; () banked
   611  00135C  6FCB               	movwf	writeString@str& (0+255),b
   612  00135E  0E0F               	movlw	high STR_2
   613  001360  0100               	movlb	0	; () banked
   614  001362  6FCC               	movwf	(writeString@str+1)& (0+255),b
   615  001364  0E01               	movlw	1
   616  001366  0100               	movlb	0	; () banked
   617  001368  6FCD               	movwf	writeString@dev& (0+255),b
   618  00136A  ECC3  F00A         	call	_writeString	;wreg free
   619                           
   620                           ;main.c: 54: UART_Write(0x0D,1);
   621  00136E  0E01               	movlw	1
   622  001370  6E22               	movwf	UART_Write@dev,c
   623  001372  0E0D               	movlw	13
   624  001374  ECCD  F00C         	call	_UART_Write
   625                           
   626                           ;main.c: 56: uint8_t var = 0;
   627  001378  0E00               	movlw	0
   628  00137A  0100               	movlb	0	; () banked
   629  00137C  6FEB               	movwf	main@var& (0+255),b
   630                           
   631                           ; BSR set to: 0
   632                           ;main.c: 57: char result;
   633                           ;main.c: 60: TRISAbits.TRISA0 = 0;
   634  00137E  9092               	bcf	3986,0,c	;volatile
   635                           
   636                           ; BSR set to: 0
   637                           ;main.c: 61: TRISAbits.TRISA1 = 0;
   638  001380  9292               	bcf	3986,1,c	;volatile
   639                           
   640                           ; BSR set to: 0
   641                           ;main.c: 62: LATAbits.LATA0 = 0;
   642  001382  9089               	bcf	3977,0,c	;volatile
   643                           
   644                           ; BSR set to: 0
   645                           ;main.c: 63: LATAbits.LATA1 = 0;
   646  001384  9289               	bcf	3977,1,c	;volatile
   647                           
   648                           ; BSR set to: 0
   649                           ;main.c: 64: TRISDbits.TRISD3 = 1;
   650  001386  8695               	bsf	3989,3,c	;volatile
   651                           
   652                           ; BSR set to: 0
   653                           ;main.c: 66: clearBuffer();
   654  001388  ECE6  F00B         	call	_clearBuffer	;wreg free
   655  00138C                     l2125:
   656                           
   657                           ;main.c: 71: if(isItLongEnough()){
   658  00138C  ECDB  F00C         	call	_isItLongEnough	;wreg free
   659  001390  0900               	iorlw	0
   660  001392  B4D8               	btfsc	status,2,c
   661  001394  D017               	goto	l54
   662                           
   663                           ;main.c: 72: if(isValid()){
   664  001396  EC73  F00C         	call	_isValid	;wreg free
   665  00139A  0900               	iorlw	0
   666  00139C  B4D8               	btfsc	status,2,c
   667  00139E  D00F               	goto	l2139
   668                           
   669                           ;main.c: 73: LATAbits.LATA1 = 1;
   670  0013A0  8289               	bsf	3977,1,c	;volatile
   671                           
   672                           ;main.c: 74: wait_ms(1000);
   673  0013A2  0E03               	movlw	3
   674  0013A4  0100               	movlb	0	; () banked
   675  0013A6  6FD2               	movwf	(wait_ms@time+1)& (0+255),b
   676  0013A8  0EE8               	movlw	232
   677  0013AA  6FD1               	movwf	wait_ms@time& (0+255),b
   678  0013AC  EC60  F00B         	call	_wait_ms	;wreg free
   679                           
   680                           ;main.c: 75: copyTmpBuffer();
   681  0013B0  EC36  F00C         	call	_copyTmpBuffer	;wreg free
   682                           
   683                           ;main.c: 76: parseString();
   684  0013B4  EC86  F007         	call	_parseString	;wreg free
   685                           
   686                           ;main.c: 77: clearBuffer();
   687  0013B8  ECE6  F00B         	call	_clearBuffer	;wreg free
   688                           
   689                           ;main.c: 78: }else{
   690  0013BC  D004               	goto	l57
   691  0013BE                     l2139:
   692                           
   693                           ;main.c: 79: clearBuffer();
   694  0013BE  ECE6  F00B         	call	_clearBuffer	;wreg free
   695                           
   696                           ;main.c: 80: }
   697                           ;main.c: 81: }else{
   698  0013C2  D001               	goto	l57
   699  0013C4                     l54:
   700                           
   701                           ;main.c: 82: LATAbits.LATA1 = 0;
   702  0013C4  9289               	bcf	3977,1,c	;volatile
   703  0013C6                     l57:
   704                           
   705                           ;main.c: 83: }
   706                           ;main.c: 85: if(!PORTDbits.RD3){
   707  0013C6  B683               	btfsc	3971,3,c	;volatile
   708  0013C8  D7E1               	goto	l2125
   709                           
   710                           ;main.c: 86: writeResult(2);
   711  0013CA  0E02               	movlw	2
   712  0013CC  EC56  F00C         	call	_writeResult
   713  0013D0  D7DD               	goto	l2125
   714  0013D2                     __end_of_main:
   715                           	opt stack 0
   716                           tblptru	equ	0xFF8
   717                           tblptrh	equ	0xFF7
   718                           tblptrl	equ	0xFF6
   719                           tablat	equ	0xFF5
   720                           postinc0	equ	0xFEE
   721                           wreg	equ	0xFE8
   722                           postdec1	equ	0xFE5
   723                           fsr1l	equ	0xFE1
   724                           status	equ	0xFD8
   725                           
   726 ;; *************** function _writeResult *****************
   727 ;; Defined at:
   728 ;;		line 63 in file "bufferhandler.c"
   729 ;; Parameters:    Size  Location     Type
   730 ;;  dev             1    wreg     unsigned char 
   731 ;; Auto vars:     Size  Location     Type
   732 ;;  dev             1   37[COMRAM] unsigned char 
   733 ;; Return value:  Size  Location     Type
   734 ;;                  1    wreg      void 
   735 ;; Registers used:
   736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   737 ;; Tracked objects:
   738 ;;		On entry : 0/0
   739 ;;		On exit  : 0/0
   740 ;;		Unchanged: 0/0
   741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   743 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   745 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   746 ;;Total ram usage:        1 bytes
   747 ;; Hardware stack levels used:    1
   748 ;; Hardware stack levels required when called:    5
   749 ;; This function calls:
   750 ;;		_wait_ms
   751 ;;		_writeString
   752 ;; This function is called by:
   753 ;;		_main
   754 ;; This function uses a non-reentrant model
   755 ;;
   756                           
   757                           	psect	text1
   758  0018AC                     __ptext1:
   759                           	opt stack 0
   760  0018AC                     _writeResult:
   761                           	opt stack 25
   762                           
   763                           ;incstack = 0
   764                           ;writeResult@dev stored from wreg
   765  0018AC  6E26               	movwf	writeResult@dev,c
   766                           
   767                           ;bufferhandler.c: 65: writeString(parsedString, dev);
   768  0018AE  0E27               	movlw	low _parsedString
   769  0018B0  0100               	movlb	0	; () banked
   770  0018B2  6FCB               	movwf	writeString@str& (0+255),b
   771  0018B4  0E00               	movlw	high _parsedString
   772  0018B6  0100               	movlb	0	; () banked
   773  0018B8  6FCC               	movwf	(writeString@str+1)& (0+255),b
   774  0018BA  C026  F0CD         	movff	writeResult@dev,writeString@dev
   775  0018BE  ECC3  F00A         	call	_writeString	;wreg free
   776                           
   777                           ;bufferhandler.c: 67: writeString(allDataString, dev);
   778  0018C2  0E00               	movlw	low _allDataString
   779  0018C4  0100               	movlb	0	; () banked
   780  0018C6  6FCB               	movwf	writeString@str& (0+255),b
   781  0018C8  0E01               	movlw	high _allDataString
   782  0018CA  0100               	movlb	0	; () banked
   783  0018CC  6FCC               	movwf	(writeString@str+1)& (0+255),b
   784  0018CE  C026  F0CD         	movff	writeResult@dev,writeString@dev
   785  0018D2  ECC3  F00A         	call	_writeString	;wreg free
   786                           
   787                           ;bufferhandler.c: 68: wait_ms(1000);
   788  0018D6  0E03               	movlw	3
   789  0018D8  0100               	movlb	0	; () banked
   790  0018DA  6FD2               	movwf	(wait_ms@time+1)& (0+255),b
   791  0018DC  0EE8               	movlw	232
   792  0018DE  6FD1               	movwf	wait_ms@time& (0+255),b
   793  0018E0  EC60  F00B         	call	_wait_ms	;wreg free
   794  0018E4  0012               	return		;funcret
   795  0018E6                     __end_of_writeResult:
   796                           	opt stack 0
   797                           tblptru	equ	0xFF8
   798                           tblptrh	equ	0xFF7
   799                           tblptrl	equ	0xFF6
   800                           tablat	equ	0xFF5
   801                           postinc0	equ	0xFEE
   802                           wreg	equ	0xFE8
   803                           postdec1	equ	0xFE5
   804                           fsr1l	equ	0xFE1
   805                           status	equ	0xFD8
   806                           
   807 ;; *************** function _writeString *****************
   808 ;; Defined at:
   809 ;;		line 97 in file "uart.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;  str             2    2[BANK0 ] PTR unsigned char 
   812 ;;		 -> parsedString(17), allDataString(70), STR_2(4), STR_1(5), 
   813 ;;  dev             1    4[BANK0 ] unsigned char 
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  i               2    7[BANK0 ] int 
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   825 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   826 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   827 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   828 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   829 ;;Total ram usage:        7 bytes
   830 ;; Hardware stack levels used:    1
   831 ;; Hardware stack levels required when called:    4
   832 ;; This function calls:
   833 ;;		_UART_Write
   834 ;;		_strlen
   835 ;; This function is called by:
   836 ;;		_main
   837 ;;		_writeResult
   838 ;; This function uses a non-reentrant model
   839 ;;
   840                           
   841                           	psect	text2
   842  001586                     __ptext2:
   843                           	opt stack 0
   844  001586                     _writeString:
   845                           	opt stack 26
   846                           
   847                           ;uart.c: 99: for(int i = 0; i<strlen(str); i++)
   848                           
   849                           ;incstack = 0
   850  001586  0E00               	movlw	0
   851  001588  0100               	movlb	0	; () banked
   852  00158A  6FD1               	movwf	(writeString@i+1)& (0+255),b
   853  00158C  0E00               	movlw	0
   854  00158E  6FD0               	movwf	writeString@i& (0+255),b
   855  001590  D024               	goto	l1799
   856  001592                     l1795:
   857                           
   858                           ; BSR set to: 0
   859                           ;uart.c: 100: {
   860                           ;uart.c: 101: UART_Write(str[i], dev);
   861  001592  C0CD  F022         	movff	writeString@dev,UART_Write@dev
   862  001596  0100               	movlb	0	; () banked
   863  001598  51D0               	movf	writeString@i& (0+255),w,b
   864  00159A  0100               	movlb	0	; () banked
   865  00159C  25CB               	addwf	writeString@str& (0+255),w,b
   866  00159E  0100               	movlb	0	; () banked
   867  0015A0  6FCE               	movwf	??_writeString& (0+255),b
   868  0015A2  0100               	movlb	0	; () banked
   869  0015A4  51D1               	movf	(writeString@i+1)& (0+255),w,b
   870  0015A6  0100               	movlb	0	; () banked
   871  0015A8  21CC               	addwfc	(writeString@str+1)& (0+255),w,b
   872  0015AA  0100               	movlb	0	; () banked
   873  0015AC  6FCF               	movwf	(??_writeString+1)& (0+255),b
   874  0015AE  C0CE  FFF6         	movff	??_writeString,tblptrl
   875  0015B2  C0CF  FFF7         	movff	??_writeString+1,tblptrh
   876  0015B6  0E00               	movlw	low (__smallconst shr (0+16))
   877  0015B8  6EF8               	movwf	tblptru,c
   878  0015BA  0E0E               	movlw	(high __ramtop+-1)
   879  0015BC  64F7               	cpfsgt	tblptrh,c
   880  0015BE  D003               	bra	u1127
   881  0015C0  0008               	tblrd		*
   882  0015C2  50F5               	movf	tablat,w,c
   883  0015C4  D005               	bra	u1120
   884  0015C6                     u1127:
   885  0015C6  CFF6 FFE9          	movff	tblptrl,fsr0l
   886  0015CA  CFF7 FFEA          	movff	tblptrh,fsr0h
   887  0015CE  50EF               	movf	indf0,w,c
   888  0015D0                     u1120:
   889  0015D0  ECCD  F00C         	call	_UART_Write
   890  0015D4  0100               	movlb	0	; () banked
   891  0015D6  4BD0               	infsnz	writeString@i& (0+255),f,b
   892  0015D8  2BD1               	incf	(writeString@i+1)& (0+255),f,b
   893  0015DA                     l1799:
   894                           
   895                           ; BSR set to: 0
   896  0015DA  C0CB  F022         	movff	writeString@str,strlen@s
   897  0015DE  C0CC  F023         	movff	writeString@str+1,strlen@s+1
   898  0015E2  EC8D  F00B         	call	_strlen	;wreg free
   899  0015E6  5022               	movf	?_strlen,w,c
   900  0015E8  0100               	movlb	0	; () banked
   901  0015EA  5DD0               	subwf	writeString@i& (0+255),w,b
   902  0015EC  5023               	movf	?_strlen+1,w,c
   903  0015EE  0100               	movlb	0	; () banked
   904  0015F0  59D1               	subwfb	(writeString@i+1)& (0+255),w,b
   905  0015F2  B0D8               	btfsc	status,0,c
   906  0015F4  0012               	return	
   907  0015F6  D7CD               	goto	l1795
   908  0015F8                     __end_of_writeString:
   909                           	opt stack 0
   910                           tblptru	equ	0xFF8
   911                           tblptrh	equ	0xFF7
   912                           tblptrl	equ	0xFF6
   913                           tablat	equ	0xFF5
   914                           indf0	equ	0xFEF
   915                           postinc0	equ	0xFEE
   916                           fsr0h	equ	0xFEA
   917                           fsr0l	equ	0xFE9
   918                           wreg	equ	0xFE8
   919                           postdec1	equ	0xFE5
   920                           fsr1l	equ	0xFE1
   921                           status	equ	0xFD8
   922                           
   923 ;; *************** function _UART_Write *****************
   924 ;; Defined at:
   925 ;;		line 61 in file "uart.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;  data            1    wreg     unsigned char 
   928 ;;  dev             1   33[COMRAM] unsigned char 
   929 ;; Auto vars:     Size  Location     Type
   930 ;;  data            1   34[COMRAM] unsigned char 
   931 ;; Return value:  Size  Location     Type
   932 ;;                  1    wreg      void 
   933 ;; Registers used:
   934 ;;		wreg, status,2, status,0
   935 ;; Tracked objects:
   936 ;;		On entry : 0/0
   937 ;;		On exit  : 0/0
   938 ;;		Unchanged: 0/0
   939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   940 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   941 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   943 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   944 ;;Total ram usage:        2 bytes
   945 ;; Hardware stack levels used:    1
   946 ;; Hardware stack levels required when called:    3
   947 ;; This function calls:
   948 ;;		Nothing
   949 ;; This function is called by:
   950 ;;		_main
   951 ;;		_writeString
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           	psect	text3
   956  00199A                     __ptext3:
   957                           	opt stack 0
   958  00199A                     _UART_Write:
   959                           	opt stack 26
   960                           
   961                           ; BSR set to: 0
   962                           ;incstack = 0
   963                           ;UART_Write@data stored from wreg
   964  00199A  6E23               	movwf	UART_Write@data,c
   965                           
   966                           ;uart.c: 63: if (dev == 1)
   967  00199C  0422               	decf	UART_Write@dev,w,c
   968  00199E  A4D8               	btfss	status,2,c
   969  0019A0  D005               	goto	l150
   970  0019A2                     l146:
   971  0019A2  A2AD               	btfss	4013,1,c	;volatile
   972  0019A4  D7FE               	goto	l146
   973                           
   974                           ;uart.c: 66: TXREG1 = data;
   975  0019A6  C023  FFAE         	movff	UART_Write@data,4014	;volatile
   976                           
   977                           ;uart.c: 67: }
   978  0019AA  0012               	return	
   979  0019AC                     l150:
   980  0019AC  A2A8               	btfss	4008,1,c	;volatile
   981  0019AE  D7FE               	goto	l150
   982                           
   983                           ;uart.c: 71: TXREG2 = data;
   984  0019B0  C023  FFA9         	movff	UART_Write@data,4009	;volatile
   985  0019B4  0012               	return	
   986  0019B6                     __end_of_UART_Write:
   987                           	opt stack 0
   988                           tblptru	equ	0xFF8
   989                           tblptrh	equ	0xFF7
   990                           tblptrl	equ	0xFF6
   991                           tablat	equ	0xFF5
   992                           indf0	equ	0xFEF
   993                           postinc0	equ	0xFEE
   994                           fsr0h	equ	0xFEA
   995                           fsr0l	equ	0xFE9
   996                           wreg	equ	0xFE8
   997                           postdec1	equ	0xFE5
   998                           fsr1l	equ	0xFE1
   999                           status	equ	0xFD8
  1000                           
  1001 ;; *************** function _wait_ms *****************
  1002 ;; Defined at:
  1003 ;;		line 35 in file "system.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;  time            2    8[BANK0 ] int 
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;		None
  1008 ;; Return value:  Size  Location     Type
  1009 ;;                  1    wreg      void 
  1010 ;; Registers used:
  1011 ;;		wreg, status,2, status,0, cstack
  1012 ;; Tracked objects:
  1013 ;;		On entry : 0/0
  1014 ;;		On exit  : 0/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1017 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1020 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1021 ;;Total ram usage:        2 bytes
  1022 ;; Hardware stack levels used:    1
  1023 ;; Hardware stack levels required when called:    4
  1024 ;; This function calls:
  1025 ;;		___lmul
  1026 ;; This function is called by:
  1027 ;;		_main
  1028 ;;		_writeResult
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031                           
  1032                           	psect	text4
  1033  0016C0                     __ptext4:
  1034                           	opt stack 0
  1035  0016C0                     _wait_ms:
  1036                           	opt stack 25
  1037                           
  1038                           ;system.c: 37: static long timel = 0;
  1039                           ;system.c: 38: timel = time * 1000l;
  1040                           
  1041                           ;incstack = 0
  1042  0016C0  C0D1  F0C9         	movff	wait_ms@time,___lmul@multiplier
  1043  0016C4  C0D2  F0CA         	movff	wait_ms@time+1,___lmul@multiplier+1
  1044  0016C8  0100               	movlb	0	; () banked
  1045  0016CA  0E00               	movlw	0
  1046  0016CC  BFCA               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  1047  0016CE  0EFF               	movlw	-1
  1048  0016D0  6FCB               	movwf	(___lmul@multiplier+2)& (0+255),b
  1049  0016D2  6FCC               	movwf	(___lmul@multiplier+3)& (0+255),b
  1050  0016D4  0EE8               	movlw	232
  1051  0016D6  0100               	movlb	0	; () banked
  1052  0016D8  6FCD               	movwf	___lmul@multiplicand& (0+255),b
  1053  0016DA  0E03               	movlw	3
  1054  0016DC  6FCE               	movwf	(___lmul@multiplicand+1)& (0+255),b
  1055  0016DE  0E00               	movlw	0
  1056  0016E0  6FCF               	movwf	(___lmul@multiplicand+2)& (0+255),b
  1057  0016E2  0E00               	movlw	0
  1058  0016E4  6FD0               	movwf	(___lmul@multiplicand+3)& (0+255),b
  1059  0016E6  ECFC  F00A         	call	___lmul	;wreg free
  1060  0016EA  C0C9  F038         	movff	?___lmul,wait_ms@timel
  1061  0016EE  C0CA  F039         	movff	?___lmul+1,wait_ms@timel+1
  1062  0016F2  C0CB  F03A         	movff	?___lmul+2,wait_ms@timel+2
  1063  0016F6  C0CC  F03B         	movff	?___lmul+3,wait_ms@timel+3
  1064                           
  1065                           ;system.c: 39: for( ; timel; timel--);
  1066  0016FA  D008               	goto	l73
  1067  0016FC                     l1803:
  1068  0016FC  0EFF               	movlw	255
  1069  0016FE  2638               	addwf	wait_ms@timel,f,c
  1070  001700  0EFF               	movlw	255
  1071  001702  2239               	addwfc	wait_ms@timel+1,f,c
  1072  001704  0EFF               	movlw	255
  1073  001706  223A               	addwfc	wait_ms@timel+2,f,c
  1074  001708  0EFF               	movlw	255
  1075  00170A  223B               	addwfc	wait_ms@timel+3,f,c
  1076  00170C                     l73:
  1077  00170C  5038               	movf	wait_ms@timel,w,c
  1078  00170E  1039               	iorwf	wait_ms@timel+1,w,c
  1079  001710  103A               	iorwf	wait_ms@timel+2,w,c
  1080  001712  103B               	iorwf	wait_ms@timel+3,w,c
  1081  001714  B4D8               	btfsc	status,2,c
  1082  001716  0012               	return	
  1083  001718  D7F1               	goto	l1803
  1084  00171A                     __end_of_wait_ms:
  1085                           	opt stack 0
  1086                           tblptru	equ	0xFF8
  1087                           tblptrh	equ	0xFF7
  1088                           tblptrl	equ	0xFF6
  1089                           tablat	equ	0xFF5
  1090                           indf0	equ	0xFEF
  1091                           postinc0	equ	0xFEE
  1092                           fsr0h	equ	0xFEA
  1093                           fsr0l	equ	0xFE9
  1094                           wreg	equ	0xFE8
  1095                           postdec1	equ	0xFE5
  1096                           fsr1l	equ	0xFE1
  1097                           status	equ	0xFD8
  1098                           
  1099 ;; *************** function ___lmul *****************
  1100 ;; Defined at:
  1101 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1104 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1105 ;; Auto vars:     Size  Location     Type
  1106 ;;  product         4   33[COMRAM] unsigned long 
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  4    0[BANK0 ] unsigned long 
  1109 ;; Registers used:
  1110 ;;		wreg, status,2, status,0
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1116 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1117 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1119 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1120 ;;Total ram usage:       12 bytes
  1121 ;; Hardware stack levels used:    1
  1122 ;; Hardware stack levels required when called:    3
  1123 ;; This function calls:
  1124 ;;		Nothing
  1125 ;; This function is called by:
  1126 ;;		_wait_ms
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           	psect	text5
  1131  0015F8                     __ptext5:
  1132                           	opt stack 0
  1133  0015F8                     ___lmul:
  1134                           	opt stack 25
  1135                           
  1136                           ;incstack = 0
  1137  0015F8  0E00               	movlw	0
  1138  0015FA  6E22               	movwf	___lmul@product,c
  1139  0015FC  0E00               	movlw	0
  1140  0015FE  6E23               	movwf	___lmul@product+1,c
  1141  001600  0E00               	movlw	0
  1142  001602  6E24               	movwf	___lmul@product+2,c
  1143  001604  0E00               	movlw	0
  1144  001606  6E25               	movwf	___lmul@product+3,c
  1145  001608                     l1785:
  1146  001608  0100               	movlb	0	; () banked
  1147  00160A  A1C9               	btfss	___lmul@multiplier& (0+255),0,b
  1148  00160C  D00C               	goto	l1789
  1149                           
  1150                           ; BSR set to: 0
  1151  00160E  0100               	movlb	0	; () banked
  1152  001610  51CD               	movf	___lmul@multiplicand& (0+255),w,b
  1153  001612  2622               	addwf	___lmul@product,f,c
  1154  001614  0100               	movlb	0	; () banked
  1155  001616  51CE               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  1156  001618  2223               	addwfc	___lmul@product+1,f,c
  1157  00161A  0100               	movlb	0	; () banked
  1158  00161C  51CF               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  1159  00161E  2224               	addwfc	___lmul@product+2,f,c
  1160  001620  0100               	movlb	0	; () banked
  1161  001622  51D0               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  1162  001624  2225               	addwfc	___lmul@product+3,f,c
  1163  001626                     l1789:
  1164                           
  1165                           ; BSR set to: 0
  1166  001626  0100               	movlb	0	; () banked
  1167  001628  90D8               	bcf	status,0,c
  1168  00162A  37CD               	rlcf	___lmul@multiplicand& (0+255),f,b
  1169  00162C  37CE               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  1170  00162E  37CF               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  1171  001630  37D0               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  1172                           
  1173                           ; BSR set to: 0
  1174  001632  0100               	movlb	0	; () banked
  1175  001634  90D8               	bcf	status,0,c
  1176  001636  33CC               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  1177  001638  33CB               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  1178  00163A  33CA               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  1179  00163C  33C9               	rrcf	___lmul@multiplier& (0+255),f,b
  1180  00163E  0100               	movlb	0	; () banked
  1181  001640  51C9               	movf	___lmul@multiplier& (0+255),w,b
  1182  001642  0100               	movlb	0	; () banked
  1183  001644  11CA               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  1184  001646  0100               	movlb	0	; () banked
  1185  001648  11CB               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  1186  00164A  0100               	movlb	0	; () banked
  1187  00164C  11CC               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  1188  00164E  A4D8               	btfss	status,2,c
  1189  001650  D7DB               	goto	l1785
  1190                           
  1191                           ; BSR set to: 0
  1192  001652  C022  F0C9         	movff	___lmul@product,?___lmul
  1193  001656  C023  F0CA         	movff	___lmul@product+1,?___lmul+1
  1194  00165A  C024  F0CB         	movff	___lmul@product+2,?___lmul+2
  1195  00165E  C025  F0CC         	movff	___lmul@product+3,?___lmul+3
  1196                           
  1197                           ; BSR set to: 0
  1198  001662  0012               	return		;funcret
  1199  001664                     __end_of___lmul:
  1200                           	opt stack 0
  1201                           tblptru	equ	0xFF8
  1202                           tblptrh	equ	0xFF7
  1203                           tblptrl	equ	0xFF6
  1204                           tablat	equ	0xFF5
  1205                           indf0	equ	0xFEF
  1206                           postinc0	equ	0xFEE
  1207                           fsr0h	equ	0xFEA
  1208                           fsr0l	equ	0xFE9
  1209                           wreg	equ	0xFE8
  1210                           postdec1	equ	0xFE5
  1211                           fsr1l	equ	0xFE1
  1212                           status	equ	0xFD8
  1213                           
  1214 ;; *************** function _parseString *****************
  1215 ;; Defined at:
  1216 ;;		line 98 in file "bufferhandler.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;		None
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;  i               2   30[BANK0 ] int 
  1221 ;;  tmp             2   32[BANK0 ] int 
  1222 ;;  k               2   28[BANK0 ] int 
  1223 ;;  socEndPos       2   26[BANK0 ] int 
  1224 ;;  socStartPos     2   24[BANK0 ] int 
  1225 ;;  chgStart        2   21[BANK0 ] int 
  1226 ;;  socSize         2   19[BANK0 ] int 
  1227 ;;  chgStop         2   16[BANK0 ] int 
  1228 ;;  CHG             1   23[BANK0 ] unsigned char 
  1229 ;;  tmpSOC          1   18[BANK0 ] unsigned char 
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  1    wreg      unsigned char 
  1232 ;; Registers used:
  1233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1240 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1241 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1242 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1243 ;;Total ram usage:       22 bytes
  1244 ;; Hardware stack levels used:    1
  1245 ;; Hardware stack levels required when called:    6
  1246 ;; This function calls:
  1247 ;;		___awdiv
  1248 ;;		___awmod
  1249 ;;		_checkString
  1250 ;;		_lenHelper
  1251 ;;		_transformToTwoDigitNumber
  1252 ;; This function is called by:
  1253 ;;		_main
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           	psect	text6
  1258  000F0C                     __ptext6:
  1259                           	opt stack 0
  1260  000F0C                     _parseString:
  1261                           	opt stack 24
  1262                           
  1263                           ;bufferhandler.c: 100: checkString();
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;incstack = 0
  1267  000F0C  EC20  F009         	call	_checkString	;wreg free
  1268                           
  1269                           ;bufferhandler.c: 106: int socStartPos = positions[8]+2;
  1270  000F10  0E02               	movlw	2
  1271  000F12  0100               	movlb	0	; () banked
  1272  000F14  2570               	addwf	(_positions+16)& (0+255),w,b
  1273  000F16  0100               	movlb	0	; () banked
  1274  000F18  6FE1               	movwf	parseString@socStartPos& (0+255),b
  1275  000F1A  0E00               	movlw	0
  1276  000F1C  0100               	movlb	0	; () banked
  1277  000F1E  2171               	addwfc	(_positions+17)& (0+255),w,b
  1278  000F20  0100               	movlb	0	; () banked
  1279  000F22  6FE2               	movwf	(parseString@socStartPos+1)& (0+255),b
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;bufferhandler.c: 107: int socEndPos = positions[9]-1;
  1283  000F24  0EFF               	movlw	255
  1284  000F26  0100               	movlb	0	; () banked
  1285  000F28  2572               	addwf	(_positions+18)& (0+255),w,b
  1286  000F2A  0100               	movlb	0	; () banked
  1287  000F2C  6FE3               	movwf	parseString@socEndPos& (0+255),b
  1288  000F2E  0EFF               	movlw	255
  1289  000F30  0100               	movlb	0	; () banked
  1290  000F32  2173               	addwfc	(_positions+19)& (0+255),w,b
  1291  000F34  0100               	movlb	0	; () banked
  1292  000F36  6FE4               	movwf	(parseString@socEndPos+1)& (0+255),b
  1293                           
  1294                           ; BSR set to: 0
  1295                           ;bufferhandler.c: 108: int socSize = (socEndPos - socStartPos)+1;
  1296  000F38  C0E1  F0D5         	movff	parseString@socStartPos,??_parseString
  1297  000F3C  C0E2  F0D6         	movff	parseString@socStartPos+1,??_parseString+1
  1298  000F40  0100               	movlb	0	; () banked
  1299  000F42  1FD5               	comf	??_parseString& (0+255),f,b
  1300  000F44  1FD6               	comf	(??_parseString+1)& (0+255),f,b
  1301  000F46  4BD5               	infsnz	??_parseString& (0+255),f,b
  1302  000F48  2BD6               	incf	(??_parseString+1)& (0+255),f,b
  1303  000F4A  0100               	movlb	0	; () banked
  1304  000F4C  51E3               	movf	parseString@socEndPos& (0+255),w,b
  1305  000F4E  0100               	movlb	0	; () banked
  1306  000F50  27D5               	addwf	??_parseString& (0+255),f,b
  1307  000F52  0100               	movlb	0	; () banked
  1308  000F54  51E4               	movf	(parseString@socEndPos+1)& (0+255),w,b
  1309  000F56  0100               	movlb	0	; () banked
  1310  000F58  23D6               	addwfc	(??_parseString+1)& (0+255),f,b
  1311  000F5A  0E01               	movlw	1
  1312  000F5C  0100               	movlb	0	; () banked
  1313  000F5E  25D5               	addwf	??_parseString& (0+255),w,b
  1314  000F60  0100               	movlb	0	; () banked
  1315  000F62  6FDC               	movwf	parseString@socSize& (0+255),b
  1316  000F64  0E00               	movlw	0
  1317  000F66  0100               	movlb	0	; () banked
  1318  000F68  21D6               	addwfc	(??_parseString+1)& (0+255),w,b
  1319  000F6A  0100               	movlb	0	; () banked
  1320  000F6C  6FDD               	movwf	(parseString@socSize+1)& (0+255),b
  1321                           
  1322                           ; BSR set to: 0
  1323                           ;bufferhandler.c: 111: int k = 0;
  1324  000F6E  0E00               	movlw	0
  1325  000F70  0100               	movlb	0	; () banked
  1326  000F72  6FE6               	movwf	(parseString@k+1)& (0+255),b
  1327  000F74  0E00               	movlw	0
  1328  000F76  6FE5               	movwf	parseString@k& (0+255),b
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;bufferhandler.c: 112: for(int i = socStartPos; i<=socEndPos; i++){
  1332  000F78  C0E1  F0E7         	movff	parseString@socStartPos,parseString@i
  1333  000F7C  C0E2  F0E8         	movff	parseString@socStartPos+1,parseString@i+1
  1334  000F80  D041               	goto	l2065
  1335  000F82                     l2057:
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;bufferhandler.c: 113: SOC[k] = allDataString[i] - 48;
  1339  000F82  0ED0               	movlw	208
  1340  000F84  0100               	movlb	0	; () banked
  1341  000F86  6FD5               	movwf	??_parseString& (0+255),b
  1342  000F88  0EFF               	movlw	255
  1343  000F8A  0100               	movlb	0	; () banked
  1344  000F8C  6FD6               	movwf	(??_parseString+1)& (0+255),b
  1345  000F8E  0E00               	movlw	low _allDataString
  1346  000F90  0100               	movlb	0	; () banked
  1347  000F92  25E7               	addwf	parseString@i& (0+255),w,b
  1348  000F94  6ED9               	movwf	fsr2l,c
  1349  000F96  0E01               	movlw	high _allDataString
  1350  000F98  0100               	movlb	0	; () banked
  1351  000F9A  21E8               	addwfc	(parseString@i+1)& (0+255),w,b
  1352  000F9C  6EDA               	movwf	fsr2h,c
  1353  000F9E  50DF               	movf	indf2,w,c
  1354  000FA0  0100               	movlb	0	; () banked
  1355  000FA2  6FD7               	movwf	(??_parseString+2)& (0+255),b
  1356  000FA4  6BD8               	clrf	(??_parseString+3)& (0+255),b
  1357  000FA6  0100               	movlb	0	; () banked
  1358  000FA8  51D5               	movf	??_parseString& (0+255),w,b
  1359  000FAA  0100               	movlb	0	; () banked
  1360  000FAC  27D7               	addwf	(??_parseString+2)& (0+255),f,b
  1361  000FAE  0100               	movlb	0	; () banked
  1362  000FB0  51D6               	movf	(??_parseString+1)& (0+255),w,b
  1363  000FB2  0100               	movlb	0	; () banked
  1364  000FB4  23D8               	addwfc	(??_parseString+3)& (0+255),f,b
  1365  000FB6  90D8               	bcf	status,0,c
  1366  000FB8  0100               	movlb	0	; () banked
  1367  000FBA  35E5               	rlcf	parseString@k& (0+255),w,b
  1368  000FBC  6ED9               	movwf	fsr2l,c
  1369  000FBE  0100               	movlb	0	; () banked
  1370  000FC0  35E6               	rlcf	(parseString@k+1)& (0+255),w,b
  1371  000FC2  6EDA               	movwf	fsr2h,c
  1372  000FC4  0EC3               	movlw	low _SOC
  1373  000FC6  26D9               	addwf	fsr2l,f,c
  1374  000FC8  0E00               	movlw	high _SOC
  1375  000FCA  22DA               	addwfc	fsr2h,f,c
  1376  000FCC  C0D7  FFDE         	movff	??_parseString+2,postinc2
  1377  000FD0  C0D8  FFDD         	movff	??_parseString+3,postdec2
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;bufferhandler.c: 114: toCharArray[k] = allDataString[i];
  1381  000FD4  0E00               	movlw	low _allDataString
  1382  000FD6  0100               	movlb	0	; () banked
  1383  000FD8  25E7               	addwf	parseString@i& (0+255),w,b
  1384  000FDA  6ED9               	movwf	fsr2l,c
  1385  000FDC  0E01               	movlw	high _allDataString
  1386  000FDE  0100               	movlb	0	; () banked
  1387  000FE0  21E8               	addwfc	(parseString@i+1)& (0+255),w,b
  1388  000FE2  6EDA               	movwf	fsr2h,c
  1389  000FE4  0E76               	movlw	low _toCharArray
  1390  000FE6  0100               	movlb	0	; () banked
  1391  000FE8  25E5               	addwf	parseString@k& (0+255),w,b
  1392  000FEA  6EE1               	movwf	fsr1l,c
  1393  000FEC  0E00               	movlw	high _toCharArray
  1394  000FEE  0100               	movlb	0	; () banked
  1395  000FF0  21E6               	addwfc	(parseString@k+1)& (0+255),w,b
  1396  000FF2  6EE2               	movwf	fsr1h,c
  1397  000FF4  CFDF FFE7          	movff	indf2,indf1
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;bufferhandler.c: 115: k++;
  1401  000FF8  0100               	movlb	0	; () banked
  1402  000FFA  4BE5               	infsnz	parseString@k& (0+255),f,b
  1403  000FFC  2BE6               	incf	(parseString@k+1)& (0+255),f,b
  1404                           
  1405                           ; BSR set to: 0
  1406  000FFE  0100               	movlb	0	; () banked
  1407  001000  4BE7               	infsnz	parseString@i& (0+255),f,b
  1408  001002  2BE8               	incf	(parseString@i+1)& (0+255),f,b
  1409  001004                     l2065:
  1410                           
  1411                           ; BSR set to: 0
  1412  001004  0100               	movlb	0	; () banked
  1413  001006  51E7               	movf	parseString@i& (0+255),w,b
  1414  001008  0100               	movlb	0	; () banked
  1415  00100A  5DE3               	subwf	parseString@socEndPos& (0+255),w,b
  1416  00100C  0100               	movlb	0	; () banked
  1417  00100E  51E4               	movf	(parseString@socEndPos+1)& (0+255),w,b
  1418  001010  0A80               	xorlw	128
  1419  001012  0100               	movlb	0	; () banked
  1420  001014  6FD5               	movwf	??_parseString& (0+255),b
  1421  001016  0100               	movlb	0	; () banked
  1422  001018  51E8               	movf	(parseString@i+1)& (0+255),w,b
  1423  00101A  0A80               	xorlw	128
  1424  00101C  0100               	movlb	0	; () banked
  1425  00101E  59D5               	subwfb	??_parseString& (0+255),w,b
  1426  001020  B0D8               	btfsc	status,0,c
  1427  001022  D7AF               	goto	l2057
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;bufferhandler.c: 116: }
  1431                           ;bufferhandler.c: 117: toCharArray[3] = '\0';
  1432                           
  1433                           ; BSR set to: 0
  1434  001024  0E00               	movlw	0
  1435  001026  0100               	movlb	0	; () banked
  1436  001028  6F79               	movwf	(_toCharArray+3)& (0+255),b
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;bufferhandler.c: 121: int tmp = transformToTwoDigitNumber(SOC, socSize);
  1440  00102A  0EC3               	movlw	low _SOC
  1441  00102C  0100               	movlb	0	; () banked
  1442  00102E  6FCB               	movwf	transformToTwoDigitNumber@number& (0+255),b
  1443  001030  0E00               	movlw	high _SOC
  1444  001032  0100               	movlb	0	; () banked
  1445  001034  6FCC               	movwf	(transformToTwoDigitNumber@number+1)& (0+255),b
  1446  001036  C0DC  F0CD         	movff	parseString@socSize,transformToTwoDigitNumber@size
  1447  00103A  C0DD  F0CE         	movff	parseString@socSize+1,transformToTwoDigitNumber@size+1
  1448  00103E  EC81  F008         	call	_transformToTwoDigitNumber	;wreg free
  1449  001042  C0CB  F0E9         	movff	?_transformToTwoDigitNumber,parseString@tmp
  1450  001046  C0CC  F0EA         	movff	?_transformToTwoDigitNumber+1,parseString@tmp+1
  1451                           
  1452                           ;bufferhandler.c: 122: char tmpSOC = 'a';
  1453  00104A  0E61               	movlw	97
  1454  00104C  0100               	movlb	0	; () banked
  1455  00104E  6FDB               	movwf	parseString@tmpSOC& (0+255),b
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;bufferhandler.c: 124: if(lenHelper(tmp) == 1){
  1459  001050  C0E9  F022         	movff	parseString@tmp,lenHelper@x
  1460  001054  C0EA  F023         	movff	parseString@tmp+1,lenHelper@x+1
  1461  001058  ECBA  F00B         	call	_lenHelper	;wreg free
  1462  00105C  0422               	decf	?_lenHelper,w,c
  1463  00105E  1023               	iorwf	?_lenHelper+1,w,c
  1464  001060  A4D8               	btfss	status,2,c
  1465  001062  D006               	goto	l2077
  1466                           
  1467                           ;bufferhandler.c: 125: charSOC[0] = (tmp) + 48;
  1468  001064  0100               	movlb	0	; () banked
  1469  001066  51E9               	movf	parseString@tmp& (0+255),w,b
  1470  001068  0F30               	addlw	48
  1471  00106A  0100               	movlb	0	; () banked
  1472  00106C  6F7A               	movwf	_charSOC& (0+255),b
  1473                           
  1474                           ;bufferhandler.c: 126: }else{
  1475  00106E  D01C               	goto	l2079
  1476  001070                     l2077:
  1477                           
  1478                           ;bufferhandler.c: 127: charSOC[0] = (tmp/10) + 48;
  1479  001070  C0E9  F022         	movff	parseString@tmp,___awdiv@dividend
  1480  001074  C0EA  F023         	movff	parseString@tmp+1,___awdiv@dividend+1
  1481  001078  0E00               	movlw	0
  1482  00107A  6E25               	movwf	___awdiv@divisor+1,c
  1483  00107C  0E0A               	movlw	10
  1484  00107E  6E24               	movwf	___awdiv@divisor,c
  1485  001080  ECE9  F009         	call	___awdiv	;wreg free
  1486  001084  5022               	movf	?___awdiv,w,c
  1487  001086  0F30               	addlw	48
  1488  001088  0100               	movlb	0	; () banked
  1489  00108A  6F7A               	movwf	_charSOC& (0+255),b
  1490                           
  1491                           ;bufferhandler.c: 128: charSOC[1] = (tmp%10) + 48;
  1492  00108C  C0E9  F022         	movff	parseString@tmp,___awmod@dividend
  1493  001090  C0EA  F023         	movff	parseString@tmp+1,___awmod@dividend+1
  1494  001094  0E00               	movlw	0
  1495  001096  6E25               	movwf	___awmod@divisor+1,c
  1496  001098  0E0A               	movlw	10
  1497  00109A  6E24               	movwf	___awmod@divisor,c
  1498  00109C  EC84  F00A         	call	___awmod	;wreg free
  1499  0010A0  5022               	movf	?___awmod,w,c
  1500  0010A2  0F30               	addlw	48
  1501  0010A4  0100               	movlb	0	; () banked
  1502  0010A6  6F7B               	movwf	(_charSOC+1)& (0+255),b
  1503  0010A8                     l2079:
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;bufferhandler.c: 129: }
  1507                           ;bufferhandler.c: 133: int chgStart = positions[6] + 1;
  1508  0010A8  0E01               	movlw	1
  1509  0010AA  0100               	movlb	0	; () banked
  1510  0010AC  256C               	addwf	(_positions+12)& (0+255),w,b
  1511  0010AE  0100               	movlb	0	; () banked
  1512  0010B0  6FDE               	movwf	parseString@chgStart& (0+255),b
  1513  0010B2  0E00               	movlw	0
  1514  0010B4  0100               	movlb	0	; () banked
  1515  0010B6  216D               	addwfc	(_positions+13)& (0+255),w,b
  1516  0010B8  0100               	movlb	0	; () banked
  1517  0010BA  6FDF               	movwf	(parseString@chgStart+1)& (0+255),b
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;bufferhandler.c: 134: int chgStop = positions[7] - 1;
  1521  0010BC  0EFF               	movlw	255
  1522  0010BE  0100               	movlb	0	; () banked
  1523  0010C0  256E               	addwf	(_positions+14)& (0+255),w,b
  1524  0010C2  0100               	movlb	0	; () banked
  1525  0010C4  6FD9               	movwf	parseString@chgStop& (0+255),b
  1526  0010C6  0EFF               	movlw	255
  1527  0010C8  0100               	movlb	0	; () banked
  1528  0010CA  216F               	addwfc	(_positions+15)& (0+255),w,b
  1529  0010CC  0100               	movlb	0	; () banked
  1530  0010CE  6FDA               	movwf	(parseString@chgStop+1)& (0+255),b
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;bufferhandler.c: 137: char CHG = '0';
  1534  0010D0  0E30               	movlw	48
  1535  0010D2  0100               	movlb	0	; () banked
  1536  0010D4  6FE0               	movwf	parseString@CHG& (0+255),b
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;bufferhandler.c: 139: if(allDataString[chgStart] == 0x2D){
  1540  0010D6  0E00               	movlw	low _allDataString
  1541  0010D8  0100               	movlb	0	; () banked
  1542  0010DA  25DE               	addwf	parseString@chgStart& (0+255),w,b
  1543  0010DC  6ED9               	movwf	fsr2l,c
  1544  0010DE  0E01               	movlw	high _allDataString
  1545  0010E0  0100               	movlb	0	; () banked
  1546  0010E2  21DF               	addwfc	(parseString@chgStart+1)& (0+255),w,b
  1547  0010E4  6EDA               	movwf	fsr2h,c
  1548  0010E6  0E2D               	movlw	45
  1549  0010E8  18DE               	xorwf	postinc2,w,c
  1550  0010EA  A4D8               	btfss	status,2,c
  1551  0010EC  D003               	goto	l2089
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;bufferhandler.c: 140: CHG = '1';
  1555  0010EE  0E31               	movlw	49
  1556  0010F0  0100               	movlb	0	; () banked
  1557  0010F2  6FE0               	movwf	parseString@CHG& (0+255),b
  1558  0010F4                     l2089:
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;bufferhandler.c: 141: }
  1562                           ;bufferhandler.c: 144: parsedString[3] = charSOC[0];
  1563  0010F4  C07A  F02A         	movff	_charSOC,_parsedString+3
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;bufferhandler.c: 145: parsedString[4] = charSOC[1];
  1567  0010F8  C07B  F02B         	movff	_charSOC+1,_parsedString+4
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;bufferhandler.c: 149: parsedString[9] = CHG;
  1571  0010FC  C0E0  F030         	movff	parseString@CHG,_parsedString+9
  1572  001100  0012               	return	
  1573  001102                     __end_of_parseString:
  1574                           	opt stack 0
  1575                           tblptru	equ	0xFF8
  1576                           tblptrh	equ	0xFF7
  1577                           tblptrl	equ	0xFF6
  1578                           tablat	equ	0xFF5
  1579                           indf0	equ	0xFEF
  1580                           postinc0	equ	0xFEE
  1581                           fsr0h	equ	0xFEA
  1582                           fsr0l	equ	0xFE9
  1583                           wreg	equ	0xFE8
  1584                           indf1	equ	0xFE7
  1585                           postdec1	equ	0xFE5
  1586                           fsr1h	equ	0xFE2
  1587                           fsr1l	equ	0xFE1
  1588                           indf2	equ	0xFDF
  1589                           postinc2	equ	0xFDE
  1590                           postdec2	equ	0xFDD
  1591                           fsr2h	equ	0xFDA
  1592                           fsr2l	equ	0xFD9
  1593                           status	equ	0xFD8
  1594                           
  1595 ;; *************** function _transformToTwoDigitNumber *****************
  1596 ;; Defined at:
  1597 ;;		line 169 in file "bufferhandler.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;  number          2    2[BANK0 ] PTR int 
  1600 ;;		 -> SOC(6), 
  1601 ;;  size            2    4[BANK0 ] int 
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;  result          2    8[BANK0 ] int 
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  2    2[BANK0 ] int 
  1606 ;; Registers used:
  1607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1613 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1614 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1615 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1616 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1617 ;;Total ram usage:        8 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    4
  1620 ;; This function calls:
  1621 ;;		___wmul
  1622 ;; This function is called by:
  1623 ;;		_parseString
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627                           	psect	text7
  1628  001102                     __ptext7:
  1629                           	opt stack 0
  1630  001102                     _transformToTwoDigitNumber:
  1631                           	opt stack 25
  1632                           
  1633                           ;bufferhandler.c: 171: int result = 0;
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;incstack = 0
  1637  001102  0E00               	movlw	0
  1638  001104  0100               	movlb	0	; () banked
  1639  001106  6FD2               	movwf	(transformToTwoDigitNumber@result+1)& (0+255),b
  1640  001108  0E00               	movlw	0
  1641  00110A  6FD1               	movwf	transformToTwoDigitNumber@result& (0+255),b
  1642                           
  1643                           ;bufferhandler.c: 172: switch(size){
  1644  00110C  D07F               	goto	l1857
  1645  00110E                     l1823:
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;bufferhandler.c: 174: if(number[0] >= 5){
  1649  00110E  C0CB  FFD9         	movff	transformToTwoDigitNumber@number,fsr2l
  1650  001112  C0CC  FFDA         	movff	transformToTwoDigitNumber@number+1,fsr2h
  1651  001116  0E01               	movlw	1
  1652  001118  BEDB               	btfsc	plusw2,7,c
  1653  00111A  D00D               	goto	l1831
  1654  00111C  0E01               	movlw	1
  1655  00111E  50DB               	movf	plusw2,w,c
  1656  001120  E104               	bnz	u1170
  1657  001122  0E05               	movlw	5
  1658  001124  5CDE               	subwf	postinc2,w,c
  1659  001126  A0D8               	btfss	status,0,c
  1660  001128  D006               	goto	l1831
  1661  00112A                     u1170:
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;bufferhandler.c: 175: return 1;
  1665  00112A  0E00               	movlw	0
  1666  00112C  0100               	movlb	0	; () banked
  1667  00112E  6FCC               	movwf	(?_transformToTwoDigitNumber+1)& (0+255),b
  1668  001130  0E01               	movlw	1
  1669  001132  6FCB               	movwf	?_transformToTwoDigitNumber& (0+255),b
  1670                           
  1671                           ; BSR set to: 0
  1672  001134  0012               	return	
  1673  001136                     l1831:
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;bufferhandler.c: 177: return 0;
  1677  001136  0E00               	movlw	0
  1678  001138  0100               	movlb	0	; () banked
  1679  00113A  6FCC               	movwf	(?_transformToTwoDigitNumber+1)& (0+255),b
  1680  00113C  0E00               	movlw	0
  1681  00113E  D7F9               	goto	L1
  1682  001140                     l1835:
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;bufferhandler.c: 180: result = number[0];
  1686  001140  C0CB  FFD9         	movff	transformToTwoDigitNumber@number,fsr2l
  1687  001144  C0CC  FFDA         	movff	transformToTwoDigitNumber@number+1,fsr2h
  1688  001148  CFDE F0D1          	movff	postinc2,transformToTwoDigitNumber@result
  1689  00114C  CFDD F0D2          	movff	postdec2,transformToTwoDigitNumber@result+1
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;bufferhandler.c: 181: if(number[1] >= 5){
  1693  001150  0100               	movlb	0	; () banked
  1694  001152  EE20 F002          	lfsr	2,2
  1695  001156  51CB               	movf	transformToTwoDigitNumber@number& (0+255),w,b
  1696  001158  26D9               	addwf	fsr2l,f,c
  1697  00115A  51CC               	movf	(transformToTwoDigitNumber@number+1)& (0+255),w,b
  1698  00115C  22DA               	addwfc	fsr2h,f,c
  1699  00115E  0E01               	movlw	1
  1700  001160  BEDB               	btfsc	plusw2,7,c
  1701  001162  D013               	goto	l262
  1702  001164  0E01               	movlw	1
  1703  001166  50DB               	movf	plusw2,w,c
  1704  001168  E104               	bnz	u1180
  1705  00116A  0E05               	movlw	5
  1706  00116C  5CDE               	subwf	postinc2,w,c
  1707  00116E  A0D8               	btfss	status,0,c
  1708  001170  D00C               	goto	l262
  1709  001172                     u1180:
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;bufferhandler.c: 182: return result++;
  1713  001172  0100               	movlb	0	; () banked
  1714  001174  51D1               	movf	transformToTwoDigitNumber@result& (0+255),w,b
  1715  001176  0100               	movlb	0	; () banked
  1716  001178  6FCB               	movwf	?_transformToTwoDigitNumber& (0+255),b
  1717  00117A  0100               	movlb	0	; () banked
  1718  00117C  51D2               	movf	(transformToTwoDigitNumber@result+1)& (0+255),w,b
  1719  00117E  0100               	movlb	0	; () banked
  1720  001180  6FCC               	movwf	(?_transformToTwoDigitNumber+1)& (0+255),b
  1721  001182  0100               	movlb	0	; () banked
  1722  001184  4BD1               	infsnz	transformToTwoDigitNumber@result& (0+255),f,b
  1723  001186  2BD2               	incf	(transformToTwoDigitNumber@result+1)& (0+255),f,b
  1724                           
  1725                           ; BSR set to: 0
  1726  001188  0012               	return	
  1727  00118A                     l262:
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;bufferhandler.c: 184: return result;
  1731  00118A  C0D1  F0CB         	movff	transformToTwoDigitNumber@result,?_transformToTwoDigitNumber
  1732  00118E  C0D2  F0CC         	movff	transformToTwoDigitNumber@result+1,?_transformToTwoDigitNumber+1
  1733  001192  0012               	return	
  1734  001194                     l1845:
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;bufferhandler.c: 187: result = (number[0]*10)+(number[1]);
  1738  001194  0100               	movlb	0	; () banked
  1739  001196  EE20 F002          	lfsr	2,2
  1740  00119A  51CB               	movf	transformToTwoDigitNumber@number& (0+255),w,b
  1741  00119C  26D9               	addwf	fsr2l,f,c
  1742  00119E  51CC               	movf	(transformToTwoDigitNumber@number+1)& (0+255),w,b
  1743  0011A0  22DA               	addwfc	fsr2h,f,c
  1744  0011A2  CFDE F0CF          	movff	postinc2,??_transformToTwoDigitNumber
  1745  0011A6  CFDD F0D0          	movff	postdec2,??_transformToTwoDigitNumber+1
  1746  0011AA  C0CB  FFD9         	movff	transformToTwoDigitNumber@number,fsr2l
  1747  0011AE  C0CC  FFDA         	movff	transformToTwoDigitNumber@number+1,fsr2h
  1748  0011B2  CFDE F022          	movff	postinc2,___wmul@multiplier
  1749  0011B6  CFDD F023          	movff	postdec2,___wmul@multiplier+1
  1750  0011BA  0E00               	movlw	0
  1751  0011BC  6E25               	movwf	___wmul@multiplicand+1,c
  1752  0011BE  0E0A               	movlw	10
  1753  0011C0  6E24               	movwf	___wmul@multiplicand,c
  1754  0011C2  ECA9  F00C         	call	___wmul	;wreg free
  1755  0011C6  0100               	movlb	0	; () banked
  1756  0011C8  51CF               	movf	??_transformToTwoDigitNumber& (0+255),w,b
  1757  0011CA  2422               	addwf	?___wmul,w,c
  1758  0011CC  0100               	movlb	0	; () banked
  1759  0011CE  6FD1               	movwf	transformToTwoDigitNumber@result& (0+255),b
  1760  0011D0  0100               	movlb	0	; () banked
  1761  0011D2  51D0               	movf	(??_transformToTwoDigitNumber+1)& (0+255),w,b
  1762  0011D4  2023               	addwfc	?___wmul+1,w,c
  1763  0011D6  0100               	movlb	0	; () banked
  1764  0011D8  6FD2               	movwf	(transformToTwoDigitNumber@result+1)& (0+255),b
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;bufferhandler.c: 188: if(number[2] >= 5){
  1768  0011DA  0100               	movlb	0	; () banked
  1769  0011DC  EE20 F004          	lfsr	2,4
  1770  0011E0  51CB               	movf	transformToTwoDigitNumber@number& (0+255),w,b
  1771  0011E2  26D9               	addwf	fsr2l,f,c
  1772  0011E4  51CC               	movf	(transformToTwoDigitNumber@number+1)& (0+255),w,b
  1773  0011E6  22DA               	addwfc	fsr2h,f,c
  1774  0011E8  0E01               	movlw	1
  1775  0011EA  BEDB               	btfsc	plusw2,7,c
  1776  0011EC  D00A               	goto	l1851
  1777  0011EE  0E01               	movlw	1
  1778  0011F0  50DB               	movf	plusw2,w,c
  1779  0011F2  E104               	bnz	u1190
  1780  0011F4  0E05               	movlw	5
  1781  0011F6  5CDE               	subwf	postinc2,w,c
  1782  0011F8  A0D8               	btfss	status,0,c
  1783  0011FA  D003               	goto	l1851
  1784  0011FC                     u1190:
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;bufferhandler.c: 189: result++;
  1788  0011FC  0100               	movlb	0	; () banked
  1789  0011FE  4BD1               	infsnz	transformToTwoDigitNumber@result& (0+255),f,b
  1790  001200  2BD2               	incf	(transformToTwoDigitNumber@result+1)& (0+255),f,b
  1791  001202                     l1851:
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;bufferhandler.c: 190: return result;
  1795  001202  C0D1  F0CB         	movff	transformToTwoDigitNumber@result,?_transformToTwoDigitNumber
  1796  001206  C0D2  F0CC         	movff	transformToTwoDigitNumber@result+1,?_transformToTwoDigitNumber+1
  1797                           
  1798                           ; BSR set to: 0
  1799  00120A  0012               	return	
  1800  00120C                     l1857:
  1801                           
  1802                           ; BSR set to: 0
  1803  00120C  C0CD  F0CF         	movff	transformToTwoDigitNumber@size,??_transformToTwoDigitNumber
  1804  001210  C0CE  F0D0         	movff	transformToTwoDigitNumber@size+1,??_transformToTwoDigitNumber+1
  1805                           
  1806                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1807                           ; Switch size 1, requested type "space"
  1808                           ; Number of cases is 1, Range of values is 0 to 0
  1809                           ; switch strategies available:
  1810                           ; Name         Instructions Cycles
  1811                           ; simple_byte            4     3 (average)
  1812                           ;	Chosen strategy is simple_byte
  1813  001214  0100               	movlb	0	; () banked
  1814  001216  51D0               	movf	(??_transformToTwoDigitNumber+1)& (0+255),w,b
  1815  001218  0A00               	xorlw	0	; case 0
  1816  00121A  A4D8               	btfss	status,2,c
  1817  00121C  D00B               	goto	l1859
  1818                           
  1819                           ; BSR set to: 0
  1820                           ; Switch size 1, requested type "space"
  1821                           ; Number of cases is 3, Range of values is 1 to 3
  1822                           ; switch strategies available:
  1823                           ; Name         Instructions Cycles
  1824                           ; simple_byte           10     6 (average)
  1825                           ;	Chosen strategy is simple_byte
  1826  00121E  0100               	movlb	0	; () banked
  1827  001220  51CF               	movf	??_transformToTwoDigitNumber& (0+255),w,b
  1828  001222  0A01               	xorlw	1	; case 1
  1829  001224  B4D8               	btfsc	status,2,c
  1830  001226  D773               	goto	l1823
  1831  001228  0A03               	xorlw	3	; case 2
  1832  00122A  B4D8               	btfsc	status,2,c
  1833  00122C  D789               	goto	l1835
  1834  00122E  0A01               	xorlw	1	; case 3
  1835  001230  B4D8               	btfsc	status,2,c
  1836  001232  D7B0               	goto	l1845
  1837  001234                     l1859:
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;bufferhandler.c: 196: return 1;
  1841  001234  0E00               	movlw	0
  1842  001236  0100               	movlb	0	; () banked
  1843  001238  6FCC               	movwf	(?_transformToTwoDigitNumber+1)& (0+255),b
  1844  00123A  0E01               	movlw	1
  1845  00123C  6FCB               	movwf	?_transformToTwoDigitNumber& (0+255),b
  1846  00123E  0012               	return	
  1847  001240                     __end_of_transformToTwoDigitNumber:
  1848                           	opt stack 0
  1849                           tblptru	equ	0xFF8
  1850                           tblptrh	equ	0xFF7
  1851                           tblptrl	equ	0xFF6
  1852                           tablat	equ	0xFF5
  1853                           indf0	equ	0xFEF
  1854                           postinc0	equ	0xFEE
  1855                           fsr0h	equ	0xFEA
  1856                           fsr0l	equ	0xFE9
  1857                           wreg	equ	0xFE8
  1858                           indf1	equ	0xFE7
  1859                           postdec1	equ	0xFE5
  1860                           fsr1h	equ	0xFE2
  1861                           fsr1l	equ	0xFE1
  1862                           indf2	equ	0xFDF
  1863                           postinc2	equ	0xFDE
  1864                           postdec2	equ	0xFDD
  1865                           plusw2	equ	0xFDB
  1866                           fsr2h	equ	0xFDA
  1867                           fsr2l	equ	0xFD9
  1868                           status	equ	0xFD8
  1869                           
  1870 ;; *************** function ___wmul *****************
  1871 ;; Defined at:
  1872 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;  multiplier      2   33[COMRAM] unsigned int 
  1875 ;;  multiplicand    2   35[COMRAM] unsigned int 
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;  product         2    0[BANK0 ] unsigned int 
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  2   33[COMRAM] unsigned int 
  1880 ;; Registers used:
  1881 ;;		wreg, status,2, status,0, prodl, prodh
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1887 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1888 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1890 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1891 ;;Total ram usage:        6 bytes
  1892 ;; Hardware stack levels used:    1
  1893 ;; Hardware stack levels required when called:    3
  1894 ;; This function calls:
  1895 ;;		Nothing
  1896 ;; This function is called by:
  1897 ;;		_transformToTwoDigitNumber
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           	psect	text8
  1902  001952                     __ptext8:
  1903                           	opt stack 0
  1904  001952                     ___wmul:
  1905                           	opt stack 25
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;incstack = 0
  1909  001952  5022               	movf	___wmul@multiplier,w,c
  1910  001954  0224               	mulwf	___wmul@multiplicand,c
  1911  001956  CFF3 F0C9          	movff	prodl,___wmul@product
  1912  00195A  CFF4 F0CA          	movff	prodh,___wmul@product+1
  1913  00195E  5022               	movf	___wmul@multiplier,w,c
  1914  001960  0225               	mulwf	___wmul@multiplicand+1,c
  1915  001962  50F3               	movf	prodl,w,c
  1916  001964  0100               	movlb	0	; () banked
  1917  001966  27CA               	addwf	(___wmul@product+1)& (0+255),f,b
  1918  001968  5023               	movf	___wmul@multiplier+1,w,c
  1919  00196A  0224               	mulwf	___wmul@multiplicand,c
  1920  00196C  50F3               	movf	prodl,w,c
  1921  00196E  0100               	movlb	0	; () banked
  1922  001970  27CA               	addwf	(___wmul@product+1)& (0+255),f,b
  1923                           
  1924                           ; BSR set to: 0
  1925  001972  C0C9  F022         	movff	___wmul@product,?___wmul
  1926  001976  C0CA  F023         	movff	___wmul@product+1,?___wmul+1
  1927  00197A  0012               	return	
  1928  00197C                     __end_of___wmul:
  1929                           	opt stack 0
  1930                           tblptru	equ	0xFF8
  1931                           tblptrh	equ	0xFF7
  1932                           tblptrl	equ	0xFF6
  1933                           tablat	equ	0xFF5
  1934                           prodh	equ	0xFF4
  1935                           prodl	equ	0xFF3
  1936                           indf0	equ	0xFEF
  1937                           postinc0	equ	0xFEE
  1938                           fsr0h	equ	0xFEA
  1939                           fsr0l	equ	0xFE9
  1940                           wreg	equ	0xFE8
  1941                           indf1	equ	0xFE7
  1942                           postdec1	equ	0xFE5
  1943                           fsr1h	equ	0xFE2
  1944                           fsr1l	equ	0xFE1
  1945                           indf2	equ	0xFDF
  1946                           postinc2	equ	0xFDE
  1947                           postdec2	equ	0xFDD
  1948                           plusw2	equ	0xFDB
  1949                           fsr2h	equ	0xFDA
  1950                           fsr2l	equ	0xFD9
  1951                           status	equ	0xFD8
  1952                           
  1953 ;; *************** function _lenHelper *****************
  1954 ;; Defined at:
  1955 ;;		line 158 in file "bufferhandler.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;  x               2   33[COMRAM] int 
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;		None
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  2   33[COMRAM] int 
  1962 ;; Registers used:
  1963 ;;		wreg, status,2, status,0
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1969 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1972 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1973 ;;Total ram usage:        2 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    3
  1976 ;; This function calls:
  1977 ;;		Nothing
  1978 ;; This function is called by:
  1979 ;;		_parseString
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text9
  1984  001774                     __ptext9:
  1985                           	opt stack 0
  1986  001774                     _lenHelper:
  1987                           	opt stack 26
  1988                           
  1989                           ;bufferhandler.c: 159: if(x>=1000) return 4;
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;incstack = 0
  1993  001774  BE23               	btfsc	lenHelper@x+1,7,c
  1994  001776  D00B               	goto	l1875
  1995  001778  0EE8               	movlw	232
  1996  00177A  5C22               	subwf	lenHelper@x,w,c
  1997  00177C  0E03               	movlw	3
  1998  00177E  5823               	subwfb	lenHelper@x+1,w,c
  1999  001780  A0D8               	btfss	status,0,c
  2000  001782  D005               	goto	l1875
  2001  001784  0E00               	movlw	0
  2002  001786  6E23               	movwf	?_lenHelper+1,c
  2003  001788  0E04               	movlw	4
  2004  00178A  6E22               	movwf	?_lenHelper,c
  2005  00178C  0012               	return	
  2006  00178E                     l1875:
  2007                           
  2008                           ;bufferhandler.c: 160: if(x>=100) return 3;
  2009  00178E  BE23               	btfsc	lenHelper@x+1,7,c
  2010  001790  D00B               	goto	l1881
  2011  001792  5023               	movf	lenHelper@x+1,w,c
  2012  001794  E104               	bnz	u1210
  2013  001796  0E64               	movlw	100
  2014  001798  5C22               	subwf	lenHelper@x,w,c
  2015  00179A  A0D8               	btfss	status,0,c
  2016  00179C  D005               	goto	l1881
  2017  00179E                     u1210:
  2018  00179E  0E00               	movlw	0
  2019  0017A0  6E23               	movwf	?_lenHelper+1,c
  2020  0017A2  0E03               	movlw	3
  2021  0017A4  6E22               	movwf	?_lenHelper,c
  2022  0017A6  0012               	return	
  2023  0017A8                     l1881:
  2024                           
  2025                           ;bufferhandler.c: 161: if(x>=10) return 2;
  2026  0017A8  BE23               	btfsc	lenHelper@x+1,7,c
  2027  0017AA  D00B               	goto	l1887
  2028  0017AC  5023               	movf	lenHelper@x+1,w,c
  2029  0017AE  E104               	bnz	u1220
  2030  0017B0  0E0A               	movlw	10
  2031  0017B2  5C22               	subwf	lenHelper@x,w,c
  2032  0017B4  A0D8               	btfss	status,0,c
  2033  0017B6  D005               	goto	l1887
  2034  0017B8                     u1220:
  2035  0017B8  0E00               	movlw	0
  2036  0017BA  6E23               	movwf	?_lenHelper+1,c
  2037  0017BC  0E02               	movlw	2
  2038  0017BE  6E22               	movwf	?_lenHelper,c
  2039  0017C0  0012               	return	
  2040  0017C2                     l1887:
  2041                           
  2042                           ;bufferhandler.c: 162: return 1;
  2043  0017C2  0E00               	movlw	0
  2044  0017C4  6E23               	movwf	?_lenHelper+1,c
  2045  0017C6  0E01               	movlw	1
  2046  0017C8  6E22               	movwf	?_lenHelper,c
  2047  0017CA  0012               	return	
  2048  0017CC                     __end_of_lenHelper:
  2049                           	opt stack 0
  2050                           tblptru	equ	0xFF8
  2051                           tblptrh	equ	0xFF7
  2052                           tblptrl	equ	0xFF6
  2053                           tablat	equ	0xFF5
  2054                           prodh	equ	0xFF4
  2055                           prodl	equ	0xFF3
  2056                           indf0	equ	0xFEF
  2057                           postinc0	equ	0xFEE
  2058                           fsr0h	equ	0xFEA
  2059                           fsr0l	equ	0xFE9
  2060                           wreg	equ	0xFE8
  2061                           indf1	equ	0xFE7
  2062                           postdec1	equ	0xFE5
  2063                           fsr1h	equ	0xFE2
  2064                           fsr1l	equ	0xFE1
  2065                           indf2	equ	0xFDF
  2066                           postinc2	equ	0xFDE
  2067                           postdec2	equ	0xFDD
  2068                           plusw2	equ	0xFDB
  2069                           fsr2h	equ	0xFDA
  2070                           fsr2l	equ	0xFD9
  2071                           status	equ	0xFD8
  2072                           
  2073 ;; *************** function _checkString *****************
  2074 ;; Defined at:
  2075 ;;		line 202 in file "bufferhandler.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;		None
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;  i               2   10[BANK0 ] int 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      void 
  2082 ;; Registers used:
  2083 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2090 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2091 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2092 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2093 ;;Total ram usage:        6 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    5
  2096 ;; This function calls:
  2097 ;;		_checkPos
  2098 ;; This function is called by:
  2099 ;;		_parseString
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text10
  2104  001240                     __ptext10:
  2105                           	opt stack 0
  2106  001240                     _checkString:
  2107                           	opt stack 24
  2108                           
  2109                           ;bufferhandler.c: 207: positions[0] = 8;
  2110                           
  2111                           ;incstack = 0
  2112  001240  0E00               	movlw	0
  2113  001242  0100               	movlb	0	; () banked
  2114  001244  6F61               	movwf	(_positions+1)& (0+255),b
  2115  001246  0E08               	movlw	8
  2116  001248  6F60               	movwf	_positions& (0+255),b
  2117                           
  2118                           ;bufferhandler.c: 209: for(int i = 0; i<10;i++){
  2119  00124A  0E00               	movlw	0
  2120  00124C  0100               	movlb	0	; () banked
  2121  00124E  6FD4               	movwf	(checkString@i+1)& (0+255),b
  2122  001250  0E00               	movlw	0
  2123  001252  6FD3               	movwf	checkString@i& (0+255),b
  2124  001254                     l1807:
  2125                           
  2126                           ; BSR set to: 0
  2127  001254  0100               	movlb	0	; () banked
  2128  001256  BFD4               	btfsc	(checkString@i+1)& (0+255),7,b
  2129  001258  D008               	goto	l1811
  2130  00125A  0100               	movlb	0	; () banked
  2131  00125C  51D4               	movf	(checkString@i+1)& (0+255),w,b
  2132  00125E  E158               	bnz	l1819
  2133  001260  0E0A               	movlw	10
  2134  001262  0100               	movlb	0	; () banked
  2135  001264  5DD3               	subwf	checkString@i& (0+255),w,b
  2136  001266  B0D8               	btfsc	status,0,c
  2137  001268  D053               	goto	l1819
  2138  00126A                     l1811:
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;bufferhandler.c: 210: positions[i] = checkPos(positions[i]);
  2142  00126A  90D8               	bcf	status,0,c
  2143  00126C  0100               	movlb	0	; () banked
  2144  00126E  35D3               	rlcf	checkString@i& (0+255),w,b
  2145  001270  6ED9               	movwf	fsr2l,c
  2146  001272  0100               	movlb	0	; () banked
  2147  001274  35D4               	rlcf	(checkString@i+1)& (0+255),w,b
  2148  001276  6EDA               	movwf	fsr2h,c
  2149  001278  0E60               	movlw	low _positions
  2150  00127A  26D9               	addwf	fsr2l,f,c
  2151  00127C  0E00               	movlw	high _positions
  2152  00127E  22DA               	addwfc	fsr2h,f,c
  2153  001280  CFDE F0CB          	movff	postinc2,checkPos@pos
  2154  001284  CFDD F0CC          	movff	postdec2,checkPos@pos+1
  2155  001288  EC32  F00B         	call	_checkPos	;wreg free
  2156  00128C  90D8               	bcf	status,0,c
  2157  00128E  0100               	movlb	0	; () banked
  2158  001290  35D3               	rlcf	checkString@i& (0+255),w,b
  2159  001292  6ED9               	movwf	fsr2l,c
  2160  001294  0100               	movlb	0	; () banked
  2161  001296  35D4               	rlcf	(checkString@i+1)& (0+255),w,b
  2162  001298  6EDA               	movwf	fsr2h,c
  2163  00129A  0E60               	movlw	low _positions
  2164  00129C  26D9               	addwf	fsr2l,f,c
  2165  00129E  0E00               	movlw	high _positions
  2166  0012A0  22DA               	addwfc	fsr2h,f,c
  2167  0012A2  0100               	movlb	0	; () banked
  2168  0012A4  C0CB  FFDE         	movff	?_checkPos,postinc2
  2169  0012A8  0100               	movlb	0	; () banked
  2170  0012AA  C0CC  FFDD         	movff	?_checkPos+1,postdec2
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;bufferhandler.c: 211: positions[i+1] = positions[i] + 1;
  2174  0012AE  90D8               	bcf	status,0,c
  2175  0012B0  0100               	movlb	0	; () banked
  2176  0012B2  35D3               	rlcf	checkString@i& (0+255),w,b
  2177  0012B4  6ED9               	movwf	fsr2l,c
  2178  0012B6  0100               	movlb	0	; () banked
  2179  0012B8  35D4               	rlcf	(checkString@i+1)& (0+255),w,b
  2180  0012BA  6EDA               	movwf	fsr2h,c
  2181  0012BC  0E60               	movlw	low _positions
  2182  0012BE  26D9               	addwf	fsr2l,f,c
  2183  0012C0  0E00               	movlw	high _positions
  2184  0012C2  22DA               	addwfc	fsr2h,f,c
  2185  0012C4  CFDE F0CF          	movff	postinc2,??_checkString
  2186  0012C8  CFDD F0D0          	movff	postdec2,??_checkString+1
  2187  0012CC  0E01               	movlw	1
  2188  0012CE  0100               	movlb	0	; () banked
  2189  0012D0  27CF               	addwf	??_checkString& (0+255),f,b
  2190  0012D2  0E00               	movlw	0
  2191  0012D4  23D0               	addwfc	(??_checkString+1)& (0+255),f,b
  2192  0012D6  C0D3  F0D1         	movff	checkString@i,??_checkString+2
  2193  0012DA  C0D4  F0D2         	movff	checkString@i+1,??_checkString+3
  2194  0012DE  90D8               	bcf	status,0,c
  2195  0012E0  0100               	movlb	0	; () banked
  2196  0012E2  37D1               	rlcf	(??_checkString+2)& (0+255),f,b
  2197  0012E4  37D2               	rlcf	(??_checkString+3)& (0+255),f,b
  2198  0012E6  0E02               	movlw	2
  2199  0012E8  0100               	movlb	0	; () banked
  2200  0012EA  27D1               	addwf	(??_checkString+2)& (0+255),f,b
  2201  0012EC  0E00               	movlw	0
  2202  0012EE  23D2               	addwfc	(??_checkString+3)& (0+255),f,b
  2203  0012F0  0E60               	movlw	low _positions
  2204  0012F2  0100               	movlb	0	; () banked
  2205  0012F4  25D1               	addwf	(??_checkString+2)& (0+255),w,b
  2206  0012F6  6ED9               	movwf	fsr2l,c
  2207  0012F8  0E00               	movlw	high _positions
  2208  0012FA  0100               	movlb	0	; () banked
  2209  0012FC  21D2               	addwfc	(??_checkString+3)& (0+255),w,b
  2210  0012FE  6EDA               	movwf	fsr2h,c
  2211  001300  C0CF  FFDE         	movff	??_checkString,postinc2
  2212  001304  C0D0  FFDD         	movff	??_checkString+1,postdec2
  2213                           
  2214                           ; BSR set to: 0
  2215  001308  0100               	movlb	0	; () banked
  2216  00130A  4BD3               	infsnz	checkString@i& (0+255),f,b
  2217  00130C  2BD4               	incf	(checkString@i+1)& (0+255),f,b
  2218  00130E  D7A2               	goto	l1807
  2219  001310                     l1819:
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;bufferhandler.c: 212: }
  2223                           ;bufferhandler.c: 214: positions[10] = '\0';
  2224  001310  0E00               	movlw	0
  2225  001312  0100               	movlb	0	; () banked
  2226  001314  6F75               	movwf	(_positions+21)& (0+255),b
  2227  001316  0E00               	movlw	0
  2228  001318  6F74               	movwf	(_positions+20)& (0+255),b
  2229                           
  2230                           ; BSR set to: 0
  2231  00131A  0012               	return		;funcret
  2232  00131C                     __end_of_checkString:
  2233                           	opt stack 0
  2234                           tblptru	equ	0xFF8
  2235                           tblptrh	equ	0xFF7
  2236                           tblptrl	equ	0xFF6
  2237                           tablat	equ	0xFF5
  2238                           prodh	equ	0xFF4
  2239                           prodl	equ	0xFF3
  2240                           indf0	equ	0xFEF
  2241                           postinc0	equ	0xFEE
  2242                           fsr0h	equ	0xFEA
  2243                           fsr0l	equ	0xFE9
  2244                           wreg	equ	0xFE8
  2245                           indf1	equ	0xFE7
  2246                           postdec1	equ	0xFE5
  2247                           fsr1h	equ	0xFE2
  2248                           fsr1l	equ	0xFE1
  2249                           indf2	equ	0xFDF
  2250                           postinc2	equ	0xFDE
  2251                           postdec2	equ	0xFDD
  2252                           plusw2	equ	0xFDB
  2253                           fsr2h	equ	0xFDA
  2254                           fsr2l	equ	0xFD9
  2255                           status	equ	0xFD8
  2256                           
  2257 ;; *************** function _checkPos *****************
  2258 ;; Defined at:
  2259 ;;		line 218 in file "bufferhandler.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;  pos             2    2[BANK0 ] int 
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;  i               2    4[BANK0 ] int 
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  2    2[BANK0 ] int 
  2266 ;; Registers used:
  2267 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2273 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2274 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2275 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2276 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2277 ;;Total ram usage:        5 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    4
  2280 ;; This function calls:
  2281 ;;		_strlen
  2282 ;; This function is called by:
  2283 ;;		_checkString
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text11
  2288  001664                     __ptext11:
  2289                           	opt stack 0
  2290  001664                     _checkPos:
  2291                           	opt stack 24
  2292                           
  2293                           ;bufferhandler.c: 219: for(int i = pos+1; i < strlen(allDataString); i++){
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;incstack = 0
  2297  001664  0E01               	movlw	1
  2298  001666  0100               	movlb	0	; () banked
  2299  001668  25CB               	addwf	checkPos@pos& (0+255),w,b
  2300  00166A  0100               	movlb	0	; () banked
  2301  00166C  6FCD               	movwf	checkPos@i& (0+255),b
  2302  00166E  0E00               	movlw	0
  2303  001670  0100               	movlb	0	; () banked
  2304  001672  21CC               	addwfc	(checkPos@pos+1)& (0+255),w,b
  2305  001674  0100               	movlb	0	; () banked
  2306  001676  6FCE               	movwf	(checkPos@i+1)& (0+255),b
  2307  001678  D014               	goto	l1775
  2308  00167A                     l1769:
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;bufferhandler.c: 220: if(allDataString[i] == 0x3B){
  2312  00167A  0E00               	movlw	low _allDataString
  2313  00167C  0100               	movlb	0	; () banked
  2314  00167E  25CD               	addwf	checkPos@i& (0+255),w,b
  2315  001680  6ED9               	movwf	fsr2l,c
  2316  001682  0E01               	movlw	high _allDataString
  2317  001684  0100               	movlb	0	; () banked
  2318  001686  21CE               	addwfc	(checkPos@i+1)& (0+255),w,b
  2319  001688  6EDA               	movwf	fsr2h,c
  2320  00168A  0E3B               	movlw	59
  2321  00168C  18DE               	xorwf	postinc2,w,c
  2322  00168E  A4D8               	btfss	status,2,c
  2323  001690  D005               	goto	l1773
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;bufferhandler.c: 221: return i;
  2327  001692  C0CD  F0CB         	movff	checkPos@i,?_checkPos
  2328  001696  C0CE  F0CC         	movff	checkPos@i+1,?_checkPos+1
  2329  00169A  0012               	return	
  2330  00169C                     l1773:
  2331                           
  2332                           ; BSR set to: 0
  2333  00169C  0100               	movlb	0	; () banked
  2334  00169E  4BCD               	infsnz	checkPos@i& (0+255),f,b
  2335  0016A0  2BCE               	incf	(checkPos@i+1)& (0+255),f,b
  2336  0016A2                     l1775:
  2337                           
  2338                           ; BSR set to: 0
  2339  0016A2  0E00               	movlw	low _allDataString
  2340  0016A4  6E22               	movwf	strlen@s,c
  2341  0016A6  0E01               	movlw	high _allDataString
  2342  0016A8  6E23               	movwf	strlen@s+1,c
  2343  0016AA  EC8D  F00B         	call	_strlen	;wreg free
  2344  0016AE  5022               	movf	?_strlen,w,c
  2345  0016B0  0100               	movlb	0	; () banked
  2346  0016B2  5DCD               	subwf	checkPos@i& (0+255),w,b
  2347  0016B4  5023               	movf	?_strlen+1,w,c
  2348  0016B6  0100               	movlb	0	; () banked
  2349  0016B8  59CE               	subwfb	(checkPos@i+1)& (0+255),w,b
  2350  0016BA  B0D8               	btfsc	status,0,c
  2351  0016BC  0012               	return	
  2352  0016BE  D7DD               	goto	l1769
  2353  0016C0                     __end_of_checkPos:
  2354                           	opt stack 0
  2355                           tblptru	equ	0xFF8
  2356                           tblptrh	equ	0xFF7
  2357                           tblptrl	equ	0xFF6
  2358                           tablat	equ	0xFF5
  2359                           prodh	equ	0xFF4
  2360                           prodl	equ	0xFF3
  2361                           indf0	equ	0xFEF
  2362                           postinc0	equ	0xFEE
  2363                           fsr0h	equ	0xFEA
  2364                           fsr0l	equ	0xFE9
  2365                           wreg	equ	0xFE8
  2366                           indf1	equ	0xFE7
  2367                           postdec1	equ	0xFE5
  2368                           fsr1h	equ	0xFE2
  2369                           fsr1l	equ	0xFE1
  2370                           indf2	equ	0xFDF
  2371                           postinc2	equ	0xFDE
  2372                           postdec2	equ	0xFDD
  2373                           plusw2	equ	0xFDB
  2374                           fsr2h	equ	0xFDA
  2375                           fsr2l	equ	0xFD9
  2376                           status	equ	0xFD8
  2377                           
  2378 ;; *************** function ___awmod *****************
  2379 ;; Defined at:
  2380 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;  dividend        2   33[COMRAM] int 
  2383 ;;  divisor         2   35[COMRAM] int 
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;  sign            1    1[BANK0 ] unsigned char 
  2386 ;;  counter         1    0[BANK0 ] unsigned char 
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  2   33[COMRAM] int 
  2389 ;; Registers used:
  2390 ;;		wreg, status,2, status,0
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2396 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2397 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2399 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2400 ;;Total ram usage:        6 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    3
  2403 ;; This function calls:
  2404 ;;		Nothing
  2405 ;; This function is called by:
  2406 ;;		_parseString
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           	psect	text12
  2411  001508                     __ptext12:
  2412                           	opt stack 0
  2413  001508                     ___awmod:
  2414                           	opt stack 26
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;incstack = 0
  2418  001508  0E00               	movlw	0
  2419  00150A  0100               	movlb	0	; () banked
  2420  00150C  6FCA               	movwf	___awmod@sign& (0+255),b
  2421                           
  2422                           ; BSR set to: 0
  2423  00150E  AE23               	btfss	___awmod@dividend+1,7,c
  2424  001510  D007               	goto	l1943
  2425                           
  2426                           ; BSR set to: 0
  2427  001512  6C22               	negf	___awmod@dividend,c
  2428  001514  1E23               	comf	___awmod@dividend+1,f,c
  2429  001516  B0D8               	btfsc	status,0,c
  2430  001518  2A23               	incf	___awmod@dividend+1,f,c
  2431                           
  2432                           ; BSR set to: 0
  2433  00151A  0E01               	movlw	1
  2434  00151C  0100               	movlb	0	; () banked
  2435  00151E  6FCA               	movwf	___awmod@sign& (0+255),b
  2436  001520                     l1943:
  2437                           
  2438                           ; BSR set to: 0
  2439  001520  AE25               	btfss	___awmod@divisor+1,7,c
  2440  001522  D004               	goto	l1947
  2441                           
  2442                           ; BSR set to: 0
  2443  001524  6C24               	negf	___awmod@divisor,c
  2444  001526  1E25               	comf	___awmod@divisor+1,f,c
  2445  001528  B0D8               	btfsc	status,0,c
  2446  00152A  2A25               	incf	___awmod@divisor+1,f,c
  2447  00152C                     l1947:
  2448                           
  2449                           ; BSR set to: 0
  2450  00152C  5024               	movf	___awmod@divisor,w,c
  2451  00152E  1025               	iorwf	___awmod@divisor+1,w,c
  2452  001530  B4D8               	btfsc	status,2,c
  2453  001532  D01B               	goto	l1963
  2454                           
  2455                           ; BSR set to: 0
  2456  001534  0E01               	movlw	1
  2457  001536  0100               	movlb	0	; () banked
  2458  001538  6FC9               	movwf	___awmod@counter& (0+255),b
  2459  00153A  D005               	goto	l1953
  2460  00153C                     l1951:
  2461                           
  2462                           ; BSR set to: 0
  2463  00153C  90D8               	bcf	status,0,c
  2464  00153E  3624               	rlcf	___awmod@divisor,f,c
  2465  001540  3625               	rlcf	___awmod@divisor+1,f,c
  2466  001542  0100               	movlb	0	; () banked
  2467  001544  2BC9               	incf	___awmod@counter& (0+255),f,b
  2468  001546                     l1953:
  2469                           
  2470                           ; BSR set to: 0
  2471  001546  AE25               	btfss	___awmod@divisor+1,7,c
  2472  001548  D7F9               	goto	l1951
  2473  00154A                     l1955:
  2474                           
  2475                           ; BSR set to: 0
  2476  00154A  5024               	movf	___awmod@divisor,w,c
  2477  00154C  5C22               	subwf	___awmod@dividend,w,c
  2478  00154E  5025               	movf	___awmod@divisor+1,w,c
  2479  001550  5823               	subwfb	___awmod@dividend+1,w,c
  2480  001552  A0D8               	btfss	status,0,c
  2481  001554  D004               	goto	l1959
  2482                           
  2483                           ; BSR set to: 0
  2484  001556  5024               	movf	___awmod@divisor,w,c
  2485  001558  5E22               	subwf	___awmod@dividend,f,c
  2486  00155A  5025               	movf	___awmod@divisor+1,w,c
  2487  00155C  5A23               	subwfb	___awmod@dividend+1,f,c
  2488  00155E                     l1959:
  2489                           
  2490                           ; BSR set to: 0
  2491  00155E  90D8               	bcf	status,0,c
  2492  001560  3225               	rrcf	___awmod@divisor+1,f,c
  2493  001562  3224               	rrcf	___awmod@divisor,f,c
  2494                           
  2495                           ; BSR set to: 0
  2496  001564  0100               	movlb	0	; () banked
  2497  001566  2FC9               	decfsz	___awmod@counter& (0+255),f,b
  2498  001568  D7F0               	goto	l1955
  2499  00156A                     l1963:
  2500                           
  2501                           ; BSR set to: 0
  2502  00156A  0100               	movlb	0	; () banked
  2503  00156C  51CA               	movf	___awmod@sign& (0+255),w,b
  2504  00156E  0100               	movlb	0	; () banked
  2505  001570  B4D8               	btfsc	status,2,c
  2506  001572  D004               	goto	l1967
  2507                           
  2508                           ; BSR set to: 0
  2509  001574  6C22               	negf	___awmod@dividend,c
  2510  001576  1E23               	comf	___awmod@dividend+1,f,c
  2511  001578  B0D8               	btfsc	status,0,c
  2512  00157A  2A23               	incf	___awmod@dividend+1,f,c
  2513  00157C                     l1967:
  2514                           
  2515                           ; BSR set to: 0
  2516  00157C  C022  F022         	movff	___awmod@dividend,?___awmod
  2517  001580  C023  F023         	movff	___awmod@dividend+1,?___awmod+1
  2518  001584  0012               	return	
  2519  001586                     __end_of___awmod:
  2520                           	opt stack 0
  2521                           tblptru	equ	0xFF8
  2522                           tblptrh	equ	0xFF7
  2523                           tblptrl	equ	0xFF6
  2524                           tablat	equ	0xFF5
  2525                           prodh	equ	0xFF4
  2526                           prodl	equ	0xFF3
  2527                           indf0	equ	0xFEF
  2528                           postinc0	equ	0xFEE
  2529                           fsr0h	equ	0xFEA
  2530                           fsr0l	equ	0xFE9
  2531                           wreg	equ	0xFE8
  2532                           indf1	equ	0xFE7
  2533                           postdec1	equ	0xFE5
  2534                           fsr1h	equ	0xFE2
  2535                           fsr1l	equ	0xFE1
  2536                           indf2	equ	0xFDF
  2537                           postinc2	equ	0xFDE
  2538                           postdec2	equ	0xFDD
  2539                           plusw2	equ	0xFDB
  2540                           fsr2h	equ	0xFDA
  2541                           fsr2l	equ	0xFD9
  2542                           status	equ	0xFD8
  2543                           
  2544 ;; *************** function ___awdiv *****************
  2545 ;; Defined at:
  2546 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;  dividend        2   33[COMRAM] int 
  2549 ;;  divisor         2   35[COMRAM] int 
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;  quotient        2    2[BANK0 ] int 
  2552 ;;  sign            1    1[BANK0 ] unsigned char 
  2553 ;;  counter         1    0[BANK0 ] unsigned char 
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  2   33[COMRAM] int 
  2556 ;; Registers used:
  2557 ;;		wreg, status,2, status,0
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2563 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2564 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2566 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2567 ;;Total ram usage:        8 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:    3
  2570 ;; This function calls:
  2571 ;;		Nothing
  2572 ;; This function is called by:
  2573 ;;		_parseString
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text13
  2578  0013D2                     __ptext13:
  2579                           	opt stack 0
  2580  0013D2                     ___awdiv:
  2581                           	opt stack 26
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;incstack = 0
  2585  0013D2  0E00               	movlw	0
  2586  0013D4  0100               	movlb	0	; () banked
  2587  0013D6  6FCA               	movwf	___awdiv@sign& (0+255),b
  2588                           
  2589                           ; BSR set to: 0
  2590  0013D8  AE25               	btfss	___awdiv@divisor+1,7,c
  2591  0013DA  D007               	goto	l1899
  2592                           
  2593                           ; BSR set to: 0
  2594  0013DC  6C24               	negf	___awdiv@divisor,c
  2595  0013DE  1E25               	comf	___awdiv@divisor+1,f,c
  2596  0013E0  B0D8               	btfsc	status,0,c
  2597  0013E2  2A25               	incf	___awdiv@divisor+1,f,c
  2598                           
  2599                           ; BSR set to: 0
  2600  0013E4  0E01               	movlw	1
  2601  0013E6  0100               	movlb	0	; () banked
  2602  0013E8  6FCA               	movwf	___awdiv@sign& (0+255),b
  2603  0013EA                     l1899:
  2604                           
  2605                           ; BSR set to: 0
  2606  0013EA  AE23               	btfss	___awdiv@dividend+1,7,c
  2607  0013EC  D007               	goto	l1905
  2608                           
  2609                           ; BSR set to: 0
  2610  0013EE  6C22               	negf	___awdiv@dividend,c
  2611  0013F0  1E23               	comf	___awdiv@dividend+1,f,c
  2612  0013F2  B0D8               	btfsc	status,0,c
  2613  0013F4  2A23               	incf	___awdiv@dividend+1,f,c
  2614                           
  2615                           ; BSR set to: 0
  2616  0013F6  0E01               	movlw	1
  2617  0013F8  0100               	movlb	0	; () banked
  2618  0013FA  1BCA               	xorwf	___awdiv@sign& (0+255),f,b
  2619  0013FC                     l1905:
  2620                           
  2621                           ; BSR set to: 0
  2622  0013FC  0E00               	movlw	0
  2623  0013FE  0100               	movlb	0	; () banked
  2624  001400  6FCC               	movwf	(___awdiv@quotient+1)& (0+255),b
  2625  001402  0E00               	movlw	0
  2626  001404  6FCB               	movwf	___awdiv@quotient& (0+255),b
  2627                           
  2628                           ; BSR set to: 0
  2629  001406  5024               	movf	___awdiv@divisor,w,c
  2630  001408  1025               	iorwf	___awdiv@divisor+1,w,c
  2631  00140A  B4D8               	btfsc	status,2,c
  2632  00140C  D021               	goto	l1927
  2633                           
  2634                           ; BSR set to: 0
  2635  00140E  0E01               	movlw	1
  2636  001410  0100               	movlb	0	; () banked
  2637  001412  6FC9               	movwf	___awdiv@counter& (0+255),b
  2638  001414  D005               	goto	l1913
  2639  001416                     l1911:
  2640                           
  2641                           ; BSR set to: 0
  2642  001416  90D8               	bcf	status,0,c
  2643  001418  3624               	rlcf	___awdiv@divisor,f,c
  2644  00141A  3625               	rlcf	___awdiv@divisor+1,f,c
  2645  00141C  0100               	movlb	0	; () banked
  2646  00141E  2BC9               	incf	___awdiv@counter& (0+255),f,b
  2647  001420                     l1913:
  2648                           
  2649                           ; BSR set to: 0
  2650  001420  AE25               	btfss	___awdiv@divisor+1,7,c
  2651  001422  D7F9               	goto	l1911
  2652  001424                     l1915:
  2653                           
  2654                           ; BSR set to: 0
  2655  001424  0100               	movlb	0	; () banked
  2656  001426  90D8               	bcf	status,0,c
  2657  001428  37CB               	rlcf	___awdiv@quotient& (0+255),f,b
  2658  00142A  37CC               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  2659                           
  2660                           ; BSR set to: 0
  2661  00142C  5024               	movf	___awdiv@divisor,w,c
  2662  00142E  5C22               	subwf	___awdiv@dividend,w,c
  2663  001430  5025               	movf	___awdiv@divisor+1,w,c
  2664  001432  5823               	subwfb	___awdiv@dividend+1,w,c
  2665  001434  A0D8               	btfss	status,0,c
  2666  001436  D006               	goto	l1923
  2667                           
  2668                           ; BSR set to: 0
  2669  001438  5024               	movf	___awdiv@divisor,w,c
  2670  00143A  5E22               	subwf	___awdiv@dividend,f,c
  2671  00143C  5025               	movf	___awdiv@divisor+1,w,c
  2672  00143E  5A23               	subwfb	___awdiv@dividend+1,f,c
  2673                           
  2674                           ; BSR set to: 0
  2675  001440  0100               	movlb	0	; () banked
  2676  001442  81CB               	bsf	___awdiv@quotient& (0+255),0,b
  2677  001444                     l1923:
  2678                           
  2679                           ; BSR set to: 0
  2680  001444  90D8               	bcf	status,0,c
  2681  001446  3225               	rrcf	___awdiv@divisor+1,f,c
  2682  001448  3224               	rrcf	___awdiv@divisor,f,c
  2683                           
  2684                           ; BSR set to: 0
  2685  00144A  0100               	movlb	0	; () banked
  2686  00144C  2FC9               	decfsz	___awdiv@counter& (0+255),f,b
  2687  00144E  D7EA               	goto	l1915
  2688  001450                     l1927:
  2689                           
  2690                           ; BSR set to: 0
  2691  001450  0100               	movlb	0	; () banked
  2692  001452  51CA               	movf	___awdiv@sign& (0+255),w,b
  2693  001454  0100               	movlb	0	; () banked
  2694  001456  B4D8               	btfsc	status,2,c
  2695  001458  D005               	goto	l1931
  2696                           
  2697                           ; BSR set to: 0
  2698  00145A  0100               	movlb	0	; () banked
  2699  00145C  6DCB               	negf	___awdiv@quotient& (0+255),b
  2700  00145E  1FCC               	comf	(___awdiv@quotient+1)& (0+255),f,b
  2701  001460  B0D8               	btfsc	status,0,c
  2702  001462  2BCC               	incf	(___awdiv@quotient+1)& (0+255),f,b
  2703  001464                     l1931:
  2704                           
  2705                           ; BSR set to: 0
  2706  001464  C0CB  F022         	movff	___awdiv@quotient,?___awdiv
  2707  001468  C0CC  F023         	movff	___awdiv@quotient+1,?___awdiv+1
  2708  00146C  0012               	return	
  2709  00146E                     __end_of___awdiv:
  2710                           	opt stack 0
  2711                           tblptru	equ	0xFF8
  2712                           tblptrh	equ	0xFF7
  2713                           tblptrl	equ	0xFF6
  2714                           tablat	equ	0xFF5
  2715                           prodh	equ	0xFF4
  2716                           prodl	equ	0xFF3
  2717                           indf0	equ	0xFEF
  2718                           postinc0	equ	0xFEE
  2719                           fsr0h	equ	0xFEA
  2720                           fsr0l	equ	0xFE9
  2721                           wreg	equ	0xFE8
  2722                           indf1	equ	0xFE7
  2723                           postdec1	equ	0xFE5
  2724                           fsr1h	equ	0xFE2
  2725                           fsr1l	equ	0xFE1
  2726                           indf2	equ	0xFDF
  2727                           postinc2	equ	0xFDE
  2728                           postdec2	equ	0xFDD
  2729                           plusw2	equ	0xFDB
  2730                           fsr2h	equ	0xFDA
  2731                           fsr2l	equ	0xFD9
  2732                           status	equ	0xFD8
  2733                           
  2734 ;; *************** function _isValid *****************
  2735 ;; Defined at:
  2736 ;;		line 79 in file "bufferhandler.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;		None
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;		None
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  1    wreg      unsigned char 
  2743 ;; Registers used:
  2744 ;;		wreg, status,2, status,0
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2754 ;;Total ram usage:        0 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    3
  2757 ;; This function calls:
  2758 ;;		Nothing
  2759 ;; This function is called by:
  2760 ;;		_main
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           	psect	text14
  2765  0018E6                     __ptext14:
  2766                           	opt stack 0
  2767  0018E6                     _isValid:
  2768                           	opt stack 27
  2769                           
  2770                           ;bufferhandler.c: 80: if(tmpString[0] == 0x54 &&
  2771                           ;bufferhandler.c: 81: tmpString[1] == 0x59 &&
  2772                           ;bufferhandler.c: 82: tmpString[2] == 0x52 &&
  2773                           ;bufferhandler.c: 83: tmpString[3] == 0x49 &&
  2774                           ;bufferhandler.c: 84: tmpString[4] == 0x5F){
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;incstack = 0
  2778  0018E6  0E54               	movlw	84
  2779  0018E8  0100               	movlb	0	; () banked
  2780  0018EA  197D               	xorwf	_tmpString& (0+255),w,b
  2781  0018EC  A4D8               	btfss	status,2,c
  2782  0018EE  D016               	goto	l2033
  2783                           
  2784                           ; BSR set to: 0
  2785  0018F0  0E59               	movlw	89
  2786  0018F2  0100               	movlb	0	; () banked
  2787  0018F4  197E               	xorwf	(_tmpString+1)& (0+255),w,b
  2788  0018F6  A4D8               	btfss	status,2,c
  2789  0018F8  D011               	goto	l2033
  2790                           
  2791                           ; BSR set to: 0
  2792  0018FA  0E52               	movlw	82
  2793  0018FC  0100               	movlb	0	; () banked
  2794  0018FE  197F               	xorwf	(_tmpString+2)& (0+255),w,b
  2795  001900  A4D8               	btfss	status,2,c
  2796  001902  D00C               	goto	l2033
  2797                           
  2798                           ; BSR set to: 0
  2799  001904  0E49               	movlw	73
  2800  001906  0100               	movlb	0	; () banked
  2801  001908  1980               	xorwf	(_tmpString+3)& (0+255),w,b
  2802  00190A  A4D8               	btfss	status,2,c
  2803  00190C  D007               	goto	l2033
  2804                           
  2805                           ; BSR set to: 0
  2806  00190E  0E5F               	movlw	95
  2807  001910  0100               	movlb	0	; () banked
  2808  001912  1981               	xorwf	(_tmpString+4)& (0+255),w,b
  2809  001914  A4D8               	btfss	status,2,c
  2810  001916  D002               	goto	l2033
  2811                           
  2812                           ; BSR set to: 0
  2813                           ;bufferhandler.c: 85: return 1;
  2814  001918  0E01               	movlw	1
  2815                           
  2816                           ; BSR set to: 0
  2817  00191A  0012               	return	
  2818  00191C                     l2033:
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;bufferhandler.c: 86: }
  2822                           ;bufferhandler.c: 87: return 0;
  2823  00191C  0E00               	movlw	0
  2824  00191E  0012               	return	
  2825  001920                     __end_of_isValid:
  2826                           	opt stack 0
  2827                           tblptru	equ	0xFF8
  2828                           tblptrh	equ	0xFF7
  2829                           tblptrl	equ	0xFF6
  2830                           tablat	equ	0xFF5
  2831                           prodh	equ	0xFF4
  2832                           prodl	equ	0xFF3
  2833                           indf0	equ	0xFEF
  2834                           postinc0	equ	0xFEE
  2835                           fsr0h	equ	0xFEA
  2836                           fsr0l	equ	0xFE9
  2837                           wreg	equ	0xFE8
  2838                           indf1	equ	0xFE7
  2839                           postdec1	equ	0xFE5
  2840                           fsr1h	equ	0xFE2
  2841                           fsr1l	equ	0xFE1
  2842                           indf2	equ	0xFDF
  2843                           postinc2	equ	0xFDE
  2844                           postdec2	equ	0xFDD
  2845                           plusw2	equ	0xFDB
  2846                           fsr2h	equ	0xFDA
  2847                           fsr2l	equ	0xFD9
  2848                           status	equ	0xFD8
  2849                           
  2850 ;; *************** function _isItLongEnough *****************
  2851 ;; Defined at:
  2852 ;;		line 40 in file "bufferhandler.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;		None
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;		None
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  1    wreg      unsigned char 
  2859 ;; Registers used:
  2860 ;;		wreg, status,2, status,0
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2870 ;;Total ram usage:        0 bytes
  2871 ;; Hardware stack levels used:    1
  2872 ;; Hardware stack levels required when called:    3
  2873 ;; This function calls:
  2874 ;;		Nothing
  2875 ;; This function is called by:
  2876 ;;		_main
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           	psect	text15
  2881  0019B6                     __ptext15:
  2882                           	opt stack 0
  2883  0019B6                     _isItLongEnough:
  2884                           	opt stack 27
  2885                           
  2886                           ;bufferhandler.c: 42: if(index >= 64){
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;incstack = 0
  2890  0019B6  BE3D               	btfsc	_index+1,7,c
  2891  0019B8  D008               	goto	l2015
  2892  0019BA  503D               	movf	_index+1,w,c
  2893  0019BC  E104               	bnz	u1360
  2894  0019BE  0E40               	movlw	64
  2895  0019C0  5C3C               	subwf	_index,w,c
  2896  0019C2  A0D8               	btfss	status,0,c
  2897  0019C4  D002               	goto	l2015
  2898  0019C6                     u1360:
  2899                           
  2900                           ;bufferhandler.c: 43: return 1;
  2901  0019C6  0E01               	movlw	1
  2902                           
  2903                           ;bufferhandler.c: 44: }else{
  2904  0019C8  0012               	return	
  2905  0019CA                     l2015:
  2906                           
  2907                           ;bufferhandler.c: 45: return 0;
  2908  0019CA  0E00               	movlw	0
  2909  0019CC  0012               	return	
  2910  0019CE                     __end_of_isItLongEnough:
  2911                           	opt stack 0
  2912                           tblptru	equ	0xFF8
  2913                           tblptrh	equ	0xFF7
  2914                           tblptrl	equ	0xFF6
  2915                           tablat	equ	0xFF5
  2916                           prodh	equ	0xFF4
  2917                           prodl	equ	0xFF3
  2918                           indf0	equ	0xFEF
  2919                           postinc0	equ	0xFEE
  2920                           fsr0h	equ	0xFEA
  2921                           fsr0l	equ	0xFE9
  2922                           wreg	equ	0xFE8
  2923                           indf1	equ	0xFE7
  2924                           postdec1	equ	0xFE5
  2925                           fsr1h	equ	0xFE2
  2926                           fsr1l	equ	0xFE1
  2927                           indf2	equ	0xFDF
  2928                           postinc2	equ	0xFDE
  2929                           postdec2	equ	0xFDD
  2930                           plusw2	equ	0xFDB
  2931                           fsr2h	equ	0xFDA
  2932                           fsr2l	equ	0xFD9
  2933                           status	equ	0xFD8
  2934                           
  2935 ;; *************** function _copyTmpBuffer *****************
  2936 ;; Defined at:
  2937 ;;		line 57 in file "bufferhandler.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;		None
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;  i               2   34[COMRAM] int 
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      void 
  2944 ;; Registers used:
  2945 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2952 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2953 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2954 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2955 ;;Total ram usage:        3 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; Hardware stack levels required when called:    3
  2958 ;; This function calls:
  2959 ;;		Nothing
  2960 ;; This function is called by:
  2961 ;;		_main
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text16
  2966  00186C                     __ptext16:
  2967                           	opt stack 0
  2968  00186C                     _copyTmpBuffer:
  2969                           	opt stack 27
  2970                           
  2971                           ;bufferhandler.c: 58: for(int i = 0; i<index; i++){
  2972                           
  2973                           ;incstack = 0
  2974  00186C  0E00               	movlw	0
  2975  00186E  6E24               	movwf	copyTmpBuffer@i+1,c
  2976  001870  0E00               	movlw	0
  2977  001872  6E23               	movwf	copyTmpBuffer@i,c
  2978  001874  D010               	goto	l2043
  2979  001876                     l2039:
  2980                           
  2981                           ;bufferhandler.c: 59: allDataString[i] = tmpString[i];
  2982  001876  0E7D               	movlw	low _tmpString
  2983  001878  2423               	addwf	copyTmpBuffer@i,w,c
  2984  00187A  6ED9               	movwf	fsr2l,c
  2985  00187C  0E00               	movlw	high _tmpString
  2986  00187E  2024               	addwfc	copyTmpBuffer@i+1,w,c
  2987  001880  6EDA               	movwf	fsr2h,c
  2988  001882  0E00               	movlw	low _allDataString
  2989  001884  2423               	addwf	copyTmpBuffer@i,w,c
  2990  001886  6EE1               	movwf	fsr1l,c
  2991  001888  0E01               	movlw	high _allDataString
  2992  00188A  2024               	addwfc	copyTmpBuffer@i+1,w,c
  2993  00188C  6EE2               	movwf	fsr1h,c
  2994  00188E  CFDF FFE7          	movff	indf2,indf1
  2995  001892  4A23               	infsnz	copyTmpBuffer@i,f,c
  2996  001894  2A24               	incf	copyTmpBuffer@i+1,f,c
  2997  001896                     l2043:
  2998  001896  503C               	movf	_index,w,c
  2999  001898  5C23               	subwf	copyTmpBuffer@i,w,c
  3000  00189A  5024               	movf	copyTmpBuffer@i+1,w,c
  3001  00189C  0A80               	xorlw	128
  3002  00189E  6E22               	movwf	??_copyTmpBuffer& (0+255),c
  3003  0018A0  503D               	movf	_index+1,w,c
  3004  0018A2  0A80               	xorlw	128
  3005  0018A4  5822               	subwfb	??_copyTmpBuffer& (0+255),w,c
  3006  0018A6  B0D8               	btfsc	status,0,c
  3007  0018A8  0012               	return	
  3008  0018AA  D7E5               	goto	l2039
  3009  0018AC                     __end_of_copyTmpBuffer:
  3010                           	opt stack 0
  3011                           tblptru	equ	0xFF8
  3012                           tblptrh	equ	0xFF7
  3013                           tblptrl	equ	0xFF6
  3014                           tablat	equ	0xFF5
  3015                           prodh	equ	0xFF4
  3016                           prodl	equ	0xFF3
  3017                           indf0	equ	0xFEF
  3018                           postinc0	equ	0xFEE
  3019                           fsr0h	equ	0xFEA
  3020                           fsr0l	equ	0xFE9
  3021                           wreg	equ	0xFE8
  3022                           indf1	equ	0xFE7
  3023                           postdec1	equ	0xFE5
  3024                           fsr1h	equ	0xFE2
  3025                           fsr1l	equ	0xFE1
  3026                           indf2	equ	0xFDF
  3027                           postinc2	equ	0xFDE
  3028                           postdec2	equ	0xFDD
  3029                           plusw2	equ	0xFDB
  3030                           fsr2h	equ	0xFDA
  3031                           fsr2l	equ	0xFD9
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _clearBuffer *****************
  3035 ;; Defined at:
  3036 ;;		line 49 in file "bufferhandler.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;  i               2    2[BANK0 ] int 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3051 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3053 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3054 ;;Total ram usage:        2 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    4
  3057 ;; This function calls:
  3058 ;;		_strlen
  3059 ;; This function is called by:
  3060 ;;		_main
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text17
  3065  0017CC                     __ptext17:
  3066                           	opt stack 0
  3067  0017CC                     _clearBuffer:
  3068                           	opt stack 26
  3069                           
  3070                           ;bufferhandler.c: 50: for(int i = 0; i<strlen(tmpString); i++){
  3071                           
  3072                           ;incstack = 0
  3073  0017CC  0E00               	movlw	0
  3074  0017CE  0100               	movlb	0	; () banked
  3075  0017D0  6FCC               	movwf	(clearBuffer@i+1)& (0+255),b
  3076  0017D2  0E00               	movlw	0
  3077  0017D4  6FCB               	movwf	clearBuffer@i& (0+255),b
  3078  0017D6  D00D               	goto	l2003
  3079  0017D8                     l1999:
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;bufferhandler.c: 51: tmpString[i] = "";
  3083  0017D8  0E7D               	movlw	low _tmpString
  3084  0017DA  0100               	movlb	0	; () banked
  3085  0017DC  25CB               	addwf	clearBuffer@i& (0+255),w,b
  3086  0017DE  6ED9               	movwf	fsr2l,c
  3087  0017E0  0E00               	movlw	high _tmpString
  3088  0017E2  0100               	movlb	0	; () banked
  3089  0017E4  21CC               	addwfc	(clearBuffer@i+1)& (0+255),w,b
  3090  0017E6  6EDA               	movwf	fsr2h,c
  3091  0017E8  0E05               	movlw	low (STR_1+4)
  3092  0017EA  6EDF               	movwf	indf2,c
  3093                           
  3094                           ; BSR set to: 0
  3095  0017EC  0100               	movlb	0	; () banked
  3096  0017EE  4BCB               	infsnz	clearBuffer@i& (0+255),f,b
  3097  0017F0  2BCC               	incf	(clearBuffer@i+1)& (0+255),f,b
  3098  0017F2                     l2003:
  3099                           
  3100                           ; BSR set to: 0
  3101  0017F2  0E7D               	movlw	low _tmpString
  3102  0017F4  6E22               	movwf	strlen@s,c
  3103  0017F6  0E00               	movlw	high _tmpString
  3104  0017F8  6E23               	movwf	strlen@s+1,c
  3105  0017FA  EC8D  F00B         	call	_strlen	;wreg free
  3106  0017FE  5022               	movf	?_strlen,w,c
  3107  001800  0100               	movlb	0	; () banked
  3108  001802  5DCB               	subwf	clearBuffer@i& (0+255),w,b
  3109  001804  5023               	movf	?_strlen+1,w,c
  3110  001806  0100               	movlb	0	; () banked
  3111  001808  59CC               	subwfb	(clearBuffer@i+1)& (0+255),w,b
  3112  00180A  A0D8               	btfss	status,0,c
  3113  00180C  D7E5               	goto	l1999
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;bufferhandler.c: 52: }
  3117                           ;bufferhandler.c: 53: tmpString[0] = '\0';
  3118                           
  3119                           ; BSR set to: 0
  3120  00180E  0E00               	movlw	0
  3121  001810  0100               	movlb	0	; () banked
  3122  001812  6F7D               	movwf	_tmpString& (0+255),b
  3123                           
  3124                           ;bufferhandler.c: 54: index = 0;
  3125  001814  0E00               	movlw	0
  3126  001816  6E3D               	movwf	_index+1,c
  3127  001818  0E00               	movlw	0
  3128  00181A  6E3C               	movwf	_index,c
  3129                           
  3130                           ; BSR set to: 0
  3131  00181C  0012               	return		;funcret
  3132  00181E                     __end_of_clearBuffer:
  3133                           	opt stack 0
  3134                           tblptru	equ	0xFF8
  3135                           tblptrh	equ	0xFF7
  3136                           tblptrl	equ	0xFF6
  3137                           tablat	equ	0xFF5
  3138                           prodh	equ	0xFF4
  3139                           prodl	equ	0xFF3
  3140                           indf0	equ	0xFEF
  3141                           postinc0	equ	0xFEE
  3142                           fsr0h	equ	0xFEA
  3143                           fsr0l	equ	0xFE9
  3144                           wreg	equ	0xFE8
  3145                           indf1	equ	0xFE7
  3146                           postdec1	equ	0xFE5
  3147                           fsr1h	equ	0xFE2
  3148                           fsr1l	equ	0xFE1
  3149                           indf2	equ	0xFDF
  3150                           postinc2	equ	0xFDE
  3151                           postdec2	equ	0xFDD
  3152                           plusw2	equ	0xFDB
  3153                           fsr2h	equ	0xFDA
  3154                           fsr2l	equ	0xFD9
  3155                           status	equ	0xFD8
  3156                           
  3157 ;; *************** function _strlen *****************
  3158 ;; Defined at:
  3159 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;  s               2   33[COMRAM] PTR const unsigned char 
  3162 ;;		 -> parsedString(17), allDataString(70), tmpString(70), STR_2(4), 
  3163 ;;		 -> STR_1(5), 
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;  cp              2    0[BANK0 ] PTR const unsigned char 
  3166 ;;		 -> parsedString(17), allDataString(70), tmpString(70), STR_2(4), 
  3167 ;;		 -> STR_1(5), 
  3168 ;; Return value:  Size  Location     Type
  3169 ;;                  2   33[COMRAM] unsigned int 
  3170 ;; Registers used:
  3171 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  3172 ;; Tracked objects:
  3173 ;;		On entry : 0/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3177 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3178 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3179 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3180 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3181 ;;Total ram usage:        6 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; Hardware stack levels required when called:    3
  3184 ;; This function calls:
  3185 ;;		Nothing
  3186 ;; This function is called by:
  3187 ;;		_writeString
  3188 ;;		_clearBuffer
  3189 ;;		_checkPos
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           	psect	text18
  3194  00171A                     __ptext18:
  3195                           	opt stack 0
  3196  00171A                     _strlen:
  3197                           	opt stack 26
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;incstack = 0
  3201  00171A  C022  F0C9         	movff	strlen@s,strlen@cp
  3202  00171E  C023  F0CA         	movff	strlen@s+1,strlen@cp+1
  3203  001722  D003               	goto	l1757
  3204  001724                     l1755:
  3205  001724  0100               	movlb	0	; () banked
  3206  001726  4BC9               	infsnz	strlen@cp& (0+255),f,b
  3207  001728  2BCA               	incf	(strlen@cp+1)& (0+255),f,b
  3208  00172A                     l1757:
  3209  00172A  C0C9  FFF6         	movff	strlen@cp,tblptrl
  3210  00172E  C0CA  FFF7         	movff	strlen@cp+1,tblptrh
  3211  001732  0E00               	movlw	low (__smallconst shr (0+16))
  3212  001734  6EF8               	movwf	tblptru,c
  3213  001736  0E0E               	movlw	(high __ramtop+-1)
  3214  001738  64F7               	cpfsgt	tblptrh,c
  3215  00173A  D003               	bra	u1037
  3216  00173C  0008               	tblrd		*
  3217  00173E  50F5               	movf	tablat,w,c
  3218  001740  D005               	bra	u1030
  3219  001742                     u1037:
  3220  001742  CFF6 FFE9          	movff	tblptrl,fsr0l
  3221  001746  CFF7 FFEA          	movff	tblptrh,fsr0h
  3222  00174A  50EF               	movf	indf0,w,c
  3223  00174C                     u1030:
  3224  00174C  0900               	iorlw	0
  3225  00174E  A4D8               	btfss	status,2,c
  3226  001750  D7E9               	goto	l1755
  3227  001752  C022  F024         	movff	strlen@s,??_strlen
  3228  001756  C023  F025         	movff	strlen@s+1,??_strlen+1
  3229  00175A  1E24               	comf	??_strlen,f,c
  3230  00175C  1E25               	comf	??_strlen+1,f,c
  3231  00175E  4A24               	infsnz	??_strlen,f,c
  3232  001760  2A25               	incf	??_strlen+1,f,c
  3233  001762  0100               	movlb	0	; () banked
  3234  001764  51C9               	movf	strlen@cp& (0+255),w,b
  3235  001766  2424               	addwf	??_strlen,w,c
  3236  001768  6E22               	movwf	?_strlen,c
  3237  00176A  0100               	movlb	0	; () banked
  3238  00176C  51CA               	movf	(strlen@cp+1)& (0+255),w,b
  3239  00176E  2025               	addwfc	??_strlen+1,w,c
  3240  001770  6E23               	movwf	?_strlen+1,c
  3241  001772  0012               	return	
  3242  001774                     __end_of_strlen:
  3243                           	opt stack 0
  3244                           tblptru	equ	0xFF8
  3245                           tblptrh	equ	0xFF7
  3246                           tblptrl	equ	0xFF6
  3247                           tablat	equ	0xFF5
  3248                           prodh	equ	0xFF4
  3249                           prodl	equ	0xFF3
  3250                           indf0	equ	0xFEF
  3251                           postinc0	equ	0xFEE
  3252                           fsr0h	equ	0xFEA
  3253                           fsr0l	equ	0xFE9
  3254                           wreg	equ	0xFE8
  3255                           indf1	equ	0xFE7
  3256                           postdec1	equ	0xFE5
  3257                           fsr1h	equ	0xFE2
  3258                           fsr1l	equ	0xFE1
  3259                           indf2	equ	0xFDF
  3260                           postinc2	equ	0xFDE
  3261                           postdec2	equ	0xFDD
  3262                           plusw2	equ	0xFDB
  3263                           fsr2h	equ	0xFDA
  3264                           fsr2l	equ	0xFD9
  3265                           status	equ	0xFD8
  3266                           
  3267 ;; *************** function _UART_Init *****************
  3268 ;; Defined at:
  3269 ;;		line 31 in file "uart.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;  baudrate        4   33[COMRAM] const long 
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;		None
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  1    wreg      unsigned char 
  3276 ;; Registers used:
  3277 ;;		wreg, status,2
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3283 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3286 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3287 ;;Total ram usage:        4 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    3
  3290 ;; This function calls:
  3291 ;;		Nothing
  3292 ;; This function is called by:
  3293 ;;		_main
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text19
  3298  001920                     __ptext19:
  3299                           	opt stack 0
  3300  001920                     _UART_Init:
  3301                           	opt stack 27
  3302                           
  3303                           ;uart.c: 35: TXSTA1 = 0x24;
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;incstack = 0
  3307  001920  0E24               	movlw	36
  3308  001922  6EAD               	movwf	4013,c	;volatile
  3309                           
  3310                           ;uart.c: 36: RCSTA1 = 0x90;
  3311  001924  0E90               	movlw	144
  3312  001926  6EAC               	movwf	4012,c	;volatile
  3313                           
  3314                           ;uart.c: 37: RC1IE = 1;
  3315  001928  8A9D               	bsf	3997,5,c	;volatile
  3316                           
  3317                           ;uart.c: 38: BAUDCON1bits.BRG16 = 0;
  3318  00192A  967E               	bcf	3966,3,c	;volatile
  3319                           
  3320                           ;uart.c: 39: SPBRG1 = 155;
  3321  00192C  0E9B               	movlw	155
  3322  00192E  6EB0               	movwf	4016,c	;volatile
  3323                           
  3324                           ;uart.c: 40: SPBRGH1 = 155;
  3325  001930  0E9B               	movlw	155
  3326  001932  6E7F               	movwf	3967,c	;volatile
  3327                           
  3328                           ;uart.c: 41: TRISC7 = 1;
  3329  001934  8E94               	bsf	3988,7,c	;volatile
  3330                           
  3331                           ;uart.c: 42: TRISC6 = 0;
  3332  001936  9C94               	bcf	3988,6,c	;volatile
  3333                           
  3334                           ;uart.c: 46: RCSTA2 = 0b10010000;
  3335  001938  0E90               	movlw	144
  3336  00193A  6E9C               	movwf	3996,c	;volatile
  3337                           
  3338                           ;uart.c: 47: TXSTA2 = 0b00100100;
  3339  00193C  0E24               	movlw	36
  3340  00193E  6EA8               	movwf	4008,c	;volatile
  3341                           
  3342                           ;uart.c: 48: RC2IE = 1;
  3343  001940  8AA3               	bsf	4003,5,c	;volatile
  3344                           
  3345                           ;uart.c: 49: BAUDCON2bits.BRG16 = 0;
  3346  001942  967C               	bcf	3964,3,c	;volatile
  3347                           
  3348                           ;uart.c: 50: SPBRG2 = 25;
  3349  001944  0E19               	movlw	25
  3350  001946  6EAB               	movwf	4011,c	;volatile
  3351                           
  3352                           ;uart.c: 51: SPBRGH2 = 25;
  3353  001948  0E19               	movlw	25
  3354  00194A  6E7D               	movwf	3965,c	;volatile
  3355                           
  3356                           ;uart.c: 52: TRISB4 = 1;
  3357  00194C  8893               	bsf	3987,4,c	;volatile
  3358                           
  3359                           ;uart.c: 53: TRISB5 = 0;
  3360  00194E  9A93               	bcf	3987,5,c	;volatile
  3361  001950  0012               	return	
  3362  001952                     __end_of_UART_Init:
  3363                           	opt stack 0
  3364                           tblptru	equ	0xFF8
  3365                           tblptrh	equ	0xFF7
  3366                           tblptrl	equ	0xFF6
  3367                           tablat	equ	0xFF5
  3368                           prodh	equ	0xFF4
  3369                           prodl	equ	0xFF3
  3370                           indf0	equ	0xFEF
  3371                           postinc0	equ	0xFEE
  3372                           fsr0h	equ	0xFEA
  3373                           fsr0l	equ	0xFE9
  3374                           wreg	equ	0xFE8
  3375                           indf1	equ	0xFE7
  3376                           postdec1	equ	0xFE5
  3377                           fsr1h	equ	0xFE2
  3378                           fsr1l	equ	0xFE1
  3379                           indf2	equ	0xFDF
  3380                           postinc2	equ	0xFDE
  3381                           postdec2	equ	0xFDD
  3382                           plusw2	equ	0xFDB
  3383                           fsr2h	equ	0xFDA
  3384                           fsr2l	equ	0xFD9
  3385                           status	equ	0xFD8
  3386                           
  3387 ;; *************** function _InitApp *****************
  3388 ;; Defined at:
  3389 ;;		line 29 in file "user.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;		None
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  1    wreg      void 
  3396 ;; Registers used:
  3397 ;;		wreg, status,2
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3407 ;;Total ram usage:        0 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    3
  3410 ;; This function calls:
  3411 ;;		Nothing
  3412 ;; This function is called by:
  3413 ;;		_main
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           	psect	text20
  3418  00197C                     __ptext20:
  3419                           	opt stack 0
  3420  00197C                     _InitApp:
  3421                           	opt stack 27
  3422                           
  3423                           ;user.c: 33: PPSCON = 0b00000000;
  3424                           
  3425                           ;incstack = 0
  3426  00197C  0E00               	movlw	0
  3427  00197E  010E               	movlb	14	; () banked
  3428  001980  6FBF               	movwf	191,b	;volatile
  3429                           
  3430                           ;user.c: 34: RPOR8 = 0b00000110;
  3431  001982  0E06               	movlw	6
  3432  001984  010E               	movlb	14	; () banked
  3433  001986  6FC8               	movwf	200,b	;volatile
  3434                           
  3435                           ;user.c: 35: RPINR16 = 0b00000111;
  3436  001988  0E07               	movlw	7
  3437  00198A  010E               	movlb	14	; () banked
  3438  00198C  6FF7               	movwf	247,b	;volatile
  3439                           
  3440                           ;user.c: 36: PPSCON = 0b00000001;
  3441  00198E  0E01               	movlw	1
  3442  001990  010E               	movlb	14	; () banked
  3443  001992  6FBF               	movwf	191,b	;volatile
  3444                           
  3445                           ;user.c: 39: INTCON = 0xC0;
  3446  001994  0EC0               	movlw	192
  3447  001996  6EF2               	movwf	intcon,c	;volatile
  3448                           
  3449                           ; BSR set to: 14
  3450  001998  0012               	return		;funcret
  3451  00199A                     __end_of_InitApp:
  3452                           	opt stack 0
  3453                           tblptru	equ	0xFF8
  3454                           tblptrh	equ	0xFF7
  3455                           tblptrl	equ	0xFF6
  3456                           tablat	equ	0xFF5
  3457                           prodh	equ	0xFF4
  3458                           prodl	equ	0xFF3
  3459                           intcon	equ	0xFF2
  3460                           indf0	equ	0xFEF
  3461                           postinc0	equ	0xFEE
  3462                           fsr0h	equ	0xFEA
  3463                           fsr0l	equ	0xFE9
  3464                           wreg	equ	0xFE8
  3465                           indf1	equ	0xFE7
  3466                           postdec1	equ	0xFE5
  3467                           fsr1h	equ	0xFE2
  3468                           fsr1l	equ	0xFE1
  3469                           indf2	equ	0xFDF
  3470                           postinc2	equ	0xFDE
  3471                           postdec2	equ	0xFDD
  3472                           plusw2	equ	0xFDB
  3473                           fsr2h	equ	0xFDA
  3474                           fsr2l	equ	0xFD9
  3475                           status	equ	0xFD8
  3476                           
  3477 ;; *************** function _ConfigureOscillator *****************
  3478 ;; Defined at:
  3479 ;;		line 24 in file "system.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;		None
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;		None
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  1    wreg      void 
  3486 ;; Registers used:
  3487 ;;		wreg, status,2
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3497 ;;Total ram usage:        0 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    3
  3500 ;; This function calls:
  3501 ;;		Nothing
  3502 ;; This function is called by:
  3503 ;;		_main
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           	psect	text21
  3508  0019F8                     __ptext21:
  3509                           	opt stack 0
  3510  0019F8                     _ConfigureOscillator:
  3511                           	opt stack 27
  3512                           
  3513                           ;system.c: 26: OSCCONbits.IRCF = 0b110;
  3514                           
  3515                           ; BSR set to: 14
  3516                           ;incstack = 0
  3517  0019F8  50D3               	movf	4051,w,c	;volatile
  3518  0019FA  0B8F               	andlw	-113
  3519  0019FC  0960               	iorlw	96
  3520  0019FE  6ED3               	movwf	4051,c	;volatile
  3521                           
  3522                           ;system.c: 27: OSCTUNEbits.PLLEN = 0b1;
  3523  001A00  8C9B               	bsf	3995,6,c	;volatile
  3524  001A02  0012               	return		;funcret
  3525  001A04                     __end_of_ConfigureOscillator:
  3526                           	opt stack 0
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           intcon	equ	0xFF2
  3534                           indf0	equ	0xFEF
  3535                           postinc0	equ	0xFEE
  3536                           fsr0h	equ	0xFEA
  3537                           fsr0l	equ	0xFE9
  3538                           wreg	equ	0xFE8
  3539                           indf1	equ	0xFE7
  3540                           postdec1	equ	0xFE5
  3541                           fsr1h	equ	0xFE2
  3542                           fsr1l	equ	0xFE1
  3543                           indf2	equ	0xFDF
  3544                           postinc2	equ	0xFDE
  3545                           postdec2	equ	0xFDD
  3546                           plusw2	equ	0xFDB
  3547                           fsr2h	equ	0xFDA
  3548                           fsr2l	equ	0xFD9
  3549                           status	equ	0xFD8
  3550                           
  3551 ;; *************** function _low_isr *****************
  3552 ;; Defined at:
  3553 ;;		line 66 in file "interrupts.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;		None
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;		None
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  1    wreg      void 
  3560 ;; Registers used:
  3561 ;;		None
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3569 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3570 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3571 ;;Total ram usage:       17 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    2
  3574 ;; This function calls:
  3575 ;;		Nothing
  3576 ;; This function is called by:
  3577 ;;		Interrupt level 1
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           	psect	intcodelo
  3582  000018                     __pintcodelo:
  3583                           	opt stack 0
  3584  000018                     _low_isr:
  3585                           	opt stack 24
  3586                           
  3587                           ;incstack = 0
  3588  000018  803E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3589  00001A  CFD8 F011          	movff	status,??_low_isr
  3590  00001E  CFE8 F012          	movff	wreg,??_low_isr+1
  3591  000022  CFE0 F013          	movff	bsr,??_low_isr+2
  3592  000026  CFFA F014          	movff	pclath,??_low_isr+3
  3593  00002A  CFFB F015          	movff	pclatu,??_low_isr+4
  3594  00002E  CFE9 F016          	movff	fsr0l,??_low_isr+5
  3595  000032  CFEA F017          	movff	fsr0h,??_low_isr+6
  3596  000036  CFE1 F018          	movff	fsr1l,??_low_isr+7
  3597  00003A  CFE2 F019          	movff	fsr1h,??_low_isr+8
  3598  00003E  CFD9 F01A          	movff	fsr2l,??_low_isr+9
  3599  000042  CFDA F01B          	movff	fsr2h,??_low_isr+10
  3600  000046  CFF3 F01C          	movff	prodl,??_low_isr+11
  3601  00004A  CFF4 F01D          	movff	prodh,??_low_isr+12
  3602  00004E  CFF6 F01E          	movff	tblptrl,??_low_isr+13
  3603  000052  CFF7 F01F          	movff	tblptrh,??_low_isr+14
  3604  000056  CFF8 F020          	movff	tblptru,??_low_isr+15
  3605  00005A  CFF5 F021          	movff	tablat,??_low_isr+16
  3606  00005E  C021  FFF5         	movff	??_low_isr+16,tablat
  3607  000062  C020  FFF8         	movff	??_low_isr+15,tblptru
  3608  000066  C01F  FFF7         	movff	??_low_isr+14,tblptrh
  3609  00006A  C01E  FFF6         	movff	??_low_isr+13,tblptrl
  3610  00006E  C01D  FFF4         	movff	??_low_isr+12,prodh
  3611  000072  C01C  FFF3         	movff	??_low_isr+11,prodl
  3612  000076  C01B  FFDA         	movff	??_low_isr+10,fsr2h
  3613  00007A  C01A  FFD9         	movff	??_low_isr+9,fsr2l
  3614  00007E  C019  FFE2         	movff	??_low_isr+8,fsr1h
  3615  000082  C018  FFE1         	movff	??_low_isr+7,fsr1l
  3616  000086  C017  FFEA         	movff	??_low_isr+6,fsr0h
  3617  00008A  C016  FFE9         	movff	??_low_isr+5,fsr0l
  3618  00008E  C015  FFFB         	movff	??_low_isr+4,pclatu
  3619  000092  C014  FFFA         	movff	??_low_isr+3,pclath
  3620  000096  C013  FFE0         	movff	??_low_isr+2,bsr
  3621  00009A  C012  FFE8         	movff	??_low_isr+1,wreg
  3622  00009E  C011  FFD8         	movff	??_low_isr,status
  3623  0000A2  903E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3624  0000A4  0010               	retfie	
  3625  0000A6                     __end_of_low_isr:
  3626                           	opt stack 0
  3627                           pclatu	equ	0xFFB
  3628                           pclath	equ	0xFFA
  3629                           tblptru	equ	0xFF8
  3630                           tblptrh	equ	0xFF7
  3631                           tblptrl	equ	0xFF6
  3632                           tablat	equ	0xFF5
  3633                           prodh	equ	0xFF4
  3634                           prodl	equ	0xFF3
  3635                           intcon	equ	0xFF2
  3636                           indf0	equ	0xFEF
  3637                           postinc0	equ	0xFEE
  3638                           fsr0h	equ	0xFEA
  3639                           fsr0l	equ	0xFE9
  3640                           wreg	equ	0xFE8
  3641                           indf1	equ	0xFE7
  3642                           postdec1	equ	0xFE5
  3643                           fsr1h	equ	0xFE2
  3644                           fsr1l	equ	0xFE1
  3645                           bsr	equ	0xFE0
  3646                           indf2	equ	0xFDF
  3647                           postinc2	equ	0xFDE
  3648                           postdec2	equ	0xFDD
  3649                           plusw2	equ	0xFDB
  3650                           fsr2h	equ	0xFDA
  3651                           fsr2l	equ	0xFD9
  3652                           status	equ	0xFD8
  3653                           
  3654 ;; *************** function _high_isr *****************
  3655 ;; Defined at:
  3656 ;;		line 30 in file "interrupts.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;		None
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;		None
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  1    wreg      void 
  3663 ;; Registers used:
  3664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3672 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3673 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3674 ;;Total ram usage:       15 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; Hardware stack levels required when called:    1
  3677 ;; This function calls:
  3678 ;;		_appendChar
  3679 ;; This function is called by:
  3680 ;;		Interrupt level 2
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           	psect	intcode
  3685  000008                     __pintcode:
  3686                           	opt stack 0
  3687  000008                     _high_isr:
  3688                           	opt stack 24
  3689                           
  3690                           ;incstack = 0
  3691  000008  823E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3692  00000A  EF37  F00A         	goto	int_func
  3693                           pclatu	equ	0xFFB
  3694                           pclath	equ	0xFFA
  3695                           tblptru	equ	0xFF8
  3696                           tblptrh	equ	0xFF7
  3697                           tblptrl	equ	0xFF6
  3698                           tablat	equ	0xFF5
  3699                           prodh	equ	0xFF4
  3700                           prodl	equ	0xFF3
  3701                           intcon	equ	0xFF2
  3702                           indf0	equ	0xFEF
  3703                           postinc0	equ	0xFEE
  3704                           fsr0h	equ	0xFEA
  3705                           fsr0l	equ	0xFE9
  3706                           wreg	equ	0xFE8
  3707                           indf1	equ	0xFE7
  3708                           postdec1	equ	0xFE5
  3709                           fsr1h	equ	0xFE2
  3710                           fsr1l	equ	0xFE1
  3711                           bsr	equ	0xFE0
  3712                           indf2	equ	0xFDF
  3713                           postinc2	equ	0xFDE
  3714                           postdec2	equ	0xFDD
  3715                           plusw2	equ	0xFDB
  3716                           fsr2h	equ	0xFDA
  3717                           fsr2l	equ	0xFD9
  3718                           status	equ	0xFD8
  3719                           
  3720                           	psect	intcode_body
  3721  00146E                     __pintcode_body:
  3722                           	opt stack 24
  3723  00146E                     int_func:
  3724                           	opt stack 24
  3725  00146E  CFFA F003          	movff	pclath,??_high_isr+1
  3726  001472  CFFB F004          	movff	pclatu,??_high_isr+2
  3727  001476  CFE9 F005          	movff	fsr0l,??_high_isr+3
  3728  00147A  CFEA F006          	movff	fsr0h,??_high_isr+4
  3729  00147E  CFE1 F007          	movff	fsr1l,??_high_isr+5
  3730  001482  CFE2 F008          	movff	fsr1h,??_high_isr+6
  3731  001486  CFD9 F009          	movff	fsr2l,??_high_isr+7
  3732  00148A  CFDA F00A          	movff	fsr2h,??_high_isr+8
  3733  00148E  CFF3 F00B          	movff	prodl,??_high_isr+9
  3734  001492  CFF4 F00C          	movff	prodh,??_high_isr+10
  3735  001496  CFF6 F00D          	movff	tblptrl,??_high_isr+11
  3736  00149A  CFF7 F00E          	movff	tblptrh,??_high_isr+12
  3737  00149E  CFF8 F00F          	movff	tblptru,??_high_isr+13
  3738  0014A2  CFF5 F010          	movff	tablat,??_high_isr+14
  3739                           
  3740                           ;interrupts.c: 45: if(RC1IF){
  3741  0014A6  AA9E               	btfss	3998,5,c	;volatile
  3742  0014A8  D00F               	goto	i2l1681
  3743                           
  3744                           ;interrupts.c: 46: LATAbits.LATA0 = !LATAbits.LATA0;
  3745  0014AA  B089               	btfsc	3977,0,c	;volatile
  3746  0014AC  D003               	goto	i2u97_40
  3747  0014AE  6A02               	clrf	??_high_isr& (0+255),c
  3748  0014B0  2A02               	incf	??_high_isr& (0+255),f,c
  3749  0014B2  D001               	goto	i2u98_48
  3750  0014B4                     i2u97_40:
  3751  0014B4  6A02               	clrf	??_high_isr& (0+255),c
  3752  0014B6                     i2u98_48:
  3753  0014B6  5089               	movf	3977,w,c	;volatile
  3754  0014B8  1802               	xorwf	??_high_isr,w,c
  3755  0014BA  0BFE               	andlw	-2
  3756  0014BC  1802               	xorwf	??_high_isr,w,c
  3757  0014BE  6E89               	movwf	3977,c	;volatile
  3758                           
  3759                           ;interrupts.c: 47: appendChar(RCREG1);
  3760  0014C0  50AF               	movf	4015,w,c	;volatile
  3761  0014C2  ECE7  F00C         	call	_appendChar
  3762                           
  3763                           ;interrupts.c: 49: RC1IF = 0;
  3764  0014C6  9A9E               	bcf	3998,5,c	;volatile
  3765  0014C8                     i2l1681:
  3766                           
  3767                           ;interrupts.c: 50: }
  3768                           ;interrupts.c: 52: if(RC2IF){
  3769  0014C8  BAA4               	btfsc	4004,5,c	;volatile
  3770                           
  3771                           ;interrupts.c: 57: RC2IF = 0;
  3772  0014CA  9AA4               	bcf	4004,5,c	;volatile
  3773  0014CC  C010  FFF5         	movff	??_high_isr+14,tablat
  3774  0014D0  C00F  FFF8         	movff	??_high_isr+13,tblptru
  3775  0014D4  C00E  FFF7         	movff	??_high_isr+12,tblptrh
  3776  0014D8  C00D  FFF6         	movff	??_high_isr+11,tblptrl
  3777  0014DC  C00C  FFF4         	movff	??_high_isr+10,prodh
  3778  0014E0  C00B  FFF3         	movff	??_high_isr+9,prodl
  3779  0014E4  C00A  FFDA         	movff	??_high_isr+8,fsr2h
  3780  0014E8  C009  FFD9         	movff	??_high_isr+7,fsr2l
  3781  0014EC  C008  FFE2         	movff	??_high_isr+6,fsr1h
  3782  0014F0  C007  FFE1         	movff	??_high_isr+5,fsr1l
  3783  0014F4  C006  FFEA         	movff	??_high_isr+4,fsr0h
  3784  0014F8  C005  FFE9         	movff	??_high_isr+3,fsr0l
  3785  0014FC  C004  FFFB         	movff	??_high_isr+2,pclatu
  3786  001500  C003  FFFA         	movff	??_high_isr+1,pclath
  3787  001504  923E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3788  001506  0011               	retfie		f
  3789  001508                     __end_of_high_isr:
  3790                           	opt stack 0
  3791                           pclatu	equ	0xFFB
  3792                           pclath	equ	0xFFA
  3793                           tblptru	equ	0xFF8
  3794                           tblptrh	equ	0xFF7
  3795                           tblptrl	equ	0xFF6
  3796                           tablat	equ	0xFF5
  3797                           prodh	equ	0xFF4
  3798                           prodl	equ	0xFF3
  3799                           intcon	equ	0xFF2
  3800                           indf0	equ	0xFEF
  3801                           postinc0	equ	0xFEE
  3802                           fsr0h	equ	0xFEA
  3803                           fsr0l	equ	0xFE9
  3804                           wreg	equ	0xFE8
  3805                           indf1	equ	0xFE7
  3806                           postdec1	equ	0xFE5
  3807                           fsr1h	equ	0xFE2
  3808                           fsr1l	equ	0xFE1
  3809                           bsr	equ	0xFE0
  3810                           indf2	equ	0xFDF
  3811                           postinc2	equ	0xFDE
  3812                           postdec2	equ	0xFDD
  3813                           plusw2	equ	0xFDB
  3814                           fsr2h	equ	0xFDA
  3815                           fsr2l	equ	0xFD9
  3816                           status	equ	0xFD8
  3817                           
  3818 ;; *************** function _appendChar *****************
  3819 ;; Defined at:
  3820 ;;		line 34 in file "bufferhandler.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;  data            1    wreg     unsigned char 
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;  data            1    0[COMRAM] unsigned char 
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      void 
  3827 ;; Registers used:
  3828 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3835 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3837 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3838 ;;Total ram usage:        1 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; This function calls:
  3841 ;;		Nothing
  3842 ;; This function is called by:
  3843 ;;		_high_isr
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           	psect	text24
  3848  0019CE                     __ptext24:
  3849                           	opt stack 0
  3850  0019CE                     _appendChar:
  3851                           	opt stack 24
  3852                           
  3853                           ;incstack = 0
  3854                           ;appendChar@data stored from wreg
  3855  0019CE  6E01               	movwf	appendChar@data,c
  3856                           
  3857                           ;bufferhandler.c: 35: tmpString[index] = data;
  3858  0019D0  0E7D               	movlw	low _tmpString
  3859  0019D2  243C               	addwf	_index,w,c
  3860  0019D4  6ED9               	movwf	fsr2l,c
  3861  0019D6  0E00               	movlw	high _tmpString
  3862  0019D8  203D               	addwfc	_index+1,w,c
  3863  0019DA  6EDA               	movwf	fsr2h,c
  3864  0019DC  C001  FFDF         	movff	appendChar@data,indf2
  3865                           
  3866                           ;bufferhandler.c: 36: index++;
  3867  0019E0  4A3C               	infsnz	_index,f,c
  3868  0019E2  2A3D               	incf	_index+1,f,c
  3869  0019E4  0012               	return		;funcret
  3870  0019E6                     __end_of_appendChar:
  3871                           	opt stack 0
  3872                           pclatu	equ	0xFFB
  3873                           pclath	equ	0xFFA
  3874                           tblptru	equ	0xFF8
  3875                           tblptrh	equ	0xFF7
  3876                           tblptrl	equ	0xFF6
  3877                           tablat	equ	0xFF5
  3878                           prodh	equ	0xFF4
  3879                           prodl	equ	0xFF3
  3880                           intcon	equ	0xFF2
  3881                           indf0	equ	0xFEF
  3882                           postinc0	equ	0xFEE
  3883                           fsr0h	equ	0xFEA
  3884                           fsr0l	equ	0xFE9
  3885                           wreg	equ	0xFE8
  3886                           indf1	equ	0xFE7
  3887                           postdec1	equ	0xFE5
  3888                           fsr1h	equ	0xFE2
  3889                           fsr1l	equ	0xFE1
  3890                           bsr	equ	0xFE0
  3891                           indf2	equ	0xFDF
  3892                           postinc2	equ	0xFDE
  3893                           postdec2	equ	0xFDD
  3894                           plusw2	equ	0xFDB
  3895                           fsr2h	equ	0xFDA
  3896                           fsr2l	equ	0xFD9
  3897                           status	equ	0xFD8
  3898                           pclatu	equ	0xFFB
  3899                           pclath	equ	0xFFA
  3900                           tblptru	equ	0xFF8
  3901                           tblptrh	equ	0xFF7
  3902                           tblptrl	equ	0xFF6
  3903                           tablat	equ	0xFF5
  3904                           prodh	equ	0xFF4
  3905                           prodl	equ	0xFF3
  3906                           intcon	equ	0xFF2
  3907                           indf0	equ	0xFEF
  3908                           postinc0	equ	0xFEE
  3909                           fsr0h	equ	0xFEA
  3910                           fsr0l	equ	0xFE9
  3911                           wreg	equ	0xFE8
  3912                           indf1	equ	0xFE7
  3913                           postdec1	equ	0xFE5
  3914                           fsr1h	equ	0xFE2
  3915                           fsr1l	equ	0xFE1
  3916                           bsr	equ	0xFE0
  3917                           indf2	equ	0xFDF
  3918                           postinc2	equ	0xFDE
  3919                           postdec2	equ	0xFDD
  3920                           plusw2	equ	0xFDB
  3921                           fsr2h	equ	0xFDA
  3922                           fsr2l	equ	0xFD9
  3923                           status	equ	0xFD8
  3924                           
  3925                           	psect	rparam
  3926  0000                     pclatu	equ	0xFFB
  3927                           pclath	equ	0xFFA
  3928                           tblptru	equ	0xFF8
  3929                           tblptrh	equ	0xFF7
  3930                           tblptrl	equ	0xFF6
  3931                           tablat	equ	0xFF5
  3932                           prodh	equ	0xFF4
  3933                           prodl	equ	0xFF3
  3934                           intcon	equ	0xFF2
  3935                           indf0	equ	0xFEF
  3936                           postinc0	equ	0xFEE
  3937                           fsr0h	equ	0xFEA
  3938                           fsr0l	equ	0xFE9
  3939                           wreg	equ	0xFE8
  3940                           indf1	equ	0xFE7
  3941                           postdec1	equ	0xFE5
  3942                           fsr1h	equ	0xFE2
  3943                           fsr1l	equ	0xFE1
  3944                           bsr	equ	0xFE0
  3945                           indf2	equ	0xFDF
  3946                           postinc2	equ	0xFDE
  3947                           postdec2	equ	0xFDD
  3948                           plusw2	equ	0xFDB
  3949                           fsr2h	equ	0xFDA
  3950                           fsr2l	equ	0xFD9
  3951                           status	equ	0xFD8
  3952                           
  3953                           	psect	temp
  3954  00003E                     btemp:
  3955                           	opt stack 0
  3956  00003E                     	ds	1
  3957  0000                     int$flags	set	btemp
  3958                           pclatu	equ	0xFFB
  3959                           pclath	equ	0xFFA
  3960                           tblptru	equ	0xFF8
  3961                           tblptrh	equ	0xFF7
  3962                           tblptrl	equ	0xFF6
  3963                           tablat	equ	0xFF5
  3964                           prodh	equ	0xFF4
  3965                           prodl	equ	0xFF3
  3966                           intcon	equ	0xFF2
  3967                           indf0	equ	0xFEF
  3968                           postinc0	equ	0xFEE
  3969                           fsr0h	equ	0xFEA
  3970                           fsr0l	equ	0xFE9
  3971                           wreg	equ	0xFE8
  3972                           indf1	equ	0xFE7
  3973                           postdec1	equ	0xFE5
  3974                           fsr1h	equ	0xFE2
  3975                           fsr1l	equ	0xFE1
  3976                           bsr	equ	0xFE0
  3977                           indf2	equ	0xFDF
  3978                           postinc2	equ	0xFDE
  3979                           postdec2	equ	0xFDD
  3980                           plusw2	equ	0xFDB
  3981                           fsr2h	equ	0xFDA
  3982                           fsr2l	equ	0xFD9
  3983                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    0
    Data        17
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      61
    BANK0           160     35     140
    BANK1           256      0      70
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 70
		 -> parsedString(COMRAM[17]), allDataString(BANK1[70]), tmpString(BANK0[70]), STR_2(CODE[4]), 
		 -> STR_1(CODE[5]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 70
		 -> parsedString(COMRAM[17]), allDataString(BANK1[70]), tmpString(BANK0[70]), STR_2(CODE[4]), 
		 -> STR_1(CODE[5]), 

    transformToTwoDigitNumber@number	PTR int  size(2) Largest target is 6
		 -> SOC(BANK0[6]), 

    writeString@str	PTR unsigned char  size(2) Largest target is 70
		 -> parsedString(COMRAM[17]), allDataString(BANK1[70]), STR_2(CODE[4]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_writeResult
    _writeString->_strlen
    _wait_ms->___lmul
    _transformToTwoDigitNumber->___wmul
    _checkString->_checkPos
    _checkPos->_strlen
    _clearBuffer->_strlen

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_appendChar

Critical Paths under _main in BANK0

    _main->_parseString
    _writeResult->_wait_ms
    _writeString->_strlen
    _wait_ms->___lmul
    _parseString->_checkString
    _transformToTwoDigitNumber->___wmul
    _checkString->_checkPos
    _checkPos->_strlen
    _clearBuffer->_strlen

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8640
                                             34 BANK0      1     1      0
                _ConfigureOscillator
                            _InitApp
                          _UART_Init
                         _UART_Write
                        _clearBuffer
                      _copyTmpBuffer
                     _isItLongEnough
                            _isValid
                        _parseString
                            _wait_ms
                        _writeResult
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeResult                                          1     1      0    2113
                                             37 COMRAM     1     1      0
                            _wait_ms
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeString                                          7     4      3    1462
                                              2 BANK0      7     4      3
                         _UART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           2     1      1     324
                                             33 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _wait_ms                                              2     0      2     589
                                              8 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     404
                                             33 COMRAM     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (1) _parseString                                         22    22      0    3544
                                             12 BANK0     22    22      0
                            ___awdiv
                            ___awmod
                        _checkString
                          _lenHelper
          _transformToTwoDigitNumber
 ---------------------------------------------------------------------------------
 (2) _transformToTwoDigitNumber                            8     4      4     893
                                              2 BANK0      8     4      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     386
                                             33 COMRAM     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _lenHelper                                            2     0      2     170
                                             33 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _checkString                                          6     6      0     760
                                              6 BANK0      6     6      0
                           _checkPos
 ---------------------------------------------------------------------------------
 (3) _checkPos                                             5     3      2     568
                                             37 COMRAM     1     1      0
                                              2 BANK0      4     2      2
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     587
                                             33 COMRAM     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     599
                                             33 COMRAM     4     0      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _isValid                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _isItLongEnough                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _copyTmpBuffer                                        3     3      0      99
                                             33 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _clearBuffer                                          2     2      0     429
                                              2 BANK0      2     2      0
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     361
                                             33 COMRAM     4     2      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4      77
                                             33 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             17    17      0       0
                                             16 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            15    15      0      22
                                              1 COMRAM    15    15      0
                         _appendChar
 ---------------------------------------------------------------------------------
 (7) _appendChar                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _UART_Init
   _UART_Write
   _clearBuffer
     _strlen
   _copyTmpBuffer
   _isItLongEnough
   _isValid
   _parseString
     ___awdiv
     ___awmod
     _checkString
       _checkPos
         _strlen
     _lenHelper
     _transformToTwoDigitNumber
       ___wmul
   _wait_ms
     ___lmul
   _writeResult
     _wait_ms
       ___lmul
     _writeString
       _UART_Write
       _strlen
   _writeString
     _UART_Write
     _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)
   _appendChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      46       8       27.3%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     23      8C       5       87.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     26      3D       1       64.9%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10F       6        0.0%
DATA                 0      0     10F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Apr 24 22:25:33 2017

 __end_of_transformToTwoDigitNumber 1240                                  l54 13C4  
                                l73 170C                                  l57 13C6  
                      ___awdiv@sign 00CA                      writeResult@dev 0026  
                                bsr 000FE0                 ___wmul@multiplicand 0024  
                      __CFG_CP0$OFF 000000                                 l150 19AC  
                               l146 19A2                                 l262 118A  
                               _SOC 00C3                        ___awmod@sign 00CA  
                               wreg 000FE8                          _TXSTA1bits 000FAD  
                      __CFG_IESO$ON 000000                          _TXSTA2bits 000FA8  
                              l2003 17F2                                l2015 19CA  
                              l2033 191C                                l2043 1896  
                              l2125 138C                                l2039 1876  
                              l2057 0F82                                l2065 1004  
                              l2139 13BE                                l2077 1070  
                              l2079 10A8                                l2089 10F4  
                              l1811 126A                                l1803 16FC  
                              l1911 1416                                l1807 1254  
                              l1831 1136                                l1823 110E  
                              l1913 1420                                l1905 13FC  
                              l1755 1724                                l1931 1464  
                              l1923 1444                                l1915 1424  
                              l1819 1310                                l1851 1202  
                              l1835 1140                                l1757 172A  
                              l1773 169C                                l1845 1194  
                              l1927 1450                                l1951 153C  
                              l1943 1520                                l1775 16A2  
                              l1953 1546                                l1769 167A  
                              l1881 17A8                                l1857 120C  
                              l1785 1608                                l1955 154A  
                              l1963 156A                                l1947 152C  
                              l1875 178E                                l1859 1234  
                              l1795 1592                                l1789 1626  
                              l1967 157C                                l1959 155E  
                              l1887 17C2                                l1799 15DA  
                              l1899 13EA                                l1999 17D8  
                __CFG_WPFP$PAGE_127 000000                       _copyTmpBuffer 186C  
                              STR_1 0F01                                STR_2 0F06  
                              STR_3 0F05                                u1030 174C  
                              u1120 15D0                                u1210 179E  
                              u1220 17B8                                u1037 1742  
                              u1127 15C6                                u1170 112A  
                              u1180 1172                                u1190 11FC  
                              u1360 19C6                                _RCIF 007CF5  
                     __CFG_FCMEN$ON 000000                                _main 131C  
                              fsr0h 000FEA                                fsr1h 000FE2  
                              indf0 000FEF                                fsr2h 000FDA  
                              fsr0l 000FE9                                indf1 000FE7  
                              indf2 000FDF                                fsr1l 000FE1  
                              fsr2l 000FD9                                btemp 003E  
                              prodh 000FF4                                prodl 000FF3  
                              start 00A6                      writeString@dev 00CD  
                      ___param_bank 000000                      writeString@str 00CB  
                   __end_of_InitApp 199A                       __CFG_PLLDIV$1 000000  
                      _BAUDCON1bits 000F7E                        _BAUDCON2bits 000F7C  
                             ?_main 0001                     __end_of___awdiv 146E  
                   __end_of___awmod 1586                     ___awdiv@divisor 0024  
                             _RC1IE 007CED                               _RC1IF 007CF5  
                             _RC2IE 007D1D                               _RC2IF 007D25  
                   ___awdiv@counter 00C9                         _writeResult 18AC  
                             _RPOR8 000EC8                 _ConfigureOscillator 19F8  
                       _writeString 1586                 ___lmul@multiplicand 00CD  
                  ??_isItLongEnough 0022                         ?_UART_Write 0022  
                __size_of_UART_Init 0032                __size_of_checkString 00DC  
                   __end_of_isValid 1920                               _index 003C  
                    ?_copyTmpBuffer 0001                      __CFG_CLKOEC$ON 000000  
                   __end_of_low_isr 00A6                               pclath 000FFA  
                             tablat 000FF5                     __end_of_wait_ms 171A  
                             plusw2 000FDB                  parseString@chgStop 00D9  
                             status 000FD8                ?_ConfigureOscillator 0001  
              __size_of_clearBuffer 0052             __CFG_DSWDTOSC$INTOSCREF 000000  
                   __initialization 181E                        ?_parseString 0001  
                parseString@socSize 00DC                        __end_of_main 13D2  
                            ??_main 0027                       __activetblptr 000003  
                  ___awdiv@dividend 0022                      __CFG_WDTEN$OFF 000000  
                            i2l1681 14C8                              _INTCON 000FF2  
                            _RCREG1 000FAF                              _RCREG2 000FAA  
                            _RCSTA1 000FAC                              _RCSTA2 000F9C  
                            _SPBRG1 000FB0                              _SPBRG2 000FAB  
                            _PPSCON 000EBF                              _TRISB4 007C9C  
                            _TRISB5 007C9D                      __CFG_WPCFG$OFF 000000  
                            _TRISC6 007CA6                              _TRISC7 007CA7  
                  __end_of_checkPos 16C0                              _TXREG1 000FAE  
                            _TXREG2 000FA9                              _TXSTA1 000FAD  
                            _TXSTA2 000FA8                           ??_InitApp 0022  
             ??_ConfigureOscillator 0022                      __CFG_WPDIS$OFF 000000  
                    __CFG_XINST$OFF 000000                   __end_of_UART_Init 1952  
                  __end_of_high_isr 1508                              ___lmul 15F8  
               __size_of_UART_Write 001C                              ___wmul 1952  
                         ??___awdiv 0026                      __CFG_STVREN$ON 000000  
                         ??___awmod 0026              parseString@socStartPos 00E1  
                            clear_0 1844                              clear_1 1850  
                  ___awdiv@quotient 00CB                     ___awmod@divisor 0024  
                   ___awmod@counter 00C9                              _strlen 171A  
                         ??_isValid 0022                        __pdataCOMRAM 0027  
                      __mediumconst 0000                           ??_low_isr 0011  
                            tblptrh 000FF7                     ??_copyTmpBuffer 0022  
                            tblptrl 000FF6                              tblptru 000FF8  
                         ??_wait_ms 0026                 parseString@chgStart 00DE  
                   __CFG_DSBOREN$ON 000000                __CFG_LS48MHZ$SYS48X8 000000  
                        __accesstop 0060             __end_of__initialization 1862  
                     ___rparam_used 000001                     __CFG_IOL1WAY$ON 000000  
              __CFG_WPEND$PAGE_WPFP 000000                      __pcstackCOMRAM 0001  
                   __CFG_DSWDTEN$ON 000000                     __CFG_DSWDTPS$G2 000000  
                   __CFG_OSC$INTOSC 000000                  __size_of_lenHelper 0058  
                        __pbssBANK0 0060                          __pbssBANK1 0100  
                           ?___lmul 00C9                             ?___wmul 0022  
              __size_of_parseString 01F6          ?_transformToTwoDigitNumber 00CB  
                    ___lmul@product 0022                          _appendChar 19CE  
                           ?_strlen 0022                       _allDataString 0100  
                      ?_writeResult 0001                           ?_checkPos 00CB  
                      ?_writeString 00CB                        ??_UART_Write 0023  
                           _SPBRGH1 000F7F                             _SPBRGH2 000F7D  
                           _RPINR16 000EF7                             i2u97_40 14B4  
                           i2u98_48 14B6                           ?_high_isr 0001  
                           _InitApp 197C                             __Hparam 0000  
                           __Lparam 0000       transformToTwoDigitNumber@size 00CD  
                 __end_of_lenHelper 17CC                             ___awdiv 13D2  
                   __size_of___lmul 006C                             ___awmod 1508  
                   __size_of___wmul 002A                  __end_of_UART_Write 19B6  
                      __psmallconst 0F00                             _charSOC 007A  
                           __pcinit 181E                             __ramtop 0F00  
                           __ptext0 131C                             __ptext1 18AC  
                           __ptext2 1586                             __ptext3 199A  
                           __ptext4 16C0                             __ptext5 15F8  
                           __ptext6 0F0C                             __ptext7 1102  
                           __ptext8 1952                             __ptext9 1774  
                           _isValid 18E6                       ??_checkString 00CF  
                   __size_of_strlen 005A                          ??_checkPos 0026  
                  ___awmod@dividend 0022                             _low_isr 0018  
                           _wait_ms 16C0                             main@var 00EB  
                    parseString@CHG 00E0                          ??_high_isr 0002  
                    __pintcode_body 146E                end_of_initialization 1862  
                    parseString@tmp 00E9                       ??_clearBuffer 0026  
                           int_func 146E                             postdec1 000FE5  
                           postdec2 000FDD                             postinc0 000FEE  
                           postinc2 000FDE                         wait_ms@time 00D1  
                           strlen@s 0022                           _UART_Init 1920  
                         _PORTDbits 000F83                         ?_appendChar 0001  
                    UART_Write@data 0023                    __CFG_CPUDIV$OSC1 000000  
                         _TRISAbits 000F92                           _TRISDbits 000F95  
               __end_of_checkString 131C                   __CFG_SOSCSEL$HIGH 000000  
       __end_of_ConfigureOscillator 1A04                        writeString@i 00D0  
                        lenHelper@x 0022             __size_of_isItLongEnough 0018  
               __CFG_MSSP7B_EN$MSK7 000000                 __end_of_clearBuffer 181E  
              parseString@socEndPos 00E3                      __end_of___lmul 1664  
                    __end_of___wmul 197C                          ?_UART_Init 0022  
                     __pidataCOMRAM 19E6                      __end_of_strlen 1774  
               start_initialization 181E                __size_of_writeResult 003A  
                 parseString@tmpSOC 00DB                __size_of_writeString 0072  
             __end_of_copyTmpBuffer 18AC                 __size_of_appendChar 0018  
                          ??___lmul 0022                            ??___wmul 0026  
                 __CFG_ADCSEL$BIT10 000000                        parseString@i 00E7  
                      parseString@k 00E5     transformToTwoDigitNumber@number 00CB  
   transformToTwoDigitNumber@result 00D1         ??_transformToTwoDigitNumber 00CF  
                          ??_strlen 0024                         _checkString 1240  
                       __pbssCOMRAM 0038                       __pcstackBANK0 00C9  
                 __size_of_checkPos 005C                        checkString@i 00D3  
                 __size_of_high_isr 1500                         _clearBuffer 17CC  
                          ?_InitApp 0001                       ??_parseString 00D5  
                         __pintcode 0008                            ?___awdiv 0022  
                          ?___awmod 0022                         __pintcodelo 0018  
                       ??_UART_Init 0026                           _lenHelper 1774  
                          ?_isValid 0001                         __smallconst 0F00  
              __CFG_RTCOSC$T1OSCREF 000000                            ?_low_isr 0001  
                          ?_wait_ms 00D1                           checkPos@i 00CD  
         _transformToTwoDigitNumber 1102                      copyTmpBuffer@i 0023  
                    ___wmul@product 00C9                      _isItLongEnough 19B6  
                          _LATAbits 000F89                    __CFG_WDTPS$32768 000000  
                      _parsedString 0027                        clearBuffer@i 00CB  
                     UART_Write@dev 0022                           _tmpString 007D  
                 UART_Init@baudrate 0022                           _positions 0060  
                        ?_lenHelper 0022                 __end_of_parseString 1102  
                      ??_appendChar 0001                   ___wmul@multiplier 0022  
                 __CFG_CFGPLLEN$OFF 000000                   ___lmul@multiplier 00C9  
                         copy_data0 1832              __end_of_isItLongEnough 19CE  
                __end_of_appendChar 19E6                    __size_of_InitApp 001E  
                          __Hrparam 0000                            __Lrparam 0000  
                       checkPos@pos 00CB                    __size_of___awdiv 009C  
                  __size_of___awmod 007E                    __size_of_isValid 003A  
                          _checkPos 1664                         _toCharArray 0076  
                  __size_of_low_isr 008E                            __ptext10 1240  
                          __ptext11 1664                            __ptext20 197C  
                          __ptext12 1508                            __ptext21 19F8  
                          __ptext13 13D2                            __ptext14 18E6  
                          __ptext15 19B6                            __ptext24 19CE  
                          __ptext16 186C                            __ptext17 17CC  
                          __ptext18 171A                            __ptext19 1920  
                  __size_of_wait_ms 005A                            _high_isr 0008  
                   ?_isItLongEnough 0001                       __size_of_main 00B6  
                    appendChar@data 0001        __size_of_ConfigureOscillator 000C  
                       _parseString 0F0C                            int$flags 003E  
                       ??_lenHelper 0024                       ??_writeResult 0026  
                      ?_checkString 0001                       ??_writeString 00CE  
                       _OSCTUNEbits 000F9B                            intlevel1 0000  
                          intlevel2 0000                        ?_clearBuffer 0001  
                        _OSCCONbits 000FD3  __size_of_transformToTwoDigitNumber 013E  
            __size_of_copyTmpBuffer 0040                        wait_ms@timel 0038  
                          strlen@cp 00C9                          _UART_Write 199A  
               __end_of_writeResult 18E6                 __end_of_writeString 15F8  
