

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Apr 02 13:30:28 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F47J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           ; Version 1.41
    33                           ; Generated 25/01/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F47J53 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     _RPINR16	set	3831
    67  0000                     _RPOR8	set	3784
    68  0000                     _PPSCON	set	3775
    69  0000                     _RCREG2	set	4010
    70  0000                     _TXREG2	set	4009
    71  0000                     _TXSTA2bits	set	4008
    72  0000                     _TXREG1	set	4014
    73  0000                     _TXSTA1bits	set	4013
    74  0000                     _SPBRGH2	set	3965
    75  0000                     _SPBRG2	set	4011
    76  0000                     _BAUDCON2bits	set	3964
    77  0000                     _TXSTA2	set	4008
    78  0000                     _RCSTA2	set	3996
    79  0000                     _SPBRGH1	set	3967
    80  0000                     _SPBRG1	set	4016
    81  0000                     _BAUDCON1bits	set	3966
    82  0000                     _RCSTA1	set	4012
    83  0000                     _TXSTA1	set	4013
    84  0000                     _INTCON	set	4082
    85  0000                     _OSCTUNEbits	set	3995
    86  0000                     _OSCCONbits	set	4051
    87  0000                     _PORTDbits	set	3971
    88  0000                     _TRISDbits	set	3989
    89  0000                     _TRISAbits	set	3986
    90  0000                     _RCREG1	set	4015
    91  0000                     _LATAbits	set	3977
    92  0000                     _RCIF	set	31989
    93  0000                     _TRISB5	set	31901
    94  0000                     _TRISB4	set	31900
    95  0000                     _RC2IE	set	32029
    96  0000                     _TRISC6	set	31910
    97  0000                     _TRISC7	set	31911
    98  0000                     _RC1IE	set	31981
    99  0000                     _RC2IF	set	32037
   100  0000                     _RC1IF	set	31989
   101                           
   102                           	psect	smallconst
   103  000F00                     __psmallconst:
   104                           	opt stack 0
   105  000F00  00                 	db	0
   106  000F01                     STR_1:
   107  000F01  4C                 	db	76	;'L'
   108  000F02  20                 	db	32
   109  000F03  35                 	db	53	;'5'
   110  000F04  30                 	db	48	;'0'
   111  000F05  00                 	db	0
   112  000F06                     STR_2:
   113  000F06  44                 	db	68	;'D'
   114  000F07  20                 	db	32
   115  000F08  38                 	db	56	;'8'
   116  000F09  00                 	db	0
   117  0000                     
   118                           ; #config settings
   119  000F0A  00                 	db	0	; dummy byte at the end
   120  0000                     
   121                           	psect	cinit
   122  0012A6                     __pcinit:
   123                           	opt stack 0
   124  0012A6                     start_initialization:
   125                           	opt stack 0
   126  0012A6                     __initialization:
   127                           	opt stack 0
   128                           
   129                           ; Clear objects allocated to BANK0 (140 bytes)
   130  0012A6  EE00  F060         	lfsr	0,__pbssBANK0
   131  0012AA  0E8C               	movlw	140
   132  0012AC                     clear_0:
   133  0012AC  6AEE               	clrf	postinc0,c
   134  0012AE  06E8               	decf	wreg,f,c
   135  0012B0  E1FD               	bnz	clear_0
   136                           
   137                           ; Clear objects allocated to COMRAM (6 bytes)
   138  0012B2  6A37               	clrf	(__pbssCOMRAM+5)& (0+255),c
   139  0012B4  6A36               	clrf	(__pbssCOMRAM+4)& (0+255),c
   140  0012B6  6A35               	clrf	(__pbssCOMRAM+3)& (0+255),c
   141  0012B8  6A34               	clrf	(__pbssCOMRAM+2)& (0+255),c
   142  0012BA  6A33               	clrf	(__pbssCOMRAM+1)& (0+255),c
   143  0012BC  6A32               	clrf	__pbssCOMRAM& (0+255),c
   144  0012BE                     end_of_initialization:
   145                           	opt stack 0
   146  0012BE                     __end_of__initialization:
   147                           	opt stack 0
   148  0012BE  9038               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   149  0012C0  9238               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   150  0012C2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   151  0012C4  6EF8               	movwf	tblptru,c
   152  0012C6  0100               	movlb	0
   153  0012C8  EF86  F007         	goto	_main	;jump to C main() function
   154                           tblptru	equ	0xFF8
   155                           postinc0	equ	0xFEE
   156                           wreg	equ	0xFE8
   157                           
   158                           	psect	bssCOMRAM
   159  000032                     __pbssCOMRAM:
   160                           	opt stack 0
   161  000032                     wait_ms@timel:
   162                           	opt stack 0
   163  000032                     	ds	4
   164  000036                     _index:
   165                           	opt stack 0
   166  000036                     	ds	2
   167                           tblptru	equ	0xFF8
   168                           postinc0	equ	0xFEE
   169                           wreg	equ	0xFE8
   170                           
   171                           	psect	bssBANK0
   172  000060                     __pbssBANK0:
   173                           	opt stack 0
   174  000060                     _realString:
   175                           	opt stack 0
   176  000060                     	ds	70
   177  0000A6                     _tmpString:
   178                           	opt stack 0
   179  0000A6                     	ds	70
   180                           tblptru	equ	0xFF8
   181                           postinc0	equ	0xFEE
   182                           wreg	equ	0xFE8
   183                           
   184                           	psect	cstackCOMRAM
   185  000001                     __pcstackCOMRAM:
   186                           	opt stack 0
   187  000001                     appendChar@data:
   188                           	opt stack 0
   189                           
   190                           ; 1 bytes @ 0x0
   191  000001                     	ds	1
   192  000002                     ??_high_isr:
   193                           
   194                           ; 1 bytes @ 0x1
   195  000002                     	ds	15
   196  000011                     ??_low_isr:
   197                           
   198                           ; 1 bytes @ 0x10
   199  000011                     	ds	17
   200  000022                     ??_copyTmpBuffer:
   201  000022                     ?_isValid:
   202                           	opt stack 0
   203  000022                     ?_strlen:
   204                           	opt stack 0
   205  000022                     ?___lmul:
   206                           	opt stack 0
   207  000022                     UART_Write@dev:
   208                           	opt stack 0
   209  000022                     strlen@s:
   210                           	opt stack 0
   211  000022                     UART_Init@baudrate:
   212                           	opt stack 0
   213  000022                     ___lmul@multiplier:
   214                           	opt stack 0
   215                           
   216                           ; 4 bytes @ 0x21
   217  000022                     	ds	1
   218  000023                     UART_Write@data:
   219                           	opt stack 0
   220  000023                     copyTmpBuffer@i:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x22
   224  000023                     	ds	1
   225  000024                     ??_strlen:
   226                           
   227                           ; 1 bytes @ 0x23
   228  000024                     	ds	2
   229  000026                     strlen@cp:
   230                           	opt stack 0
   231  000026                     ___lmul@multiplicand:
   232                           	opt stack 0
   233                           
   234                           ; 4 bytes @ 0x25
   235  000026                     	ds	2
   236  000028                     writeString@str:
   237                           	opt stack 0
   238  000028                     clearBuffer@i:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x27
   242  000028                     	ds	2
   243  00002A                     writeString@dev:
   244                           	opt stack 0
   245  00002A                     ___lmul@product:
   246                           	opt stack 0
   247                           
   248                           ; 4 bytes @ 0x29
   249  00002A                     	ds	1
   250  00002B                     ??_writeString:
   251                           
   252                           ; 1 bytes @ 0x2A
   253  00002B                     	ds	2
   254  00002D                     writeString@i:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x2C
   258  00002D                     	ds	1
   259  00002E                     wait_ms@time:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0x2D
   263  00002E                     	ds	2
   264  000030                     writeResult@dev:
   265                           	opt stack 0
   266                           
   267                           ; 1 bytes @ 0x2F
   268  000030                     	ds	1
   269  000031                     main@var:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0x30
   273  000031                     	ds	1
   274                           tblptru	equ	0xFF8
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           
   278 ;;
   279 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   280 ;;
   281 ;; *************** function _main *****************
   282 ;; Defined at:
   283 ;;		line 38 in file "main.c"
   284 ;; Parameters:    Size  Location     Type
   285 ;;		None
   286 ;; Auto vars:     Size  Location     Type
   287 ;;  var             1   48[COMRAM] unsigned char 
   288 ;;  result          1    0        unsigned char 
   289 ;; Return value:  Size  Location     Type
   290 ;;                  1    wreg      void 
   291 ;; Registers used:
   292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   293 ;; Tracked objects:
   294 ;;		On entry : 0/0
   295 ;;		On exit  : 0/0
   296 ;;		Unchanged: 0/0
   297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   299 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   301 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   302 ;;Total ram usage:        1 bytes
   303 ;; Hardware stack levels required when called:    6
   304 ;; This function calls:
   305 ;;		_ConfigureOscillator
   306 ;;		_InitApp
   307 ;;		_UART_Init
   308 ;;		_UART_Write
   309 ;;		_clearBuffer
   310 ;;		_copyTmpBuffer
   311 ;;		_isItLongEnough
   312 ;;		_isValid
   313 ;;		_wait_ms
   314 ;;		_writeResult
   315 ;;		_writeString
   316 ;; This function is called by:
   317 ;;		Startup code after reset
   318 ;; This function uses a non-reentrant model
   319 ;;
   320                           
   321                           	psect	text0
   322  000F0C                     __ptext0:
   323                           	opt stack 0
   324  000F0C                     _main:
   325                           	opt stack 25
   326                           
   327                           ;main.c: 44: ConfigureOscillator();
   328                           
   329                           ;incstack = 0
   330  000F0C  ECA8  F009         	call	_ConfigureOscillator	;wreg free
   331                           
   332                           ;main.c: 47: InitApp();
   333  000F10  EC76  F009         	call	_InitApp	;wreg free
   334                           
   335                           ;main.c: 49: UART_Init(19200);
   336  000F14  0E00               	movlw	0
   337  000F16  6E22               	movwf	UART_Init@baudrate,c
   338  000F18  0E4B               	movlw	75
   339  000F1A  6E23               	movwf	UART_Init@baudrate+1,c
   340  000F1C  0E00               	movlw	0
   341  000F1E  6E24               	movwf	UART_Init@baudrate+2,c
   342  000F20  0E00               	movlw	0
   343  000F22  6E25               	movwf	UART_Init@baudrate+3,c
   344  000F24  EC3A  F009         	call	_UART_Init	;wreg free
   345                           
   346                           ;main.c: 50: writeString("L 50", 1);
   347  000F28  0E01               	movlw	low STR_1
   348  000F2A  6E28               	movwf	writeString@str,c
   349  000F2C  0E0F               	movlw	high STR_1
   350  000F2E  6E29               	movwf	writeString@str+1,c
   351  000F30  0E01               	movlw	1
   352  000F32  6E2A               	movwf	writeString@dev,c
   353  000F34  EC25  F008         	call	_writeString	;wreg free
   354                           
   355                           ;main.c: 51: UART_Write(0x0D,1);
   356  000F38  0E01               	movlw	1
   357  000F3A  6E22               	movwf	UART_Write@dev,c
   358  000F3C  0E0D               	movlw	13
   359  000F3E  EC85  F009         	call	_UART_Write
   360                           
   361                           ;main.c: 52: writeString("D 8", 1);
   362  000F42  0E06               	movlw	low STR_2
   363  000F44  6E28               	movwf	writeString@str,c
   364  000F46  0E0F               	movlw	high STR_2
   365  000F48  6E29               	movwf	writeString@str+1,c
   366  000F4A  0E01               	movlw	1
   367  000F4C  6E2A               	movwf	writeString@dev,c
   368  000F4E  EC25  F008         	call	_writeString	;wreg free
   369                           
   370                           ;main.c: 53: UART_Write(0x0D,1);
   371  000F52  0E01               	movlw	1
   372  000F54  6E22               	movwf	UART_Write@dev,c
   373  000F56  0E0D               	movlw	13
   374  000F58  EC85  F009         	call	_UART_Write
   375                           
   376                           ;main.c: 55: uint8_t var = 0;
   377  000F5C  0E00               	movlw	0
   378  000F5E  6E31               	movwf	main@var,c
   379                           
   380                           ;main.c: 56: char result;
   381                           ;main.c: 59: TRISAbits.TRISA0 = 0;
   382  000F60  9092               	bcf	3986,0,c	;volatile
   383                           
   384                           ;main.c: 60: TRISAbits.TRISA1 = 0;
   385  000F62  9292               	bcf	3986,1,c	;volatile
   386                           
   387                           ;main.c: 61: LATAbits.LATA0 = 0;
   388  000F64  9089               	bcf	3977,0,c	;volatile
   389                           
   390                           ;main.c: 62: LATAbits.LATA1 = 0;
   391  000F66  9289               	bcf	3977,1,c	;volatile
   392                           
   393                           ;main.c: 63: TRISDbits.TRISD3 = 1;
   394  000F68  8695               	bsf	3989,3,c	;volatile
   395                           
   396                           ;main.c: 65: clearBuffer();
   397  000F6A  ECF7  F008         	call	_clearBuffer	;wreg free
   398  000F6E                     l1169:
   399                           
   400                           ;main.c: 70: if(isItLongEnough()){
   401  000F6E  EC9F  F009         	call	_isItLongEnough	;wreg free
   402  000F72  0900               	iorlw	0
   403  000F74  B4D8               	btfsc	status,2,c
   404  000F76  D015               	goto	l52
   405                           
   406                           ;main.c: 71: if(isValid()){
   407  000F78  ECD4  F008         	call	_isValid	;wreg free
   408  000F7C  5022               	movf	?_isValid,w,c
   409  000F7E  1023               	iorwf	?_isValid+1,w,c
   410  000F80  B4D8               	btfsc	status,2,c
   411  000F82  D00C               	goto	l1181
   412                           
   413                           ;main.c: 72: LATAbits.LATA1 = 1;
   414  000F84  8289               	bsf	3977,1,c	;volatile
   415                           
   416                           ;main.c: 73: wait_ms(1000);
   417  000F86  0E03               	movlw	3
   418  000F88  6E2F               	movwf	wait_ms@time+1,c
   419  000F8A  0EE8               	movlw	232
   420  000F8C  6E2E               	movwf	wait_ms@time,c
   421  000F8E  EC54  F008         	call	_wait_ms	;wreg free
   422                           
   423                           ;main.c: 74: copyTmpBuffer();
   424  000F92  EC1A  F009         	call	_copyTmpBuffer	;wreg free
   425                           
   426                           ;main.c: 75: clearBuffer();
   427  000F96  ECF7  F008         	call	_clearBuffer	;wreg free
   428                           
   429                           ;main.c: 76: }else{
   430  000F9A  D004               	goto	l55
   431  000F9C                     l1181:
   432                           
   433                           ;main.c: 77: clearBuffer();
   434  000F9C  ECF7  F008         	call	_clearBuffer	;wreg free
   435                           
   436                           ;main.c: 78: }
   437                           ;main.c: 79: }else{
   438  000FA0  D001               	goto	l55
   439  000FA2                     l52:
   440                           
   441                           ;main.c: 80: LATAbits.LATA1 = 0;
   442  000FA2  9289               	bcf	3977,1,c	;volatile
   443  000FA4                     l55:
   444                           
   445                           ;main.c: 81: }
   446                           ;main.c: 83: if(!PORTDbits.RD3){
   447  000FA4  B683               	btfsc	3971,3,c	;volatile
   448  000FA6  D7E3               	goto	l1169
   449                           
   450                           ;main.c: 84: writeResult(2);
   451  000FA8  0E02               	movlw	2
   452  000FAA  EC66  F009         	call	_writeResult
   453  000FAE  D7DF               	goto	l1169
   454  000FB0                     __end_of_main:
   455                           	opt stack 0
   456                           tblptru	equ	0xFF8
   457                           postinc0	equ	0xFEE
   458                           wreg	equ	0xFE8
   459                           status	equ	0xFD8
   460                           
   461 ;; *************** function _writeResult *****************
   462 ;; Defined at:
   463 ;;		line 53 in file "bufferhandler.c"
   464 ;; Parameters:    Size  Location     Type
   465 ;;  dev             1    wreg     unsigned char 
   466 ;; Auto vars:     Size  Location     Type
   467 ;;  dev             1   47[COMRAM] unsigned char 
   468 ;; Return value:  Size  Location     Type
   469 ;;                  1    wreg      void 
   470 ;; Registers used:
   471 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   472 ;; Tracked objects:
   473 ;;		On entry : 0/0
   474 ;;		On exit  : 0/0
   475 ;;		Unchanged: 0/0
   476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   478 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   480 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   481 ;;Total ram usage:        1 bytes
   482 ;; Hardware stack levels used:    1
   483 ;; Hardware stack levels required when called:    5
   484 ;; This function calls:
   485 ;;		_wait_ms
   486 ;;		_writeString
   487 ;; This function is called by:
   488 ;;		_main
   489 ;; This function uses a non-reentrant model
   490 ;;
   491                           
   492                           	psect	text1
   493  0012CC                     __ptext1:
   494                           	opt stack 0
   495  0012CC                     _writeResult:
   496                           	opt stack 25
   497                           
   498                           ;incstack = 0
   499                           ;writeResult@dev stored from wreg
   500  0012CC  6E30               	movwf	writeResult@dev,c
   501                           
   502                           ;bufferhandler.c: 55: writeString(realString, dev);
   503  0012CE  0E60               	movlw	low _realString
   504  0012D0  6E28               	movwf	writeString@str,c
   505  0012D2  0E00               	movlw	high _realString
   506  0012D4  6E29               	movwf	writeString@str+1,c
   507  0012D6  C030  F02A         	movff	writeResult@dev,writeString@dev
   508  0012DA  EC25  F008         	call	_writeString	;wreg free
   509                           
   510                           ;bufferhandler.c: 56: wait_ms(1000);
   511  0012DE  0E03               	movlw	3
   512  0012E0  6E2F               	movwf	wait_ms@time+1,c
   513  0012E2  0EE8               	movlw	232
   514  0012E4  6E2E               	movwf	wait_ms@time,c
   515  0012E6  EC54  F008         	call	_wait_ms	;wreg free
   516  0012EA  0012               	return		;funcret
   517  0012EC                     __end_of_writeResult:
   518                           	opt stack 0
   519                           tblptru	equ	0xFF8
   520                           postinc0	equ	0xFEE
   521                           wreg	equ	0xFE8
   522                           status	equ	0xFD8
   523                           
   524 ;; *************** function _writeString *****************
   525 ;; Defined at:
   526 ;;		line 97 in file "uart.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;  str             2   39[COMRAM] PTR unsigned char 
   529 ;;		 -> realString(70), STR_2(4), STR_1(5), 
   530 ;;  dev             1   41[COMRAM] unsigned char 
   531 ;; Auto vars:     Size  Location     Type
   532 ;;  i               2   44[COMRAM] int 
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      void 
   535 ;; Registers used:
   536 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   537 ;; Tracked objects:
   538 ;;		On entry : 0/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   542 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   543 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   544 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   545 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   546 ;;Total ram usage:        7 bytes
   547 ;; Hardware stack levels used:    1
   548 ;; Hardware stack levels required when called:    4
   549 ;; This function calls:
   550 ;;		_UART_Write
   551 ;;		_strlen
   552 ;; This function is called by:
   553 ;;		_main
   554 ;;		_writeResult
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558                           	psect	text2
   559  00104A                     __ptext2:
   560                           	opt stack 0
   561  00104A                     _writeString:
   562                           	opt stack 26
   563                           
   564                           ;uart.c: 99: for(int i = 0; i<strlen(str); i++)
   565                           
   566                           ;incstack = 0
   567  00104A  0E00               	movlw	0
   568  00104C  6E2E               	movwf	writeString@i+1,c
   569  00104E  0E00               	movlw	0
   570  001050  6E2D               	movwf	writeString@i,c
   571  001052  D01D               	goto	l1063
   572  001054                     l1059:
   573                           
   574                           ;uart.c: 100: {
   575                           ;uart.c: 101: UART_Write(str[i], dev);
   576  001054  C02A  F022         	movff	writeString@dev,UART_Write@dev
   577  001058  502D               	movf	writeString@i,w,c
   578  00105A  2428               	addwf	writeString@str,w,c
   579  00105C  6E2B               	movwf	??_writeString& (0+255),c
   580  00105E  502E               	movf	writeString@i+1,w,c
   581  001060  2029               	addwfc	writeString@str+1,w,c
   582  001062  6E2C               	movwf	(??_writeString+1)& (0+255),c
   583  001064  C02B  FFF6         	movff	??_writeString,tblptrl
   584  001068  C02C  FFF7         	movff	??_writeString+1,tblptrh
   585  00106C  0E00               	movlw	low (__smallconst shr (0+16))
   586  00106E  6EF8               	movwf	tblptru,c
   587  001070  0E0E               	movlw	(high __ramtop+-1)
   588  001072  64F7               	cpfsgt	tblptrh,c
   589  001074  D003               	bra	u367
   590  001076  0008               	tblrd		*
   591  001078  50F5               	movf	tablat,w,c
   592  00107A  D005               	bra	u360
   593  00107C                     u367:
   594  00107C  CFF6 FFE9          	movff	tblptrl,fsr0l
   595  001080  CFF7 FFEA          	movff	tblptrh,fsr0h
   596  001084  50EF               	movf	indf0,w,c
   597  001086                     u360:
   598  001086  EC85  F009         	call	_UART_Write
   599  00108A  4A2D               	infsnz	writeString@i,f,c
   600  00108C  2A2E               	incf	writeString@i+1,f,c
   601  00108E                     l1063:
   602  00108E  C028  F022         	movff	writeString@str,strlen@s
   603  001092  C029  F023         	movff	writeString@str+1,strlen@s+1
   604  001096  ECAA  F008         	call	_strlen	;wreg free
   605  00109A  5022               	movf	?_strlen,w,c
   606  00109C  5C2D               	subwf	writeString@i,w,c
   607  00109E  5023               	movf	?_strlen+1,w,c
   608  0010A0  582E               	subwfb	writeString@i+1,w,c
   609  0010A2  B0D8               	btfsc	status,0,c
   610  0010A4  0012               	return	
   611  0010A6  D7D6               	goto	l1059
   612  0010A8                     __end_of_writeString:
   613                           	opt stack 0
   614                           tblptru	equ	0xFF8
   615                           tblptrh	equ	0xFF7
   616                           tblptrl	equ	0xFF6
   617                           tablat	equ	0xFF5
   618                           indf0	equ	0xFEF
   619                           postinc0	equ	0xFEE
   620                           fsr0h	equ	0xFEA
   621                           fsr0l	equ	0xFE9
   622                           wreg	equ	0xFE8
   623                           status	equ	0xFD8
   624                           
   625 ;; *************** function _UART_Write *****************
   626 ;; Defined at:
   627 ;;		line 61 in file "uart.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;  data            1    wreg     unsigned char 
   630 ;;  dev             1   33[COMRAM] unsigned char 
   631 ;; Auto vars:     Size  Location     Type
   632 ;;  data            1   34[COMRAM] unsigned char 
   633 ;; Return value:  Size  Location     Type
   634 ;;                  1    wreg      void 
   635 ;; Registers used:
   636 ;;		wreg, status,2, status,0
   637 ;; Tracked objects:
   638 ;;		On entry : 0/0
   639 ;;		On exit  : 0/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   642 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   643 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   645 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   646 ;;Total ram usage:        2 bytes
   647 ;; Hardware stack levels used:    1
   648 ;; Hardware stack levels required when called:    3
   649 ;; This function calls:
   650 ;;		Nothing
   651 ;; This function is called by:
   652 ;;		_main
   653 ;;		_writeString
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text3
   658  00130A                     __ptext3:
   659                           	opt stack 0
   660  00130A                     _UART_Write:
   661                           	opt stack 26
   662                           
   663                           ;incstack = 0
   664                           ;UART_Write@data stored from wreg
   665  00130A  6E23               	movwf	UART_Write@data,c
   666                           
   667                           ;uart.c: 63: if (dev == 1)
   668  00130C  0422               	decf	UART_Write@dev,w,c
   669  00130E  A4D8               	btfss	status,2,c
   670  001310  D005               	goto	l148
   671  001312                     l144:
   672  001312  A2AD               	btfss	4013,1,c	;volatile
   673  001314  D7FE               	goto	l144
   674                           
   675                           ;uart.c: 66: TXREG1 = data;
   676  001316  C023  FFAE         	movff	UART_Write@data,4014	;volatile
   677                           
   678                           ;uart.c: 67: }
   679  00131A  0012               	return	
   680  00131C                     l148:
   681  00131C  A2A8               	btfss	4008,1,c	;volatile
   682  00131E  D7FE               	goto	l148
   683                           
   684                           ;uart.c: 71: TXREG2 = data;
   685  001320  C023  FFA9         	movff	UART_Write@data,4009	;volatile
   686  001324  0012               	return	
   687  001326                     __end_of_UART_Write:
   688                           	opt stack 0
   689                           tblptru	equ	0xFF8
   690                           tblptrh	equ	0xFF7
   691                           tblptrl	equ	0xFF6
   692                           tablat	equ	0xFF5
   693                           indf0	equ	0xFEF
   694                           postinc0	equ	0xFEE
   695                           fsr0h	equ	0xFEA
   696                           fsr0l	equ	0xFE9
   697                           wreg	equ	0xFE8
   698                           status	equ	0xFD8
   699                           
   700 ;; *************** function _wait_ms *****************
   701 ;; Defined at:
   702 ;;		line 35 in file "system.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;  time            2   45[COMRAM] int 
   705 ;; Auto vars:     Size  Location     Type
   706 ;;		None
   707 ;; Return value:  Size  Location     Type
   708 ;;                  1    wreg      void 
   709 ;; Registers used:
   710 ;;		wreg, status,2, status,0, cstack
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   716 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   719 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   720 ;;Total ram usage:        2 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; Hardware stack levels required when called:    4
   723 ;; This function calls:
   724 ;;		___lmul
   725 ;; This function is called by:
   726 ;;		_main
   727 ;;		_writeResult
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text4
   732  0010A8                     __ptext4:
   733                           	opt stack 0
   734  0010A8                     _wait_ms:
   735                           	opt stack 25
   736                           
   737                           ;system.c: 37: static long timel = 0;
   738                           ;system.c: 38: timel = time * 1000l;
   739                           
   740                           ;incstack = 0
   741  0010A8  C02E  F022         	movff	wait_ms@time,___lmul@multiplier
   742  0010AC  C02F  F023         	movff	wait_ms@time+1,___lmul@multiplier+1
   743  0010B0  0E00               	movlw	0
   744  0010B2  BE23               	btfsc	___lmul@multiplier+1,7,c
   745  0010B4  0EFF               	movlw	-1
   746  0010B6  6E24               	movwf	___lmul@multiplier+2,c
   747  0010B8  6E25               	movwf	___lmul@multiplier+3,c
   748  0010BA  0EE8               	movlw	232
   749  0010BC  6E26               	movwf	___lmul@multiplicand,c
   750  0010BE  0E03               	movlw	3
   751  0010C0  6E27               	movwf	___lmul@multiplicand+1,c
   752  0010C2  0E00               	movlw	0
   753  0010C4  6E28               	movwf	___lmul@multiplicand+2,c
   754  0010C6  0E00               	movlw	0
   755  0010C8  6E29               	movwf	___lmul@multiplicand+3,c
   756  0010CA  EC7F  F008         	call	___lmul	;wreg free
   757  0010CE  C022  F032         	movff	?___lmul,wait_ms@timel
   758  0010D2  C023  F033         	movff	?___lmul+1,wait_ms@timel+1
   759  0010D6  C024  F034         	movff	?___lmul+2,wait_ms@timel+2
   760  0010DA  C025  F035         	movff	?___lmul+3,wait_ms@timel+3
   761                           
   762                           ;system.c: 39: for( ; timel; timel--);
   763  0010DE  D008               	goto	l71
   764  0010E0                     l1067:
   765  0010E0  0EFF               	movlw	255
   766  0010E2  2632               	addwf	wait_ms@timel,f,c
   767  0010E4  0EFF               	movlw	255
   768  0010E6  2233               	addwfc	wait_ms@timel+1,f,c
   769  0010E8  0EFF               	movlw	255
   770  0010EA  2234               	addwfc	wait_ms@timel+2,f,c
   771  0010EC  0EFF               	movlw	255
   772  0010EE  2235               	addwfc	wait_ms@timel+3,f,c
   773  0010F0                     l71:
   774  0010F0  5032               	movf	wait_ms@timel,w,c
   775  0010F2  1033               	iorwf	wait_ms@timel+1,w,c
   776  0010F4  1034               	iorwf	wait_ms@timel+2,w,c
   777  0010F6  1035               	iorwf	wait_ms@timel+3,w,c
   778  0010F8  B4D8               	btfsc	status,2,c
   779  0010FA  0012               	return	
   780  0010FC  D7F1               	goto	l1067
   781  0010FE                     __end_of_wait_ms:
   782                           	opt stack 0
   783                           tblptru	equ	0xFF8
   784                           tblptrh	equ	0xFF7
   785                           tblptrl	equ	0xFF6
   786                           tablat	equ	0xFF5
   787                           indf0	equ	0xFEF
   788                           postinc0	equ	0xFEE
   789                           fsr0h	equ	0xFEA
   790                           fsr0l	equ	0xFE9
   791                           wreg	equ	0xFE8
   792                           status	equ	0xFD8
   793                           
   794 ;; *************** function ___lmul *****************
   795 ;; Defined at:
   796 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;  multiplier      4   33[COMRAM] unsigned long 
   799 ;;  multiplicand    4   37[COMRAM] unsigned long 
   800 ;; Auto vars:     Size  Location     Type
   801 ;;  product         4   41[COMRAM] unsigned long 
   802 ;; Return value:  Size  Location     Type
   803 ;;                  4   33[COMRAM] unsigned long 
   804 ;; Registers used:
   805 ;;		wreg, status,2, status,0
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   811 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   812 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   814 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   815 ;;Total ram usage:       12 bytes
   816 ;; Hardware stack levels used:    1
   817 ;; Hardware stack levels required when called:    3
   818 ;; This function calls:
   819 ;;		Nothing
   820 ;; This function is called by:
   821 ;;		_wait_ms
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           	psect	text5
   826  0010FE                     __ptext5:
   827                           	opt stack 0
   828  0010FE                     ___lmul:
   829                           	opt stack 25
   830                           
   831                           ;incstack = 0
   832  0010FE  0E00               	movlw	0
   833  001100  6E2A               	movwf	___lmul@product,c
   834  001102  0E00               	movlw	0
   835  001104  6E2B               	movwf	___lmul@product+1,c
   836  001106  0E00               	movlw	0
   837  001108  6E2C               	movwf	___lmul@product+2,c
   838  00110A  0E00               	movlw	0
   839  00110C  6E2D               	movwf	___lmul@product+3,c
   840  00110E                     l1049:
   841  00110E  A022               	btfss	___lmul@multiplier,0,c
   842  001110  D008               	goto	l1053
   843  001112  5026               	movf	___lmul@multiplicand,w,c
   844  001114  262A               	addwf	___lmul@product,f,c
   845  001116  5027               	movf	___lmul@multiplicand+1,w,c
   846  001118  222B               	addwfc	___lmul@product+1,f,c
   847  00111A  5028               	movf	___lmul@multiplicand+2,w,c
   848  00111C  222C               	addwfc	___lmul@product+2,f,c
   849  00111E  5029               	movf	___lmul@multiplicand+3,w,c
   850  001120  222D               	addwfc	___lmul@product+3,f,c
   851  001122                     l1053:
   852  001122  90D8               	bcf	status,0,c
   853  001124  3626               	rlcf	___lmul@multiplicand,f,c
   854  001126  3627               	rlcf	___lmul@multiplicand+1,f,c
   855  001128  3628               	rlcf	___lmul@multiplicand+2,f,c
   856  00112A  3629               	rlcf	___lmul@multiplicand+3,f,c
   857  00112C  90D8               	bcf	status,0,c
   858  00112E  3225               	rrcf	___lmul@multiplier+3,f,c
   859  001130  3224               	rrcf	___lmul@multiplier+2,f,c
   860  001132  3223               	rrcf	___lmul@multiplier+1,f,c
   861  001134  3222               	rrcf	___lmul@multiplier,f,c
   862  001136  5022               	movf	___lmul@multiplier,w,c
   863  001138  1023               	iorwf	___lmul@multiplier+1,w,c
   864  00113A  1024               	iorwf	___lmul@multiplier+2,w,c
   865  00113C  1025               	iorwf	___lmul@multiplier+3,w,c
   866  00113E  A4D8               	btfss	status,2,c
   867  001140  D7E6               	goto	l1049
   868  001142  C02A  F022         	movff	___lmul@product,?___lmul
   869  001146  C02B  F023         	movff	___lmul@product+1,?___lmul+1
   870  00114A  C02C  F024         	movff	___lmul@product+2,?___lmul+2
   871  00114E  C02D  F025         	movff	___lmul@product+3,?___lmul+3
   872  001152  0012               	return		;funcret
   873  001154                     __end_of___lmul:
   874                           	opt stack 0
   875                           tblptru	equ	0xFF8
   876                           tblptrh	equ	0xFF7
   877                           tblptrl	equ	0xFF6
   878                           tablat	equ	0xFF5
   879                           indf0	equ	0xFEF
   880                           postinc0	equ	0xFEE
   881                           fsr0h	equ	0xFEA
   882                           fsr0l	equ	0xFE9
   883                           wreg	equ	0xFE8
   884                           status	equ	0xFD8
   885                           
   886 ;; *************** function _isValid *****************
   887 ;; Defined at:
   888 ;;		line 68 in file "bufferhandler.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;		None
   891 ;; Auto vars:     Size  Location     Type
   892 ;;		None
   893 ;; Return value:  Size  Location     Type
   894 ;;                  2   33[COMRAM] int 
   895 ;; Registers used:
   896 ;;		wreg, status,2, status,0
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   902 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   905 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   906 ;;Total ram usage:        2 bytes
   907 ;; Hardware stack levels used:    1
   908 ;; Hardware stack levels required when called:    3
   909 ;; This function calls:
   910 ;;		Nothing
   911 ;; This function is called by:
   912 ;;		_main
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           	psect	text6
   917  0011A8                     __ptext6:
   918                           	opt stack 0
   919  0011A8                     _isValid:
   920                           	opt stack 27
   921                           
   922                           ;bufferhandler.c: 69: if(tmpString[0] == 0x54){
   923                           
   924                           ;incstack = 0
   925  0011A8  0E54               	movlw	84
   926  0011AA  0100               	movlb	0	; () banked
   927  0011AC  19A6               	xorwf	_tmpString& (0+255),w,b
   928  0011AE  A4D8               	btfss	status,2,c
   929  0011B0  D019               	goto	l1117
   930                           
   931                           ; BSR set to: 0
   932                           ;bufferhandler.c: 70: if(tmpString[1] == 0x59){
   933  0011B2  0E59               	movlw	89
   934  0011B4  0100               	movlb	0	; () banked
   935  0011B6  19A7               	xorwf	(_tmpString+1)& (0+255),w,b
   936  0011B8  A4D8               	btfss	status,2,c
   937  0011BA  D014               	goto	l1117
   938                           
   939                           ; BSR set to: 0
   940                           ;bufferhandler.c: 71: if(tmpString[2] == 0x52){
   941  0011BC  0E52               	movlw	82
   942  0011BE  0100               	movlb	0	; () banked
   943  0011C0  19A8               	xorwf	(_tmpString+2)& (0+255),w,b
   944  0011C2  A4D8               	btfss	status,2,c
   945  0011C4  D00F               	goto	l1117
   946                           
   947                           ; BSR set to: 0
   948                           ;bufferhandler.c: 72: if(tmpString[3] == 0x49){
   949  0011C6  0E49               	movlw	73
   950  0011C8  0100               	movlb	0	; () banked
   951  0011CA  19A9               	xorwf	(_tmpString+3)& (0+255),w,b
   952  0011CC  A4D8               	btfss	status,2,c
   953  0011CE  D00A               	goto	l1117
   954                           
   955                           ; BSR set to: 0
   956                           ;bufferhandler.c: 73: if(tmpString[4] == 0x5F){
   957  0011D0  0E5F               	movlw	95
   958  0011D2  0100               	movlb	0	; () banked
   959  0011D4  19AA               	xorwf	(_tmpString+4)& (0+255),w,b
   960  0011D6  A4D8               	btfss	status,2,c
   961  0011D8  D005               	goto	l1117
   962                           
   963                           ; BSR set to: 0
   964                           ;bufferhandler.c: 74: return 1;
   965  0011DA  0E00               	movlw	0
   966  0011DC  6E23               	movwf	?_isValid+1,c
   967  0011DE  0E01               	movlw	1
   968  0011E0  6E22               	movwf	?_isValid,c
   969                           
   970                           ; BSR set to: 0
   971  0011E2  0012               	return	
   972  0011E4                     l1117:
   973                           
   974                           ; BSR set to: 0
   975                           ;bufferhandler.c: 75: }
   976                           ;bufferhandler.c: 76: }
   977                           ;bufferhandler.c: 77: }
   978                           ;bufferhandler.c: 79: }
   979                           ;bufferhandler.c: 80: }
   980                           ;bufferhandler.c: 81: return 0;
   981  0011E4  0E00               	movlw	0
   982  0011E6  6E23               	movwf	?_isValid+1,c
   983  0011E8  0E00               	movlw	0
   984  0011EA  6E22               	movwf	?_isValid,c
   985  0011EC  0012               	return	
   986  0011EE                     __end_of_isValid:
   987                           	opt stack 0
   988                           tblptru	equ	0xFF8
   989                           tblptrh	equ	0xFF7
   990                           tblptrl	equ	0xFF6
   991                           tablat	equ	0xFF5
   992                           indf0	equ	0xFEF
   993                           postinc0	equ	0xFEE
   994                           fsr0h	equ	0xFEA
   995                           fsr0l	equ	0xFE9
   996                           wreg	equ	0xFE8
   997                           status	equ	0xFD8
   998                           
   999 ;; *************** function _isItLongEnough *****************
  1000 ;; Defined at:
  1001 ;;		line 30 in file "bufferhandler.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;		None
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;		None
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      unsigned char 
  1008 ;; Registers used:
  1009 ;;		wreg, status,2, status,0
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1019 ;;Total ram usage:        0 bytes
  1020 ;; Hardware stack levels used:    1
  1021 ;; Hardware stack levels required when called:    3
  1022 ;; This function calls:
  1023 ;;		Nothing
  1024 ;; This function is called by:
  1025 ;;		_main
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           	psect	text7
  1030  00133E                     __ptext7:
  1031                           	opt stack 0
  1032  00133E                     _isItLongEnough:
  1033                           	opt stack 27
  1034                           
  1035                           ;bufferhandler.c: 31: if(index == 64)
  1036                           
  1037                           ; BSR set to: 0
  1038                           ;incstack = 0
  1039  00133E  0E40               	movlw	64
  1040  001340  1836               	xorwf	_index,w,c
  1041  001342  1037               	iorwf	_index+1,w,c
  1042  001344  A4D8               	btfss	status,2,c
  1043  001346  D002               	goto	l929
  1044                           
  1045                           ;bufferhandler.c: 32: {
  1046                           ;bufferhandler.c: 33: return 1;
  1047  001348  0E01               	movlw	1
  1048                           
  1049                           ;bufferhandler.c: 34: }else{
  1050  00134A  0012               	return	
  1051  00134C                     l929:
  1052                           
  1053                           ;bufferhandler.c: 35: return 0;
  1054  00134C  0E00               	movlw	0
  1055  00134E  0012               	return	
  1056  001350                     __end_of_isItLongEnough:
  1057                           	opt stack 0
  1058                           tblptru	equ	0xFF8
  1059                           tblptrh	equ	0xFF7
  1060                           tblptrl	equ	0xFF6
  1061                           tablat	equ	0xFF5
  1062                           indf0	equ	0xFEF
  1063                           postinc0	equ	0xFEE
  1064                           fsr0h	equ	0xFEA
  1065                           fsr0l	equ	0xFE9
  1066                           wreg	equ	0xFE8
  1067                           status	equ	0xFD8
  1068                           
  1069 ;; *************** function _copyTmpBuffer *****************
  1070 ;; Defined at:
  1071 ;;		line 47 in file "bufferhandler.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;		None
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;  i               2   34[COMRAM] int 
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  1    wreg      void 
  1078 ;; Registers used:
  1079 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1086 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1087 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1088 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1089 ;;Total ram usage:        3 bytes
  1090 ;; Hardware stack levels used:    1
  1091 ;; Hardware stack levels required when called:    3
  1092 ;; This function calls:
  1093 ;;		Nothing
  1094 ;; This function is called by:
  1095 ;;		_main
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099                           	psect	text8
  1100  001234                     __ptext8:
  1101                           	opt stack 0
  1102  001234                     _copyTmpBuffer:
  1103                           	opt stack 27
  1104                           
  1105                           ;bufferhandler.c: 48: for(int i = 0; i<index; i++){
  1106                           
  1107                           ;incstack = 0
  1108  001234  0E00               	movlw	0
  1109  001236  6E24               	movwf	copyTmpBuffer@i+1,c
  1110  001238  0E00               	movlw	0
  1111  00123A  6E23               	movwf	copyTmpBuffer@i,c
  1112  00123C  D010               	goto	l1127
  1113  00123E                     l1123:
  1114                           
  1115                           ;bufferhandler.c: 49: realString[i] = tmpString[i];
  1116  00123E  0EA6               	movlw	low _tmpString
  1117  001240  2423               	addwf	copyTmpBuffer@i,w,c
  1118  001242  6ED9               	movwf	fsr2l,c
  1119  001244  0E00               	movlw	high _tmpString
  1120  001246  2024               	addwfc	copyTmpBuffer@i+1,w,c
  1121  001248  6EDA               	movwf	fsr2h,c
  1122  00124A  0E60               	movlw	low _realString
  1123  00124C  2423               	addwf	copyTmpBuffer@i,w,c
  1124  00124E  6EE1               	movwf	fsr1l,c
  1125  001250  0E00               	movlw	high _realString
  1126  001252  2024               	addwfc	copyTmpBuffer@i+1,w,c
  1127  001254  6EE2               	movwf	fsr1h,c
  1128  001256  CFDF FFE7          	movff	indf2,indf1
  1129  00125A  4A23               	infsnz	copyTmpBuffer@i,f,c
  1130  00125C  2A24               	incf	copyTmpBuffer@i+1,f,c
  1131  00125E                     l1127:
  1132  00125E  5036               	movf	_index,w,c
  1133  001260  5C23               	subwf	copyTmpBuffer@i,w,c
  1134  001262  5024               	movf	copyTmpBuffer@i+1,w,c
  1135  001264  0A80               	xorlw	128
  1136  001266  6E22               	movwf	??_copyTmpBuffer& (0+255),c
  1137  001268  5037               	movf	_index+1,w,c
  1138  00126A  0A80               	xorlw	128
  1139  00126C  5822               	subwfb	??_copyTmpBuffer& (0+255),w,c
  1140  00126E  B0D8               	btfsc	status,0,c
  1141  001270  0012               	return	
  1142  001272  D7E5               	goto	l1123
  1143  001274                     __end_of_copyTmpBuffer:
  1144                           	opt stack 0
  1145                           tblptru	equ	0xFF8
  1146                           tblptrh	equ	0xFF7
  1147                           tblptrl	equ	0xFF6
  1148                           tablat	equ	0xFF5
  1149                           indf0	equ	0xFEF
  1150                           postinc0	equ	0xFEE
  1151                           fsr0h	equ	0xFEA
  1152                           fsr0l	equ	0xFE9
  1153                           wreg	equ	0xFE8
  1154                           indf1	equ	0xFE7
  1155                           fsr1h	equ	0xFE2
  1156                           fsr1l	equ	0xFE1
  1157                           indf2	equ	0xFDF
  1158                           fsr2h	equ	0xFDA
  1159                           fsr2l	equ	0xFD9
  1160                           status	equ	0xFD8
  1161                           
  1162 ;; *************** function _clearBuffer *****************
  1163 ;; Defined at:
  1164 ;;		line 39 in file "bufferhandler.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;		None
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  i               2   39[COMRAM] int 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1179 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1181 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1182 ;;Total ram usage:        2 bytes
  1183 ;; Hardware stack levels used:    1
  1184 ;; Hardware stack levels required when called:    4
  1185 ;; This function calls:
  1186 ;;		_strlen
  1187 ;; This function is called by:
  1188 ;;		_main
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192                           	psect	text9
  1193  0011EE                     __ptext9:
  1194                           	opt stack 0
  1195  0011EE                     _clearBuffer:
  1196                           	opt stack 26
  1197                           
  1198                           ;bufferhandler.c: 40: for(int i = 0; i<strlen(tmpString); i++){
  1199                           
  1200                           ;incstack = 0
  1201  0011EE  0E00               	movlw	0
  1202  0011F0  6E29               	movwf	clearBuffer@i+1,c
  1203  0011F2  0E00               	movlw	0
  1204  0011F4  6E28               	movwf	clearBuffer@i,c
  1205  0011F6  D00A               	goto	l1099
  1206  0011F8                     l1095:
  1207                           
  1208                           ;bufferhandler.c: 41: tmpString[i] = "";
  1209  0011F8  0EA6               	movlw	low _tmpString
  1210  0011FA  2428               	addwf	clearBuffer@i,w,c
  1211  0011FC  6ED9               	movwf	fsr2l,c
  1212  0011FE  0E00               	movlw	high _tmpString
  1213  001200  2029               	addwfc	clearBuffer@i+1,w,c
  1214  001202  6EDA               	movwf	fsr2h,c
  1215  001204  0E05               	movlw	low (STR_1+4)
  1216  001206  6EDF               	movwf	indf2,c
  1217  001208  4A28               	infsnz	clearBuffer@i,f,c
  1218  00120A  2A29               	incf	clearBuffer@i+1,f,c
  1219  00120C                     l1099:
  1220  00120C  0EA6               	movlw	low _tmpString
  1221  00120E  6E22               	movwf	strlen@s,c
  1222  001210  0E00               	movlw	high _tmpString
  1223  001212  6E23               	movwf	strlen@s+1,c
  1224  001214  ECAA  F008         	call	_strlen	;wreg free
  1225  001218  5022               	movf	?_strlen,w,c
  1226  00121A  5C28               	subwf	clearBuffer@i,w,c
  1227  00121C  5023               	movf	?_strlen+1,w,c
  1228  00121E  5829               	subwfb	clearBuffer@i+1,w,c
  1229  001220  A0D8               	btfss	status,0,c
  1230  001222  D7EA               	goto	l1095
  1231                           
  1232                           ;bufferhandler.c: 42: }
  1233                           ;bufferhandler.c: 43: tmpString[0] = '\0';
  1234  001224  0E00               	movlw	0
  1235  001226  0100               	movlb	0	; () banked
  1236  001228  6FA6               	movwf	_tmpString& (0+255),b
  1237                           
  1238                           ;bufferhandler.c: 44: index = 0;
  1239  00122A  0E00               	movlw	0
  1240  00122C  6E37               	movwf	_index+1,c
  1241  00122E  0E00               	movlw	0
  1242  001230  6E36               	movwf	_index,c
  1243                           
  1244                           ; BSR set to: 0
  1245  001232  0012               	return		;funcret
  1246  001234                     __end_of_clearBuffer:
  1247                           	opt stack 0
  1248                           tblptru	equ	0xFF8
  1249                           tblptrh	equ	0xFF7
  1250                           tblptrl	equ	0xFF6
  1251                           tablat	equ	0xFF5
  1252                           indf0	equ	0xFEF
  1253                           postinc0	equ	0xFEE
  1254                           fsr0h	equ	0xFEA
  1255                           fsr0l	equ	0xFE9
  1256                           wreg	equ	0xFE8
  1257                           indf1	equ	0xFE7
  1258                           fsr1h	equ	0xFE2
  1259                           fsr1l	equ	0xFE1
  1260                           indf2	equ	0xFDF
  1261                           fsr2h	equ	0xFDA
  1262                           fsr2l	equ	0xFD9
  1263                           status	equ	0xFD8
  1264                           
  1265 ;; *************** function _strlen *****************
  1266 ;; Defined at:
  1267 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;  s               2   33[COMRAM] PTR const unsigned char 
  1270 ;;		 -> realString(70), tmpString(70), STR_2(4), STR_1(5), 
  1271 ;; Auto vars:     Size  Location     Type
  1272 ;;  cp              2   37[COMRAM] PTR const unsigned char 
  1273 ;;		 -> realString(70), tmpString(70), STR_2(4), STR_1(5), 
  1274 ;; Return value:  Size  Location     Type
  1275 ;;                  2   33[COMRAM] unsigned int 
  1276 ;; Registers used:
  1277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  1278 ;; Tracked objects:
  1279 ;;		On entry : 0/0
  1280 ;;		On exit  : 0/0
  1281 ;;		Unchanged: 0/0
  1282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1283 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1284 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1285 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1286 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1287 ;;Total ram usage:        6 bytes
  1288 ;; Hardware stack levels used:    1
  1289 ;; Hardware stack levels required when called:    3
  1290 ;; This function calls:
  1291 ;;		Nothing
  1292 ;; This function is called by:
  1293 ;;		_writeString
  1294 ;;		_clearBuffer
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           	psect	text10
  1299  001154                     __ptext10:
  1300                           	opt stack 0
  1301  001154                     _strlen:
  1302                           	opt stack 26
  1303                           
  1304                           ; BSR set to: 0
  1305                           ;incstack = 0
  1306  001154  C022  F026         	movff	strlen@s,strlen@cp
  1307  001158  C023  F027         	movff	strlen@s+1,strlen@cp+1
  1308  00115C  D002               	goto	l1041
  1309  00115E                     l1039:
  1310  00115E  4A26               	infsnz	strlen@cp,f,c
  1311  001160  2A27               	incf	strlen@cp+1,f,c
  1312  001162                     l1041:
  1313  001162  C026  FFF6         	movff	strlen@cp,tblptrl
  1314  001166  C027  FFF7         	movff	strlen@cp+1,tblptrh
  1315  00116A  0E00               	movlw	low (__smallconst shr (0+16))
  1316  00116C  6EF8               	movwf	tblptru,c
  1317  00116E  0E0E               	movlw	(high __ramtop+-1)
  1318  001170  64F7               	cpfsgt	tblptrh,c
  1319  001172  D003               	bra	u327
  1320  001174  0008               	tblrd		*
  1321  001176  50F5               	movf	tablat,w,c
  1322  001178  D005               	bra	u320
  1323  00117A                     u327:
  1324  00117A  CFF6 FFE9          	movff	tblptrl,fsr0l
  1325  00117E  CFF7 FFEA          	movff	tblptrh,fsr0h
  1326  001182  50EF               	movf	indf0,w,c
  1327  001184                     u320:
  1328  001184  0900               	iorlw	0
  1329  001186  A4D8               	btfss	status,2,c
  1330  001188  D7EA               	goto	l1039
  1331  00118A  C022  F024         	movff	strlen@s,??_strlen
  1332  00118E  C023  F025         	movff	strlen@s+1,??_strlen+1
  1333  001192  1E24               	comf	??_strlen,f,c
  1334  001194  1E25               	comf	??_strlen+1,f,c
  1335  001196  4A24               	infsnz	??_strlen,f,c
  1336  001198  2A25               	incf	??_strlen+1,f,c
  1337  00119A  5026               	movf	strlen@cp,w,c
  1338  00119C  2424               	addwf	??_strlen,w,c
  1339  00119E  6E22               	movwf	?_strlen,c
  1340  0011A0  5027               	movf	strlen@cp+1,w,c
  1341  0011A2  2025               	addwfc	??_strlen+1,w,c
  1342  0011A4  6E23               	movwf	?_strlen+1,c
  1343  0011A6  0012               	return	
  1344  0011A8                     __end_of_strlen:
  1345                           	opt stack 0
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           indf0	equ	0xFEF
  1351                           postinc0	equ	0xFEE
  1352                           fsr0h	equ	0xFEA
  1353                           fsr0l	equ	0xFE9
  1354                           wreg	equ	0xFE8
  1355                           indf1	equ	0xFE7
  1356                           fsr1h	equ	0xFE2
  1357                           fsr1l	equ	0xFE1
  1358                           indf2	equ	0xFDF
  1359                           fsr2h	equ	0xFDA
  1360                           fsr2l	equ	0xFD9
  1361                           status	equ	0xFD8
  1362                           
  1363 ;; *************** function _UART_Init *****************
  1364 ;; Defined at:
  1365 ;;		line 31 in file "uart.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;  baudrate        4   33[COMRAM] const long 
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;		None
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      unsigned char 
  1372 ;; Registers used:
  1373 ;;		wreg, status,2
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1379 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1382 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1383 ;;Total ram usage:        4 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; Hardware stack levels required when called:    3
  1386 ;; This function calls:
  1387 ;;		Nothing
  1388 ;; This function is called by:
  1389 ;;		_main
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text11
  1394  001274                     __ptext11:
  1395                           	opt stack 0
  1396  001274                     _UART_Init:
  1397                           	opt stack 27
  1398                           
  1399                           ;uart.c: 35: TXSTA1 = 0x24;
  1400                           
  1401                           ;incstack = 0
  1402  001274  0E24               	movlw	36
  1403  001276  6EAD               	movwf	4013,c	;volatile
  1404                           
  1405                           ;uart.c: 36: RCSTA1 = 0x90;
  1406  001278  0E90               	movlw	144
  1407  00127A  6EAC               	movwf	4012,c	;volatile
  1408                           
  1409                           ;uart.c: 37: RC1IE = 1;
  1410  00127C  8A9D               	bsf	3997,5,c	;volatile
  1411                           
  1412                           ;uart.c: 38: BAUDCON1bits.BRG16 = 0;
  1413  00127E  967E               	bcf	3966,3,c	;volatile
  1414                           
  1415                           ;uart.c: 39: SPBRG1 = 155;
  1416  001280  0E9B               	movlw	155
  1417  001282  6EB0               	movwf	4016,c	;volatile
  1418                           
  1419                           ;uart.c: 40: SPBRGH1 = 155;
  1420  001284  0E9B               	movlw	155
  1421  001286  6E7F               	movwf	3967,c	;volatile
  1422                           
  1423                           ;uart.c: 41: TRISC7 = 1;
  1424  001288  8E94               	bsf	3988,7,c	;volatile
  1425                           
  1426                           ;uart.c: 42: TRISC6 = 0;
  1427  00128A  9C94               	bcf	3988,6,c	;volatile
  1428                           
  1429                           ;uart.c: 46: RCSTA2 = 0b10010000;
  1430  00128C  0E90               	movlw	144
  1431  00128E  6E9C               	movwf	3996,c	;volatile
  1432                           
  1433                           ;uart.c: 47: TXSTA2 = 0b00100100;
  1434  001290  0E24               	movlw	36
  1435  001292  6EA8               	movwf	4008,c	;volatile
  1436                           
  1437                           ;uart.c: 48: RC2IE = 1;
  1438  001294  8AA3               	bsf	4003,5,c	;volatile
  1439                           
  1440                           ;uart.c: 49: BAUDCON2bits.BRG16 = 0;
  1441  001296  967C               	bcf	3964,3,c	;volatile
  1442                           
  1443                           ;uart.c: 50: SPBRG2 = 25;
  1444  001298  0E19               	movlw	25
  1445  00129A  6EAB               	movwf	4011,c	;volatile
  1446                           
  1447                           ;uart.c: 51: SPBRGH2 = 25;
  1448  00129C  0E19               	movlw	25
  1449  00129E  6E7D               	movwf	3965,c	;volatile
  1450                           
  1451                           ;uart.c: 52: TRISB4 = 1;
  1452  0012A0  8893               	bsf	3987,4,c	;volatile
  1453                           
  1454                           ;uart.c: 53: TRISB5 = 0;
  1455  0012A2  9A93               	bcf	3987,5,c	;volatile
  1456  0012A4  0012               	return	
  1457  0012A6                     __end_of_UART_Init:
  1458                           	opt stack 0
  1459                           tblptru	equ	0xFF8
  1460                           tblptrh	equ	0xFF7
  1461                           tblptrl	equ	0xFF6
  1462                           tablat	equ	0xFF5
  1463                           indf0	equ	0xFEF
  1464                           postinc0	equ	0xFEE
  1465                           fsr0h	equ	0xFEA
  1466                           fsr0l	equ	0xFE9
  1467                           wreg	equ	0xFE8
  1468                           indf1	equ	0xFE7
  1469                           fsr1h	equ	0xFE2
  1470                           fsr1l	equ	0xFE1
  1471                           indf2	equ	0xFDF
  1472                           fsr2h	equ	0xFDA
  1473                           fsr2l	equ	0xFD9
  1474                           status	equ	0xFD8
  1475                           
  1476 ;; *************** function _InitApp *****************
  1477 ;; Defined at:
  1478 ;;		line 29 in file "user.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;		None
  1481 ;; Auto vars:     Size  Location     Type
  1482 ;;		None
  1483 ;; Return value:  Size  Location     Type
  1484 ;;                  1    wreg      void 
  1485 ;; Registers used:
  1486 ;;		wreg, status,2
  1487 ;; Tracked objects:
  1488 ;;		On entry : 0/0
  1489 ;;		On exit  : 0/0
  1490 ;;		Unchanged: 0/0
  1491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1496 ;;Total ram usage:        0 bytes
  1497 ;; Hardware stack levels used:    1
  1498 ;; Hardware stack levels required when called:    3
  1499 ;; This function calls:
  1500 ;;		Nothing
  1501 ;; This function is called by:
  1502 ;;		_main
  1503 ;; This function uses a non-reentrant model
  1504 ;;
  1505                           
  1506                           	psect	text12
  1507  0012EC                     __ptext12:
  1508                           	opt stack 0
  1509  0012EC                     _InitApp:
  1510                           	opt stack 27
  1511                           
  1512                           ;user.c: 33: PPSCON = 0b00000000;
  1513                           
  1514                           ;incstack = 0
  1515  0012EC  0E00               	movlw	0
  1516  0012EE  010E               	movlb	14	; () banked
  1517  0012F0  6FBF               	movwf	191,b	;volatile
  1518                           
  1519                           ;user.c: 34: RPOR8 = 0b00000110;
  1520  0012F2  0E06               	movlw	6
  1521  0012F4  010E               	movlb	14	; () banked
  1522  0012F6  6FC8               	movwf	200,b	;volatile
  1523                           
  1524                           ;user.c: 35: RPINR16 = 0b00000111;
  1525  0012F8  0E07               	movlw	7
  1526  0012FA  010E               	movlb	14	; () banked
  1527  0012FC  6FF7               	movwf	247,b	;volatile
  1528                           
  1529                           ;user.c: 36: PPSCON = 0b00000001;
  1530  0012FE  0E01               	movlw	1
  1531  001300  010E               	movlb	14	; () banked
  1532  001302  6FBF               	movwf	191,b	;volatile
  1533                           
  1534                           ;user.c: 39: INTCON = 0xC0;
  1535  001304  0EC0               	movlw	192
  1536  001306  6EF2               	movwf	intcon,c	;volatile
  1537                           
  1538                           ; BSR set to: 14
  1539  001308  0012               	return		;funcret
  1540  00130A                     __end_of_InitApp:
  1541                           	opt stack 0
  1542                           tblptru	equ	0xFF8
  1543                           tblptrh	equ	0xFF7
  1544                           tblptrl	equ	0xFF6
  1545                           tablat	equ	0xFF5
  1546                           intcon	equ	0xFF2
  1547                           indf0	equ	0xFEF
  1548                           postinc0	equ	0xFEE
  1549                           fsr0h	equ	0xFEA
  1550                           fsr0l	equ	0xFE9
  1551                           wreg	equ	0xFE8
  1552                           indf1	equ	0xFE7
  1553                           fsr1h	equ	0xFE2
  1554                           fsr1l	equ	0xFE1
  1555                           indf2	equ	0xFDF
  1556                           fsr2h	equ	0xFDA
  1557                           fsr2l	equ	0xFD9
  1558                           status	equ	0xFD8
  1559                           
  1560 ;; *************** function _ConfigureOscillator *****************
  1561 ;; Defined at:
  1562 ;;		line 24 in file "system.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;		None
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;		None
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  1    wreg      void 
  1569 ;; Registers used:
  1570 ;;		wreg, status,2
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1580 ;;Total ram usage:        0 bytes
  1581 ;; Hardware stack levels used:    1
  1582 ;; Hardware stack levels required when called:    3
  1583 ;; This function calls:
  1584 ;;		Nothing
  1585 ;; This function is called by:
  1586 ;;		_main
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text13
  1591  001350                     __ptext13:
  1592                           	opt stack 0
  1593  001350                     _ConfigureOscillator:
  1594                           	opt stack 27
  1595                           
  1596                           ;system.c: 26: OSCCONbits.IRCF = 0b110;
  1597                           
  1598                           ; BSR set to: 14
  1599                           ;incstack = 0
  1600  001350  50D3               	movf	4051,w,c	;volatile
  1601  001352  0B8F               	andlw	-113
  1602  001354  0960               	iorlw	96
  1603  001356  6ED3               	movwf	4051,c	;volatile
  1604                           
  1605                           ;system.c: 27: OSCTUNEbits.PLLEN = 0b1;
  1606  001358  8C9B               	bsf	3995,6,c	;volatile
  1607  00135A  0012               	return		;funcret
  1608  00135C                     __end_of_ConfigureOscillator:
  1609                           	opt stack 0
  1610                           tblptru	equ	0xFF8
  1611                           tblptrh	equ	0xFF7
  1612                           tblptrl	equ	0xFF6
  1613                           tablat	equ	0xFF5
  1614                           intcon	equ	0xFF2
  1615                           indf0	equ	0xFEF
  1616                           postinc0	equ	0xFEE
  1617                           fsr0h	equ	0xFEA
  1618                           fsr0l	equ	0xFE9
  1619                           wreg	equ	0xFE8
  1620                           indf1	equ	0xFE7
  1621                           fsr1h	equ	0xFE2
  1622                           fsr1l	equ	0xFE1
  1623                           indf2	equ	0xFDF
  1624                           fsr2h	equ	0xFDA
  1625                           fsr2l	equ	0xFD9
  1626                           status	equ	0xFD8
  1627                           
  1628 ;; *************** function _low_isr *****************
  1629 ;; Defined at:
  1630 ;;		line 66 in file "interrupts.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;		None
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;		None
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  1    wreg      void 
  1637 ;; Registers used:
  1638 ;;		None
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1646 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1647 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1648 ;;Total ram usage:       17 bytes
  1649 ;; Hardware stack levels used:    1
  1650 ;; Hardware stack levels required when called:    2
  1651 ;; This function calls:
  1652 ;;		Nothing
  1653 ;; This function is called by:
  1654 ;;		Interrupt level 1
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	intcodelo
  1659  000018                     __pintcodelo:
  1660                           	opt stack 0
  1661  000018                     _low_isr:
  1662                           	opt stack 25
  1663                           
  1664                           ;incstack = 0
  1665  000018  8038               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1666  00001A  CFD8 F011          	movff	status,??_low_isr
  1667  00001E  CFE8 F012          	movff	wreg,??_low_isr+1
  1668  000022  CFE0 F013          	movff	bsr,??_low_isr+2
  1669  000026  CFFA F014          	movff	pclath,??_low_isr+3
  1670  00002A  CFFB F015          	movff	pclatu,??_low_isr+4
  1671  00002E  CFE9 F016          	movff	fsr0l,??_low_isr+5
  1672  000032  CFEA F017          	movff	fsr0h,??_low_isr+6
  1673  000036  CFE1 F018          	movff	fsr1l,??_low_isr+7
  1674  00003A  CFE2 F019          	movff	fsr1h,??_low_isr+8
  1675  00003E  CFD9 F01A          	movff	fsr2l,??_low_isr+9
  1676  000042  CFDA F01B          	movff	fsr2h,??_low_isr+10
  1677  000046  CFF3 F01C          	movff	prodl,??_low_isr+11
  1678  00004A  CFF4 F01D          	movff	prodh,??_low_isr+12
  1679  00004E  CFF6 F01E          	movff	tblptrl,??_low_isr+13
  1680  000052  CFF7 F01F          	movff	tblptrh,??_low_isr+14
  1681  000056  CFF8 F020          	movff	tblptru,??_low_isr+15
  1682  00005A  CFF5 F021          	movff	tablat,??_low_isr+16
  1683  00005E  C021  FFF5         	movff	??_low_isr+16,tablat
  1684  000062  C020  FFF8         	movff	??_low_isr+15,tblptru
  1685  000066  C01F  FFF7         	movff	??_low_isr+14,tblptrh
  1686  00006A  C01E  FFF6         	movff	??_low_isr+13,tblptrl
  1687  00006E  C01D  FFF4         	movff	??_low_isr+12,prodh
  1688  000072  C01C  FFF3         	movff	??_low_isr+11,prodl
  1689  000076  C01B  FFDA         	movff	??_low_isr+10,fsr2h
  1690  00007A  C01A  FFD9         	movff	??_low_isr+9,fsr2l
  1691  00007E  C019  FFE2         	movff	??_low_isr+8,fsr1h
  1692  000082  C018  FFE1         	movff	??_low_isr+7,fsr1l
  1693  000086  C017  FFEA         	movff	??_low_isr+6,fsr0h
  1694  00008A  C016  FFE9         	movff	??_low_isr+5,fsr0l
  1695  00008E  C015  FFFB         	movff	??_low_isr+4,pclatu
  1696  000092  C014  FFFA         	movff	??_low_isr+3,pclath
  1697  000096  C013  FFE0         	movff	??_low_isr+2,bsr
  1698  00009A  C012  FFE8         	movff	??_low_isr+1,wreg
  1699  00009E  C011  FFD8         	movff	??_low_isr,status
  1700  0000A2  9038               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1701  0000A4  0010               	retfie	
  1702  0000A6                     __end_of_low_isr:
  1703                           	opt stack 0
  1704                           pclatu	equ	0xFFB
  1705                           pclath	equ	0xFFA
  1706                           tblptru	equ	0xFF8
  1707                           tblptrh	equ	0xFF7
  1708                           tblptrl	equ	0xFF6
  1709                           tablat	equ	0xFF5
  1710                           prodh	equ	0xFF4
  1711                           prodl	equ	0xFF3
  1712                           intcon	equ	0xFF2
  1713                           indf0	equ	0xFEF
  1714                           postinc0	equ	0xFEE
  1715                           fsr0h	equ	0xFEA
  1716                           fsr0l	equ	0xFE9
  1717                           wreg	equ	0xFE8
  1718                           indf1	equ	0xFE7
  1719                           fsr1h	equ	0xFE2
  1720                           fsr1l	equ	0xFE1
  1721                           bsr	equ	0xFE0
  1722                           indf2	equ	0xFDF
  1723                           fsr2h	equ	0xFDA
  1724                           fsr2l	equ	0xFD9
  1725                           status	equ	0xFD8
  1726                           
  1727 ;; *************** function _high_isr *****************
  1728 ;; Defined at:
  1729 ;;		line 30 in file "interrupts.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;		None
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  1    wreg      void 
  1736 ;; Registers used:
  1737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1745 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1746 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1747 ;;Total ram usage:       15 bytes
  1748 ;; Hardware stack levels used:    1
  1749 ;; Hardware stack levels required when called:    1
  1750 ;; This function calls:
  1751 ;;		_appendChar
  1752 ;; This function is called by:
  1753 ;;		Interrupt level 2
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	intcode
  1758  000008                     __pintcode:
  1759                           	opt stack 0
  1760  000008                     _high_isr:
  1761                           	opt stack 25
  1762                           
  1763                           ;incstack = 0
  1764  000008  8238               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1765  00000A  EFD8  F007         	goto	int_func
  1766                           pclatu	equ	0xFFB
  1767                           pclath	equ	0xFFA
  1768                           tblptru	equ	0xFF8
  1769                           tblptrh	equ	0xFF7
  1770                           tblptrl	equ	0xFF6
  1771                           tablat	equ	0xFF5
  1772                           prodh	equ	0xFF4
  1773                           prodl	equ	0xFF3
  1774                           intcon	equ	0xFF2
  1775                           indf0	equ	0xFEF
  1776                           postinc0	equ	0xFEE
  1777                           fsr0h	equ	0xFEA
  1778                           fsr0l	equ	0xFE9
  1779                           wreg	equ	0xFE8
  1780                           indf1	equ	0xFE7
  1781                           fsr1h	equ	0xFE2
  1782                           fsr1l	equ	0xFE1
  1783                           bsr	equ	0xFE0
  1784                           indf2	equ	0xFDF
  1785                           fsr2h	equ	0xFDA
  1786                           fsr2l	equ	0xFD9
  1787                           status	equ	0xFD8
  1788                           
  1789                           	psect	intcode_body
  1790  000FB0                     __pintcode_body:
  1791                           	opt stack 25
  1792  000FB0                     int_func:
  1793                           	opt stack 25
  1794  000FB0  CFFA F003          	movff	pclath,??_high_isr+1
  1795  000FB4  CFFB F004          	movff	pclatu,??_high_isr+2
  1796  000FB8  CFE9 F005          	movff	fsr0l,??_high_isr+3
  1797  000FBC  CFEA F006          	movff	fsr0h,??_high_isr+4
  1798  000FC0  CFE1 F007          	movff	fsr1l,??_high_isr+5
  1799  000FC4  CFE2 F008          	movff	fsr1h,??_high_isr+6
  1800  000FC8  CFD9 F009          	movff	fsr2l,??_high_isr+7
  1801  000FCC  CFDA F00A          	movff	fsr2h,??_high_isr+8
  1802  000FD0  CFF3 F00B          	movff	prodl,??_high_isr+9
  1803  000FD4  CFF4 F00C          	movff	prodh,??_high_isr+10
  1804  000FD8  CFF6 F00D          	movff	tblptrl,??_high_isr+11
  1805  000FDC  CFF7 F00E          	movff	tblptrh,??_high_isr+12
  1806  000FE0  CFF8 F00F          	movff	tblptru,??_high_isr+13
  1807  000FE4  CFF5 F010          	movff	tablat,??_high_isr+14
  1808                           
  1809                           ;interrupts.c: 45: if(RC1IF){
  1810  000FE8  AA9E               	btfss	3998,5,c	;volatile
  1811  000FEA  D00F               	goto	i2l1141
  1812                           
  1813                           ;interrupts.c: 46: LATAbits.LATA0 = !LATAbits.LATA0;
  1814  000FEC  B089               	btfsc	3977,0,c	;volatile
  1815  000FEE  D003               	goto	i2u47_40
  1816  000FF0  6A02               	clrf	??_high_isr& (0+255),c
  1817  000FF2  2A02               	incf	??_high_isr& (0+255),f,c
  1818  000FF4  D001               	goto	i2u48_48
  1819  000FF6                     i2u47_40:
  1820  000FF6  6A02               	clrf	??_high_isr& (0+255),c
  1821  000FF8                     i2u48_48:
  1822  000FF8  5089               	movf	3977,w,c	;volatile
  1823  000FFA  1802               	xorwf	??_high_isr,w,c
  1824  000FFC  0BFE               	andlw	-2
  1825  000FFE  1802               	xorwf	??_high_isr,w,c
  1826  001000  6E89               	movwf	3977,c	;volatile
  1827                           
  1828                           ;interrupts.c: 47: appendChar(RCREG1);
  1829  001002  50AF               	movf	4015,w,c	;volatile
  1830  001004  EC93  F009         	call	_appendChar
  1831                           
  1832                           ;interrupts.c: 49: RC1IF = 0;
  1833  001008  9A9E               	bcf	3998,5,c	;volatile
  1834  00100A                     i2l1141:
  1835                           
  1836                           ;interrupts.c: 50: }
  1837                           ;interrupts.c: 52: if(RC2IF){
  1838  00100A  BAA4               	btfsc	4004,5,c	;volatile
  1839                           
  1840                           ;interrupts.c: 57: RC2IF = 0;
  1841  00100C  9AA4               	bcf	4004,5,c	;volatile
  1842  00100E  C010  FFF5         	movff	??_high_isr+14,tablat
  1843  001012  C00F  FFF8         	movff	??_high_isr+13,tblptru
  1844  001016  C00E  FFF7         	movff	??_high_isr+12,tblptrh
  1845  00101A  C00D  FFF6         	movff	??_high_isr+11,tblptrl
  1846  00101E  C00C  FFF4         	movff	??_high_isr+10,prodh
  1847  001022  C00B  FFF3         	movff	??_high_isr+9,prodl
  1848  001026  C00A  FFDA         	movff	??_high_isr+8,fsr2h
  1849  00102A  C009  FFD9         	movff	??_high_isr+7,fsr2l
  1850  00102E  C008  FFE2         	movff	??_high_isr+6,fsr1h
  1851  001032  C007  FFE1         	movff	??_high_isr+5,fsr1l
  1852  001036  C006  FFEA         	movff	??_high_isr+4,fsr0h
  1853  00103A  C005  FFE9         	movff	??_high_isr+3,fsr0l
  1854  00103E  C004  FFFB         	movff	??_high_isr+2,pclatu
  1855  001042  C003  FFFA         	movff	??_high_isr+1,pclath
  1856  001046  9238               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1857  001048  0011               	retfie		f
  1858  00104A                     __end_of_high_isr:
  1859                           	opt stack 0
  1860                           pclatu	equ	0xFFB
  1861                           pclath	equ	0xFFA
  1862                           tblptru	equ	0xFF8
  1863                           tblptrh	equ	0xFF7
  1864                           tblptrl	equ	0xFF6
  1865                           tablat	equ	0xFF5
  1866                           prodh	equ	0xFF4
  1867                           prodl	equ	0xFF3
  1868                           intcon	equ	0xFF2
  1869                           indf0	equ	0xFEF
  1870                           postinc0	equ	0xFEE
  1871                           fsr0h	equ	0xFEA
  1872                           fsr0l	equ	0xFE9
  1873                           wreg	equ	0xFE8
  1874                           indf1	equ	0xFE7
  1875                           fsr1h	equ	0xFE2
  1876                           fsr1l	equ	0xFE1
  1877                           bsr	equ	0xFE0
  1878                           indf2	equ	0xFDF
  1879                           fsr2h	equ	0xFDA
  1880                           fsr2l	equ	0xFD9
  1881                           status	equ	0xFD8
  1882                           
  1883 ;; *************** function _appendChar *****************
  1884 ;; Defined at:
  1885 ;;		line 23 in file "bufferhandler.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;  data            1    wreg     unsigned char 
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;  data            1    0[COMRAM] unsigned char 
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  1    wreg      void 
  1892 ;; Registers used:
  1893 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1900 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1902 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1903 ;;Total ram usage:        1 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; This function calls:
  1906 ;;		Nothing
  1907 ;; This function is called by:
  1908 ;;		_high_isr
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text16
  1913  001326                     __ptext16:
  1914                           	opt stack 0
  1915  001326                     _appendChar:
  1916                           	opt stack 25
  1917                           
  1918                           ;incstack = 0
  1919                           ;appendChar@data stored from wreg
  1920  001326  6E01               	movwf	appendChar@data,c
  1921                           
  1922                           ;bufferhandler.c: 24: tmpString[index] = data;
  1923  001328  0EA6               	movlw	low _tmpString
  1924  00132A  2436               	addwf	_index,w,c
  1925  00132C  6ED9               	movwf	fsr2l,c
  1926  00132E  0E00               	movlw	high _tmpString
  1927  001330  2037               	addwfc	_index+1,w,c
  1928  001332  6EDA               	movwf	fsr2h,c
  1929  001334  C001  FFDF         	movff	appendChar@data,indf2
  1930                           
  1931                           ;bufferhandler.c: 25: index++;
  1932  001338  4A36               	infsnz	_index,f,c
  1933  00133A  2A37               	incf	_index+1,f,c
  1934  00133C  0012               	return		;funcret
  1935  00133E                     __end_of_appendChar:
  1936                           	opt stack 0
  1937                           pclatu	equ	0xFFB
  1938                           pclath	equ	0xFFA
  1939                           tblptru	equ	0xFF8
  1940                           tblptrh	equ	0xFF7
  1941                           tblptrl	equ	0xFF6
  1942                           tablat	equ	0xFF5
  1943                           prodh	equ	0xFF4
  1944                           prodl	equ	0xFF3
  1945                           intcon	equ	0xFF2
  1946                           indf0	equ	0xFEF
  1947                           postinc0	equ	0xFEE
  1948                           fsr0h	equ	0xFEA
  1949                           fsr0l	equ	0xFE9
  1950                           wreg	equ	0xFE8
  1951                           indf1	equ	0xFE7
  1952                           fsr1h	equ	0xFE2
  1953                           fsr1l	equ	0xFE1
  1954                           bsr	equ	0xFE0
  1955                           indf2	equ	0xFDF
  1956                           fsr2h	equ	0xFDA
  1957                           fsr2l	equ	0xFD9
  1958                           status	equ	0xFD8
  1959                           pclatu	equ	0xFFB
  1960                           pclath	equ	0xFFA
  1961                           tblptru	equ	0xFF8
  1962                           tblptrh	equ	0xFF7
  1963                           tblptrl	equ	0xFF6
  1964                           tablat	equ	0xFF5
  1965                           prodh	equ	0xFF4
  1966                           prodl	equ	0xFF3
  1967                           intcon	equ	0xFF2
  1968                           indf0	equ	0xFEF
  1969                           postinc0	equ	0xFEE
  1970                           fsr0h	equ	0xFEA
  1971                           fsr0l	equ	0xFE9
  1972                           wreg	equ	0xFE8
  1973                           indf1	equ	0xFE7
  1974                           fsr1h	equ	0xFE2
  1975                           fsr1l	equ	0xFE1
  1976                           bsr	equ	0xFE0
  1977                           indf2	equ	0xFDF
  1978                           fsr2h	equ	0xFDA
  1979                           fsr2l	equ	0xFD9
  1980                           status	equ	0xFD8
  1981                           
  1982                           	psect	rparam
  1983  0000                     pclatu	equ	0xFFB
  1984                           pclath	equ	0xFFA
  1985                           tblptru	equ	0xFF8
  1986                           tblptrh	equ	0xFF7
  1987                           tblptrl	equ	0xFF6
  1988                           tablat	equ	0xFF5
  1989                           prodh	equ	0xFF4
  1990                           prodl	equ	0xFF3
  1991                           intcon	equ	0xFF2
  1992                           indf0	equ	0xFEF
  1993                           postinc0	equ	0xFEE
  1994                           fsr0h	equ	0xFEA
  1995                           fsr0l	equ	0xFE9
  1996                           wreg	equ	0xFE8
  1997                           indf1	equ	0xFE7
  1998                           fsr1h	equ	0xFE2
  1999                           fsr1l	equ	0xFE1
  2000                           bsr	equ	0xFE0
  2001                           indf2	equ	0xFDF
  2002                           fsr2h	equ	0xFDA
  2003                           fsr2l	equ	0xFD9
  2004                           status	equ	0xFD8
  2005                           
  2006                           	psect	temp
  2007  000038                     btemp:
  2008                           	opt stack 0
  2009  000038                     	ds	1
  2010  0000                     int$flags	set	btemp
  2011                           pclatu	equ	0xFFB
  2012                           pclath	equ	0xFFA
  2013                           tblptru	equ	0xFF8
  2014                           tblptrh	equ	0xFF7
  2015                           tblptrl	equ	0xFF6
  2016                           tablat	equ	0xFF5
  2017                           prodh	equ	0xFF4
  2018                           prodl	equ	0xFF3
  2019                           intcon	equ	0xFF2
  2020                           indf0	equ	0xFEF
  2021                           postinc0	equ	0xFEE
  2022                           fsr0h	equ	0xFEA
  2023                           fsr0l	equ	0xFE9
  2024                           wreg	equ	0xFE8
  2025                           indf1	equ	0xFE7
  2026                           fsr1h	equ	0xFE2
  2027                           fsr1l	equ	0xFE1
  2028                           bsr	equ	0xFE0
  2029                           indf2	equ	0xFDF
  2030                           fsr2h	equ	0xFDA
  2031                           fsr2l	equ	0xFD9
  2032                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    0
    Data        0
    BSS         146
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      55
    BANK0           160      0     140
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 70
		 -> realString(BANK0[70]), tmpString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 70
		 -> realString(BANK0[70]), tmpString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 

    writeString@str	PTR unsigned char  size(2) Largest target is 70
		 -> realString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_writeResult
    _writeResult->_wait_ms
    _writeString->_strlen
    _wait_ms->___lmul
    _clearBuffer->_strlen

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_appendChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3565
                                             48 COMRAM     1     1      0
                _ConfigureOscillator
                            _InitApp
                          _UART_Init
                         _UART_Write
                        _clearBuffer
                      _copyTmpBuffer
                     _isItLongEnough
                            _isValid
                            _wait_ms
                        _writeResult
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeResult                                          1     1      0    1466
                                             47 COMRAM     1     1      0
                            _wait_ms
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeString                                          7     4      3     972
                                             39 COMRAM     7     4      3
                         _UART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           2     1      1     258
                                             33 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _wait_ms                                              2     0      2     472
                                             45 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     322
                                             33 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _isValid                                              2     0      2       0
                                             33 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _isItLongEnough                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _copyTmpBuffer                                        3     3      0      68
                                             33 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _clearBuffer                                          2     2      0     264
                                             39 COMRAM     2     2      0
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     218
                                             33 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4      64
                                             33 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                             16 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            15    15      0      22
                                              1 COMRAM    15    15      0
                         _appendChar
 ---------------------------------------------------------------------------------
 (6) _appendChar                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _UART_Init
   _UART_Write
   _clearBuffer
     _strlen
   _copyTmpBuffer
   _isItLongEnough
   _isValid
   _wait_ms
     ___lmul
   _writeResult
     _wait_ms
       ___lmul
     _writeString
       _UART_Write
       _strlen
   _writeString
     _UART_Write
     _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)
   _appendChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      8C       5       87.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      37       1       58.5%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C3       6        0.0%
DATA                 0      0      C3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Apr 02 13:30:28 2017

                          l52 0FA2                            l71 10F0                            l55 0FA4  
              writeResult@dev 0030                            bsr 000FE0                  __CFG_CP0$OFF 000000  
                         l144 1312                           l148 131C                           l929 134C  
                         u320 1184                           u327 117A                           u360 1086  
                         u367 107C                           wreg 000FE8                    _TXSTA1bits 000FAD  
                __CFG_IESO$ON 000000                    _TXSTA2bits 000FA8                          l1041 1162  
                        l1123 123E                          l1117 11E4                          l1053 1122  
                        l1039 115E                          l1127 125E                          l1063 108E  
                        l1049 110E                          l1067 10E0                          l1059 1054  
                        l1181 0F9C                          l1095 11F8                          l1169 0F6E  
                        l1099 120C            __CFG_WPFP$PAGE_127 000000                 _copyTmpBuffer 1234  
                        STR_1 0F01                          STR_2 0F06                          STR_3 0F05  
                        _RCIF 007CF5                 __CFG_FCMEN$ON 000000                          _main 0F0C  
                        fsr0h 000FEA                          fsr1h 000FE2                          indf0 000FEF  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf1 000FE7  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 0038                          prodh 000FF4                          prodl 000FF3  
                        start 00A6                writeString@dev 002A                  ___param_bank 000000  
              writeString@str 0028               __end_of_InitApp 130A                 __CFG_PLLDIV$1 000000  
                _BAUDCON1bits 000F7E                  _BAUDCON2bits 000F7C                         ?_main 0001  
                       _RC1IE 007CED                         _RC1IF 007CF5                         _RC2IE 007D1D  
                       _RC2IF 007D25                   _writeResult 12CC                         _RPOR8 000EC8  
         _ConfigureOscillator 1350                   _writeString 104A           ___lmul@multiplicand 0026  
            ??_isItLongEnough 0022                   ?_UART_Write 0022            __size_of_UART_Init 0032  
             __end_of_isValid 11EE                         _index 0036                ?_copyTmpBuffer 0001  
              __CFG_CLKOEC$ON 000000               __end_of_low_isr 00A6                         pclath 000FFA  
                       tablat 000FF5               __end_of_wait_ms 10FE                         status 000FD8  
        ?_ConfigureOscillator 0001          __size_of_clearBuffer 0046       __CFG_DSWDTOSC$INTOSCREF 000000  
             __initialization 12A6                  __end_of_main 0FB0                        ??_main 0031  
               __activetblptr 000002                        i2l1141 100A                __CFG_WDTEN$OFF 000000  
                      _INTCON 000FF2                        _RCREG1 000FAF                        _RCREG2 000FAA  
                      _RCSTA1 000FAC                        _RCSTA2 000F9C                        _SPBRG1 000FB0  
                      _SPBRG2 000FAB                        _PPSCON 000EBF                        _TRISB4 007C9C  
                      _TRISB5 007C9D                __CFG_WPCFG$OFF 000000                        _TRISC6 007CA6  
                      _TRISC7 007CA7                        _TXREG1 000FAE                        _TXREG2 000FA9  
                      _TXSTA1 000FAD                        _TXSTA2 000FA8                     ??_InitApp 0022  
       ??_ConfigureOscillator 0022                __CFG_WPDIS$OFF 000000                __CFG_XINST$OFF 000000  
           __end_of_UART_Init 12A6              __end_of_high_isr 104A                        ___lmul 10FE  
         __size_of_UART_Write 001C                __CFG_STVREN$ON 000000                        clear_0 12AC  
                      _strlen 1154                     ??_isValid 0024                  __mediumconst 0000  
                   ??_low_isr 0011                        tblptrh 000FF7               ??_copyTmpBuffer 0022  
                      tblptrl 000FF6                        tblptru 000FF8                     ??_wait_ms 0030  
             __CFG_DSBOREN$ON 000000          __CFG_LS48MHZ$SYS48X8 000000                    __accesstop 0060  
     __end_of__initialization 12BE                 ___rparam_used 000001               __CFG_IOL1WAY$ON 000000  
        __CFG_WPEND$PAGE_WPFP 000000                __pcstackCOMRAM 0001               __CFG_DSWDTEN$ON 000000  
             __CFG_DSWDTPS$G2 000000               __CFG_OSC$INTOSC 000000                    __pbssBANK0 0060  
                     ?___lmul 0022                ___lmul@product 002A                    _appendChar 1326  
                     ?_strlen 0022                  ?_writeResult 0001                  ?_writeString 0028  
                ??_UART_Write 0023                       i2u47_40 0FF6                       i2u48_48 0FF8  
                     _SPBRGH1 000F7F                       _SPBRGH2 000F7D                       _RPINR16 000EF7  
                   ?_high_isr 0001                       _InitApp 12EC                       __Hparam 0000  
                     __Lparam 0000               __size_of___lmul 0056            __end_of_UART_Write 1326  
                __psmallconst 0F00                       __pcinit 12A6                       __ramtop 0F00  
                     __ptext0 0F0C                       __ptext1 12CC                       __ptext2 104A  
                     __ptext3 130A                       __ptext4 10A8                       __ptext5 10FE  
                     __ptext6 11A8                       __ptext7 133E                       __ptext8 1234  
                     __ptext9 11EE                       _isValid 11A8               __size_of_strlen 0054  
                  _realString 0060                       _low_isr 0018                       _wait_ms 10A8  
                     main@var 0031                    ??_high_isr 0002                __pintcode_body 0FB0  
        end_of_initialization 12BE                 ??_clearBuffer 0028                 __Lmediumconst 0000  
                     int_func 0FB0                       postinc0 000FEE                   wait_ms@time 002E  
                     strlen@s 0022                     _UART_Init 1274                     _PORTDbits 000F83  
                 ?_appendChar 0001                UART_Write@data 0023              __CFG_CPUDIV$OSC1 000000  
                   _TRISAbits 000F92                     _TRISDbits 000F95             __CFG_SOSCSEL$HIGH 000000  
 __end_of_ConfigureOscillator 135C                  writeString@i 002D       __size_of_isItLongEnough 0012  
         __CFG_MSSP7B_EN$MSK7 000000           __end_of_clearBuffer 1234                __end_of___lmul 1154  
                  ?_UART_Init 0022                __end_of_strlen 11A8           start_initialization 12A6  
        __size_of_writeResult 0020          __size_of_writeString 005E         __end_of_copyTmpBuffer 1274  
         __size_of_appendChar 0018                      ??___lmul 002A             __CFG_ADCSEL$BIT10 000000  
                    ??_strlen 0024                   __pbssCOMRAM 0032             __size_of_high_isr 1042  
                 _clearBuffer 11EE                      ?_InitApp 0001                     __pintcode 0008  
                 __pintcodelo 0018                   ??_UART_Init 0026                      ?_isValid 0022  
                 __smallconst 0F00          __CFG_RTCOSC$T1OSCREF 000000                      ?_low_isr 0001  
                    ?_wait_ms 002E                copyTmpBuffer@i 0023                _isItLongEnough 133E  
                    _LATAbits 000F89              __CFG_WDTPS$32768 000000                  clearBuffer@i 0028  
               UART_Write@dev 0022                     _tmpString 00A6             UART_Init@baudrate 0022  
                ??_appendChar 0001             __CFG_CFGPLLEN$OFF 000000             ___lmul@multiplier 0022  
      __end_of_isItLongEnough 1350            __end_of_appendChar 133E              __size_of_InitApp 001E  
                    __Hrparam 0000                      __Lrparam 0000              __size_of_isValid 0046  
            __size_of_low_isr 008E                      __ptext10 1154                      __ptext11 1274  
                    __ptext12 12EC                      __ptext13 1350                      __ptext16 1326  
            __size_of_wait_ms 0056                      _high_isr 0008               ?_isItLongEnough 0001  
               __size_of_main 00A4                appendChar@data 0001  __size_of_ConfigureOscillator 000C  
                    int$flags 0038                 ??_writeResult 0030                 ??_writeString 002B  
                 _OSCTUNEbits 000F9B                      intlevel1 0000                      intlevel2 0000  
                ?_clearBuffer 0001                    _OSCCONbits 000FD3        __size_of_copyTmpBuffer 0040  
                wait_ms@timel 0032                      strlen@cp 0026                    _UART_Write 130A  
         __end_of_writeResult 12EC           __end_of_writeString 10A8  
