

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Apr 06 12:31:22 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F47J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    34  0000                     
    35                           ; Version 1.41
    36                           ; Generated 25/01/2017 GMT
    37                           ; 
    38                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F47J53 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	idataCOMRAM
    71  001400                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for parseString@F8387
    75  001400  0F05               	dw	(STR_1+4)& (0+65535)
    76  001402  00                 	db	0
    77  001403  00                 	db	0
    78  001404  00                 	db	0
    79  001405  00                 	db	0
    80  0000                     _RPINR16	set	3831
    81  0000                     _RPOR8	set	3784
    82  0000                     _PPSCON	set	3775
    83  0000                     _RCREG2	set	4010
    84  0000                     _TXREG2	set	4009
    85  0000                     _TXSTA2bits	set	4008
    86  0000                     _TXREG1	set	4014
    87  0000                     _TXSTA1bits	set	4013
    88  0000                     _SPBRGH2	set	3965
    89  0000                     _SPBRG2	set	4011
    90  0000                     _BAUDCON2bits	set	3964
    91  0000                     _TXSTA2	set	4008
    92  0000                     _RCSTA2	set	3996
    93  0000                     _SPBRGH1	set	3967
    94  0000                     _SPBRG1	set	4016
    95  0000                     _BAUDCON1bits	set	3966
    96  0000                     _RCSTA1	set	4012
    97  0000                     _TXSTA1	set	4013
    98  0000                     _INTCON	set	4082
    99  0000                     _OSCTUNEbits	set	3995
   100  0000                     _OSCCONbits	set	4051
   101  0000                     _PORTDbits	set	3971
   102  0000                     _TRISDbits	set	3989
   103  0000                     _TRISAbits	set	3986
   104  0000                     _RCREG1	set	4015
   105  0000                     _LATAbits	set	3977
   106  0000                     _RCIF	set	31989
   107  0000                     _TRISB5	set	31901
   108  0000                     _TRISB4	set	31900
   109  0000                     _RC2IE	set	32029
   110  0000                     _TRISC6	set	31910
   111  0000                     _TRISC7	set	31911
   112  0000                     _RC1IE	set	31981
   113  0000                     _RC2IF	set	32037
   114  0000                     _RC1IF	set	31989
   115                           
   116                           	psect	smallconst
   117  000F00                     __psmallconst:
   118                           	opt stack 0
   119  000F00  00                 	db	0
   120  000F01                     STR_1:
   121  000F01  4C                 	db	76	;'L'
   122  000F02  20                 	db	32
   123  000F03  35                 	db	53	;'5'
   124  000F04  30                 	db	48	;'0'
   125  000F05  00                 	db	0
   126  000F06                     STR_2:
   127  000F06  44                 	db	68	;'D'
   128  000F07  20                 	db	32
   129  000F08  38                 	db	56	;'8'
   130  000F09  00                 	db	0
   131  0000                     
   132                           ; #config settings
   133  000F0A  00                 	db	0	; dummy byte at the end
   134  0000                     
   135                           	psect	cinit
   136  0012B6                     __pcinit:
   137                           	opt stack 0
   138  0012B6                     start_initialization:
   139                           	opt stack 0
   140  0012B6                     __initialization:
   141                           	opt stack 0
   142                           
   143                           ; Initialize objects allocated to COMRAM (6 bytes)
   144                           ; load TBLPTR registers with __pidataCOMRAM
   145  0012B6  0E00               	movlw	low __pidataCOMRAM
   146  0012B8  6EF6               	movwf	tblptrl,c
   147  0012BA  0E14               	movlw	high __pidataCOMRAM
   148  0012BC  6EF7               	movwf	tblptrh,c
   149  0012BE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   150  0012C0  6EF8               	movwf	tblptru,c
   151  0012C2  EE00  F03B         	lfsr	0,__pdataCOMRAM
   152  0012C6  EE10 F006          	lfsr	1,6
   153  0012CA                     copy_data0:
   154  0012CA  0009               	tblrd		*+
   155  0012CC  CFF5 FFEE          	movff	tablat,postinc0
   156  0012D0  50E5               	movf	postdec1,w,c
   157  0012D2  50E1               	movf	fsr1l,w,c
   158  0012D4  E1FA               	bnz	copy_data0
   159                           
   160                           ; Clear objects allocated to BANK0 (140 bytes)
   161  0012D6  EE00  F060         	lfsr	0,__pbssBANK0
   162  0012DA  0E8C               	movlw	140
   163  0012DC                     clear_0:
   164  0012DC  6AEE               	clrf	postinc0,c
   165  0012DE  06E8               	decf	wreg,f,c
   166  0012E0  E1FD               	bnz	clear_0
   167                           
   168                           ; Clear objects allocated to COMRAM (25 bytes)
   169  0012E2  EE00  F022         	lfsr	0,__pbssCOMRAM
   170  0012E6  0E19               	movlw	25
   171  0012E8                     clear_1:
   172  0012E8  6AEE               	clrf	postinc0,c
   173  0012EA  06E8               	decf	wreg,f,c
   174  0012EC  E1FD               	bnz	clear_1
   175  0012EE                     end_of_initialization:
   176                           	opt stack 0
   177  0012EE                     __end_of__initialization:
   178                           	opt stack 0
   179  0012EE  9041               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   180  0012F0  9241               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   181  0012F2  0100               	movlb	0
   182  0012F4  EF86  F007         	goto	_main	;jump to C main() function
   183                           tblptru	equ	0xFF8
   184                           tblptrh	equ	0xFF7
   185                           tblptrl	equ	0xFF6
   186                           tablat	equ	0xFF5
   187                           postinc0	equ	0xFEE
   188                           wreg	equ	0xFE8
   189                           postdec1	equ	0xFE5
   190                           fsr1l	equ	0xFE1
   191                           
   192                           	psect	bssCOMRAM
   193  000022                     __pbssCOMRAM:
   194                           	opt stack 0
   195  000022                     _parsedString:
   196                           	opt stack 0
   197  000022                     	ds	16
   198  000032                     wait_ms@timel:
   199                           	opt stack 0
   200  000032                     	ds	4
   201  000036                     parseString@F8385:
   202                           	opt stack 0
   203  000036                     	ds	3
   204  000039                     _index:
   205                           	opt stack 0
   206  000039                     	ds	2
   207                           tblptru	equ	0xFF8
   208                           tblptrh	equ	0xFF7
   209                           tblptrl	equ	0xFF6
   210                           tablat	equ	0xFF5
   211                           postinc0	equ	0xFEE
   212                           wreg	equ	0xFE8
   213                           postdec1	equ	0xFE5
   214                           fsr1l	equ	0xFE1
   215                           
   216                           	psect	dataCOMRAM
   217  00003B                     __pdataCOMRAM:
   218                           	opt stack 0
   219  00003B                     parseString@F8387:
   220                           	opt stack 0
   221  00003B                     	ds	6
   222                           tblptru	equ	0xFF8
   223                           tblptrh	equ	0xFF7
   224                           tblptrl	equ	0xFF6
   225                           tablat	equ	0xFF5
   226                           postinc0	equ	0xFEE
   227                           wreg	equ	0xFE8
   228                           postdec1	equ	0xFE5
   229                           fsr1l	equ	0xFE1
   230                           
   231                           	psect	bssBANK0
   232  000060                     __pbssBANK0:
   233                           	opt stack 0
   234  000060                     _allDataString:
   235                           	opt stack 0
   236  000060                     	ds	70
   237  0000A6                     _tmpString:
   238                           	opt stack 0
   239  0000A6                     	ds	70
   240                           tblptru	equ	0xFF8
   241                           tblptrh	equ	0xFF7
   242                           tblptrl	equ	0xFF6
   243                           tablat	equ	0xFF5
   244                           postinc0	equ	0xFEE
   245                           wreg	equ	0xFE8
   246                           postdec1	equ	0xFE5
   247                           fsr1l	equ	0xFE1
   248                           
   249                           	psect	cstackBANK0
   250  0000EC                     __pcstackBANK0:
   251                           	opt stack 0
   252  0000EC                     ??_copyTmpBuffer:
   253  0000EC                     ?_strlen:
   254                           	opt stack 0
   255  0000EC                     ?___lmul:
   256                           	opt stack 0
   257  0000EC                     UART_Write@dev:
   258                           	opt stack 0
   259  0000EC                     strlen@s:
   260                           	opt stack 0
   261  0000EC                     UART_Init@baudrate:
   262                           	opt stack 0
   263  0000EC                     ___lmul@multiplier:
   264                           	opt stack 0
   265                           
   266                           ; 4 bytes @ 0x0
   267  0000EC                     	ds	1
   268  0000ED                     UART_Write@data:
   269                           	opt stack 0
   270  0000ED                     copyTmpBuffer@i:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x1
   274  0000ED                     	ds	1
   275  0000EE                     ??_strlen:
   276                           
   277                           ; 1 bytes @ 0x2
   278  0000EE                     	ds	2
   279  0000F0                     strlen@cp:
   280                           	opt stack 0
   281  0000F0                     ___lmul@multiplicand:
   282                           	opt stack 0
   283                           
   284                           ; 4 bytes @ 0x4
   285  0000F0                     	ds	2
   286  0000F2                     writeString@str:
   287                           	opt stack 0
   288  0000F2                     clearBuffer@i:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x6
   292  0000F2                     	ds	2
   293  0000F4                     writeString@dev:
   294                           	opt stack 0
   295  0000F4                     ___lmul@product:
   296                           	opt stack 0
   297                           
   298                           ; 4 bytes @ 0x8
   299  0000F4                     	ds	1
   300  0000F5                     ??_writeString:
   301                           
   302                           ; 1 bytes @ 0x9
   303  0000F5                     	ds	2
   304  0000F7                     writeString@i:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0xB
   308  0000F7                     	ds	1
   309  0000F8                     wait_ms@time:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0xC
   313  0000F8                     	ds	2
   314  0000FA                     writeResult@dev:
   315                           	opt stack 0
   316                           
   317                           ; 1 bytes @ 0xE
   318  0000FA                     	ds	1
   319  0000FB                     main@var:
   320                           	opt stack 0
   321                           
   322                           ; 1 bytes @ 0xF
   323  0000FB                     	ds	1
   324                           tblptru	equ	0xFF8
   325                           tblptrh	equ	0xFF7
   326                           tblptrl	equ	0xFF6
   327                           tablat	equ	0xFF5
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           postdec1	equ	0xFE5
   331                           fsr1l	equ	0xFE1
   332                           
   333                           	psect	cstackCOMRAM
   334  000001                     __pcstackCOMRAM:
   335                           	opt stack 0
   336  000001                     appendChar@data:
   337                           	opt stack 0
   338                           
   339                           ; 1 bytes @ 0x0
   340  000001                     	ds	1
   341  000002                     ??_high_isr:
   342                           
   343                           ; 1 bytes @ 0x1
   344  000002                     	ds	15
   345  000011                     ??_low_isr:
   346                           
   347                           ; 1 bytes @ 0x10
   348  000011                     	ds	17
   349                           tblptru	equ	0xFF8
   350                           tblptrh	equ	0xFF7
   351                           tblptrl	equ	0xFF6
   352                           tablat	equ	0xFF5
   353                           postinc0	equ	0xFEE
   354                           wreg	equ	0xFE8
   355                           postdec1	equ	0xFE5
   356                           fsr1l	equ	0xFE1
   357                           
   358 ;;
   359 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   360 ;;
   361 ;; *************** function _main *****************
   362 ;; Defined at:
   363 ;;		line 39 in file "main.c"
   364 ;; Parameters:    Size  Location     Type
   365 ;;		None
   366 ;; Auto vars:     Size  Location     Type
   367 ;;  var             1   15[BANK0 ] unsigned char 
   368 ;;  result          1    0        unsigned char 
   369 ;; Return value:  Size  Location     Type
   370 ;;                  1    wreg      void 
   371 ;; Registers used:
   372 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   373 ;; Tracked objects:
   374 ;;		On entry : 0/0
   375 ;;		On exit  : 0/0
   376 ;;		Unchanged: 0/0
   377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   381 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   382 ;;Total ram usage:        1 bytes
   383 ;; Hardware stack levels required when called:    6
   384 ;; This function calls:
   385 ;;		_ConfigureOscillator
   386 ;;		_InitApp
   387 ;;		_UART_Init
   388 ;;		_UART_Write
   389 ;;		_clearBuffer
   390 ;;		_copyTmpBuffer
   391 ;;		_isItLongEnough
   392 ;;		_isValid
   393 ;;		_wait_ms
   394 ;;		_writeResult
   395 ;;		_writeString
   396 ;; This function is called by:
   397 ;;		Startup code after reset
   398 ;; This function uses a non-reentrant model
   399 ;;
   400                           
   401                           	psect	text0
   402  000F0C                     __ptext0:
   403                           	opt stack 0
   404  000F0C                     _main:
   405                           	opt stack 25
   406                           
   407                           ;main.c: 45: ConfigureOscillator();
   408                           
   409                           ;incstack = 0
   410  000F0C  ECFA  F009         	call	_ConfigureOscillator	;wreg free
   411                           
   412                           ;main.c: 48: InitApp();
   413  000F10  ECD6  F009         	call	_InitApp	;wreg free
   414                           
   415                           ;main.c: 50: UART_Init(19200);
   416  000F14  0E00               	movlw	0
   417  000F16  0100               	movlb	0	; () banked
   418  000F18  6FEC               	movwf	UART_Init@baudrate& (0+255),b
   419  000F1A  0E4B               	movlw	75
   420  000F1C  6FED               	movwf	(UART_Init@baudrate+1)& (0+255),b
   421  000F1E  0E00               	movlw	0
   422  000F20  6FEE               	movwf	(UART_Init@baudrate+2)& (0+255),b
   423  000F22  0E00               	movlw	0
   424  000F24  6FEF               	movwf	(UART_Init@baudrate+3)& (0+255),b
   425  000F26  EC99  F009         	call	_UART_Init	;wreg free
   426                           
   427                           ;main.c: 51: writeString("L 50", 1);
   428  000F2A  0E01               	movlw	low STR_1
   429  000F2C  0100               	movlb	0	; () banked
   430  000F2E  6FF2               	movwf	writeString@str& (0+255),b
   431  000F30  0E0F               	movlw	high STR_1
   432  000F32  0100               	movlb	0	; () banked
   433  000F34  6FF3               	movwf	(writeString@str+1)& (0+255),b
   434  000F36  0E01               	movlw	1
   435  000F38  0100               	movlb	0	; () banked
   436  000F3A  6FF4               	movwf	writeString@dev& (0+255),b
   437  000F3C  EC2F  F008         	call	_writeString	;wreg free
   438                           
   439                           ;main.c: 52: UART_Write(0x0D,1);
   440  000F40  0E01               	movlw	1
   441  000F42  0100               	movlb	0	; () banked
   442  000F44  6FEC               	movwf	UART_Write@dev& (0+255),b
   443  000F46  0E0D               	movlw	13
   444  000F48  ECC6  F009         	call	_UART_Write
   445                           
   446                           ;main.c: 53: writeString("D 8", 1);
   447  000F4C  0E06               	movlw	low STR_2
   448  000F4E  0100               	movlb	0	; () banked
   449  000F50  6FF2               	movwf	writeString@str& (0+255),b
   450  000F52  0E0F               	movlw	high STR_2
   451  000F54  0100               	movlb	0	; () banked
   452  000F56  6FF3               	movwf	(writeString@str+1)& (0+255),b
   453  000F58  0E01               	movlw	1
   454  000F5A  0100               	movlb	0	; () banked
   455  000F5C  6FF4               	movwf	writeString@dev& (0+255),b
   456  000F5E  EC2F  F008         	call	_writeString	;wreg free
   457                           
   458                           ;main.c: 54: UART_Write(0x0D,1);
   459  000F62  0E01               	movlw	1
   460  000F64  0100               	movlb	0	; () banked
   461  000F66  6FEC               	movwf	UART_Write@dev& (0+255),b
   462  000F68  0E0D               	movlw	13
   463  000F6A  ECC6  F009         	call	_UART_Write
   464                           
   465                           ;main.c: 56: uint8_t var = 0;
   466  000F6E  0E00               	movlw	0
   467  000F70  0100               	movlb	0	; () banked
   468  000F72  6FFB               	movwf	main@var& (0+255),b
   469                           
   470                           ; BSR set to: 0
   471                           ;main.c: 57: char result;
   472                           ;main.c: 60: TRISAbits.TRISA0 = 0;
   473  000F74  9092               	bcf	3986,0,c	;volatile
   474                           
   475                           ; BSR set to: 0
   476                           ;main.c: 61: TRISAbits.TRISA1 = 0;
   477  000F76  9292               	bcf	3986,1,c	;volatile
   478                           
   479                           ; BSR set to: 0
   480                           ;main.c: 62: LATAbits.LATA0 = 0;
   481  000F78  9089               	bcf	3977,0,c	;volatile
   482                           
   483                           ; BSR set to: 0
   484                           ;main.c: 63: LATAbits.LATA1 = 0;
   485  000F7A  9289               	bcf	3977,1,c	;volatile
   486                           
   487                           ; BSR set to: 0
   488                           ;main.c: 64: TRISDbits.TRISD3 = 1;
   489  000F7C  8695               	bsf	3989,3,c	;volatile
   490                           
   491                           ; BSR set to: 0
   492                           ;main.c: 66: clearBuffer();
   493  000F7E  EC04  F009         	call	_clearBuffer	;wreg free
   494  000F82                     l1526:
   495                           
   496                           ;main.c: 71: if(isItLongEnough()){
   497  000F82  ECF1  F009         	call	_isItLongEnough	;wreg free
   498  000F86  0900               	iorlw	0
   499  000F88  B4D8               	btfsc	status,2,c
   500  000F8A  D015               	goto	l52
   501                           
   502                           ;main.c: 72: if(isValid()){
   503  000F8C  EC7C  F009         	call	_isValid	;wreg free
   504  000F90  0900               	iorlw	0
   505  000F92  B4D8               	btfsc	status,2,c
   506  000F94  D00D               	goto	l1538
   507                           
   508                           ;main.c: 73: LATAbits.LATA1 = 1;
   509  000F96  8289               	bsf	3977,1,c	;volatile
   510                           
   511                           ;main.c: 74: wait_ms(1000);
   512  000F98  0E03               	movlw	3
   513  000F9A  0100               	movlb	0	; () banked
   514  000F9C  6FF9               	movwf	(wait_ms@time+1)& (0+255),b
   515  000F9E  0EE8               	movlw	232
   516  000FA0  6FF8               	movwf	wait_ms@time& (0+255),b
   517  000FA2  ECD7  F008         	call	_wait_ms	;wreg free
   518                           
   519                           ;main.c: 75: copyTmpBuffer();
   520  000FA6  EC31  F009         	call	_copyTmpBuffer	;wreg free
   521                           
   522                           ;main.c: 76: clearBuffer();
   523  000FAA  EC04  F009         	call	_clearBuffer	;wreg free
   524                           
   525                           ;main.c: 77: }else{
   526  000FAE  D004               	goto	l55
   527  000FB0                     l1538:
   528                           
   529                           ;main.c: 78: clearBuffer();
   530  000FB0  EC04  F009         	call	_clearBuffer	;wreg free
   531                           
   532                           ;main.c: 79: }
   533                           ;main.c: 80: }else{
   534  000FB4  D001               	goto	l55
   535  000FB6                     l52:
   536                           
   537                           ;main.c: 81: LATAbits.LATA1 = 0;
   538  000FB6  9289               	bcf	3977,1,c	;volatile
   539  000FB8                     l55:
   540                           
   541                           ;main.c: 82: }
   542                           ;main.c: 84: if(!PORTDbits.RD3){
   543  000FB8  B683               	btfsc	3971,3,c	;volatile
   544  000FBA  D7E3               	goto	l1526
   545                           
   546                           ;main.c: 85: writeResult(2);
   547  000FBC  0E02               	movlw	2
   548  000FBE  ECB2  F009         	call	_writeResult
   549  000FC2  D7DF               	goto	l1526
   550  000FC4                     __end_of_main:
   551                           	opt stack 0
   552                           tblptru	equ	0xFF8
   553                           tblptrh	equ	0xFF7
   554                           tblptrl	equ	0xFF6
   555                           tablat	equ	0xFF5
   556                           postinc0	equ	0xFEE
   557                           wreg	equ	0xFE8
   558                           postdec1	equ	0xFE5
   559                           fsr1l	equ	0xFE1
   560                           status	equ	0xFD8
   561                           
   562 ;; *************** function _writeResult *****************
   563 ;; Defined at:
   564 ;;		line 56 in file "bufferhandler.c"
   565 ;; Parameters:    Size  Location     Type
   566 ;;  dev             1    wreg     unsigned char 
   567 ;; Auto vars:     Size  Location     Type
   568 ;;  dev             1   14[BANK0 ] unsigned char 
   569 ;; Return value:  Size  Location     Type
   570 ;;                  1    wreg      void 
   571 ;; Registers used:
   572 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   573 ;; Tracked objects:
   574 ;;		On entry : 0/0
   575 ;;		On exit  : 0/0
   576 ;;		Unchanged: 0/0
   577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   579 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   581 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   582 ;;Total ram usage:        1 bytes
   583 ;; Hardware stack levels used:    1
   584 ;; Hardware stack levels required when called:    5
   585 ;; This function calls:
   586 ;;		_wait_ms
   587 ;;		_writeString
   588 ;; This function is called by:
   589 ;;		_main
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           	psect	text1
   594  001364                     __ptext1:
   595                           	opt stack 0
   596  001364                     _writeResult:
   597                           	opt stack 25
   598                           
   599                           ;incstack = 0
   600                           ;writeResult@dev stored from wreg
   601  001364  0100               	movlb	0	; () banked
   602  001366  6FFA               	movwf	writeResult@dev& (0+255),b
   603                           
   604                           ;bufferhandler.c: 58: writeString(allDataString, dev);
   605  001368  0E60               	movlw	low _allDataString
   606  00136A  0100               	movlb	0	; () banked
   607  00136C  6FF2               	movwf	writeString@str& (0+255),b
   608  00136E  0E00               	movlw	high _allDataString
   609  001370  0100               	movlb	0	; () banked
   610  001372  6FF3               	movwf	(writeString@str+1)& (0+255),b
   611  001374  C0FA  F0F4         	movff	writeResult@dev,writeString@dev
   612  001378  EC2F  F008         	call	_writeString	;wreg free
   613                           
   614                           ;bufferhandler.c: 59: wait_ms(1000);
   615  00137C  0E03               	movlw	3
   616  00137E  0100               	movlb	0	; () banked
   617  001380  6FF9               	movwf	(wait_ms@time+1)& (0+255),b
   618  001382  0EE8               	movlw	232
   619  001384  6FF8               	movwf	wait_ms@time& (0+255),b
   620  001386  ECD7  F008         	call	_wait_ms	;wreg free
   621  00138A  0012               	return		;funcret
   622  00138C                     __end_of_writeResult:
   623                           	opt stack 0
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           postdec1	equ	0xFE5
   631                           fsr1l	equ	0xFE1
   632                           status	equ	0xFD8
   633                           
   634 ;; *************** function _writeString *****************
   635 ;; Defined at:
   636 ;;		line 97 in file "uart.c"
   637 ;; Parameters:    Size  Location     Type
   638 ;;  str             2    6[BANK0 ] PTR unsigned char 
   639 ;;		 -> allDataString(70), STR_2(4), STR_1(5), 
   640 ;;  dev             1    8[BANK0 ] unsigned char 
   641 ;; Auto vars:     Size  Location     Type
   642 ;;  i               2   11[BANK0 ] int 
   643 ;; Return value:  Size  Location     Type
   644 ;;                  1    wreg      void 
   645 ;; Registers used:
   646 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   647 ;; Tracked objects:
   648 ;;		On entry : 0/0
   649 ;;		On exit  : 0/0
   650 ;;		Unchanged: 0/0
   651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   652 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   653 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   654 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   655 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   656 ;;Total ram usage:        7 bytes
   657 ;; Hardware stack levels used:    1
   658 ;; Hardware stack levels required when called:    4
   659 ;; This function calls:
   660 ;;		_UART_Write
   661 ;;		_strlen
   662 ;; This function is called by:
   663 ;;		_main
   664 ;;		_writeResult
   665 ;; This function uses a non-reentrant model
   666 ;;
   667                           
   668                           	psect	text2
   669  00105E                     __ptext2:
   670                           	opt stack 0
   671  00105E                     _writeString:
   672                           	opt stack 26
   673                           
   674                           ;uart.c: 99: for(int i = 0; i<strlen(str); i++)
   675                           
   676                           ;incstack = 0
   677  00105E  0E00               	movlw	0
   678  001060  0100               	movlb	0	; () banked
   679  001062  6FF8               	movwf	(writeString@i+1)& (0+255),b
   680  001064  0E00               	movlw	0
   681  001066  6FF7               	movwf	writeString@i& (0+255),b
   682  001068  D024               	goto	l1418
   683  00106A                     l1414:
   684                           
   685                           ; BSR set to: 0
   686                           ;uart.c: 100: {
   687                           ;uart.c: 101: UART_Write(str[i], dev);
   688  00106A  C0F4  F0EC         	movff	writeString@dev,UART_Write@dev
   689  00106E  0100               	movlb	0	; () banked
   690  001070  51F7               	movf	writeString@i& (0+255),w,b
   691  001072  0100               	movlb	0	; () banked
   692  001074  25F2               	addwf	writeString@str& (0+255),w,b
   693  001076  0100               	movlb	0	; () banked
   694  001078  6FF5               	movwf	??_writeString& (0+255),b
   695  00107A  0100               	movlb	0	; () banked
   696  00107C  51F8               	movf	(writeString@i+1)& (0+255),w,b
   697  00107E  0100               	movlb	0	; () banked
   698  001080  21F3               	addwfc	(writeString@str+1)& (0+255),w,b
   699  001082  0100               	movlb	0	; () banked
   700  001084  6FF6               	movwf	(??_writeString+1)& (0+255),b
   701  001086  C0F5  FFF6         	movff	??_writeString,tblptrl
   702  00108A  C0F6  FFF7         	movff	??_writeString+1,tblptrh
   703  00108E  0E00               	movlw	low (__smallconst shr (0+16))
   704  001090  6EF8               	movwf	tblptru,c
   705  001092  0E0E               	movlw	(high __ramtop+-1)
   706  001094  64F7               	cpfsgt	tblptrh,c
   707  001096  D003               	bra	u767
   708  001098  0008               	tblrd		*
   709  00109A  50F5               	movf	tablat,w,c
   710  00109C  D005               	bra	u760
   711  00109E                     u767:
   712  00109E  CFF6 FFE9          	movff	tblptrl,fsr0l
   713  0010A2  CFF7 FFEA          	movff	tblptrh,fsr0h
   714  0010A6  50EF               	movf	indf0,w,c
   715  0010A8                     u760:
   716  0010A8  ECC6  F009         	call	_UART_Write
   717  0010AC  0100               	movlb	0	; () banked
   718  0010AE  4BF7               	infsnz	writeString@i& (0+255),f,b
   719  0010B0  2BF8               	incf	(writeString@i+1)& (0+255),f,b
   720  0010B2                     l1418:
   721                           
   722                           ; BSR set to: 0
   723  0010B2  C0F2  F0EC         	movff	writeString@str,strlen@s
   724  0010B6  C0F3  F0ED         	movff	writeString@str+1,strlen@s+1
   725  0010BA  ECA5  F008         	call	_strlen	;wreg free
   726  0010BE  0100               	movlb	0	; () banked
   727  0010C0  51EC               	movf	?_strlen& (0+255),w,b
   728  0010C2  0100               	movlb	0	; () banked
   729  0010C4  5DF7               	subwf	writeString@i& (0+255),w,b
   730  0010C6  0100               	movlb	0	; () banked
   731  0010C8  51ED               	movf	(?_strlen+1)& (0+255),w,b
   732  0010CA  0100               	movlb	0	; () banked
   733  0010CC  59F8               	subwfb	(writeString@i+1)& (0+255),w,b
   734  0010CE  B0D8               	btfsc	status,0,c
   735  0010D0  0012               	return	
   736  0010D2  D7CB               	goto	l1414
   737  0010D4                     __end_of_writeString:
   738                           	opt stack 0
   739                           tblptru	equ	0xFF8
   740                           tblptrh	equ	0xFF7
   741                           tblptrl	equ	0xFF6
   742                           tablat	equ	0xFF5
   743                           indf0	equ	0xFEF
   744                           postinc0	equ	0xFEE
   745                           fsr0h	equ	0xFEA
   746                           fsr0l	equ	0xFE9
   747                           wreg	equ	0xFE8
   748                           postdec1	equ	0xFE5
   749                           fsr1l	equ	0xFE1
   750                           status	equ	0xFD8
   751                           
   752 ;; *************** function _UART_Write *****************
   753 ;; Defined at:
   754 ;;		line 61 in file "uart.c"
   755 ;; Parameters:    Size  Location     Type
   756 ;;  data            1    wreg     unsigned char 
   757 ;;  dev             1    0[BANK0 ] unsigned char 
   758 ;; Auto vars:     Size  Location     Type
   759 ;;  data            1    1[BANK0 ] unsigned char 
   760 ;; Return value:  Size  Location     Type
   761 ;;                  1    wreg      void 
   762 ;; Registers used:
   763 ;;		wreg, status,2, status,0
   764 ;; Tracked objects:
   765 ;;		On entry : 0/0
   766 ;;		On exit  : 0/0
   767 ;;		Unchanged: 0/0
   768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   769 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   772 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   773 ;;Total ram usage:        2 bytes
   774 ;; Hardware stack levels used:    1
   775 ;; Hardware stack levels required when called:    3
   776 ;; This function calls:
   777 ;;		Nothing
   778 ;; This function is called by:
   779 ;;		_main
   780 ;;		_writeString
   781 ;; This function uses a non-reentrant model
   782 ;;
   783                           
   784                           	psect	text3
   785  00138C                     __ptext3:
   786                           	opt stack 0
   787  00138C                     _UART_Write:
   788                           	opt stack 26
   789                           
   790                           ; BSR set to: 0
   791                           ;incstack = 0
   792                           ;UART_Write@data stored from wreg
   793  00138C  0100               	movlb	0	; () banked
   794  00138E  6FED               	movwf	UART_Write@data& (0+255),b
   795                           
   796                           ;uart.c: 63: if (dev == 1)
   797  001390  0100               	movlb	0	; () banked
   798  001392  05EC               	decf	UART_Write@dev& (0+255),w,b
   799  001394  A4D8               	btfss	status,2,c
   800  001396  D005               	goto	l148
   801  001398                     l144:
   802  001398  A2AD               	btfss	4013,1,c	;volatile
   803  00139A  D7FE               	goto	l144
   804                           
   805                           ;uart.c: 66: TXREG1 = data;
   806  00139C  C0ED  FFAE         	movff	UART_Write@data,4014	;volatile
   807                           
   808                           ;uart.c: 67: }
   809  0013A0  0012               	return	
   810  0013A2                     l148:
   811  0013A2  A2A8               	btfss	4008,1,c	;volatile
   812  0013A4  D7FE               	goto	l148
   813                           
   814                           ;uart.c: 71: TXREG2 = data;
   815  0013A6  C0ED  FFA9         	movff	UART_Write@data,4009	;volatile
   816  0013AA  0012               	return	
   817  0013AC                     __end_of_UART_Write:
   818                           	opt stack 0
   819                           tblptru	equ	0xFF8
   820                           tblptrh	equ	0xFF7
   821                           tblptrl	equ	0xFF6
   822                           tablat	equ	0xFF5
   823                           indf0	equ	0xFEF
   824                           postinc0	equ	0xFEE
   825                           fsr0h	equ	0xFEA
   826                           fsr0l	equ	0xFE9
   827                           wreg	equ	0xFE8
   828                           postdec1	equ	0xFE5
   829                           fsr1l	equ	0xFE1
   830                           status	equ	0xFD8
   831                           
   832 ;; *************** function _wait_ms *****************
   833 ;; Defined at:
   834 ;;		line 35 in file "system.c"
   835 ;; Parameters:    Size  Location     Type
   836 ;;  time            2   12[BANK0 ] int 
   837 ;; Auto vars:     Size  Location     Type
   838 ;;		None
   839 ;; Return value:  Size  Location     Type
   840 ;;                  1    wreg      void 
   841 ;; Registers used:
   842 ;;		wreg, status,2, status,0, cstack
   843 ;; Tracked objects:
   844 ;;		On entry : 0/0
   845 ;;		On exit  : 0/0
   846 ;;		Unchanged: 0/0
   847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   848 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   851 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   852 ;;Total ram usage:        2 bytes
   853 ;; Hardware stack levels used:    1
   854 ;; Hardware stack levels required when called:    4
   855 ;; This function calls:
   856 ;;		___lmul
   857 ;; This function is called by:
   858 ;;		_main
   859 ;;		_writeResult
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           	psect	text4
   864  0011AE                     __ptext4:
   865                           	opt stack 0
   866  0011AE                     _wait_ms:
   867                           	opt stack 25
   868                           
   869                           ;system.c: 37: static long timel = 0;
   870                           ;system.c: 38: timel = time * 1000l;
   871                           
   872                           ;incstack = 0
   873  0011AE  C0F8  F0EC         	movff	wait_ms@time,___lmul@multiplier
   874  0011B2  C0F9  F0ED         	movff	wait_ms@time+1,___lmul@multiplier+1
   875  0011B6  0100               	movlb	0	; () banked
   876  0011B8  0E00               	movlw	0
   877  0011BA  BFED               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
   878  0011BC  0EFF               	movlw	-1
   879  0011BE  6FEE               	movwf	(___lmul@multiplier+2)& (0+255),b
   880  0011C0  6FEF               	movwf	(___lmul@multiplier+3)& (0+255),b
   881  0011C2  0EE8               	movlw	232
   882  0011C4  0100               	movlb	0	; () banked
   883  0011C6  6FF0               	movwf	___lmul@multiplicand& (0+255),b
   884  0011C8  0E03               	movlw	3
   885  0011CA  6FF1               	movwf	(___lmul@multiplicand+1)& (0+255),b
   886  0011CC  0E00               	movlw	0
   887  0011CE  6FF2               	movwf	(___lmul@multiplicand+2)& (0+255),b
   888  0011D0  0E00               	movlw	0
   889  0011D2  6FF3               	movwf	(___lmul@multiplicand+3)& (0+255),b
   890  0011D4  EC6A  F008         	call	___lmul	;wreg free
   891  0011D8  C0EC  F032         	movff	?___lmul,wait_ms@timel
   892  0011DC  C0ED  F033         	movff	?___lmul+1,wait_ms@timel+1
   893  0011E0  C0EE  F034         	movff	?___lmul+2,wait_ms@timel+2
   894  0011E4  C0EF  F035         	movff	?___lmul+3,wait_ms@timel+3
   895                           
   896                           ;system.c: 39: for( ; timel; timel--);
   897  0011E8  D008               	goto	l71
   898  0011EA                     l1422:
   899  0011EA  0EFF               	movlw	255
   900  0011EC  2632               	addwf	wait_ms@timel,f,c
   901  0011EE  0EFF               	movlw	255
   902  0011F0  2233               	addwfc	wait_ms@timel+1,f,c
   903  0011F2  0EFF               	movlw	255
   904  0011F4  2234               	addwfc	wait_ms@timel+2,f,c
   905  0011F6  0EFF               	movlw	255
   906  0011F8  2235               	addwfc	wait_ms@timel+3,f,c
   907  0011FA                     l71:
   908  0011FA  5032               	movf	wait_ms@timel,w,c
   909  0011FC  1033               	iorwf	wait_ms@timel+1,w,c
   910  0011FE  1034               	iorwf	wait_ms@timel+2,w,c
   911  001200  1035               	iorwf	wait_ms@timel+3,w,c
   912  001202  B4D8               	btfsc	status,2,c
   913  001204  0012               	return	
   914  001206  D7F1               	goto	l1422
   915  001208                     __end_of_wait_ms:
   916                           	opt stack 0
   917                           tblptru	equ	0xFF8
   918                           tblptrh	equ	0xFF7
   919                           tblptrl	equ	0xFF6
   920                           tablat	equ	0xFF5
   921                           indf0	equ	0xFEF
   922                           postinc0	equ	0xFEE
   923                           fsr0h	equ	0xFEA
   924                           fsr0l	equ	0xFE9
   925                           wreg	equ	0xFE8
   926                           postdec1	equ	0xFE5
   927                           fsr1l	equ	0xFE1
   928                           status	equ	0xFD8
   929                           
   930 ;; *************** function ___lmul *****************
   931 ;; Defined at:
   932 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;  multiplier      4    0[BANK0 ] unsigned long 
   935 ;;  multiplicand    4    4[BANK0 ] unsigned long 
   936 ;; Auto vars:     Size  Location     Type
   937 ;;  product         4    8[BANK0 ] unsigned long 
   938 ;; Return value:  Size  Location     Type
   939 ;;                  4    0[BANK0 ] unsigned long 
   940 ;; Registers used:
   941 ;;		wreg, status,2, status,0
   942 ;; Tracked objects:
   943 ;;		On entry : 0/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   947 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   948 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   950 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   951 ;;Total ram usage:       12 bytes
   952 ;; Hardware stack levels used:    1
   953 ;; Hardware stack levels required when called:    3
   954 ;; This function calls:
   955 ;;		Nothing
   956 ;; This function is called by:
   957 ;;		_wait_ms
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           	psect	text5
   962  0010D4                     __ptext5:
   963                           	opt stack 0
   964  0010D4                     ___lmul:
   965                           	opt stack 25
   966                           
   967                           ;incstack = 0
   968  0010D4  0E00               	movlw	0
   969  0010D6  0100               	movlb	0	; () banked
   970  0010D8  6FF4               	movwf	___lmul@product& (0+255),b
   971  0010DA  0E00               	movlw	0
   972  0010DC  6FF5               	movwf	(___lmul@product+1)& (0+255),b
   973  0010DE  0E00               	movlw	0
   974  0010E0  6FF6               	movwf	(___lmul@product+2)& (0+255),b
   975  0010E2  0E00               	movlw	0
   976  0010E4  6FF7               	movwf	(___lmul@product+3)& (0+255),b
   977  0010E6                     l1404:
   978                           
   979                           ; BSR set to: 0
   980  0010E6  0100               	movlb	0	; () banked
   981  0010E8  A1EC               	btfss	___lmul@multiplier& (0+255),0,b
   982  0010EA  D010               	goto	l1408
   983                           
   984                           ; BSR set to: 0
   985  0010EC  0100               	movlb	0	; () banked
   986  0010EE  51F0               	movf	___lmul@multiplicand& (0+255),w,b
   987  0010F0  0100               	movlb	0	; () banked
   988  0010F2  27F4               	addwf	___lmul@product& (0+255),f,b
   989  0010F4  0100               	movlb	0	; () banked
   990  0010F6  51F1               	movf	(___lmul@multiplicand+1)& (0+255),w,b
   991  0010F8  0100               	movlb	0	; () banked
   992  0010FA  23F5               	addwfc	(___lmul@product+1)& (0+255),f,b
   993  0010FC  0100               	movlb	0	; () banked
   994  0010FE  51F2               	movf	(___lmul@multiplicand+2)& (0+255),w,b
   995  001100  0100               	movlb	0	; () banked
   996  001102  23F6               	addwfc	(___lmul@product+2)& (0+255),f,b
   997  001104  0100               	movlb	0	; () banked
   998  001106  51F3               	movf	(___lmul@multiplicand+3)& (0+255),w,b
   999  001108  0100               	movlb	0	; () banked
  1000  00110A  23F7               	addwfc	(___lmul@product+3)& (0+255),f,b
  1001  00110C                     l1408:
  1002                           
  1003                           ; BSR set to: 0
  1004  00110C  0100               	movlb	0	; () banked
  1005  00110E  90D8               	bcf	status,0,c
  1006  001110  37F0               	rlcf	___lmul@multiplicand& (0+255),f,b
  1007  001112  37F1               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  1008  001114  37F2               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  1009  001116  37F3               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  1010                           
  1011                           ; BSR set to: 0
  1012  001118  0100               	movlb	0	; () banked
  1013  00111A  90D8               	bcf	status,0,c
  1014  00111C  33EF               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  1015  00111E  33EE               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  1016  001120  33ED               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  1017  001122  33EC               	rrcf	___lmul@multiplier& (0+255),f,b
  1018  001124  0100               	movlb	0	; () banked
  1019  001126  51EC               	movf	___lmul@multiplier& (0+255),w,b
  1020  001128  0100               	movlb	0	; () banked
  1021  00112A  11ED               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  1022  00112C  0100               	movlb	0	; () banked
  1023  00112E  11EE               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  1024  001130  0100               	movlb	0	; () banked
  1025  001132  11EF               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  1026  001134  A4D8               	btfss	status,2,c
  1027  001136  D7D7               	goto	l1404
  1028                           
  1029                           ; BSR set to: 0
  1030  001138  C0F4  F0EC         	movff	___lmul@product,?___lmul
  1031  00113C  C0F5  F0ED         	movff	___lmul@product+1,?___lmul+1
  1032  001140  C0F6  F0EE         	movff	___lmul@product+2,?___lmul+2
  1033  001144  C0F7  F0EF         	movff	___lmul@product+3,?___lmul+3
  1034                           
  1035                           ; BSR set to: 0
  1036  001148  0012               	return		;funcret
  1037  00114A                     __end_of___lmul:
  1038                           	opt stack 0
  1039                           tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           indf0	equ	0xFEF
  1044                           postinc0	equ	0xFEE
  1045                           fsr0h	equ	0xFEA
  1046                           fsr0l	equ	0xFE9
  1047                           wreg	equ	0xFE8
  1048                           postdec1	equ	0xFE5
  1049                           fsr1l	equ	0xFE1
  1050                           status	equ	0xFD8
  1051                           
  1052 ;; *************** function _isValid *****************
  1053 ;; Defined at:
  1054 ;;		line 70 in file "bufferhandler.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;		None
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;		None
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      unsigned char 
  1061 ;; Registers used:
  1062 ;;		wreg, status,2, status,0
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1072 ;;Total ram usage:        0 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; Hardware stack levels required when called:    3
  1075 ;; This function calls:
  1076 ;;		Nothing
  1077 ;; This function is called by:
  1078 ;;		_main
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           	psect	text6
  1083  0012F8                     __ptext6:
  1084                           	opt stack 0
  1085  0012F8                     _isValid:
  1086                           	opt stack 27
  1087                           
  1088                           ;bufferhandler.c: 71: if(tmpString[0] == 0x54 &&
  1089                           ;bufferhandler.c: 72: tmpString[1] == 0x59 &&
  1090                           ;bufferhandler.c: 73: tmpString[2] == 0x52 &&
  1091                           ;bufferhandler.c: 74: tmpString[3] == 0x49 &&
  1092                           ;bufferhandler.c: 75: tmpString[4] == 0x5F){
  1093                           
  1094                           ; BSR set to: 0
  1095                           ;incstack = 0
  1096  0012F8  0E54               	movlw	84
  1097  0012FA  0100               	movlb	0	; () banked
  1098  0012FC  19A6               	xorwf	_tmpString& (0+255),w,b
  1099  0012FE  A4D8               	btfss	status,2,c
  1100  001300  D016               	goto	l1486
  1101                           
  1102                           ; BSR set to: 0
  1103  001302  0E59               	movlw	89
  1104  001304  0100               	movlb	0	; () banked
  1105  001306  19A7               	xorwf	(_tmpString+1)& (0+255),w,b
  1106  001308  A4D8               	btfss	status,2,c
  1107  00130A  D011               	goto	l1486
  1108                           
  1109                           ; BSR set to: 0
  1110  00130C  0E52               	movlw	82
  1111  00130E  0100               	movlb	0	; () banked
  1112  001310  19A8               	xorwf	(_tmpString+2)& (0+255),w,b
  1113  001312  A4D8               	btfss	status,2,c
  1114  001314  D00C               	goto	l1486
  1115                           
  1116                           ; BSR set to: 0
  1117  001316  0E49               	movlw	73
  1118  001318  0100               	movlb	0	; () banked
  1119  00131A  19A9               	xorwf	(_tmpString+3)& (0+255),w,b
  1120  00131C  A4D8               	btfss	status,2,c
  1121  00131E  D007               	goto	l1486
  1122                           
  1123                           ; BSR set to: 0
  1124  001320  0E5F               	movlw	95
  1125  001322  0100               	movlb	0	; () banked
  1126  001324  19AA               	xorwf	(_tmpString+4)& (0+255),w,b
  1127  001326  A4D8               	btfss	status,2,c
  1128  001328  D002               	goto	l1486
  1129                           
  1130                           ; BSR set to: 0
  1131                           ;bufferhandler.c: 76: return 1;
  1132  00132A  0E01               	movlw	1
  1133                           
  1134                           ; BSR set to: 0
  1135  00132C  0012               	return	
  1136  00132E                     l1486:
  1137                           
  1138                           ; BSR set to: 0
  1139                           ;bufferhandler.c: 77: }
  1140                           ;bufferhandler.c: 78: return 0;
  1141  00132E  0E00               	movlw	0
  1142  001330  0012               	return	
  1143  001332                     __end_of_isValid:
  1144                           	opt stack 0
  1145                           tblptru	equ	0xFF8
  1146                           tblptrh	equ	0xFF7
  1147                           tblptrl	equ	0xFF6
  1148                           tablat	equ	0xFF5
  1149                           indf0	equ	0xFEF
  1150                           postinc0	equ	0xFEE
  1151                           fsr0h	equ	0xFEA
  1152                           fsr0l	equ	0xFE9
  1153                           wreg	equ	0xFE8
  1154                           postdec1	equ	0xFE5
  1155                           fsr1l	equ	0xFE1
  1156                           status	equ	0xFD8
  1157                           
  1158 ;; *************** function _isItLongEnough *****************
  1159 ;; Defined at:
  1160 ;;		line 33 in file "bufferhandler.c"
  1161 ;; Parameters:    Size  Location     Type
  1162 ;;		None
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;		None
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  1    wreg      unsigned char 
  1167 ;; Registers used:
  1168 ;;		wreg, status,2, status,0
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1178 ;;Total ram usage:        0 bytes
  1179 ;; Hardware stack levels used:    1
  1180 ;; Hardware stack levels required when called:    3
  1181 ;; This function calls:
  1182 ;;		Nothing
  1183 ;; This function is called by:
  1184 ;;		_main
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           	psect	text7
  1189  0013E2                     __ptext7:
  1190                           	opt stack 0
  1191  0013E2                     _isItLongEnough:
  1192                           	opt stack 27
  1193                           
  1194                           ;bufferhandler.c: 35: if(index == 64){
  1195                           
  1196                           ; BSR set to: 0
  1197                           ;incstack = 0
  1198  0013E2  0E40               	movlw	64
  1199  0013E4  1839               	xorwf	_index,w,c
  1200  0013E6  103A               	iorwf	_index+1,w,c
  1201  0013E8  A4D8               	btfss	status,2,c
  1202  0013EA  D002               	goto	l1468
  1203                           
  1204                           ;bufferhandler.c: 36: return 1;
  1205  0013EC  0E01               	movlw	1
  1206                           
  1207                           ;bufferhandler.c: 37: }else{
  1208  0013EE  0012               	return	
  1209  0013F0                     l1468:
  1210                           
  1211                           ;bufferhandler.c: 38: return 0;
  1212  0013F0  0E00               	movlw	0
  1213  0013F2  0012               	return	
  1214  0013F4                     __end_of_isItLongEnough:
  1215                           	opt stack 0
  1216                           tblptru	equ	0xFF8
  1217                           tblptrh	equ	0xFF7
  1218                           tblptrl	equ	0xFF6
  1219                           tablat	equ	0xFF5
  1220                           indf0	equ	0xFEF
  1221                           postinc0	equ	0xFEE
  1222                           fsr0h	equ	0xFEA
  1223                           fsr0l	equ	0xFE9
  1224                           wreg	equ	0xFE8
  1225                           postdec1	equ	0xFE5
  1226                           fsr1l	equ	0xFE1
  1227                           status	equ	0xFD8
  1228                           
  1229 ;; *************** function _copyTmpBuffer *****************
  1230 ;; Defined at:
  1231 ;;		line 50 in file "bufferhandler.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;		None
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;  i               2    1[BANK0 ] int 
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  1    wreg      void 
  1238 ;; Registers used:
  1239 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1246 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1248 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1249 ;;Total ram usage:        3 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; Hardware stack levels required when called:    3
  1252 ;; This function calls:
  1253 ;;		Nothing
  1254 ;; This function is called by:
  1255 ;;		_main
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259                           	psect	text8
  1260  001262                     __ptext8:
  1261                           	opt stack 0
  1262  001262                     _copyTmpBuffer:
  1263                           	opt stack 27
  1264                           
  1265                           ;bufferhandler.c: 51: for(int i = 0; i<index; i++){
  1266                           
  1267                           ;incstack = 0
  1268  001262  0E00               	movlw	0
  1269  001264  0100               	movlb	0	; () banked
  1270  001266  6FEE               	movwf	(copyTmpBuffer@i+1)& (0+255),b
  1271  001268  0E00               	movlw	0
  1272  00126A  6FED               	movwf	copyTmpBuffer@i& (0+255),b
  1273  00126C  D015               	goto	l1496
  1274  00126E                     l1492:
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;bufferhandler.c: 52: allDataString[i] = tmpString[i];
  1278  00126E  0EA6               	movlw	low _tmpString
  1279  001270  0100               	movlb	0	; () banked
  1280  001272  25ED               	addwf	copyTmpBuffer@i& (0+255),w,b
  1281  001274  6ED9               	movwf	fsr2l,c
  1282  001276  0E00               	movlw	high _tmpString
  1283  001278  0100               	movlb	0	; () banked
  1284  00127A  21EE               	addwfc	(copyTmpBuffer@i+1)& (0+255),w,b
  1285  00127C  6EDA               	movwf	fsr2h,c
  1286  00127E  0E60               	movlw	low _allDataString
  1287  001280  0100               	movlb	0	; () banked
  1288  001282  25ED               	addwf	copyTmpBuffer@i& (0+255),w,b
  1289  001284  6EE1               	movwf	fsr1l,c
  1290  001286  0E00               	movlw	high _allDataString
  1291  001288  0100               	movlb	0	; () banked
  1292  00128A  21EE               	addwfc	(copyTmpBuffer@i+1)& (0+255),w,b
  1293  00128C  6EE2               	movwf	fsr1h,c
  1294  00128E  CFDF FFE7          	movff	indf2,indf1
  1295                           
  1296                           ; BSR set to: 0
  1297  001292  0100               	movlb	0	; () banked
  1298  001294  4BED               	infsnz	copyTmpBuffer@i& (0+255),f,b
  1299  001296  2BEE               	incf	(copyTmpBuffer@i+1)& (0+255),f,b
  1300  001298                     l1496:
  1301                           
  1302                           ; BSR set to: 0
  1303  001298  5039               	movf	_index,w,c
  1304  00129A  0100               	movlb	0	; () banked
  1305  00129C  5DED               	subwf	copyTmpBuffer@i& (0+255),w,b
  1306  00129E  0100               	movlb	0	; () banked
  1307  0012A0  51EE               	movf	(copyTmpBuffer@i+1)& (0+255),w,b
  1308  0012A2  0A80               	xorlw	128
  1309  0012A4  0100               	movlb	0	; () banked
  1310  0012A6  6FEC               	movwf	??_copyTmpBuffer& (0+255),b
  1311  0012A8  503A               	movf	_index+1,w,c
  1312  0012AA  0A80               	xorlw	128
  1313  0012AC  0100               	movlb	0	; () banked
  1314  0012AE  59EC               	subwfb	??_copyTmpBuffer& (0+255),w,b
  1315  0012B0  B0D8               	btfsc	status,0,c
  1316  0012B2  0012               	return	
  1317  0012B4  D7DC               	goto	l1492
  1318  0012B6                     __end_of_copyTmpBuffer:
  1319                           	opt stack 0
  1320                           tblptru	equ	0xFF8
  1321                           tblptrh	equ	0xFF7
  1322                           tblptrl	equ	0xFF6
  1323                           tablat	equ	0xFF5
  1324                           indf0	equ	0xFEF
  1325                           postinc0	equ	0xFEE
  1326                           fsr0h	equ	0xFEA
  1327                           fsr0l	equ	0xFE9
  1328                           wreg	equ	0xFE8
  1329                           indf1	equ	0xFE7
  1330                           postdec1	equ	0xFE5
  1331                           fsr1h	equ	0xFE2
  1332                           fsr1l	equ	0xFE1
  1333                           indf2	equ	0xFDF
  1334                           fsr2h	equ	0xFDA
  1335                           fsr2l	equ	0xFD9
  1336                           status	equ	0xFD8
  1337                           
  1338 ;; *************** function _clearBuffer *****************
  1339 ;; Defined at:
  1340 ;;		line 42 in file "bufferhandler.c"
  1341 ;; Parameters:    Size  Location     Type
  1342 ;;		None
  1343 ;; Auto vars:     Size  Location     Type
  1344 ;;  i               2    6[BANK0 ] int 
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  1    wreg      void 
  1347 ;; Registers used:
  1348 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1355 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1357 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1358 ;;Total ram usage:        2 bytes
  1359 ;; Hardware stack levels used:    1
  1360 ;; Hardware stack levels required when called:    4
  1361 ;; This function calls:
  1362 ;;		_strlen
  1363 ;; This function is called by:
  1364 ;;		_main
  1365 ;; This function uses a non-reentrant model
  1366 ;;
  1367                           
  1368                           	psect	text9
  1369  001208                     __ptext9:
  1370                           	opt stack 0
  1371  001208                     _clearBuffer:
  1372                           	opt stack 26
  1373                           
  1374                           ;bufferhandler.c: 43: for(int i = 0; i<strlen(tmpString); i++){
  1375                           
  1376                           ; BSR set to: 0
  1377                           ;incstack = 0
  1378  001208  0E00               	movlw	0
  1379  00120A  0100               	movlb	0	; () banked
  1380  00120C  6FF3               	movwf	(clearBuffer@i+1)& (0+255),b
  1381  00120E  0E00               	movlw	0
  1382  001210  6FF2               	movwf	clearBuffer@i& (0+255),b
  1383  001212  D00D               	goto	l1456
  1384  001214                     l1452:
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;bufferhandler.c: 44: tmpString[i] = "";
  1388  001214  0EA6               	movlw	low _tmpString
  1389  001216  0100               	movlb	0	; () banked
  1390  001218  25F2               	addwf	clearBuffer@i& (0+255),w,b
  1391  00121A  6ED9               	movwf	fsr2l,c
  1392  00121C  0E00               	movlw	high _tmpString
  1393  00121E  0100               	movlb	0	; () banked
  1394  001220  21F3               	addwfc	(clearBuffer@i+1)& (0+255),w,b
  1395  001222  6EDA               	movwf	fsr2h,c
  1396  001224  0E05               	movlw	low (STR_1+4)
  1397  001226  6EDF               	movwf	indf2,c
  1398                           
  1399                           ; BSR set to: 0
  1400  001228  0100               	movlb	0	; () banked
  1401  00122A  4BF2               	infsnz	clearBuffer@i& (0+255),f,b
  1402  00122C  2BF3               	incf	(clearBuffer@i+1)& (0+255),f,b
  1403  00122E                     l1456:
  1404                           
  1405                           ; BSR set to: 0
  1406  00122E  0EA6               	movlw	low _tmpString
  1407  001230  0100               	movlb	0	; () banked
  1408  001232  6FEC               	movwf	strlen@s& (0+255),b
  1409  001234  0E00               	movlw	high _tmpString
  1410  001236  0100               	movlb	0	; () banked
  1411  001238  6FED               	movwf	(strlen@s+1)& (0+255),b
  1412  00123A  ECA5  F008         	call	_strlen	;wreg free
  1413  00123E  0100               	movlb	0	; () banked
  1414  001240  51EC               	movf	?_strlen& (0+255),w,b
  1415  001242  0100               	movlb	0	; () banked
  1416  001244  5DF2               	subwf	clearBuffer@i& (0+255),w,b
  1417  001246  0100               	movlb	0	; () banked
  1418  001248  51ED               	movf	(?_strlen+1)& (0+255),w,b
  1419  00124A  0100               	movlb	0	; () banked
  1420  00124C  59F3               	subwfb	(clearBuffer@i+1)& (0+255),w,b
  1421  00124E  A0D8               	btfss	status,0,c
  1422  001250  D7E1               	goto	l1452
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;bufferhandler.c: 45: }
  1426                           ;bufferhandler.c: 46: tmpString[0] = '\0';
  1427                           
  1428                           ; BSR set to: 0
  1429  001252  0E00               	movlw	0
  1430  001254  0100               	movlb	0	; () banked
  1431  001256  6FA6               	movwf	_tmpString& (0+255),b
  1432                           
  1433                           ;bufferhandler.c: 47: index = 0;
  1434  001258  0E00               	movlw	0
  1435  00125A  6E3A               	movwf	_index+1,c
  1436  00125C  0E00               	movlw	0
  1437  00125E  6E39               	movwf	_index,c
  1438                           
  1439                           ; BSR set to: 0
  1440  001260  0012               	return		;funcret
  1441  001262                     __end_of_clearBuffer:
  1442                           	opt stack 0
  1443                           tblptru	equ	0xFF8
  1444                           tblptrh	equ	0xFF7
  1445                           tblptrl	equ	0xFF6
  1446                           tablat	equ	0xFF5
  1447                           indf0	equ	0xFEF
  1448                           postinc0	equ	0xFEE
  1449                           fsr0h	equ	0xFEA
  1450                           fsr0l	equ	0xFE9
  1451                           wreg	equ	0xFE8
  1452                           indf1	equ	0xFE7
  1453                           postdec1	equ	0xFE5
  1454                           fsr1h	equ	0xFE2
  1455                           fsr1l	equ	0xFE1
  1456                           indf2	equ	0xFDF
  1457                           fsr2h	equ	0xFDA
  1458                           fsr2l	equ	0xFD9
  1459                           status	equ	0xFD8
  1460                           
  1461 ;; *************** function _strlen *****************
  1462 ;; Defined at:
  1463 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  1464 ;; Parameters:    Size  Location     Type
  1465 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  1466 ;;		 -> allDataString(70), tmpString(70), STR_2(4), STR_1(5), 
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  1469 ;;		 -> allDataString(70), tmpString(70), STR_2(4), STR_1(5), 
  1470 ;; Return value:  Size  Location     Type
  1471 ;;                  2    0[BANK0 ] unsigned int 
  1472 ;; Registers used:
  1473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  1474 ;; Tracked objects:
  1475 ;;		On entry : 0/0
  1476 ;;		On exit  : 0/0
  1477 ;;		Unchanged: 0/0
  1478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1479 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1480 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1481 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1482 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1483 ;;Total ram usage:        6 bytes
  1484 ;; Hardware stack levels used:    1
  1485 ;; Hardware stack levels required when called:    3
  1486 ;; This function calls:
  1487 ;;		Nothing
  1488 ;; This function is called by:
  1489 ;;		_writeString
  1490 ;;		_clearBuffer
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text10
  1495  00114A                     __ptext10:
  1496                           	opt stack 0
  1497  00114A                     _strlen:
  1498                           	opt stack 26
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;incstack = 0
  1502  00114A  C0EC  F0F0         	movff	strlen@s,strlen@cp
  1503  00114E  C0ED  F0F1         	movff	strlen@s+1,strlen@cp+1
  1504  001152  D003               	goto	l1396
  1505  001154                     l1394:
  1506  001154  0100               	movlb	0	; () banked
  1507  001156  4BF0               	infsnz	strlen@cp& (0+255),f,b
  1508  001158  2BF1               	incf	(strlen@cp+1)& (0+255),f,b
  1509  00115A                     l1396:
  1510  00115A  C0F0  FFF6         	movff	strlen@cp,tblptrl
  1511  00115E  C0F1  FFF7         	movff	strlen@cp+1,tblptrh
  1512  001162  0E00               	movlw	low (__smallconst shr (0+16))
  1513  001164  6EF8               	movwf	tblptru,c
  1514  001166  0E0E               	movlw	(high __ramtop+-1)
  1515  001168  64F7               	cpfsgt	tblptrh,c
  1516  00116A  D003               	bra	u727
  1517  00116C  0008               	tblrd		*
  1518  00116E  50F5               	movf	tablat,w,c
  1519  001170  D005               	bra	u720
  1520  001172                     u727:
  1521  001172  CFF6 FFE9          	movff	tblptrl,fsr0l
  1522  001176  CFF7 FFEA          	movff	tblptrh,fsr0h
  1523  00117A  50EF               	movf	indf0,w,c
  1524  00117C                     u720:
  1525  00117C  0900               	iorlw	0
  1526  00117E  A4D8               	btfss	status,2,c
  1527  001180  D7E9               	goto	l1394
  1528  001182  C0EC  F0EE         	movff	strlen@s,??_strlen
  1529  001186  C0ED  F0EF         	movff	strlen@s+1,??_strlen+1
  1530  00118A  0100               	movlb	0	; () banked
  1531  00118C  1FEE               	comf	??_strlen& (0+255),f,b
  1532  00118E  1FEF               	comf	(??_strlen+1)& (0+255),f,b
  1533  001190  4BEE               	infsnz	??_strlen& (0+255),f,b
  1534  001192  2BEF               	incf	(??_strlen+1)& (0+255),f,b
  1535  001194  0100               	movlb	0	; () banked
  1536  001196  51F0               	movf	strlen@cp& (0+255),w,b
  1537  001198  0100               	movlb	0	; () banked
  1538  00119A  25EE               	addwf	??_strlen& (0+255),w,b
  1539  00119C  0100               	movlb	0	; () banked
  1540  00119E  6FEC               	movwf	?_strlen& (0+255),b
  1541  0011A0  0100               	movlb	0	; () banked
  1542  0011A2  51F1               	movf	(strlen@cp+1)& (0+255),w,b
  1543  0011A4  0100               	movlb	0	; () banked
  1544  0011A6  21EF               	addwfc	(??_strlen+1)& (0+255),w,b
  1545  0011A8  0100               	movlb	0	; () banked
  1546  0011AA  6FED               	movwf	(?_strlen+1)& (0+255),b
  1547  0011AC  0012               	return	
  1548  0011AE                     __end_of_strlen:
  1549                           	opt stack 0
  1550                           tblptru	equ	0xFF8
  1551                           tblptrh	equ	0xFF7
  1552                           tblptrl	equ	0xFF6
  1553                           tablat	equ	0xFF5
  1554                           indf0	equ	0xFEF
  1555                           postinc0	equ	0xFEE
  1556                           fsr0h	equ	0xFEA
  1557                           fsr0l	equ	0xFE9
  1558                           wreg	equ	0xFE8
  1559                           indf1	equ	0xFE7
  1560                           postdec1	equ	0xFE5
  1561                           fsr1h	equ	0xFE2
  1562                           fsr1l	equ	0xFE1
  1563                           indf2	equ	0xFDF
  1564                           fsr2h	equ	0xFDA
  1565                           fsr2l	equ	0xFD9
  1566                           status	equ	0xFD8
  1567                           
  1568 ;; *************** function _UART_Init *****************
  1569 ;; Defined at:
  1570 ;;		line 31 in file "uart.c"
  1571 ;; Parameters:    Size  Location     Type
  1572 ;;  baudrate        4    0[BANK0 ] const long 
  1573 ;; Auto vars:     Size  Location     Type
  1574 ;;		None
  1575 ;; Return value:  Size  Location     Type
  1576 ;;                  1    wreg      unsigned char 
  1577 ;; Registers used:
  1578 ;;		wreg, status,2
  1579 ;; Tracked objects:
  1580 ;;		On entry : 0/0
  1581 ;;		On exit  : 0/0
  1582 ;;		Unchanged: 0/0
  1583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1584 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1587 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1588 ;;Total ram usage:        4 bytes
  1589 ;; Hardware stack levels used:    1
  1590 ;; Hardware stack levels required when called:    3
  1591 ;; This function calls:
  1592 ;;		Nothing
  1593 ;; This function is called by:
  1594 ;;		_main
  1595 ;; This function uses a non-reentrant model
  1596 ;;
  1597                           
  1598                           	psect	text11
  1599  001332                     __ptext11:
  1600                           	opt stack 0
  1601  001332                     _UART_Init:
  1602                           	opt stack 27
  1603                           
  1604                           ;uart.c: 35: TXSTA1 = 0x24;
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;incstack = 0
  1608  001332  0E24               	movlw	36
  1609  001334  6EAD               	movwf	4013,c	;volatile
  1610                           
  1611                           ;uart.c: 36: RCSTA1 = 0x90;
  1612  001336  0E90               	movlw	144
  1613  001338  6EAC               	movwf	4012,c	;volatile
  1614                           
  1615                           ;uart.c: 37: RC1IE = 1;
  1616  00133A  8A9D               	bsf	3997,5,c	;volatile
  1617                           
  1618                           ;uart.c: 38: BAUDCON1bits.BRG16 = 0;
  1619  00133C  967E               	bcf	3966,3,c	;volatile
  1620                           
  1621                           ;uart.c: 39: SPBRG1 = 155;
  1622  00133E  0E9B               	movlw	155
  1623  001340  6EB0               	movwf	4016,c	;volatile
  1624                           
  1625                           ;uart.c: 40: SPBRGH1 = 155;
  1626  001342  0E9B               	movlw	155
  1627  001344  6E7F               	movwf	3967,c	;volatile
  1628                           
  1629                           ;uart.c: 41: TRISC7 = 1;
  1630  001346  8E94               	bsf	3988,7,c	;volatile
  1631                           
  1632                           ;uart.c: 42: TRISC6 = 0;
  1633  001348  9C94               	bcf	3988,6,c	;volatile
  1634                           
  1635                           ;uart.c: 46: RCSTA2 = 0b10010000;
  1636  00134A  0E90               	movlw	144
  1637  00134C  6E9C               	movwf	3996,c	;volatile
  1638                           
  1639                           ;uart.c: 47: TXSTA2 = 0b00100100;
  1640  00134E  0E24               	movlw	36
  1641  001350  6EA8               	movwf	4008,c	;volatile
  1642                           
  1643                           ;uart.c: 48: RC2IE = 1;
  1644  001352  8AA3               	bsf	4003,5,c	;volatile
  1645                           
  1646                           ;uart.c: 49: BAUDCON2bits.BRG16 = 0;
  1647  001354  967C               	bcf	3964,3,c	;volatile
  1648                           
  1649                           ;uart.c: 50: SPBRG2 = 25;
  1650  001356  0E19               	movlw	25
  1651  001358  6EAB               	movwf	4011,c	;volatile
  1652                           
  1653                           ;uart.c: 51: SPBRGH2 = 25;
  1654  00135A  0E19               	movlw	25
  1655  00135C  6E7D               	movwf	3965,c	;volatile
  1656                           
  1657                           ;uart.c: 52: TRISB4 = 1;
  1658  00135E  8893               	bsf	3987,4,c	;volatile
  1659                           
  1660                           ;uart.c: 53: TRISB5 = 0;
  1661  001360  9A93               	bcf	3987,5,c	;volatile
  1662  001362  0012               	return	
  1663  001364                     __end_of_UART_Init:
  1664                           	opt stack 0
  1665                           tblptru	equ	0xFF8
  1666                           tblptrh	equ	0xFF7
  1667                           tblptrl	equ	0xFF6
  1668                           tablat	equ	0xFF5
  1669                           indf0	equ	0xFEF
  1670                           postinc0	equ	0xFEE
  1671                           fsr0h	equ	0xFEA
  1672                           fsr0l	equ	0xFE9
  1673                           wreg	equ	0xFE8
  1674                           indf1	equ	0xFE7
  1675                           postdec1	equ	0xFE5
  1676                           fsr1h	equ	0xFE2
  1677                           fsr1l	equ	0xFE1
  1678                           indf2	equ	0xFDF
  1679                           fsr2h	equ	0xFDA
  1680                           fsr2l	equ	0xFD9
  1681                           status	equ	0xFD8
  1682                           
  1683 ;; *************** function _InitApp *****************
  1684 ;; Defined at:
  1685 ;;		line 29 in file "user.c"
  1686 ;; Parameters:    Size  Location     Type
  1687 ;;		None
  1688 ;; Auto vars:     Size  Location     Type
  1689 ;;		None
  1690 ;; Return value:  Size  Location     Type
  1691 ;;                  1    wreg      void 
  1692 ;; Registers used:
  1693 ;;		wreg, status,2
  1694 ;; Tracked objects:
  1695 ;;		On entry : 0/0
  1696 ;;		On exit  : 0/0
  1697 ;;		Unchanged: 0/0
  1698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1703 ;;Total ram usage:        0 bytes
  1704 ;; Hardware stack levels used:    1
  1705 ;; Hardware stack levels required when called:    3
  1706 ;; This function calls:
  1707 ;;		Nothing
  1708 ;; This function is called by:
  1709 ;;		_main
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713                           	psect	text12
  1714  0013AC                     __ptext12:
  1715                           	opt stack 0
  1716  0013AC                     _InitApp:
  1717                           	opt stack 27
  1718                           
  1719                           ;user.c: 33: PPSCON = 0b00000000;
  1720                           
  1721                           ;incstack = 0
  1722  0013AC  0E00               	movlw	0
  1723  0013AE  010E               	movlb	14	; () banked
  1724  0013B0  6FBF               	movwf	191,b	;volatile
  1725                           
  1726                           ;user.c: 34: RPOR8 = 0b00000110;
  1727  0013B2  0E06               	movlw	6
  1728  0013B4  010E               	movlb	14	; () banked
  1729  0013B6  6FC8               	movwf	200,b	;volatile
  1730                           
  1731                           ;user.c: 35: RPINR16 = 0b00000111;
  1732  0013B8  0E07               	movlw	7
  1733  0013BA  010E               	movlb	14	; () banked
  1734  0013BC  6FF7               	movwf	247,b	;volatile
  1735                           
  1736                           ;user.c: 36: PPSCON = 0b00000001;
  1737  0013BE  0E01               	movlw	1
  1738  0013C0  010E               	movlb	14	; () banked
  1739  0013C2  6FBF               	movwf	191,b	;volatile
  1740                           
  1741                           ;user.c: 39: INTCON = 0xC0;
  1742  0013C4  0EC0               	movlw	192
  1743  0013C6  6EF2               	movwf	intcon,c	;volatile
  1744                           
  1745                           ; BSR set to: 14
  1746  0013C8  0012               	return		;funcret
  1747  0013CA                     __end_of_InitApp:
  1748                           	opt stack 0
  1749                           tblptru	equ	0xFF8
  1750                           tblptrh	equ	0xFF7
  1751                           tblptrl	equ	0xFF6
  1752                           tablat	equ	0xFF5
  1753                           intcon	equ	0xFF2
  1754                           indf0	equ	0xFEF
  1755                           postinc0	equ	0xFEE
  1756                           fsr0h	equ	0xFEA
  1757                           fsr0l	equ	0xFE9
  1758                           wreg	equ	0xFE8
  1759                           indf1	equ	0xFE7
  1760                           postdec1	equ	0xFE5
  1761                           fsr1h	equ	0xFE2
  1762                           fsr1l	equ	0xFE1
  1763                           indf2	equ	0xFDF
  1764                           fsr2h	equ	0xFDA
  1765                           fsr2l	equ	0xFD9
  1766                           status	equ	0xFD8
  1767                           
  1768 ;; *************** function _ConfigureOscillator *****************
  1769 ;; Defined at:
  1770 ;;		line 24 in file "system.c"
  1771 ;; Parameters:    Size  Location     Type
  1772 ;;		None
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;		None
  1775 ;; Return value:  Size  Location     Type
  1776 ;;                  1    wreg      void 
  1777 ;; Registers used:
  1778 ;;		wreg, status,2
  1779 ;; Tracked objects:
  1780 ;;		On entry : 0/0
  1781 ;;		On exit  : 0/0
  1782 ;;		Unchanged: 0/0
  1783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1788 ;;Total ram usage:        0 bytes
  1789 ;; Hardware stack levels used:    1
  1790 ;; Hardware stack levels required when called:    3
  1791 ;; This function calls:
  1792 ;;		Nothing
  1793 ;; This function is called by:
  1794 ;;		_main
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           	psect	text13
  1799  0013F4                     __ptext13:
  1800                           	opt stack 0
  1801  0013F4                     _ConfigureOscillator:
  1802                           	opt stack 27
  1803                           
  1804                           ;system.c: 26: OSCCONbits.IRCF = 0b110;
  1805                           
  1806                           ; BSR set to: 14
  1807                           ;incstack = 0
  1808  0013F4  50D3               	movf	4051,w,c	;volatile
  1809  0013F6  0B8F               	andlw	-113
  1810  0013F8  0960               	iorlw	96
  1811  0013FA  6ED3               	movwf	4051,c	;volatile
  1812                           
  1813                           ;system.c: 27: OSCTUNEbits.PLLEN = 0b1;
  1814  0013FC  8C9B               	bsf	3995,6,c	;volatile
  1815  0013FE  0012               	return		;funcret
  1816  001400                     __end_of_ConfigureOscillator:
  1817                           	opt stack 0
  1818                           tblptru	equ	0xFF8
  1819                           tblptrh	equ	0xFF7
  1820                           tblptrl	equ	0xFF6
  1821                           tablat	equ	0xFF5
  1822                           intcon	equ	0xFF2
  1823                           indf0	equ	0xFEF
  1824                           postinc0	equ	0xFEE
  1825                           fsr0h	equ	0xFEA
  1826                           fsr0l	equ	0xFE9
  1827                           wreg	equ	0xFE8
  1828                           indf1	equ	0xFE7
  1829                           postdec1	equ	0xFE5
  1830                           fsr1h	equ	0xFE2
  1831                           fsr1l	equ	0xFE1
  1832                           indf2	equ	0xFDF
  1833                           fsr2h	equ	0xFDA
  1834                           fsr2l	equ	0xFD9
  1835                           status	equ	0xFD8
  1836                           
  1837 ;; *************** function _low_isr *****************
  1838 ;; Defined at:
  1839 ;;		line 66 in file "interrupts.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;		None
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;		None
  1844 ;; Return value:  Size  Location     Type
  1845 ;;                  1    wreg      void 
  1846 ;; Registers used:
  1847 ;;		None
  1848 ;; Tracked objects:
  1849 ;;		On entry : 0/0
  1850 ;;		On exit  : 0/0
  1851 ;;		Unchanged: 0/0
  1852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1855 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1856 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1857 ;;Total ram usage:       17 bytes
  1858 ;; Hardware stack levels used:    1
  1859 ;; Hardware stack levels required when called:    2
  1860 ;; This function calls:
  1861 ;;		Nothing
  1862 ;; This function is called by:
  1863 ;;		Interrupt level 1
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           	psect	intcodelo
  1868  000018                     __pintcodelo:
  1869                           	opt stack 0
  1870  000018                     _low_isr:
  1871                           	opt stack 25
  1872                           
  1873                           ;incstack = 0
  1874  000018  8041               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1875  00001A  CFD8 F011          	movff	status,??_low_isr
  1876  00001E  CFE8 F012          	movff	wreg,??_low_isr+1
  1877  000022  CFE0 F013          	movff	bsr,??_low_isr+2
  1878  000026  CFFA F014          	movff	pclath,??_low_isr+3
  1879  00002A  CFFB F015          	movff	pclatu,??_low_isr+4
  1880  00002E  CFE9 F016          	movff	fsr0l,??_low_isr+5
  1881  000032  CFEA F017          	movff	fsr0h,??_low_isr+6
  1882  000036  CFE1 F018          	movff	fsr1l,??_low_isr+7
  1883  00003A  CFE2 F019          	movff	fsr1h,??_low_isr+8
  1884  00003E  CFD9 F01A          	movff	fsr2l,??_low_isr+9
  1885  000042  CFDA F01B          	movff	fsr2h,??_low_isr+10
  1886  000046  CFF3 F01C          	movff	prodl,??_low_isr+11
  1887  00004A  CFF4 F01D          	movff	prodh,??_low_isr+12
  1888  00004E  CFF6 F01E          	movff	tblptrl,??_low_isr+13
  1889  000052  CFF7 F01F          	movff	tblptrh,??_low_isr+14
  1890  000056  CFF8 F020          	movff	tblptru,??_low_isr+15
  1891  00005A  CFF5 F021          	movff	tablat,??_low_isr+16
  1892  00005E  C021  FFF5         	movff	??_low_isr+16,tablat
  1893  000062  C020  FFF8         	movff	??_low_isr+15,tblptru
  1894  000066  C01F  FFF7         	movff	??_low_isr+14,tblptrh
  1895  00006A  C01E  FFF6         	movff	??_low_isr+13,tblptrl
  1896  00006E  C01D  FFF4         	movff	??_low_isr+12,prodh
  1897  000072  C01C  FFF3         	movff	??_low_isr+11,prodl
  1898  000076  C01B  FFDA         	movff	??_low_isr+10,fsr2h
  1899  00007A  C01A  FFD9         	movff	??_low_isr+9,fsr2l
  1900  00007E  C019  FFE2         	movff	??_low_isr+8,fsr1h
  1901  000082  C018  FFE1         	movff	??_low_isr+7,fsr1l
  1902  000086  C017  FFEA         	movff	??_low_isr+6,fsr0h
  1903  00008A  C016  FFE9         	movff	??_low_isr+5,fsr0l
  1904  00008E  C015  FFFB         	movff	??_low_isr+4,pclatu
  1905  000092  C014  FFFA         	movff	??_low_isr+3,pclath
  1906  000096  C013  FFE0         	movff	??_low_isr+2,bsr
  1907  00009A  C012  FFE8         	movff	??_low_isr+1,wreg
  1908  00009E  C011  FFD8         	movff	??_low_isr,status
  1909  0000A2  9041               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1910  0000A4  0010               	retfie	
  1911  0000A6                     __end_of_low_isr:
  1912                           	opt stack 0
  1913                           pclatu	equ	0xFFB
  1914                           pclath	equ	0xFFA
  1915                           tblptru	equ	0xFF8
  1916                           tblptrh	equ	0xFF7
  1917                           tblptrl	equ	0xFF6
  1918                           tablat	equ	0xFF5
  1919                           prodh	equ	0xFF4
  1920                           prodl	equ	0xFF3
  1921                           intcon	equ	0xFF2
  1922                           indf0	equ	0xFEF
  1923                           postinc0	equ	0xFEE
  1924                           fsr0h	equ	0xFEA
  1925                           fsr0l	equ	0xFE9
  1926                           wreg	equ	0xFE8
  1927                           indf1	equ	0xFE7
  1928                           postdec1	equ	0xFE5
  1929                           fsr1h	equ	0xFE2
  1930                           fsr1l	equ	0xFE1
  1931                           bsr	equ	0xFE0
  1932                           indf2	equ	0xFDF
  1933                           fsr2h	equ	0xFDA
  1934                           fsr2l	equ	0xFD9
  1935                           status	equ	0xFD8
  1936                           
  1937 ;; *************** function _high_isr *****************
  1938 ;; Defined at:
  1939 ;;		line 30 in file "interrupts.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;		None
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;		None
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  1    wreg      void 
  1946 ;; Registers used:
  1947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1955 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1956 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1957 ;;Total ram usage:       15 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    1
  1960 ;; This function calls:
  1961 ;;		_appendChar
  1962 ;; This function is called by:
  1963 ;;		Interrupt level 2
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           	psect	intcode
  1968  000008                     __pintcode:
  1969                           	opt stack 0
  1970  000008                     _high_isr:
  1971                           	opt stack 25
  1972                           
  1973                           ;incstack = 0
  1974  000008  8241               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1975  00000A  EFE2  F007         	goto	int_func
  1976                           pclatu	equ	0xFFB
  1977                           pclath	equ	0xFFA
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           tblptrl	equ	0xFF6
  1981                           tablat	equ	0xFF5
  1982                           prodh	equ	0xFF4
  1983                           prodl	equ	0xFF3
  1984                           intcon	equ	0xFF2
  1985                           indf0	equ	0xFEF
  1986                           postinc0	equ	0xFEE
  1987                           fsr0h	equ	0xFEA
  1988                           fsr0l	equ	0xFE9
  1989                           wreg	equ	0xFE8
  1990                           indf1	equ	0xFE7
  1991                           postdec1	equ	0xFE5
  1992                           fsr1h	equ	0xFE2
  1993                           fsr1l	equ	0xFE1
  1994                           bsr	equ	0xFE0
  1995                           indf2	equ	0xFDF
  1996                           fsr2h	equ	0xFDA
  1997                           fsr2l	equ	0xFD9
  1998                           status	equ	0xFD8
  1999                           
  2000                           	psect	intcode_body
  2001  000FC4                     __pintcode_body:
  2002                           	opt stack 25
  2003  000FC4                     int_func:
  2004                           	opt stack 25
  2005  000FC4  CFFA F003          	movff	pclath,??_high_isr+1
  2006  000FC8  CFFB F004          	movff	pclatu,??_high_isr+2
  2007  000FCC  CFE9 F005          	movff	fsr0l,??_high_isr+3
  2008  000FD0  CFEA F006          	movff	fsr0h,??_high_isr+4
  2009  000FD4  CFE1 F007          	movff	fsr1l,??_high_isr+5
  2010  000FD8  CFE2 F008          	movff	fsr1h,??_high_isr+6
  2011  000FDC  CFD9 F009          	movff	fsr2l,??_high_isr+7
  2012  000FE0  CFDA F00A          	movff	fsr2h,??_high_isr+8
  2013  000FE4  CFF3 F00B          	movff	prodl,??_high_isr+9
  2014  000FE8  CFF4 F00C          	movff	prodh,??_high_isr+10
  2015  000FEC  CFF6 F00D          	movff	tblptrl,??_high_isr+11
  2016  000FF0  CFF7 F00E          	movff	tblptrh,??_high_isr+12
  2017  000FF4  CFF8 F00F          	movff	tblptru,??_high_isr+13
  2018  000FF8  CFF5 F010          	movff	tablat,??_high_isr+14
  2019                           
  2020                           ;interrupts.c: 45: if(RC1IF){
  2021  000FFC  AA9E               	btfss	3998,5,c	;volatile
  2022  000FFE  D00F               	goto	i2l1240
  2023                           
  2024                           ;interrupts.c: 46: LATAbits.LATA0 = !LATAbits.LATA0;
  2025  001000  B089               	btfsc	3977,0,c	;volatile
  2026  001002  D003               	goto	i2u51_40
  2027  001004  6A02               	clrf	??_high_isr& (0+255),c
  2028  001006  2A02               	incf	??_high_isr& (0+255),f,c
  2029  001008  D001               	goto	i2u52_48
  2030  00100A                     i2u51_40:
  2031  00100A  6A02               	clrf	??_high_isr& (0+255),c
  2032  00100C                     i2u52_48:
  2033  00100C  5089               	movf	3977,w,c	;volatile
  2034  00100E  1802               	xorwf	??_high_isr,w,c
  2035  001010  0BFE               	andlw	-2
  2036  001012  1802               	xorwf	??_high_isr,w,c
  2037  001014  6E89               	movwf	3977,c	;volatile
  2038                           
  2039                           ;interrupts.c: 47: appendChar(RCREG1);
  2040  001016  50AF               	movf	4015,w,c	;volatile
  2041  001018  ECE5  F009         	call	_appendChar
  2042                           
  2043                           ;interrupts.c: 49: RC1IF = 0;
  2044  00101C  9A9E               	bcf	3998,5,c	;volatile
  2045  00101E                     i2l1240:
  2046                           
  2047                           ;interrupts.c: 50: }
  2048                           ;interrupts.c: 52: if(RC2IF){
  2049  00101E  BAA4               	btfsc	4004,5,c	;volatile
  2050                           
  2051                           ;interrupts.c: 57: RC2IF = 0;
  2052  001020  9AA4               	bcf	4004,5,c	;volatile
  2053  001022  C010  FFF5         	movff	??_high_isr+14,tablat
  2054  001026  C00F  FFF8         	movff	??_high_isr+13,tblptru
  2055  00102A  C00E  FFF7         	movff	??_high_isr+12,tblptrh
  2056  00102E  C00D  FFF6         	movff	??_high_isr+11,tblptrl
  2057  001032  C00C  FFF4         	movff	??_high_isr+10,prodh
  2058  001036  C00B  FFF3         	movff	??_high_isr+9,prodl
  2059  00103A  C00A  FFDA         	movff	??_high_isr+8,fsr2h
  2060  00103E  C009  FFD9         	movff	??_high_isr+7,fsr2l
  2061  001042  C008  FFE2         	movff	??_high_isr+6,fsr1h
  2062  001046  C007  FFE1         	movff	??_high_isr+5,fsr1l
  2063  00104A  C006  FFEA         	movff	??_high_isr+4,fsr0h
  2064  00104E  C005  FFE9         	movff	??_high_isr+3,fsr0l
  2065  001052  C004  FFFB         	movff	??_high_isr+2,pclatu
  2066  001056  C003  FFFA         	movff	??_high_isr+1,pclath
  2067  00105A  9241               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2068  00105C  0011               	retfie		f
  2069  00105E                     __end_of_high_isr:
  2070                           	opt stack 0
  2071                           pclatu	equ	0xFFB
  2072                           pclath	equ	0xFFA
  2073                           tblptru	equ	0xFF8
  2074                           tblptrh	equ	0xFF7
  2075                           tblptrl	equ	0xFF6
  2076                           tablat	equ	0xFF5
  2077                           prodh	equ	0xFF4
  2078                           prodl	equ	0xFF3
  2079                           intcon	equ	0xFF2
  2080                           indf0	equ	0xFEF
  2081                           postinc0	equ	0xFEE
  2082                           fsr0h	equ	0xFEA
  2083                           fsr0l	equ	0xFE9
  2084                           wreg	equ	0xFE8
  2085                           indf1	equ	0xFE7
  2086                           postdec1	equ	0xFE5
  2087                           fsr1h	equ	0xFE2
  2088                           fsr1l	equ	0xFE1
  2089                           bsr	equ	0xFE0
  2090                           indf2	equ	0xFDF
  2091                           fsr2h	equ	0xFDA
  2092                           fsr2l	equ	0xFD9
  2093                           status	equ	0xFD8
  2094                           
  2095 ;; *************** function _appendChar *****************
  2096 ;; Defined at:
  2097 ;;		line 27 in file "bufferhandler.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;  data            1    wreg     unsigned char 
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;  data            1    0[COMRAM] unsigned char 
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  1    wreg      void 
  2104 ;; Registers used:
  2105 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2112 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2114 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2115 ;;Total ram usage:        1 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; This function calls:
  2118 ;;		Nothing
  2119 ;; This function is called by:
  2120 ;;		_high_isr
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	text16
  2125  0013CA                     __ptext16:
  2126                           	opt stack 0
  2127  0013CA                     _appendChar:
  2128                           	opt stack 25
  2129                           
  2130                           ;incstack = 0
  2131                           ;appendChar@data stored from wreg
  2132  0013CA  6E01               	movwf	appendChar@data,c
  2133                           
  2134                           ;bufferhandler.c: 28: tmpString[index] = data;
  2135  0013CC  0EA6               	movlw	low _tmpString
  2136  0013CE  2439               	addwf	_index,w,c
  2137  0013D0  6ED9               	movwf	fsr2l,c
  2138  0013D2  0E00               	movlw	high _tmpString
  2139  0013D4  203A               	addwfc	_index+1,w,c
  2140  0013D6  6EDA               	movwf	fsr2h,c
  2141  0013D8  C001  FFDF         	movff	appendChar@data,indf2
  2142                           
  2143                           ;bufferhandler.c: 29: index++;
  2144  0013DC  4A39               	infsnz	_index,f,c
  2145  0013DE  2A3A               	incf	_index+1,f,c
  2146  0013E0  0012               	return		;funcret
  2147  0013E2                     __end_of_appendChar:
  2148                           	opt stack 0
  2149                           pclatu	equ	0xFFB
  2150                           pclath	equ	0xFFA
  2151                           tblptru	equ	0xFF8
  2152                           tblptrh	equ	0xFF7
  2153                           tblptrl	equ	0xFF6
  2154                           tablat	equ	0xFF5
  2155                           prodh	equ	0xFF4
  2156                           prodl	equ	0xFF3
  2157                           intcon	equ	0xFF2
  2158                           indf0	equ	0xFEF
  2159                           postinc0	equ	0xFEE
  2160                           fsr0h	equ	0xFEA
  2161                           fsr0l	equ	0xFE9
  2162                           wreg	equ	0xFE8
  2163                           indf1	equ	0xFE7
  2164                           postdec1	equ	0xFE5
  2165                           fsr1h	equ	0xFE2
  2166                           fsr1l	equ	0xFE1
  2167                           bsr	equ	0xFE0
  2168                           indf2	equ	0xFDF
  2169                           fsr2h	equ	0xFDA
  2170                           fsr2l	equ	0xFD9
  2171                           status	equ	0xFD8
  2172                           pclatu	equ	0xFFB
  2173                           pclath	equ	0xFFA
  2174                           tblptru	equ	0xFF8
  2175                           tblptrh	equ	0xFF7
  2176                           tblptrl	equ	0xFF6
  2177                           tablat	equ	0xFF5
  2178                           prodh	equ	0xFF4
  2179                           prodl	equ	0xFF3
  2180                           intcon	equ	0xFF2
  2181                           indf0	equ	0xFEF
  2182                           postinc0	equ	0xFEE
  2183                           fsr0h	equ	0xFEA
  2184                           fsr0l	equ	0xFE9
  2185                           wreg	equ	0xFE8
  2186                           indf1	equ	0xFE7
  2187                           postdec1	equ	0xFE5
  2188                           fsr1h	equ	0xFE2
  2189                           fsr1l	equ	0xFE1
  2190                           bsr	equ	0xFE0
  2191                           indf2	equ	0xFDF
  2192                           fsr2h	equ	0xFDA
  2193                           fsr2l	equ	0xFD9
  2194                           status	equ	0xFD8
  2195                           
  2196                           	psect	rparam
  2197  0000                     pclatu	equ	0xFFB
  2198                           pclath	equ	0xFFA
  2199                           tblptru	equ	0xFF8
  2200                           tblptrh	equ	0xFF7
  2201                           tblptrl	equ	0xFF6
  2202                           tablat	equ	0xFF5
  2203                           prodh	equ	0xFF4
  2204                           prodl	equ	0xFF3
  2205                           intcon	equ	0xFF2
  2206                           indf0	equ	0xFEF
  2207                           postinc0	equ	0xFEE
  2208                           fsr0h	equ	0xFEA
  2209                           fsr0l	equ	0xFE9
  2210                           wreg	equ	0xFE8
  2211                           indf1	equ	0xFE7
  2212                           postdec1	equ	0xFE5
  2213                           fsr1h	equ	0xFE2
  2214                           fsr1l	equ	0xFE1
  2215                           bsr	equ	0xFE0
  2216                           indf2	equ	0xFDF
  2217                           fsr2h	equ	0xFDA
  2218                           fsr2l	equ	0xFD9
  2219                           status	equ	0xFD8
  2220                           
  2221                           	psect	temp
  2222  000041                     btemp:
  2223                           	opt stack 0
  2224  000041                     	ds	1
  2225  0000                     int$flags	set	btemp
  2226                           pclatu	equ	0xFFB
  2227                           pclath	equ	0xFFA
  2228                           tblptru	equ	0xFF8
  2229                           tblptrh	equ	0xFF7
  2230                           tblptrl	equ	0xFF6
  2231                           tablat	equ	0xFF5
  2232                           prodh	equ	0xFF4
  2233                           prodl	equ	0xFF3
  2234                           intcon	equ	0xFF2
  2235                           indf0	equ	0xFEF
  2236                           postinc0	equ	0xFEE
  2237                           fsr0h	equ	0xFEA
  2238                           fsr0l	equ	0xFE9
  2239                           wreg	equ	0xFE8
  2240                           indf1	equ	0xFE7
  2241                           postdec1	equ	0xFE5
  2242                           fsr1h	equ	0xFE2
  2243                           fsr1l	equ	0xFE1
  2244                           bsr	equ	0xFE0
  2245                           indf2	equ	0xFDF
  2246                           fsr2h	equ	0xFDA
  2247                           fsr2l	equ	0xFD9
  2248                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    0
    Data        6
    BSS         165
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      64
    BANK0           160     16     156
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 70
		 -> allDataString(BANK0[70]), tmpString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 70
		 -> allDataString(BANK0[70]), tmpString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 

    sp__createCHG	PTR unsigned char  size(2) Largest target is 1
		 -> STR_5(CODE[1]), 

    writeString@str	PTR unsigned char  size(2) Largest target is 70
		 -> allDataString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_appendChar

Critical Paths under _main in BANK0

    _main->_writeResult
    _writeResult->_wait_ms
    _writeString->_strlen
    _wait_ms->___lmul
    _clearBuffer->_strlen

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    4526
                                             15 BANK0      1     1      0
                _ConfigureOscillator
                            _InitApp
                          _UART_Init
                         _UART_Write
                        _clearBuffer
                      _copyTmpBuffer
                     _isItLongEnough
                            _isValid
                            _wait_ms
                        _writeResult
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeResult                                          1     1      0    1851
                                             14 BANK0      1     1      0
                            _wait_ms
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeString                                          7     4      3    1231
                                              6 BANK0      7     4      3
                         _UART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           2     1      1     324
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _wait_ms                                              2     0      2     589
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     404
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _isValid                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _isItLongEnough                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _copyTmpBuffer                                        3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _clearBuffer                                          2     2      0     352
                                              6 BANK0      2     2      0
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     284
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4      77
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                             16 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            15    15      0      22
                                              1 COMRAM    15    15      0
                         _appendChar
 ---------------------------------------------------------------------------------
 (6) _appendChar                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _UART_Init
   _UART_Write
   _clearBuffer
     _strlen
   _copyTmpBuffer
   _isItLongEnough
   _isValid
   _wait_ms
     ___lmul
   _writeResult
     _wait_ms
       ___lmul
     _writeString
       _UART_Write
       _strlen
   _writeString
     _UART_Write
     _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)
   _appendChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      9C       5       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      40       1       68.1%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DC       6        0.0%
DATA                 0      0      DC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Apr 06 12:31:22 2017

                          l52 0FB6                            l71 11FA                            l55 0FB8  
              writeResult@dev 00FA                            bsr 000FE0                  __CFG_CP0$OFF 000000  
                         l144 1398                           l148 13A2                           u720 117C  
                         u727 1172                           u760 10A8                           u767 109E  
                         wreg 000FE8                    _TXSTA1bits 000FAD                  __CFG_IESO$ON 000000  
                  _TXSTA2bits 000FA8                          l1404 10E6                          l1422 11EA  
                        l1414 106A                          l1408 110C                          l1418 10B2  
                        l1452 1214                          l1526 0F82                          l1456 122E  
                        l1394 1154                          l1538 0FB0                          l1396 115A  
                        l1492 126E                          l1468 13F0                          l1486 132E  
                        l1496 1298            __CFG_WPFP$PAGE_127 000000                 _copyTmpBuffer 1262  
                        STR_1 0F01                          STR_2 0F06                          STR_3 0F05  
                        STR_4 0F05                          _RCIF 007CF5                 __CFG_FCMEN$ON 000000  
                        _main 0F0C                          fsr0h 000FEA                          fsr1h 000FE2  
                        indf0 000FEF                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf1 000FE7                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                          btemp 0041                          prodh 000FF4  
                        prodl 000FF3                          start 00A6                writeString@dev 00F4  
                ___param_bank 000000                writeString@str 00F2               __end_of_InitApp 13CA  
               __CFG_PLLDIV$1 000000                  _BAUDCON1bits 000F7E                  _BAUDCON2bits 000F7C  
                       ?_main 0001                         _RC1IE 007CED                         _RC1IF 007CF5  
                       _RC2IE 007D1D                         _RC2IF 007D25                   _writeResult 1364  
                       _RPOR8 000EC8           _ConfigureOscillator 13F4                   _writeString 105E  
         ___lmul@multiplicand 00F0              ??_isItLongEnough 00EC                   ?_UART_Write 00EC  
          __size_of_UART_Init 0032               __end_of_isValid 1332                         _index 0039  
              ?_copyTmpBuffer 0001                __CFG_CLKOEC$ON 000000               __end_of_low_isr 00A6  
                       pclath 000FFA                         tablat 000FF5               __end_of_wait_ms 1208  
                       status 000FD8          ?_ConfigureOscillator 0001          __size_of_clearBuffer 005A  
     __CFG_DSWDTOSC$INTOSCREF 000000               __initialization 12B6                  __end_of_main 0FC4  
                      ??_main 00FB                 __activetblptr 000003                        i2l1240 101E  
              __CFG_WDTEN$OFF 000000                        _INTCON 000FF2                        _RCREG1 000FAF  
                      _RCREG2 000FAA                        _RCSTA1 000FAC                        _RCSTA2 000F9C  
                      _SPBRG1 000FB0                        _SPBRG2 000FAB                        _PPSCON 000EBF  
                      _TRISB4 007C9C                        _TRISB5 007C9D                __CFG_WPCFG$OFF 000000  
                      _TRISC6 007CA6                        _TRISC7 007CA7                        _TXREG1 000FAE  
                      _TXREG2 000FA9                        _TXSTA1 000FAD                        _TXSTA2 000FA8  
                   ??_InitApp 00EC         ??_ConfigureOscillator 00EC                __CFG_WPDIS$OFF 000000  
              __CFG_XINST$OFF 000000             __end_of_UART_Init 1364              __end_of_high_isr 105E  
                      ___lmul 10D4           __size_of_UART_Write 0020                __CFG_STVREN$ON 000000  
                      clear_0 12DC                        clear_1 12E8                        _strlen 114A  
                   ??_isValid 00EC                  __pdataCOMRAM 003B                  __mediumconst 0000  
                   ??_low_isr 0011                        tblptrh 000FF7               ??_copyTmpBuffer 00EC  
                      tblptrl 000FF6                        tblptru 000FF8                     ??_wait_ms 00FA  
             __CFG_DSBOREN$ON 000000          __CFG_LS48MHZ$SYS48X8 000000                    __accesstop 0060  
     __end_of__initialization 12EE                 ___rparam_used 000001               __CFG_IOL1WAY$ON 000000  
        __CFG_WPEND$PAGE_WPFP 000000                __pcstackCOMRAM 0001               __CFG_DSWDTEN$ON 000000  
             __CFG_DSWDTPS$G2 000000               __CFG_OSC$INTOSC 000000                    __pbssBANK0 0060  
                     ?___lmul 00EC                ___lmul@product 00F4                    _appendChar 13CA  
                     ?_strlen 00EC                 _allDataString 0060                  ?_writeResult 0001  
                ?_writeString 00F2                  ??_UART_Write 00ED                       i2u51_40 100A  
                     i2u52_48 100C                       _SPBRGH1 000F7F                       _SPBRGH2 000F7D  
                     _RPINR16 000EF7                     ?_high_isr 0001                       _InitApp 13AC  
                     __Hparam 0000                       __Lparam 0000               __size_of___lmul 0076  
          __end_of_UART_Write 13AC                  __psmallconst 0F00                       __pcinit 12B6  
                     __ramtop 0F00                       __ptext0 0F0C                       __ptext1 1364  
                     __ptext2 105E                       __ptext3 138C                       __ptext4 11AE  
                     __ptext5 10D4                       __ptext6 12F8                       __ptext7 13E2  
                     __ptext8 1262                       __ptext9 1208                       _isValid 12F8  
             __size_of_strlen 0064                       _low_isr 0018                       _wait_ms 11AE  
                     main@var 00FB                    ??_high_isr 0002                __pintcode_body 0FC4  
        end_of_initialization 12EE                 ??_clearBuffer 00F2                       int_func 0FC4  
                     postdec1 000FE5                       postinc0 000FEE                   wait_ms@time 00F8  
                     strlen@s 00EC                     _UART_Init 1332                     _PORTDbits 000F83  
                 ?_appendChar 0001                UART_Write@data 00ED              __CFG_CPUDIV$OSC1 000000  
                   _TRISAbits 000F92                     _TRISDbits 000F95             __CFG_SOSCSEL$HIGH 000000  
 __end_of_ConfigureOscillator 1400                  writeString@i 00F7       __size_of_isItLongEnough 0012  
         __CFG_MSSP7B_EN$MSK7 000000           __end_of_clearBuffer 1262                __end_of___lmul 114A  
                  ?_UART_Init 00EC                 __pidataCOMRAM 1400                __end_of_strlen 11AE  
         start_initialization 12B6          __size_of_writeResult 0028          __size_of_writeString 0076  
       __end_of_copyTmpBuffer 12B6           __size_of_appendChar 0018                      ??___lmul 00F4  
           __CFG_ADCSEL$BIT10 000000                      ??_strlen 00EE                   __pbssCOMRAM 0022  
               __pcstackBANK0 00EC             __size_of_high_isr 1056                   _clearBuffer 1208  
                    ?_InitApp 0001                     __pintcode 0008                   __pintcodelo 0018  
                 ??_UART_Init 00F0                      ?_isValid 0001                   __smallconst 0F00  
        __CFG_RTCOSC$T1OSCREF 000000                      ?_low_isr 0001                      ?_wait_ms 00F8  
              copyTmpBuffer@i 00ED                _isItLongEnough 13E2                      _LATAbits 000F89  
            __CFG_WDTPS$32768 000000                  _parsedString 0022                  clearBuffer@i 00F2  
               UART_Write@dev 00EC                     _tmpString 00A6             UART_Init@baudrate 00EC  
                ??_appendChar 0001              parseString@F8385 0036              parseString@F8387 003B  
           __CFG_CFGPLLEN$OFF 000000             ___lmul@multiplier 00EC                     copy_data0 12CA  
      __end_of_isItLongEnough 13F4            __end_of_appendChar 13E2              __size_of_InitApp 001E  
                    __Hrparam 0000                      __Lrparam 0000              __size_of_isValid 003A  
            __size_of_low_isr 008E                      __ptext10 114A                      __ptext11 1332  
                    __ptext12 13AC                      __ptext13 13F4                      __ptext16 13CA  
            __size_of_wait_ms 005A                      _high_isr 0008               ?_isItLongEnough 0001  
               __size_of_main 00B8                appendChar@data 0001  __size_of_ConfigureOscillator 000C  
                    int$flags 0041                 ??_writeResult 00FA                 ??_writeString 00F5  
                 _OSCTUNEbits 000F9B                      intlevel1 0000                      intlevel2 0000  
                ?_clearBuffer 0001                    _OSCCONbits 000FD3        __size_of_copyTmpBuffer 0054  
                wait_ms@timel 0032                      strlen@cp 00F0                    _UART_Write 138C  
         __end_of_writeResult 138C           __end_of_writeString 10D4  
