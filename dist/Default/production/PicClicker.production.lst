

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Apr 22 13:55:23 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F47J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 1.41
    41                           ; Generated 25/01/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F47J53 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     _RPINR16	set	3831
    75  0000                     _RPOR8	set	3784
    76  0000                     _PPSCON	set	3775
    77  0000                     _RCREG2	set	4010
    78  0000                     _TXREG2	set	4009
    79  0000                     _TXSTA2bits	set	4008
    80  0000                     _TXREG1	set	4014
    81  0000                     _TXSTA1bits	set	4013
    82  0000                     _SPBRGH2	set	3965
    83  0000                     _SPBRG2	set	4011
    84  0000                     _BAUDCON2bits	set	3964
    85  0000                     _TXSTA2	set	4008
    86  0000                     _RCSTA2	set	3996
    87  0000                     _SPBRGH1	set	3967
    88  0000                     _SPBRG1	set	4016
    89  0000                     _BAUDCON1bits	set	3966
    90  0000                     _RCSTA1	set	4012
    91  0000                     _TXSTA1	set	4013
    92  0000                     _INTCON	set	4082
    93  0000                     _OSCTUNEbits	set	3995
    94  0000                     _OSCCONbits	set	4051
    95  0000                     _PORTDbits	set	3971
    96  0000                     _TRISDbits	set	3989
    97  0000                     _TRISAbits	set	3986
    98  0000                     _RCREG1	set	4015
    99  0000                     _LATAbits	set	3977
   100  0000                     _RCIF	set	31989
   101  0000                     _TRISB5	set	31901
   102  0000                     _TRISB4	set	31900
   103  0000                     _RC2IE	set	32029
   104  0000                     _TRISC6	set	31910
   105  0000                     _TRISC7	set	31911
   106  0000                     _RC1IE	set	31981
   107  0000                     _RC2IF	set	32037
   108  0000                     _RC1IF	set	31989
   109                           
   110                           	psect	smallconst
   111  000F00                     __psmallconst:
   112                           	opt stack 0
   113  000F00  00                 	db	0
   114  000F01                     STR_1:
   115  000F01  4C                 	db	76	;'L'
   116  000F02  20                 	db	32
   117  000F03  35                 	db	53	;'5'
   118  000F04  30                 	db	48	;'0'
   119  000F05  00                 	db	0
   120  000F06                     STR_2:
   121  000F06  44                 	db	68	;'D'
   122  000F07  20                 	db	32
   123  000F08  38                 	db	56	;'8'
   124  000F09  00                 	db	0
   125  000F0A                     STR_4:
   126  000F0A  3B                 	db	59	;';'
   127  000F0B  00                 	db	0
   128  000F0C                     STR_9:
   129  000F0C  41                 	db	65	;'A'
   130  000F0D  00                 	db	0
   131  000F0E                     STR_5:
   132  000F0E  43                 	db	67	;'C'
   133  000F0F  00                 	db	0
   134  000F10                     STR_7:
   135  000F10  47                 	db	71	;'G'
   136  000F11  00                 	db	0
   137  000F12                     STR_6:
   138  000F12  48                 	db	72	;'H'
   139  000F13  00                 	db	0
   140  000F14                     STR_11:
   141  000F14  4B                 	db	75	;'K'
   142  000F15  00                 	db	0
   143  0000                     
   144                           ; #config settings
   145  000F16  00                 	db	0	; dummy byte at the end
   146  0000                     
   147                           	psect	cinit
   148  001874                     __pcinit:
   149                           	opt stack 0
   150  001874                     start_initialization:
   151                           	opt stack 0
   152  001874                     __initialization:
   153                           	opt stack 0
   154                           
   155                           ; Clear objects allocated to BANK1 (70 bytes)
   156  001874  EE01  F000         	lfsr	0,__pbssBANK1
   157  001878  0E46               	movlw	70
   158  00187A                     clear_0:
   159  00187A  6AEE               	clrf	postinc0,c
   160  00187C  06E8               	decf	wreg,f,c
   161  00187E  E1FD               	bnz	clear_0
   162                           
   163                           ; Clear objects allocated to BANK0 (124 bytes)
   164  001880  EE00  F060         	lfsr	0,__pbssBANK0
   165  001884  0E7C               	movlw	124
   166  001886                     clear_1:
   167  001886  6AEE               	clrf	postinc0,c
   168  001888  06E8               	decf	wreg,f,c
   169  00188A  E1FD               	bnz	clear_1
   170                           
   171                           ; Clear objects allocated to COMRAM (6 bytes)
   172  00188C  6A38               	clrf	(__pbssCOMRAM+5)& (0+255),c
   173  00188E  6A37               	clrf	(__pbssCOMRAM+4)& (0+255),c
   174  001890  6A36               	clrf	(__pbssCOMRAM+3)& (0+255),c
   175  001892  6A35               	clrf	(__pbssCOMRAM+2)& (0+255),c
   176  001894  6A34               	clrf	(__pbssCOMRAM+1)& (0+255),c
   177  001896  6A33               	clrf	__pbssCOMRAM& (0+255),c
   178  001898                     end_of_initialization:
   179                           	opt stack 0
   180  001898                     __end_of__initialization:
   181                           	opt stack 0
   182  001898  9039               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   183  00189A  9239               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   184  00189C  0100               	movlb	0
   185  00189E  EFCC  F009         	goto	_main	;jump to C main() function
   186                           postinc0	equ	0xFEE
   187                           wreg	equ	0xFE8
   188                           
   189                           	psect	bssCOMRAM
   190  000033                     __pbssCOMRAM:
   191                           	opt stack 0
   192  000033                     wait_ms@timel:
   193                           	opt stack 0
   194  000033                     	ds	4
   195  000037                     _index:
   196                           	opt stack 0
   197  000037                     	ds	2
   198                           postinc0	equ	0xFEE
   199                           wreg	equ	0xFE8
   200                           
   201                           	psect	bssBANK0
   202  000060                     __pbssBANK0:
   203                           	opt stack 0
   204  000060                     _positions:
   205                           	opt stack 0
   206  000060                     	ds	22
   207  000076                     _parsedString:
   208                           	opt stack 0
   209  000076                     	ds	17
   210  000087                     _toCharArray:
   211                           	opt stack 0
   212  000087                     	ds	6
   213  00008D                     _charSOC:
   214                           	opt stack 0
   215  00008D                     	ds	3
   216  000090                     _tmpString:
   217                           	opt stack 0
   218  000090                     	ds	70
   219  0000D6                     _SOC:
   220                           	opt stack 0
   221  0000D6                     	ds	6
   222                           postinc0	equ	0xFEE
   223                           wreg	equ	0xFE8
   224                           
   225                           	psect	bssBANK1
   226  000100                     __pbssBANK1:
   227                           	opt stack 0
   228  000100                     _allDataString:
   229                           	opt stack 0
   230  000100                     	ds	70
   231                           postinc0	equ	0xFEE
   232                           wreg	equ	0xFE8
   233                           
   234                           	psect	cstackBANK0
   235  0000DC                     __pcstackBANK0:
   236                           	opt stack 0
   237  0000DC                     parseString@chgStop:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x0
   241  0000DC                     	ds	2
   242  0000DE                     parseString@parsedStringSize:
   243                           	opt stack 0
   244                           
   245                           ; 2 bytes @ 0x2
   246  0000DE                     	ds	2
   247  0000E0                     parseString@socSize:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x4
   251  0000E0                     	ds	2
   252  0000E2                     parseString@chgStart:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x6
   256  0000E2                     	ds	2
   257  0000E4                     parseString@k:
   258                           	opt stack 0
   259                           
   260                           ; 2 bytes @ 0x8
   261  0000E4                     	ds	2
   262  0000E6                     parseString@CHG:
   263                           	opt stack 0
   264                           
   265                           ; 1 bytes @ 0xA
   266  0000E6                     	ds	1
   267  0000E7                     parseString@socStartPos:
   268                           	opt stack 0
   269                           
   270                           ; 2 bytes @ 0xB
   271  0000E7                     	ds	2
   272  0000E9                     parseString@socEndPos:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0xD
   276  0000E9                     	ds	2
   277  0000EB                     parseString@i:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0xF
   281  0000EB                     	ds	2
   282  0000ED                     parseString@count:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x11
   286  0000ED                     	ds	2
   287  0000EF                     parseString@tmp:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0x13
   291  0000EF                     	ds	2
   292  0000F1                     parseString@n:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x15
   296  0000F1                     	ds	2
   297                           postinc0	equ	0xFEE
   298                           wreg	equ	0xFE8
   299                           
   300                           	psect	cstackCOMRAM
   301  000001                     __pcstackCOMRAM:
   302                           	opt stack 0
   303  000001                     appendChar@data:
   304                           	opt stack 0
   305                           
   306                           ; 1 bytes @ 0x0
   307  000001                     	ds	1
   308  000002                     ??_high_isr:
   309                           
   310                           ; 1 bytes @ 0x1
   311  000002                     	ds	15
   312  000011                     ??_low_isr:
   313                           
   314                           ; 1 bytes @ 0x10
   315  000011                     	ds	17
   316  000022                     ??_copyTmpBuffer:
   317  000022                     ?_strlen:
   318                           	opt stack 0
   319  000022                     ?_lenHelper:
   320                           	opt stack 0
   321  000022                     ?___wmul:
   322                           	opt stack 0
   323  000022                     ?___awdiv:
   324                           	opt stack 0
   325  000022                     ?___awmod:
   326                           	opt stack 0
   327  000022                     ?___lmul:
   328                           	opt stack 0
   329  000022                     UART_Write@dev:
   330                           	opt stack 0
   331  000022                     lenHelper@x:
   332                           	opt stack 0
   333  000022                     ___wmul@multiplier:
   334                           	opt stack 0
   335  000022                     ___awdiv@dividend:
   336                           	opt stack 0
   337  000022                     ___awmod@dividend:
   338                           	opt stack 0
   339  000022                     strlen@s:
   340                           	opt stack 0
   341  000022                     UART_Init@baudrate:
   342                           	opt stack 0
   343  000022                     ___lmul@multiplier:
   344                           	opt stack 0
   345                           
   346                           ; 4 bytes @ 0x21
   347  000022                     	ds	1
   348  000023                     UART_Write@data:
   349                           	opt stack 0
   350  000023                     copyTmpBuffer@i:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x22
   354  000023                     	ds	1
   355  000024                     ??_strlen:
   356  000024                     ___wmul@multiplicand:
   357                           	opt stack 0
   358  000024                     ___awdiv@divisor:
   359                           	opt stack 0
   360  000024                     ___awmod@divisor:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x23
   364  000024                     	ds	2
   365  000026                     ___awdiv@counter:
   366                           	opt stack 0
   367  000026                     ___awmod@counter:
   368                           	opt stack 0
   369  000026                     ___wmul@product:
   370                           	opt stack 0
   371  000026                     strlen@cp:
   372                           	opt stack 0
   373  000026                     ___lmul@multiplicand:
   374                           	opt stack 0
   375                           
   376                           ; 4 bytes @ 0x25
   377  000026                     	ds	1
   378  000027                     ___awdiv@sign:
   379                           	opt stack 0
   380  000027                     ___awmod@sign:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x26
   384  000027                     	ds	1
   385  000028                     ?_transformToTwoDigitNumber:
   386                           	opt stack 0
   387  000028                     writeString@str:
   388                           	opt stack 0
   389  000028                     clearBuffer@i:
   390                           	opt stack 0
   391  000028                     transformToTwoDigitNumber@number:
   392                           	opt stack 0
   393  000028                     ___awdiv@quotient:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x27
   397  000028                     	ds	2
   398  00002A                     writeString@dev:
   399                           	opt stack 0
   400  00002A                     transformToTwoDigitNumber@size:
   401                           	opt stack 0
   402  00002A                     ___lmul@product:
   403                           	opt stack 0
   404                           
   405                           ; 4 bytes @ 0x29
   406  00002A                     	ds	1
   407  00002B                     ??_writeString:
   408                           
   409                           ; 1 bytes @ 0x2A
   410  00002B                     	ds	1
   411  00002C                     ??_transformToTwoDigitNumber:
   412                           
   413                           ; 1 bytes @ 0x2B
   414  00002C                     	ds	1
   415  00002D                     writeString@i:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x2C
   419  00002D                     	ds	1
   420  00002E                     wait_ms@time:
   421                           	opt stack 0
   422  00002E                     transformToTwoDigitNumber@result:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x2D
   426  00002E                     	ds	2
   427  000030                     ??_parseString:
   428  000030                     writeResult@dev:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0x2F
   432  000030                     	ds	2
   433  000032                     main@var:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x31
   437  000032                     	ds	1
   438                           postinc0	equ	0xFEE
   439                           wreg	equ	0xFE8
   440                           
   441 ;;
   442 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   443 ;;
   444 ;; *************** function _main *****************
   445 ;; Defined at:
   446 ;;		line 39 in file "main.c"
   447 ;; Parameters:    Size  Location     Type
   448 ;;		None
   449 ;; Auto vars:     Size  Location     Type
   450 ;;  var             1   49[COMRAM] unsigned char 
   451 ;;  result          1    0        unsigned char 
   452 ;; Return value:  Size  Location     Type
   453 ;;                  1    wreg      void 
   454 ;; Registers used:
   455 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   456 ;; Tracked objects:
   457 ;;		On entry : 0/0
   458 ;;		On exit  : 0/0
   459 ;;		Unchanged: 0/0
   460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   462 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   464 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   465 ;;Total ram usage:        1 bytes
   466 ;; Hardware stack levels required when called:    6
   467 ;; This function calls:
   468 ;;		_ConfigureOscillator
   469 ;;		_InitApp
   470 ;;		_UART_Init
   471 ;;		_UART_Write
   472 ;;		_clearBuffer
   473 ;;		_copyTmpBuffer
   474 ;;		_isItLongEnough
   475 ;;		_isValid
   476 ;;		_parseString
   477 ;;		_wait_ms
   478 ;;		_writeResult
   479 ;;		_writeString
   480 ;; This function is called by:
   481 ;;		Startup code after reset
   482 ;; This function uses a non-reentrant model
   483 ;;
   484                           
   485                           	psect	text0
   486  001398                     __ptext0:
   487                           	opt stack 0
   488  001398                     _main:
   489                           	opt stack 25
   490                           
   491                           ;main.c: 45: ConfigureOscillator();
   492                           
   493                           ;incstack = 0
   494  001398  ECA6  F00C         	call	_ConfigureOscillator	;wreg free
   495                           
   496                           ;main.c: 48: InitApp();
   497  00139C  EC74  F00C         	call	_InitApp	;wreg free
   498                           
   499                           ;main.c: 50: UART_Init(19200);
   500  0013A0  0E00               	movlw	0
   501  0013A2  6E22               	movwf	UART_Init@baudrate,c
   502  0013A4  0E4B               	movlw	75
   503  0013A6  6E23               	movwf	UART_Init@baudrate+1,c
   504  0013A8  0E00               	movlw	0
   505  0013AA  6E24               	movwf	UART_Init@baudrate+2,c
   506  0013AC  0E00               	movlw	0
   507  0013AE  6E25               	movwf	UART_Init@baudrate+3,c
   508  0013B0  EC21  F00C         	call	_UART_Init	;wreg free
   509                           
   510                           ;main.c: 51: writeString("L 50", 1);
   511  0013B4  0E01               	movlw	low STR_1
   512  0013B6  6E28               	movwf	writeString@str,c
   513  0013B8  0E0F               	movlw	high STR_1
   514  0013BA  6E29               	movwf	writeString@str+1,c
   515  0013BC  0E01               	movlw	1
   516  0013BE  6E2A               	movwf	writeString@dev,c
   517  0013C0  ECE6  F00A         	call	_writeString	;wreg free
   518                           
   519                           ;main.c: 52: UART_Write(0x0D,1);
   520  0013C4  0E01               	movlw	1
   521  0013C6  6E22               	movwf	UART_Write@dev,c
   522  0013C8  0E0D               	movlw	13
   523  0013CA  EC83  F00C         	call	_UART_Write
   524                           
   525                           ;main.c: 53: writeString("D 8", 1);
   526  0013CE  0E06               	movlw	low STR_2
   527  0013D0  6E28               	movwf	writeString@str,c
   528  0013D2  0E0F               	movlw	high STR_2
   529  0013D4  6E29               	movwf	writeString@str+1,c
   530  0013D6  0E01               	movlw	1
   531  0013D8  6E2A               	movwf	writeString@dev,c
   532  0013DA  ECE6  F00A         	call	_writeString	;wreg free
   533                           
   534                           ;main.c: 54: UART_Write(0x0D,1);
   535  0013DE  0E01               	movlw	1
   536  0013E0  6E22               	movwf	UART_Write@dev,c
   537  0013E2  0E0D               	movlw	13
   538  0013E4  EC83  F00C         	call	_UART_Write
   539                           
   540                           ;main.c: 56: uint8_t var = 0;
   541  0013E8  0E00               	movlw	0
   542  0013EA  6E32               	movwf	main@var,c
   543                           
   544                           ;main.c: 57: char result;
   545                           ;main.c: 60: TRISAbits.TRISA0 = 0;
   546  0013EC  9092               	bcf	3986,0,c	;volatile
   547                           
   548                           ;main.c: 61: TRISAbits.TRISA1 = 0;
   549  0013EE  9292               	bcf	3986,1,c	;volatile
   550                           
   551                           ;main.c: 62: LATAbits.LATA0 = 0;
   552  0013F0  9089               	bcf	3977,0,c	;volatile
   553                           
   554                           ;main.c: 63: LATAbits.LATA1 = 0;
   555  0013F2  9289               	bcf	3977,1,c	;volatile
   556                           
   557                           ;main.c: 64: TRISDbits.TRISD3 = 1;
   558  0013F4  8695               	bsf	3989,3,c	;volatile
   559                           
   560                           ;main.c: 66: clearBuffer();
   561  0013F6  ECC1  F00B         	call	_clearBuffer	;wreg free
   562  0013FA                     l1719:
   563                           
   564                           ;main.c: 71: if(isItLongEnough()){
   565  0013FA  EC9D  F00C         	call	_isItLongEnough	;wreg free
   566  0013FE  0900               	iorlw	0
   567  001400  B4D8               	btfsc	status,2,c
   568  001402  D016               	goto	l54
   569                           
   570                           ;main.c: 72: if(isValid()){
   571  001404  EC04  F00C         	call	_isValid	;wreg free
   572  001408  0900               	iorlw	0
   573  00140A  B4D8               	btfsc	status,2,c
   574  00140C  D00E               	goto	l1733
   575                           
   576                           ;main.c: 73: LATAbits.LATA1 = 1;
   577  00140E  8289               	bsf	3977,1,c	;volatile
   578                           
   579                           ;main.c: 74: wait_ms(1000);
   580  001410  0E03               	movlw	3
   581  001412  6E2F               	movwf	wait_ms@time+1,c
   582  001414  0EE8               	movlw	232
   583  001416  6E2E               	movwf	wait_ms@time,c
   584  001418  EC41  F00B         	call	_wait_ms	;wreg free
   585                           
   586                           ;main.c: 75: copyTmpBuffer();
   587  00141C  ECE4  F00B         	call	_copyTmpBuffer	;wreg free
   588                           
   589                           ;main.c: 76: clearBuffer();
   590  001420  ECC1  F00B         	call	_clearBuffer	;wreg free
   591                           
   592                           ;main.c: 77: parseString();
   593  001424  EC8C  F007         	call	_parseString	;wreg free
   594                           
   595                           ;main.c: 78: }else{
   596  001428  D004               	goto	l57
   597  00142A                     l1733:
   598                           
   599                           ;main.c: 79: clearBuffer();
   600  00142A  ECC1  F00B         	call	_clearBuffer	;wreg free
   601                           
   602                           ;main.c: 80: }
   603                           ;main.c: 81: }else{
   604  00142E  D001               	goto	l57
   605  001430                     l54:
   606                           
   607                           ;main.c: 82: LATAbits.LATA1 = 0;
   608  001430  9289               	bcf	3977,1,c	;volatile
   609  001432                     l57:
   610                           
   611                           ;main.c: 83: }
   612                           ;main.c: 85: if(!PORTDbits.RD3){
   613  001432  B683               	btfsc	3971,3,c	;volatile
   614  001434  D7E2               	goto	l1719
   615                           
   616                           ;main.c: 86: writeResult(2);
   617  001436  0E02               	movlw	2
   618  001438  EC64  F00C         	call	_writeResult
   619  00143C  D7DE               	goto	l1719
   620  00143E                     __end_of_main:
   621                           	opt stack 0
   622                           postinc0	equ	0xFEE
   623                           wreg	equ	0xFE8
   624                           status	equ	0xFD8
   625                           
   626 ;; *************** function _writeResult *****************
   627 ;; Defined at:
   628 ;;		line 58 in file "bufferhandler.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;  dev             1    wreg     unsigned char 
   631 ;; Auto vars:     Size  Location     Type
   632 ;;  dev             1   47[COMRAM] unsigned char 
   633 ;; Return value:  Size  Location     Type
   634 ;;                  1    wreg      void 
   635 ;; Registers used:
   636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   637 ;; Tracked objects:
   638 ;;		On entry : 0/0
   639 ;;		On exit  : 0/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   643 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   645 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   646 ;;Total ram usage:        1 bytes
   647 ;; Hardware stack levels used:    1
   648 ;; Hardware stack levels required when called:    5
   649 ;; This function calls:
   650 ;;		_wait_ms
   651 ;;		_writeString
   652 ;; This function is called by:
   653 ;;		_main
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text1
   658  0018C8                     __ptext1:
   659                           	opt stack 0
   660  0018C8                     _writeResult:
   661                           	opt stack 25
   662                           
   663                           ;incstack = 0
   664                           ;writeResult@dev stored from wreg
   665  0018C8  6E30               	movwf	writeResult@dev,c
   666                           
   667                           ;bufferhandler.c: 61: writeString(allDataString, dev);
   668  0018CA  0E00               	movlw	low _allDataString
   669  0018CC  6E28               	movwf	writeString@str,c
   670  0018CE  0E01               	movlw	high _allDataString
   671  0018D0  6E29               	movwf	writeString@str+1,c
   672  0018D2  C030  F02A         	movff	writeResult@dev,writeString@dev
   673  0018D6  ECE6  F00A         	call	_writeString	;wreg free
   674                           
   675                           ;bufferhandler.c: 62: wait_ms(1000);
   676  0018DA  0E03               	movlw	3
   677  0018DC  6E2F               	movwf	wait_ms@time+1,c
   678  0018DE  0EE8               	movlw	232
   679  0018E0  6E2E               	movwf	wait_ms@time,c
   680  0018E2  EC41  F00B         	call	_wait_ms	;wreg free
   681  0018E6  0012               	return		;funcret
   682  0018E8                     __end_of_writeResult:
   683                           	opt stack 0
   684                           postinc0	equ	0xFEE
   685                           wreg	equ	0xFE8
   686                           status	equ	0xFD8
   687                           
   688 ;; *************** function _writeString *****************
   689 ;; Defined at:
   690 ;;		line 97 in file "uart.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;  str             2   39[COMRAM] PTR unsigned char 
   693 ;;		 -> allDataString(70), STR_2(4), STR_1(5), 
   694 ;;  dev             1   41[COMRAM] unsigned char 
   695 ;; Auto vars:     Size  Location     Type
   696 ;;  i               2   44[COMRAM] int 
   697 ;; Return value:  Size  Location     Type
   698 ;;                  1    wreg      void 
   699 ;; Registers used:
   700 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   701 ;; Tracked objects:
   702 ;;		On entry : 0/0
   703 ;;		On exit  : 0/0
   704 ;;		Unchanged: 0/0
   705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   706 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   707 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   708 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   709 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   710 ;;Total ram usage:        7 bytes
   711 ;; Hardware stack levels used:    1
   712 ;; Hardware stack levels required when called:    4
   713 ;; This function calls:
   714 ;;		_UART_Write
   715 ;;		_strlen
   716 ;; This function is called by:
   717 ;;		_main
   718 ;;		_writeResult
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text2
   723  0015CC                     __ptext2:
   724                           	opt stack 0
   725  0015CC                     _writeString:
   726                           	opt stack 26
   727                           
   728                           ;uart.c: 99: for(int i = 0; i<strlen(str); i++)
   729                           
   730                           ;incstack = 0
   731  0015CC  0E00               	movlw	0
   732  0015CE  6E2E               	movwf	writeString@i+1,c
   733  0015D0  0E00               	movlw	0
   734  0015D2  6E2D               	movwf	writeString@i,c
   735  0015D4  D01D               	goto	l1395
   736  0015D6                     l1391:
   737                           
   738                           ;uart.c: 100: {
   739                           ;uart.c: 101: UART_Write(str[i], dev);
   740  0015D6  C02A  F022         	movff	writeString@dev,UART_Write@dev
   741  0015DA  502D               	movf	writeString@i,w,c
   742  0015DC  2428               	addwf	writeString@str,w,c
   743  0015DE  6E2B               	movwf	??_writeString& (0+255),c
   744  0015E0  502E               	movf	writeString@i+1,w,c
   745  0015E2  2029               	addwfc	writeString@str+1,w,c
   746  0015E4  6E2C               	movwf	(??_writeString+1)& (0+255),c
   747  0015E6  C02B  FFF6         	movff	??_writeString,tblptrl
   748  0015EA  C02C  FFF7         	movff	??_writeString+1,tblptrh
   749  0015EE  0E00               	movlw	low (__smallconst shr (0+16))
   750  0015F0  6EF8               	movwf	tblptru,c
   751  0015F2  0E0E               	movlw	(high __ramtop+-1)
   752  0015F4  64F7               	cpfsgt	tblptrh,c
   753  0015F6  D003               	bra	u627
   754  0015F8  0008               	tblrd		*
   755  0015FA  50F5               	movf	tablat,w,c
   756  0015FC  D005               	bra	u620
   757  0015FE                     u627:
   758  0015FE  CFF6 FFE9          	movff	tblptrl,fsr0l
   759  001602  CFF7 FFEA          	movff	tblptrh,fsr0h
   760  001606  50EF               	movf	indf0,w,c
   761  001608                     u620:
   762  001608  EC83  F00C         	call	_UART_Write
   763  00160C  4A2D               	infsnz	writeString@i,f,c
   764  00160E  2A2E               	incf	writeString@i+1,f,c
   765  001610                     l1395:
   766  001610  C028  F022         	movff	writeString@str,strlen@s
   767  001614  C029  F023         	movff	writeString@str+1,strlen@s+1
   768  001618  EC97  F00B         	call	_strlen	;wreg free
   769  00161C  5022               	movf	?_strlen,w,c
   770  00161E  5C2D               	subwf	writeString@i,w,c
   771  001620  5023               	movf	?_strlen+1,w,c
   772  001622  582E               	subwfb	writeString@i+1,w,c
   773  001624  B0D8               	btfsc	status,0,c
   774  001626  0012               	return	
   775  001628  D7D6               	goto	l1391
   776  00162A                     __end_of_writeString:
   777                           	opt stack 0
   778                           tblptru	equ	0xFF8
   779                           tblptrh	equ	0xFF7
   780                           tblptrl	equ	0xFF6
   781                           tablat	equ	0xFF5
   782                           indf0	equ	0xFEF
   783                           postinc0	equ	0xFEE
   784                           fsr0h	equ	0xFEA
   785                           fsr0l	equ	0xFE9
   786                           wreg	equ	0xFE8
   787                           status	equ	0xFD8
   788                           
   789 ;; *************** function _UART_Write *****************
   790 ;; Defined at:
   791 ;;		line 61 in file "uart.c"
   792 ;; Parameters:    Size  Location     Type
   793 ;;  data            1    wreg     unsigned char 
   794 ;;  dev             1   33[COMRAM] unsigned char 
   795 ;; Auto vars:     Size  Location     Type
   796 ;;  data            1   34[COMRAM] unsigned char 
   797 ;; Return value:  Size  Location     Type
   798 ;;                  1    wreg      void 
   799 ;; Registers used:
   800 ;;		wreg, status,2, status,0
   801 ;; Tracked objects:
   802 ;;		On entry : 0/0
   803 ;;		On exit  : 0/0
   804 ;;		Unchanged: 0/0
   805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   806 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   807 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   809 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   810 ;;Total ram usage:        2 bytes
   811 ;; Hardware stack levels used:    1
   812 ;; Hardware stack levels required when called:    3
   813 ;; This function calls:
   814 ;;		Nothing
   815 ;; This function is called by:
   816 ;;		_main
   817 ;;		_writeString
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           	psect	text3
   822  001906                     __ptext3:
   823                           	opt stack 0
   824  001906                     _UART_Write:
   825                           	opt stack 26
   826                           
   827                           ;incstack = 0
   828                           ;UART_Write@data stored from wreg
   829  001906  6E23               	movwf	UART_Write@data,c
   830                           
   831                           ;uart.c: 63: if (dev == 1)
   832  001908  0422               	decf	UART_Write@dev,w,c
   833  00190A  A4D8               	btfss	status,2,c
   834  00190C  D005               	goto	l150
   835  00190E                     l146:
   836  00190E  A2AD               	btfss	4013,1,c	;volatile
   837  001910  D7FE               	goto	l146
   838                           
   839                           ;uart.c: 66: TXREG1 = data;
   840  001912  C023  FFAE         	movff	UART_Write@data,4014	;volatile
   841                           
   842                           ;uart.c: 67: }
   843  001916  0012               	return	
   844  001918                     l150:
   845  001918  A2A8               	btfss	4008,1,c	;volatile
   846  00191A  D7FE               	goto	l150
   847                           
   848                           ;uart.c: 71: TXREG2 = data;
   849  00191C  C023  FFA9         	movff	UART_Write@data,4009	;volatile
   850  001920  0012               	return	
   851  001922                     __end_of_UART_Write:
   852                           	opt stack 0
   853                           tblptru	equ	0xFF8
   854                           tblptrh	equ	0xFF7
   855                           tblptrl	equ	0xFF6
   856                           tablat	equ	0xFF5
   857                           indf0	equ	0xFEF
   858                           postinc0	equ	0xFEE
   859                           fsr0h	equ	0xFEA
   860                           fsr0l	equ	0xFE9
   861                           wreg	equ	0xFE8
   862                           status	equ	0xFD8
   863                           
   864 ;; *************** function _wait_ms *****************
   865 ;; Defined at:
   866 ;;		line 35 in file "system.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;  time            2   45[COMRAM] int 
   869 ;; Auto vars:     Size  Location     Type
   870 ;;		None
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      void 
   873 ;; Registers used:
   874 ;;		wreg, status,2, status,0, cstack
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   880 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   883 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   884 ;;Total ram usage:        2 bytes
   885 ;; Hardware stack levels used:    1
   886 ;; Hardware stack levels required when called:    4
   887 ;; This function calls:
   888 ;;		___lmul
   889 ;; This function is called by:
   890 ;;		_main
   891 ;;		_writeResult
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           	psect	text4
   896  001682                     __ptext4:
   897                           	opt stack 0
   898  001682                     _wait_ms:
   899                           	opt stack 25
   900                           
   901                           ;system.c: 37: static long timel = 0;
   902                           ;system.c: 38: timel = time * 1000l;
   903                           
   904                           ;incstack = 0
   905  001682  C02E  F022         	movff	wait_ms@time,___lmul@multiplier
   906  001686  C02F  F023         	movff	wait_ms@time+1,___lmul@multiplier+1
   907  00168A  0E00               	movlw	0
   908  00168C  BE23               	btfsc	___lmul@multiplier+1,7,c
   909  00168E  0EFF               	movlw	-1
   910  001690  6E24               	movwf	___lmul@multiplier+2,c
   911  001692  6E25               	movwf	___lmul@multiplier+3,c
   912  001694  0EE8               	movlw	232
   913  001696  6E26               	movwf	___lmul@multiplicand,c
   914  001698  0E03               	movlw	3
   915  00169A  6E27               	movwf	___lmul@multiplicand+1,c
   916  00169C  0E00               	movlw	0
   917  00169E  6E28               	movwf	___lmul@multiplicand+2,c
   918  0016A0  0E00               	movlw	0
   919  0016A2  6E29               	movwf	___lmul@multiplicand+3,c
   920  0016A4  EC6C  F00B         	call	___lmul	;wreg free
   921  0016A8  C022  F033         	movff	?___lmul,wait_ms@timel
   922  0016AC  C023  F034         	movff	?___lmul+1,wait_ms@timel+1
   923  0016B0  C024  F035         	movff	?___lmul+2,wait_ms@timel+2
   924  0016B4  C025  F036         	movff	?___lmul+3,wait_ms@timel+3
   925                           
   926                           ;system.c: 39: for( ; timel; timel--);
   927  0016B8  D008               	goto	l73
   928  0016BA                     l1399:
   929  0016BA  0EFF               	movlw	255
   930  0016BC  2633               	addwf	wait_ms@timel,f,c
   931  0016BE  0EFF               	movlw	255
   932  0016C0  2234               	addwfc	wait_ms@timel+1,f,c
   933  0016C2  0EFF               	movlw	255
   934  0016C4  2235               	addwfc	wait_ms@timel+2,f,c
   935  0016C6  0EFF               	movlw	255
   936  0016C8  2236               	addwfc	wait_ms@timel+3,f,c
   937  0016CA                     l73:
   938  0016CA  5033               	movf	wait_ms@timel,w,c
   939  0016CC  1034               	iorwf	wait_ms@timel+1,w,c
   940  0016CE  1035               	iorwf	wait_ms@timel+2,w,c
   941  0016D0  1036               	iorwf	wait_ms@timel+3,w,c
   942  0016D2  B4D8               	btfsc	status,2,c
   943  0016D4  0012               	return	
   944  0016D6  D7F1               	goto	l1399
   945  0016D8                     __end_of_wait_ms:
   946                           	opt stack 0
   947                           tblptru	equ	0xFF8
   948                           tblptrh	equ	0xFF7
   949                           tblptrl	equ	0xFF6
   950                           tablat	equ	0xFF5
   951                           indf0	equ	0xFEF
   952                           postinc0	equ	0xFEE
   953                           fsr0h	equ	0xFEA
   954                           fsr0l	equ	0xFE9
   955                           wreg	equ	0xFE8
   956                           status	equ	0xFD8
   957                           
   958 ;; *************** function ___lmul *****************
   959 ;; Defined at:
   960 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;  multiplier      4   33[COMRAM] unsigned long 
   963 ;;  multiplicand    4   37[COMRAM] unsigned long 
   964 ;; Auto vars:     Size  Location     Type
   965 ;;  product         4   41[COMRAM] unsigned long 
   966 ;; Return value:  Size  Location     Type
   967 ;;                  4   33[COMRAM] unsigned long 
   968 ;; Registers used:
   969 ;;		wreg, status,2, status,0
   970 ;; Tracked objects:
   971 ;;		On entry : 0/0
   972 ;;		On exit  : 0/0
   973 ;;		Unchanged: 0/0
   974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   975 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   976 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   978 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   979 ;;Total ram usage:       12 bytes
   980 ;; Hardware stack levels used:    1
   981 ;; Hardware stack levels required when called:    3
   982 ;; This function calls:
   983 ;;		Nothing
   984 ;; This function is called by:
   985 ;;		_wait_ms
   986 ;; This function uses a non-reentrant model
   987 ;;
   988                           
   989                           	psect	text5
   990  0016D8                     __ptext5:
   991                           	opt stack 0
   992  0016D8                     ___lmul:
   993                           	opt stack 25
   994                           
   995                           ;incstack = 0
   996  0016D8  0E00               	movlw	0
   997  0016DA  6E2A               	movwf	___lmul@product,c
   998  0016DC  0E00               	movlw	0
   999  0016DE  6E2B               	movwf	___lmul@product+1,c
  1000  0016E0  0E00               	movlw	0
  1001  0016E2  6E2C               	movwf	___lmul@product+2,c
  1002  0016E4  0E00               	movlw	0
  1003  0016E6  6E2D               	movwf	___lmul@product+3,c
  1004  0016E8                     l1381:
  1005  0016E8  A022               	btfss	___lmul@multiplier,0,c
  1006  0016EA  D008               	goto	l1385
  1007  0016EC  5026               	movf	___lmul@multiplicand,w,c
  1008  0016EE  262A               	addwf	___lmul@product,f,c
  1009  0016F0  5027               	movf	___lmul@multiplicand+1,w,c
  1010  0016F2  222B               	addwfc	___lmul@product+1,f,c
  1011  0016F4  5028               	movf	___lmul@multiplicand+2,w,c
  1012  0016F6  222C               	addwfc	___lmul@product+2,f,c
  1013  0016F8  5029               	movf	___lmul@multiplicand+3,w,c
  1014  0016FA  222D               	addwfc	___lmul@product+3,f,c
  1015  0016FC                     l1385:
  1016  0016FC  90D8               	bcf	status,0,c
  1017  0016FE  3626               	rlcf	___lmul@multiplicand,f,c
  1018  001700  3627               	rlcf	___lmul@multiplicand+1,f,c
  1019  001702  3628               	rlcf	___lmul@multiplicand+2,f,c
  1020  001704  3629               	rlcf	___lmul@multiplicand+3,f,c
  1021  001706  90D8               	bcf	status,0,c
  1022  001708  3225               	rrcf	___lmul@multiplier+3,f,c
  1023  00170A  3224               	rrcf	___lmul@multiplier+2,f,c
  1024  00170C  3223               	rrcf	___lmul@multiplier+1,f,c
  1025  00170E  3222               	rrcf	___lmul@multiplier,f,c
  1026  001710  5022               	movf	___lmul@multiplier,w,c
  1027  001712  1023               	iorwf	___lmul@multiplier+1,w,c
  1028  001714  1024               	iorwf	___lmul@multiplier+2,w,c
  1029  001716  1025               	iorwf	___lmul@multiplier+3,w,c
  1030  001718  A4D8               	btfss	status,2,c
  1031  00171A  D7E6               	goto	l1381
  1032  00171C  C02A  F022         	movff	___lmul@product,?___lmul
  1033  001720  C02B  F023         	movff	___lmul@product+1,?___lmul+1
  1034  001724  C02C  F024         	movff	___lmul@product+2,?___lmul+2
  1035  001728  C02D  F025         	movff	___lmul@product+3,?___lmul+3
  1036  00172C  0012               	return		;funcret
  1037  00172E                     __end_of___lmul:
  1038                           	opt stack 0
  1039                           tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           indf0	equ	0xFEF
  1044                           postinc0	equ	0xFEE
  1045                           fsr0h	equ	0xFEA
  1046                           fsr0l	equ	0xFE9
  1047                           wreg	equ	0xFE8
  1048                           status	equ	0xFD8
  1049                           
  1050 ;; *************** function _parseString *****************
  1051 ;; Defined at:
  1052 ;;		line 94 in file "bufferhandler.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;		None
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;  i               2   15[BANK0 ] int 
  1057 ;;  n               2   21[BANK0 ] int 
  1058 ;;  tmp             2   19[BANK0 ] int 
  1059 ;;  count           2   17[BANK0 ] int 
  1060 ;;  socEndPos       2   13[BANK0 ] int 
  1061 ;;  socStartPos     2   11[BANK0 ] int 
  1062 ;;  k               2    8[BANK0 ] int 
  1063 ;;  chgStart        2    6[BANK0 ] int 
  1064 ;;  socSize         2    4[BANK0 ] int 
  1065 ;;  parsedString    2    2[BANK0 ] int 
  1066 ;;  chgStop         2    0[BANK0 ] int 
  1067 ;;  CHG             1   10[BANK0 ] unsigned char 
  1068 ;; Return value:  Size  Location     Type
  1069 ;;                  1    wreg      unsigned char 
  1070 ;; Registers used:
  1071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1072 ;; Tracked objects:
  1073 ;;		On entry : 0/0
  1074 ;;		On exit  : 0/0
  1075 ;;		Unchanged: 0/0
  1076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1078 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1079 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1080 ;;      Totals:         2      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1081 ;;Total ram usage:       25 bytes
  1082 ;; Hardware stack levels used:    1
  1083 ;; Hardware stack levels required when called:    5
  1084 ;; This function calls:
  1085 ;;		___awdiv
  1086 ;;		___awmod
  1087 ;;		_lenHelper
  1088 ;;		_transformToTwoDigitNumber
  1089 ;; This function is called by:
  1090 ;;		_main
  1091 ;; This function uses a non-reentrant model
  1092 ;;
  1093                           
  1094                           	psect	text6
  1095  000F18                     __ptext6:
  1096                           	opt stack 0
  1097  000F18                     _parseString:
  1098                           	opt stack 25
  1099                           
  1100                           ;bufferhandler.c: 99: int socStartPos = positions[8]+1;
  1101                           
  1102                           ;incstack = 0
  1103  000F18  0E01               	movlw	1
  1104  000F1A  0100               	movlb	0	; () banked
  1105  000F1C  2570               	addwf	(_positions+16)& (0+255),w,b
  1106  000F1E  0100               	movlb	0	; () banked
  1107  000F20  6FE7               	movwf	parseString@socStartPos& (0+255),b
  1108  000F22  0E00               	movlw	0
  1109  000F24  0100               	movlb	0	; () banked
  1110  000F26  2171               	addwfc	(_positions+17)& (0+255),w,b
  1111  000F28  0100               	movlb	0	; () banked
  1112  000F2A  6FE8               	movwf	(parseString@socStartPos+1)& (0+255),b
  1113                           
  1114                           ;bufferhandler.c: 100: int socEndPos = positions[9]-1;
  1115  000F2C  0EFF               	movlw	255
  1116  000F2E  0100               	movlb	0	; () banked
  1117  000F30  2572               	addwf	(_positions+18)& (0+255),w,b
  1118  000F32  0100               	movlb	0	; () banked
  1119  000F34  6FE9               	movwf	parseString@socEndPos& (0+255),b
  1120  000F36  0EFF               	movlw	255
  1121  000F38  0100               	movlb	0	; () banked
  1122  000F3A  2173               	addwfc	(_positions+19)& (0+255),w,b
  1123  000F3C  0100               	movlb	0	; () banked
  1124  000F3E  6FEA               	movwf	(parseString@socEndPos+1)& (0+255),b
  1125                           
  1126                           ;bufferhandler.c: 101: int socSize = (socEndPos - socStartPos)+1;
  1127  000F40  C0E7  F030         	movff	parseString@socStartPos,??_parseString
  1128  000F44  C0E8  F031         	movff	parseString@socStartPos+1,??_parseString+1
  1129  000F48  1E30               	comf	??_parseString,f,c
  1130  000F4A  1E31               	comf	??_parseString+1,f,c
  1131  000F4C  4A30               	infsnz	??_parseString,f,c
  1132  000F4E  2A31               	incf	??_parseString+1,f,c
  1133  000F50  0100               	movlb	0	; () banked
  1134  000F52  51E9               	movf	parseString@socEndPos& (0+255),w,b
  1135  000F54  2630               	addwf	??_parseString,f,c
  1136  000F56  0100               	movlb	0	; () banked
  1137  000F58  51EA               	movf	(parseString@socEndPos+1)& (0+255),w,b
  1138  000F5A  2231               	addwfc	??_parseString+1,f,c
  1139  000F5C  0E01               	movlw	1
  1140  000F5E  2430               	addwf	??_parseString,w,c
  1141  000F60  0100               	movlb	0	; () banked
  1142  000F62  6FE0               	movwf	parseString@socSize& (0+255),b
  1143  000F64  0E00               	movlw	0
  1144  000F66  2031               	addwfc	??_parseString+1,w,c
  1145  000F68  0100               	movlb	0	; () banked
  1146  000F6A  6FE1               	movwf	(parseString@socSize+1)& (0+255),b
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;bufferhandler.c: 104: int k = 0;
  1150  000F6C  0E00               	movlw	0
  1151  000F6E  0100               	movlb	0	; () banked
  1152  000F70  6FE5               	movwf	(parseString@k+1)& (0+255),b
  1153  000F72  0E00               	movlw	0
  1154  000F74  6FE4               	movwf	parseString@k& (0+255),b
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;bufferhandler.c: 105: for(int i = socStartPos; i<=socEndPos; i++){
  1158  000F76  C0E7  F0EB         	movff	parseString@socStartPos,parseString@i
  1159  000F7A  C0E8  F0EC         	movff	parseString@socStartPos+1,parseString@i+1
  1160  000F7E  D020               	goto	l1617
  1161  000F80                     l1611:
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;bufferhandler.c: 106: SOC[k] = allDataString[i];
  1165  000F80  0E00               	movlw	low _allDataString
  1166  000F82  0100               	movlb	0	; () banked
  1167  000F84  25EB               	addwf	parseString@i& (0+255),w,b
  1168  000F86  6ED9               	movwf	fsr2l,c
  1169  000F88  0E01               	movlw	high _allDataString
  1170  000F8A  0100               	movlb	0	; () banked
  1171  000F8C  21EC               	addwfc	(parseString@i+1)& (0+255),w,b
  1172  000F8E  6EDA               	movwf	fsr2h,c
  1173  000F90  50DF               	movf	indf2,w,c
  1174  000F92  6E30               	movwf	??_parseString& (0+255),c
  1175  000F94  6A31               	clrf	(??_parseString+1)& (0+255),c
  1176  000F96  90D8               	bcf	status,0,c
  1177  000F98  0100               	movlb	0	; () banked
  1178  000F9A  35E4               	rlcf	parseString@k& (0+255),w,b
  1179  000F9C  6ED9               	movwf	fsr2l,c
  1180  000F9E  0100               	movlb	0	; () banked
  1181  000FA0  35E5               	rlcf	(parseString@k+1)& (0+255),w,b
  1182  000FA2  6EDA               	movwf	fsr2h,c
  1183  000FA4  0ED6               	movlw	low _SOC
  1184  000FA6  26D9               	addwf	fsr2l,f,c
  1185  000FA8  0E00               	movlw	high _SOC
  1186  000FAA  22DA               	addwfc	fsr2h,f,c
  1187  000FAC  C030  FFDE         	movff	??_parseString,postinc2
  1188  000FB0  C031  FFDD         	movff	??_parseString+1,postdec2
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;bufferhandler.c: 107: k++;
  1192  000FB4  0100               	movlb	0	; () banked
  1193  000FB6  4BE4               	infsnz	parseString@k& (0+255),f,b
  1194  000FB8  2BE5               	incf	(parseString@k+1)& (0+255),f,b
  1195                           
  1196                           ; BSR set to: 0
  1197  000FBA  0100               	movlb	0	; () banked
  1198  000FBC  4BEB               	infsnz	parseString@i& (0+255),f,b
  1199  000FBE  2BEC               	incf	(parseString@i+1)& (0+255),f,b
  1200  000FC0                     l1617:
  1201                           
  1202                           ; BSR set to: 0
  1203  000FC0  0100               	movlb	0	; () banked
  1204  000FC2  51EB               	movf	parseString@i& (0+255),w,b
  1205  000FC4  0100               	movlb	0	; () banked
  1206  000FC6  5DE9               	subwf	parseString@socEndPos& (0+255),w,b
  1207  000FC8  0100               	movlb	0	; () banked
  1208  000FCA  51EA               	movf	(parseString@socEndPos+1)& (0+255),w,b
  1209  000FCC  0A80               	xorlw	128
  1210  000FCE  6E30               	movwf	??_parseString& (0+255),c
  1211  000FD0  0100               	movlb	0	; () banked
  1212  000FD2  51EC               	movf	(parseString@i+1)& (0+255),w,b
  1213  000FD4  0A80               	xorlw	128
  1214  000FD6  5830               	subwfb	??_parseString& (0+255),w,c
  1215  000FD8  B0D8               	btfsc	status,0,c
  1216  000FDA  D7D2               	goto	l1611
  1217                           
  1218                           ; BSR set to: 0
  1219                           ;bufferhandler.c: 108: }
  1220                           ;bufferhandler.c: 110: int tmp = transformToTwoDigitNumber(SOC, socSize);
  1221                           
  1222                           ; BSR set to: 0
  1223  000FDC  0ED6               	movlw	low _SOC
  1224  000FDE  6E28               	movwf	transformToTwoDigitNumber@number,c
  1225  000FE0  0E00               	movlw	high _SOC
  1226  000FE2  6E29               	movwf	transformToTwoDigitNumber@number+1,c
  1227  000FE4  C0E0  F02A         	movff	parseString@socSize,transformToTwoDigitNumber@size
  1228  000FE8  C0E1  F02B         	movff	parseString@socSize+1,transformToTwoDigitNumber@size+1
  1229  000FEC  EC3F  F009         	call	_transformToTwoDigitNumber	;wreg free
  1230  000FF0  C028  F0EF         	movff	?_transformToTwoDigitNumber,parseString@tmp
  1231  000FF4  C029  F0F0         	movff	?_transformToTwoDigitNumber+1,parseString@tmp+1
  1232                           
  1233                           ;bufferhandler.c: 113: int count = lenHelper(tmp) - 1;
  1234  000FF8  C0EF  F022         	movff	parseString@tmp,lenHelper@x
  1235  000FFC  C0F0  F023         	movff	parseString@tmp+1,lenHelper@x+1
  1236  001000  EC15  F00B         	call	_lenHelper	;wreg free
  1237  001004  0EFF               	movlw	255
  1238  001006  2422               	addwf	?_lenHelper,w,c
  1239  001008  0100               	movlb	0	; () banked
  1240  00100A  6FED               	movwf	parseString@count& (0+255),b
  1241  00100C  0EFF               	movlw	255
  1242  00100E  2023               	addwfc	?_lenHelper+1,w,c
  1243  001010  0100               	movlb	0	; () banked
  1244  001012  6FEE               	movwf	(parseString@count+1)& (0+255),b
  1245                           
  1246                           ;bufferhandler.c: 114: while(tmp > 0){
  1247  001014  D040               	goto	l1629
  1248  001016                     l1623:
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;bufferhandler.c: 115: toCharArray[count] = tmp%10;
  1252  001016  C0EF  F022         	movff	parseString@tmp,___awmod@dividend
  1253  00101A  C0F0  F023         	movff	parseString@tmp+1,___awmod@dividend+1
  1254  00101E  0E00               	movlw	0
  1255  001020  6E25               	movwf	___awmod@divisor+1,c
  1256  001022  0E0A               	movlw	10
  1257  001024  6E24               	movwf	___awmod@divisor,c
  1258  001026  ECAE  F00A         	call	___awmod	;wreg free
  1259  00102A  90D8               	bcf	status,0,c
  1260  00102C  0100               	movlb	0	; () banked
  1261  00102E  35ED               	rlcf	parseString@count& (0+255),w,b
  1262  001030  6ED9               	movwf	fsr2l,c
  1263  001032  0100               	movlb	0	; () banked
  1264  001034  35EE               	rlcf	(parseString@count+1)& (0+255),w,b
  1265  001036  6EDA               	movwf	fsr2h,c
  1266  001038  0E87               	movlw	low _toCharArray
  1267  00103A  26D9               	addwf	fsr2l,f,c
  1268  00103C  0E00               	movlw	high _toCharArray
  1269  00103E  22DA               	addwfc	fsr2h,f,c
  1270  001040  C022  FFDE         	movff	?___awmod,postinc2
  1271  001044  C023  FFDD         	movff	?___awmod+1,postdec2
  1272                           
  1273                           ;bufferhandler.c: 116: charSOC[count] = (tmp%10)+48;
  1274  001048  0E8D               	movlw	low _charSOC
  1275  00104A  0100               	movlb	0	; () banked
  1276  00104C  25ED               	addwf	parseString@count& (0+255),w,b
  1277  00104E  6ED9               	movwf	fsr2l,c
  1278  001050  0E00               	movlw	high _charSOC
  1279  001052  0100               	movlb	0	; () banked
  1280  001054  21EE               	addwfc	(parseString@count+1)& (0+255),w,b
  1281  001056  6EDA               	movwf	fsr2h,c
  1282  001058  C0EF  F022         	movff	parseString@tmp,___awmod@dividend
  1283  00105C  C0F0  F023         	movff	parseString@tmp+1,___awmod@dividend+1
  1284  001060  0E00               	movlw	0
  1285  001062  6E25               	movwf	___awmod@divisor+1,c
  1286  001064  0E0A               	movlw	10
  1287  001066  6E24               	movwf	___awmod@divisor,c
  1288  001068  ECAE  F00A         	call	___awmod	;wreg free
  1289  00106C  5022               	movf	?___awmod,w,c
  1290  00106E  0F30               	addlw	48
  1291  001070  6EDF               	movwf	indf2,c
  1292                           
  1293                           ;bufferhandler.c: 117: tmp /= 10;
  1294  001072  C0EF  F022         	movff	parseString@tmp,___awdiv@dividend
  1295  001076  C0F0  F023         	movff	parseString@tmp+1,___awdiv@dividend+1
  1296  00107A  0E00               	movlw	0
  1297  00107C  6E25               	movwf	___awdiv@divisor+1,c
  1298  00107E  0E0A               	movlw	10
  1299  001080  6E24               	movwf	___awdiv@divisor,c
  1300  001082  EC6C  F00A         	call	___awdiv	;wreg free
  1301  001086  C022  F0EF         	movff	?___awdiv,parseString@tmp
  1302  00108A  C023  F0F0         	movff	?___awdiv+1,parseString@tmp+1
  1303                           
  1304                           ;bufferhandler.c: 118: count --;
  1305  00108E  0100               	movlb	0	; () banked
  1306  001090  07ED               	decf	parseString@count& (0+255),f,b
  1307  001092  A0D8               	btfss	status,0,c
  1308  001094  07EE               	decf	(parseString@count+1)& (0+255),f,b
  1309  001096                     l1629:
  1310                           
  1311                           ; BSR set to: 0
  1312  001096  0100               	movlb	0	; () banked
  1313  001098  BFF0               	btfsc	(parseString@tmp+1)& (0+255),7,b
  1314  00109A  D007               	goto	l1631
  1315  00109C  0100               	movlb	0	; () banked
  1316  00109E  51F0               	movf	(parseString@tmp+1)& (0+255),w,b
  1317  0010A0  E1BA               	bnz	l1623
  1318  0010A2  0100               	movlb	0	; () banked
  1319  0010A4  05EF               	decf	parseString@tmp& (0+255),w,b
  1320  0010A6  B0D8               	btfsc	status,0,c
  1321  0010A8  D7B6               	goto	l1623
  1322  0010AA                     l1631:
  1323                           
  1324                           ; BSR set to: 0
  1325                           ;bufferhandler.c: 119: }
  1326                           ;bufferhandler.c: 123: int chgStart = positions[6] + 1;
  1327  0010AA  0E01               	movlw	1
  1328  0010AC  0100               	movlb	0	; () banked
  1329  0010AE  256C               	addwf	(_positions+12)& (0+255),w,b
  1330  0010B0  0100               	movlb	0	; () banked
  1331  0010B2  6FE2               	movwf	parseString@chgStart& (0+255),b
  1332  0010B4  0E00               	movlw	0
  1333  0010B6  0100               	movlb	0	; () banked
  1334  0010B8  216D               	addwfc	(_positions+13)& (0+255),w,b
  1335  0010BA  0100               	movlb	0	; () banked
  1336  0010BC  6FE3               	movwf	(parseString@chgStart+1)& (0+255),b
  1337                           
  1338                           ;bufferhandler.c: 124: int chgStop = positions[7] - 1;
  1339  0010BE  0EFF               	movlw	255
  1340  0010C0  0100               	movlb	0	; () banked
  1341  0010C2  256E               	addwf	(_positions+14)& (0+255),w,b
  1342  0010C4  0100               	movlb	0	; () banked
  1343  0010C6  6FDC               	movwf	parseString@chgStop& (0+255),b
  1344  0010C8  0EFF               	movlw	255
  1345  0010CA  0100               	movlb	0	; () banked
  1346  0010CC  216F               	addwfc	(_positions+15)& (0+255),w,b
  1347  0010CE  0100               	movlb	0	; () banked
  1348  0010D0  6FDD               	movwf	(parseString@chgStop+1)& (0+255),b
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;bufferhandler.c: 127: char CHG = '0';
  1352  0010D2  0E30               	movlw	48
  1353  0010D4  0100               	movlb	0	; () banked
  1354  0010D6  6FE6               	movwf	parseString@CHG& (0+255),b
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;bufferhandler.c: 129: if(allDataString[chgStart] == 0x2D){
  1358  0010D8  0E00               	movlw	low _allDataString
  1359  0010DA  0100               	movlb	0	; () banked
  1360  0010DC  25E2               	addwf	parseString@chgStart& (0+255),w,b
  1361  0010DE  6ED9               	movwf	fsr2l,c
  1362  0010E0  0E01               	movlw	high _allDataString
  1363  0010E2  0100               	movlb	0	; () banked
  1364  0010E4  21E3               	addwfc	(parseString@chgStart+1)& (0+255),w,b
  1365  0010E6  6EDA               	movwf	fsr2h,c
  1366  0010E8  0E2D               	movlw	45
  1367  0010EA  18DE               	xorwf	postinc2,w,c
  1368  0010EC  A4D8               	btfss	status,2,c
  1369  0010EE  D003               	goto	l1639
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;bufferhandler.c: 130: CHG = '1';
  1373  0010F0  0E31               	movlw	49
  1374  0010F2  0100               	movlb	0	; () banked
  1375  0010F4  6FE6               	movwf	parseString@CHG& (0+255),b
  1376  0010F6                     l1639:
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;bufferhandler.c: 131: }
  1380                           ;bufferhandler.c: 136: int parsedStringSize = 13 + count;
  1381  0010F6  0E0D               	movlw	13
  1382  0010F8  0100               	movlb	0	; () banked
  1383  0010FA  25ED               	addwf	parseString@count& (0+255),w,b
  1384  0010FC  0100               	movlb	0	; () banked
  1385  0010FE  6FDE               	movwf	parseString@parsedStringSize& (0+255),b
  1386  001100  0E00               	movlw	0
  1387  001102  0100               	movlb	0	; () banked
  1388  001104  21EE               	addwfc	(parseString@count+1)& (0+255),w,b
  1389  001106  0100               	movlb	0	; () banked
  1390  001108  6FDF               	movwf	(parseString@parsedStringSize+1)& (0+255),b
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;bufferhandler.c: 137: int n = 4;
  1394  00110A  0E00               	movlw	0
  1395  00110C  0100               	movlb	0	; () banked
  1396  00110E  6FF2               	movwf	(parseString@n+1)& (0+255),b
  1397  001110  0E04               	movlw	4
  1398  001112  6FF1               	movwf	parseString@n& (0+255),b
  1399                           
  1400                           ; BSR set to: 0
  1401                           ;bufferhandler.c: 139: parsedString[0] = 'S';
  1402  001114  0E53               	movlw	83
  1403  001116  0100               	movlb	0	; () banked
  1404  001118  6F76               	movwf	_parsedString& (0+255),b
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;bufferhandler.c: 140: parsedString[1] = 'O';
  1408  00111A  0E4F               	movlw	79
  1409  00111C  0100               	movlb	0	; () banked
  1410  00111E  6F77               	movwf	(_parsedString+1)& (0+255),b
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;bufferhandler.c: 141: parsedString[2] = 'C';
  1414  001120  0E43               	movlw	67
  1415  001122  0100               	movlb	0	; () banked
  1416  001124  6F78               	movwf	(_parsedString+2)& (0+255),b
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;bufferhandler.c: 142: parsedString[3] = charSOC[0];
  1420  001126  C08D  F079         	movff	_charSOC,_parsedString+3
  1421                           
  1422                           ; BSR set to: 0
  1423                           ;bufferhandler.c: 143: if(count > 0){
  1424  00112A  0100               	movlb	0	; () banked
  1425  00112C  BFEE               	btfsc	(parseString@count+1)& (0+255),7,b
  1426  00112E  D00C               	goto	l1657
  1427  001130  0100               	movlb	0	; () banked
  1428  001132  51EE               	movf	(parseString@count+1)& (0+255),w,b
  1429  001134  E104               	bnz	u930
  1430  001136  0100               	movlb	0	; () banked
  1431  001138  05ED               	decf	parseString@count& (0+255),w,b
  1432  00113A  A0D8               	btfss	status,0,c
  1433  00113C  D005               	goto	l1657
  1434  00113E                     u930:
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;bufferhandler.c: 144: parsedString[4] = charSOC[1];
  1438  00113E  C08E  F07A         	movff	_charSOC+1,_parsedString+4
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;bufferhandler.c: 145: n ++;
  1442  001142  0100               	movlb	0	; () banked
  1443  001144  4BF1               	infsnz	parseString@n& (0+255),f,b
  1444  001146  2BF2               	incf	(parseString@n+1)& (0+255),f,b
  1445  001148                     l1657:
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;bufferhandler.c: 146: }
  1449                           ;bufferhandler.c: 147: parsedString[n] = ";";
  1450  001148  0E76               	movlw	low _parsedString
  1451  00114A  0100               	movlb	0	; () banked
  1452  00114C  25F1               	addwf	parseString@n& (0+255),w,b
  1453  00114E  6ED9               	movwf	fsr2l,c
  1454  001150  0E00               	movlw	high _parsedString
  1455  001152  0100               	movlb	0	; () banked
  1456  001154  21F2               	addwfc	(parseString@n+1)& (0+255),w,b
  1457  001156  6EDA               	movwf	fsr2h,c
  1458  001158  0E0A               	movlw	low STR_4
  1459  00115A  6EDF               	movwf	indf2,c
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;bufferhandler.c: 148: parsedString[n+1] = "C";
  1463  00115C  0E01               	movlw	1
  1464  00115E  0100               	movlb	0	; () banked
  1465  001160  25F1               	addwf	parseString@n& (0+255),w,b
  1466  001162  6E30               	movwf	??_parseString& (0+255),c
  1467  001164  0E00               	movlw	0
  1468  001166  0100               	movlb	0	; () banked
  1469  001168  21F2               	addwfc	(parseString@n+1)& (0+255),w,b
  1470  00116A  6E31               	movwf	(??_parseString+1)& (0+255),c
  1471  00116C  0E76               	movlw	low _parsedString
  1472  00116E  2430               	addwf	??_parseString,w,c
  1473  001170  6ED9               	movwf	fsr2l,c
  1474  001172  0E00               	movlw	high _parsedString
  1475  001174  2031               	addwfc	??_parseString+1,w,c
  1476  001176  6EDA               	movwf	fsr2h,c
  1477  001178  0E0E               	movlw	low STR_5
  1478  00117A  6EDF               	movwf	indf2,c
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;bufferhandler.c: 149: parsedString[n+2] = "H";
  1482  00117C  0E02               	movlw	2
  1483  00117E  0100               	movlb	0	; () banked
  1484  001180  25F1               	addwf	parseString@n& (0+255),w,b
  1485  001182  6E30               	movwf	??_parseString& (0+255),c
  1486  001184  0E00               	movlw	0
  1487  001186  0100               	movlb	0	; () banked
  1488  001188  21F2               	addwfc	(parseString@n+1)& (0+255),w,b
  1489  00118A  6E31               	movwf	(??_parseString+1)& (0+255),c
  1490  00118C  0E76               	movlw	low _parsedString
  1491  00118E  2430               	addwf	??_parseString,w,c
  1492  001190  6ED9               	movwf	fsr2l,c
  1493  001192  0E00               	movlw	high _parsedString
  1494  001194  2031               	addwfc	??_parseString+1,w,c
  1495  001196  6EDA               	movwf	fsr2h,c
  1496  001198  0E12               	movlw	low STR_6
  1497  00119A  6EDF               	movwf	indf2,c
  1498                           
  1499                           ; BSR set to: 0
  1500                           ;bufferhandler.c: 150: parsedString[n+3] = "G";
  1501  00119C  0E03               	movlw	3
  1502  00119E  0100               	movlb	0	; () banked
  1503  0011A0  25F1               	addwf	parseString@n& (0+255),w,b
  1504  0011A2  6E30               	movwf	??_parseString& (0+255),c
  1505  0011A4  0E00               	movlw	0
  1506  0011A6  0100               	movlb	0	; () banked
  1507  0011A8  21F2               	addwfc	(parseString@n+1)& (0+255),w,b
  1508  0011AA  6E31               	movwf	(??_parseString+1)& (0+255),c
  1509  0011AC  0E76               	movlw	low _parsedString
  1510  0011AE  2430               	addwf	??_parseString,w,c
  1511  0011B0  6ED9               	movwf	fsr2l,c
  1512  0011B2  0E00               	movlw	high _parsedString
  1513  0011B4  2031               	addwfc	??_parseString+1,w,c
  1514  0011B6  6EDA               	movwf	fsr2h,c
  1515  0011B8  0E10               	movlw	low STR_7
  1516  0011BA  6EDF               	movwf	indf2,c
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;bufferhandler.c: 151: parsedString[n+4] = CHG;
  1520  0011BC  0E04               	movlw	4
  1521  0011BE  0100               	movlb	0	; () banked
  1522  0011C0  25F1               	addwf	parseString@n& (0+255),w,b
  1523  0011C2  6E30               	movwf	??_parseString& (0+255),c
  1524  0011C4  0E00               	movlw	0
  1525  0011C6  0100               	movlb	0	; () banked
  1526  0011C8  21F2               	addwfc	(parseString@n+1)& (0+255),w,b
  1527  0011CA  6E31               	movwf	(??_parseString+1)& (0+255),c
  1528  0011CC  0E76               	movlw	low _parsedString
  1529  0011CE  2430               	addwf	??_parseString,w,c
  1530  0011D0  6ED9               	movwf	fsr2l,c
  1531  0011D2  0E00               	movlw	high _parsedString
  1532  0011D4  2031               	addwfc	??_parseString+1,w,c
  1533  0011D6  6EDA               	movwf	fsr2h,c
  1534  0011D8  C0E6  FFDF         	movff	parseString@CHG,indf2
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;bufferhandler.c: 152: parsedString[n+5] = ";";
  1538  0011DC  0E05               	movlw	5
  1539  0011DE  0100               	movlb	0	; () banked
  1540  0011E0  25F1               	addwf	parseString@n& (0+255),w,b
  1541  0011E2  6E30               	movwf	??_parseString& (0+255),c
  1542  0011E4  0E00               	movlw	0
  1543  0011E6  0100               	movlb	0	; () banked
  1544  0011E8  21F2               	addwfc	(parseString@n+1)& (0+255),w,b
  1545  0011EA  6E31               	movwf	(??_parseString+1)& (0+255),c
  1546  0011EC  0E76               	movlw	low _parsedString
  1547  0011EE  2430               	addwf	??_parseString,w,c
  1548  0011F0  6ED9               	movwf	fsr2l,c
  1549  0011F2  0E00               	movlw	high _parsedString
  1550  0011F4  2031               	addwfc	??_parseString+1,w,c
  1551  0011F6  6EDA               	movwf	fsr2h,c
  1552  0011F8  0E0A               	movlw	low STR_4
  1553  0011FA  6EDF               	movwf	indf2,c
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;bufferhandler.c: 153: parsedString[n+6] = "A";
  1557  0011FC  0E06               	movlw	6
  1558  0011FE  0100               	movlb	0	; () banked
  1559  001200  25F1               	addwf	parseString@n& (0+255),w,b
  1560  001202  6E30               	movwf	??_parseString& (0+255),c
  1561  001204  0E00               	movlw	0
  1562  001206  0100               	movlb	0	; () banked
  1563  001208  21F2               	addwfc	(parseString@n+1)& (0+255),w,b
  1564  00120A  6E31               	movwf	(??_parseString+1)& (0+255),c
  1565  00120C  0E76               	movlw	low _parsedString
  1566  00120E  2430               	addwf	??_parseString,w,c
  1567  001210  6ED9               	movwf	fsr2l,c
  1568  001212  0E00               	movlw	high _parsedString
  1569  001214  2031               	addwfc	??_parseString+1,w,c
  1570  001216  6EDA               	movwf	fsr2h,c
  1571  001218  0E0C               	movlw	low STR_9
  1572  00121A  6EDF               	movwf	indf2,c
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;bufferhandler.c: 154: parsedString[n+7] = "C";
  1576  00121C  0E07               	movlw	7
  1577  00121E  0100               	movlb	0	; () banked
  1578  001220  25F1               	addwf	parseString@n& (0+255),w,b
  1579  001222  6E30               	movwf	??_parseString& (0+255),c
  1580  001224  0E00               	movlw	0
  1581  001226  0100               	movlb	0	; () banked
  1582  001228  21F2               	addwfc	(parseString@n+1)& (0+255),w,b
  1583  00122A  6E31               	movwf	(??_parseString+1)& (0+255),c
  1584  00122C  0E76               	movlw	low _parsedString
  1585  00122E  2430               	addwf	??_parseString,w,c
  1586  001230  6ED9               	movwf	fsr2l,c
  1587  001232  0E00               	movlw	high _parsedString
  1588  001234  2031               	addwfc	??_parseString+1,w,c
  1589  001236  6EDA               	movwf	fsr2h,c
  1590  001238  0E0E               	movlw	low STR_5
  1591  00123A  6EDF               	movwf	indf2,c
  1592                           
  1593                           ; BSR set to: 0
  1594                           ;bufferhandler.c: 155: parsedString[n+8] = "K";
  1595  00123C  0E08               	movlw	8
  1596  00123E  0100               	movlb	0	; () banked
  1597  001240  25F1               	addwf	parseString@n& (0+255),w,b
  1598  001242  6E30               	movwf	??_parseString& (0+255),c
  1599  001244  0E00               	movlw	0
  1600  001246  0100               	movlb	0	; () banked
  1601  001248  21F2               	addwfc	(parseString@n+1)& (0+255),w,b
  1602  00124A  6E31               	movwf	(??_parseString+1)& (0+255),c
  1603  00124C  0E76               	movlw	low _parsedString
  1604  00124E  2430               	addwf	??_parseString,w,c
  1605  001250  6ED9               	movwf	fsr2l,c
  1606  001252  0E00               	movlw	high _parsedString
  1607  001254  2031               	addwfc	??_parseString+1,w,c
  1608  001256  6EDA               	movwf	fsr2h,c
  1609  001258  0E14               	movlw	low STR_11
  1610  00125A  6EDF               	movwf	indf2,c
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;bufferhandler.c: 156: parsedString[n+9] = ";";
  1614  00125C  0E09               	movlw	9
  1615  00125E  0100               	movlb	0	; () banked
  1616  001260  25F1               	addwf	parseString@n& (0+255),w,b
  1617  001262  6E30               	movwf	??_parseString& (0+255),c
  1618  001264  0E00               	movlw	0
  1619  001266  0100               	movlb	0	; () banked
  1620  001268  21F2               	addwfc	(parseString@n+1)& (0+255),w,b
  1621  00126A  6E31               	movwf	(??_parseString+1)& (0+255),c
  1622  00126C  0E76               	movlw	low _parsedString
  1623  00126E  2430               	addwf	??_parseString,w,c
  1624  001270  6ED9               	movwf	fsr2l,c
  1625  001272  0E00               	movlw	high _parsedString
  1626  001274  2031               	addwfc	??_parseString+1,w,c
  1627  001276  6EDA               	movwf	fsr2h,c
  1628  001278  0E0A               	movlw	low STR_4
  1629  00127A  6EDF               	movwf	indf2,c
  1630  00127C  0012               	return	
  1631  00127E                     __end_of_parseString:
  1632                           	opt stack 0
  1633                           tblptru	equ	0xFF8
  1634                           tblptrh	equ	0xFF7
  1635                           tblptrl	equ	0xFF6
  1636                           tablat	equ	0xFF5
  1637                           indf0	equ	0xFEF
  1638                           postinc0	equ	0xFEE
  1639                           fsr0h	equ	0xFEA
  1640                           fsr0l	equ	0xFE9
  1641                           wreg	equ	0xFE8
  1642                           indf2	equ	0xFDF
  1643                           postinc2	equ	0xFDE
  1644                           postdec2	equ	0xFDD
  1645                           fsr2h	equ	0xFDA
  1646                           fsr2l	equ	0xFD9
  1647                           status	equ	0xFD8
  1648                           
  1649 ;; *************** function _transformToTwoDigitNumber *****************
  1650 ;; Defined at:
  1651 ;;		line 176 in file "bufferhandler.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;  number          2   39[COMRAM] PTR int 
  1654 ;;		 -> SOC(6), 
  1655 ;;  size            2   41[COMRAM] int 
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;  result          2   45[COMRAM] int 
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  2   39[COMRAM] int 
  1660 ;; Registers used:
  1661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1667 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1668 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1669 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1670 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1671 ;;Total ram usage:        8 bytes
  1672 ;; Hardware stack levels used:    1
  1673 ;; Hardware stack levels required when called:    4
  1674 ;; This function calls:
  1675 ;;		___wmul
  1676 ;; This function is called by:
  1677 ;;		_parseString
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           	psect	text7
  1682  00127E                     __ptext7:
  1683                           	opt stack 0
  1684  00127E                     _transformToTwoDigitNumber:
  1685                           	opt stack 25
  1686                           
  1687                           ;bufferhandler.c: 178: int result = 0;
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;incstack = 0
  1691  00127E  0E00               	movlw	0
  1692  001280  6E2F               	movwf	transformToTwoDigitNumber@result+1,c
  1693  001282  0E00               	movlw	0
  1694  001284  6E2E               	movwf	transformToTwoDigitNumber@result,c
  1695                           
  1696                           ;bufferhandler.c: 179: switch(size){
  1697  001286  D075               	goto	l1437
  1698  001288                     l1403:
  1699                           
  1700                           ;bufferhandler.c: 181: if(number[0] >= 5){
  1701  001288  C028  FFD9         	movff	transformToTwoDigitNumber@number,fsr2l
  1702  00128C  C029  FFDA         	movff	transformToTwoDigitNumber@number+1,fsr2h
  1703  001290  0E01               	movlw	1
  1704  001292  BEDB               	btfsc	plusw2,7,c
  1705  001294  D00C               	goto	l1411
  1706  001296  0E01               	movlw	1
  1707  001298  50DB               	movf	plusw2,w,c
  1708  00129A  E104               	bnz	u650
  1709  00129C  0E05               	movlw	5
  1710  00129E  5CDE               	subwf	postinc2,w,c
  1711  0012A0  A0D8               	btfss	status,0,c
  1712  0012A2  D005               	goto	l1411
  1713  0012A4                     u650:
  1714                           
  1715                           ;bufferhandler.c: 182: return 1;
  1716  0012A4  0E00               	movlw	0
  1717  0012A6  6E29               	movwf	?_transformToTwoDigitNumber+1,c
  1718  0012A8  0E01               	movlw	1
  1719  0012AA  6E28               	movwf	?_transformToTwoDigitNumber,c
  1720  0012AC  0012               	return	
  1721  0012AE                     l1411:
  1722                           
  1723                           ;bufferhandler.c: 184: return 0;
  1724  0012AE  0E00               	movlw	0
  1725  0012B0  6E29               	movwf	?_transformToTwoDigitNumber+1,c
  1726  0012B2  0E00               	movlw	0
  1727  0012B4  D7FA               	goto	L1
  1728  0012B6                     l1415:
  1729                           
  1730                           ;bufferhandler.c: 187: result = number[0];
  1731  0012B6  C028  FFD9         	movff	transformToTwoDigitNumber@number,fsr2l
  1732  0012BA  C029  FFDA         	movff	transformToTwoDigitNumber@number+1,fsr2h
  1733  0012BE  CFDE F02E          	movff	postinc2,transformToTwoDigitNumber@result
  1734  0012C2  CFDD F02F          	movff	postdec2,transformToTwoDigitNumber@result+1
  1735                           
  1736                           ;bufferhandler.c: 188: if(number[1] >= 5){
  1737  0012C6  EE20 F002          	lfsr	2,2
  1738  0012CA  5028               	movf	transformToTwoDigitNumber@number,w,c
  1739  0012CC  26D9               	addwf	fsr2l,f,c
  1740  0012CE  5029               	movf	transformToTwoDigitNumber@number+1,w,c
  1741  0012D0  22DA               	addwfc	fsr2h,f,c
  1742  0012D2  0E01               	movlw	1
  1743  0012D4  BEDB               	btfsc	plusw2,7,c
  1744  0012D6  D00E               	goto	l262
  1745  0012D8  0E01               	movlw	1
  1746  0012DA  50DB               	movf	plusw2,w,c
  1747  0012DC  E104               	bnz	u660
  1748  0012DE  0E05               	movlw	5
  1749  0012E0  5CDE               	subwf	postinc2,w,c
  1750  0012E2  A0D8               	btfss	status,0,c
  1751  0012E4  D007               	goto	l262
  1752  0012E6                     u660:
  1753                           
  1754                           ;bufferhandler.c: 189: return result++;
  1755  0012E6  502E               	movf	transformToTwoDigitNumber@result,w,c
  1756  0012E8  6E28               	movwf	?_transformToTwoDigitNumber,c
  1757  0012EA  502F               	movf	transformToTwoDigitNumber@result+1,w,c
  1758  0012EC  6E29               	movwf	?_transformToTwoDigitNumber+1,c
  1759  0012EE  4A2E               	infsnz	transformToTwoDigitNumber@result,f,c
  1760  0012F0  2A2F               	incf	transformToTwoDigitNumber@result+1,f,c
  1761  0012F2  0012               	return	
  1762  0012F4                     l262:
  1763                           
  1764                           ;bufferhandler.c: 191: return result;
  1765  0012F4  C02E  F028         	movff	transformToTwoDigitNumber@result,?_transformToTwoDigitNumber
  1766  0012F8  C02F  F029         	movff	transformToTwoDigitNumber@result+1,?_transformToTwoDigitNumber+1
  1767  0012FC  0012               	return	
  1768  0012FE                     l1425:
  1769                           
  1770                           ;bufferhandler.c: 194: result = (number[0]*10)+(number[1]);
  1771  0012FE  EE20 F002          	lfsr	2,2
  1772  001302  5028               	movf	transformToTwoDigitNumber@number,w,c
  1773  001304  26D9               	addwf	fsr2l,f,c
  1774  001306  5029               	movf	transformToTwoDigitNumber@number+1,w,c
  1775  001308  22DA               	addwfc	fsr2h,f,c
  1776  00130A  CFDE F02C          	movff	postinc2,??_transformToTwoDigitNumber
  1777  00130E  CFDD F02D          	movff	postdec2,??_transformToTwoDigitNumber+1
  1778  001312  C028  FFD9         	movff	transformToTwoDigitNumber@number,fsr2l
  1779  001316  C029  FFDA         	movff	transformToTwoDigitNumber@number+1,fsr2h
  1780  00131A  CFDE F022          	movff	postinc2,___wmul@multiplier
  1781  00131E  CFDD F023          	movff	postdec2,___wmul@multiplier+1
  1782  001322  0E00               	movlw	0
  1783  001324  6E25               	movwf	___wmul@multiplicand+1,c
  1784  001326  0E0A               	movlw	10
  1785  001328  6E24               	movwf	___wmul@multiplicand,c
  1786  00132A  EC51  F00C         	call	___wmul	;wreg free
  1787  00132E  502C               	movf	??_transformToTwoDigitNumber,w,c
  1788  001330  2422               	addwf	?___wmul,w,c
  1789  001332  6E2E               	movwf	transformToTwoDigitNumber@result,c
  1790  001334  502D               	movf	??_transformToTwoDigitNumber+1,w,c
  1791  001336  2023               	addwfc	?___wmul+1,w,c
  1792  001338  6E2F               	movwf	transformToTwoDigitNumber@result+1,c
  1793                           
  1794                           ;bufferhandler.c: 195: if(number[2] >= 5){
  1795  00133A  EE20 F004          	lfsr	2,4
  1796  00133E  5028               	movf	transformToTwoDigitNumber@number,w,c
  1797  001340  26D9               	addwf	fsr2l,f,c
  1798  001342  5029               	movf	transformToTwoDigitNumber@number+1,w,c
  1799  001344  22DA               	addwfc	fsr2h,f,c
  1800  001346  0E01               	movlw	1
  1801  001348  BEDB               	btfsc	plusw2,7,c
  1802  00134A  D00E               	goto	l265
  1803  00134C  0E01               	movlw	1
  1804  00134E  50DB               	movf	plusw2,w,c
  1805  001350  E104               	bnz	u670
  1806  001352  0E05               	movlw	5
  1807  001354  5CDE               	subwf	postinc2,w,c
  1808  001356  A0D8               	btfss	status,0,c
  1809  001358  D007               	goto	l265
  1810  00135A                     u670:
  1811                           
  1812                           ;bufferhandler.c: 196: result++;
  1813  00135A  4A2E               	infsnz	transformToTwoDigitNumber@result,f,c
  1814  00135C  2A2F               	incf	transformToTwoDigitNumber@result+1,f,c
  1815                           
  1816                           ;bufferhandler.c: 197: return result;
  1817  00135E  C02E  F028         	movff	transformToTwoDigitNumber@result,?_transformToTwoDigitNumber
  1818  001362  C02F  F029         	movff	transformToTwoDigitNumber@result+1,?_transformToTwoDigitNumber+1
  1819                           
  1820                           ;bufferhandler.c: 198: }else{
  1821  001366  0012               	return	
  1822  001368                     l265:
  1823                           
  1824                           ;bufferhandler.c: 199: return result;
  1825  001368  C02E  F028         	movff	transformToTwoDigitNumber@result,?_transformToTwoDigitNumber
  1826  00136C  C02F  F029         	movff	transformToTwoDigitNumber@result+1,?_transformToTwoDigitNumber+1
  1827                           
  1828                           ;bufferhandler.c: 200: }
  1829                           ;bufferhandler.c: 201: }
  1830  001370  0012               	return	
  1831  001372                     l1437:
  1832  001372  C02A  F02C         	movff	transformToTwoDigitNumber@size,??_transformToTwoDigitNumber
  1833  001376  C02B  F02D         	movff	transformToTwoDigitNumber@size+1,??_transformToTwoDigitNumber+1
  1834                           
  1835                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1836                           ; Switch size 1, requested type "space"
  1837                           ; Number of cases is 1, Range of values is 0 to 0
  1838                           ; switch strategies available:
  1839                           ; Name         Instructions Cycles
  1840                           ; simple_byte            4     3 (average)
  1841                           ;	Chosen strategy is simple_byte
  1842  00137A  502D               	movf	??_transformToTwoDigitNumber+1,w,c
  1843  00137C  0A00               	xorlw	0	; case 0
  1844  00137E  A4D8               	btfss	status,2,c
  1845  001380  0012               	return	
  1846                           
  1847                           ; Switch size 1, requested type "space"
  1848                           ; Number of cases is 3, Range of values is 1 to 3
  1849                           ; switch strategies available:
  1850                           ; Name         Instructions Cycles
  1851                           ; simple_byte           10     6 (average)
  1852                           ;	Chosen strategy is simple_byte
  1853  001382  502C               	movf	??_transformToTwoDigitNumber,w,c
  1854  001384  0A01               	xorlw	1	; case 1
  1855  001386  B4D8               	btfsc	status,2,c
  1856  001388  D77F               	goto	l1403
  1857  00138A  0A03               	xorlw	3	; case 2
  1858  00138C  B4D8               	btfsc	status,2,c
  1859  00138E  D793               	goto	l1415
  1860  001390  0A01               	xorlw	1	; case 3
  1861  001392  A4D8               	btfss	status,2,c
  1862  001394  0012               	return	
  1863  001396  D7B3               	goto	l1425
  1864  001398                     __end_of_transformToTwoDigitNumber:
  1865                           	opt stack 0
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           indf0	equ	0xFEF
  1871                           postinc0	equ	0xFEE
  1872                           fsr0h	equ	0xFEA
  1873                           fsr0l	equ	0xFE9
  1874                           wreg	equ	0xFE8
  1875                           indf2	equ	0xFDF
  1876                           postinc2	equ	0xFDE
  1877                           postdec2	equ	0xFDD
  1878                           plusw2	equ	0xFDB
  1879                           fsr2h	equ	0xFDA
  1880                           fsr2l	equ	0xFD9
  1881                           status	equ	0xFD8
  1882                           
  1883 ;; *************** function ___wmul *****************
  1884 ;; Defined at:
  1885 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;  multiplier      2   33[COMRAM] unsigned int 
  1888 ;;  multiplicand    2   35[COMRAM] unsigned int 
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  product         2   37[COMRAM] unsigned int 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  2   33[COMRAM] unsigned int 
  1893 ;; Registers used:
  1894 ;;		wreg, status,2, status,0, prodl, prodh
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1900 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1901 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1903 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1904 ;;Total ram usage:        6 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:    3
  1907 ;; This function calls:
  1908 ;;		Nothing
  1909 ;; This function is called by:
  1910 ;;		_transformToTwoDigitNumber
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text8
  1915  0018A2                     __ptext8:
  1916                           	opt stack 0
  1917  0018A2                     ___wmul:
  1918                           	opt stack 25
  1919                           
  1920                           ;incstack = 0
  1921  0018A2  5022               	movf	___wmul@multiplier,w,c
  1922  0018A4  0224               	mulwf	___wmul@multiplicand,c
  1923  0018A6  CFF3 F026          	movff	prodl,___wmul@product
  1924  0018AA  CFF4 F027          	movff	prodh,___wmul@product+1
  1925  0018AE  5022               	movf	___wmul@multiplier,w,c
  1926  0018B0  0225               	mulwf	___wmul@multiplicand+1,c
  1927  0018B2  50F3               	movf	prodl,w,c
  1928  0018B4  2627               	addwf	___wmul@product+1,f,c
  1929  0018B6  5023               	movf	___wmul@multiplier+1,w,c
  1930  0018B8  0224               	mulwf	___wmul@multiplicand,c
  1931  0018BA  50F3               	movf	prodl,w,c
  1932  0018BC  2627               	addwf	___wmul@product+1,f,c
  1933  0018BE  C026  F022         	movff	___wmul@product,?___wmul
  1934  0018C2  C027  F023         	movff	___wmul@product+1,?___wmul+1
  1935  0018C6  0012               	return	
  1936  0018C8                     __end_of___wmul:
  1937                           	opt stack 0
  1938                           tblptru	equ	0xFF8
  1939                           tblptrh	equ	0xFF7
  1940                           tblptrl	equ	0xFF6
  1941                           tablat	equ	0xFF5
  1942                           prodh	equ	0xFF4
  1943                           prodl	equ	0xFF3
  1944                           indf0	equ	0xFEF
  1945                           postinc0	equ	0xFEE
  1946                           fsr0h	equ	0xFEA
  1947                           fsr0l	equ	0xFE9
  1948                           wreg	equ	0xFE8
  1949                           indf2	equ	0xFDF
  1950                           postinc2	equ	0xFDE
  1951                           postdec2	equ	0xFDD
  1952                           plusw2	equ	0xFDB
  1953                           fsr2h	equ	0xFDA
  1954                           fsr2l	equ	0xFD9
  1955                           status	equ	0xFD8
  1956                           
  1957 ;; *************** function _lenHelper *****************
  1958 ;; Defined at:
  1959 ;;		line 165 in file "bufferhandler.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;  x               2   33[COMRAM] int 
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;		None
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  2   33[COMRAM] int 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1973 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1976 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1977 ;;Total ram usage:        2 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    3
  1980 ;; This function calls:
  1981 ;;		Nothing
  1982 ;; This function is called by:
  1983 ;;		_parseString
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           	psect	text9
  1988  00162A                     __ptext9:
  1989                           	opt stack 0
  1990  00162A                     _lenHelper:
  1991                           	opt stack 26
  1992                           
  1993                           ;bufferhandler.c: 166: if(x>=1000) return 4;
  1994                           
  1995                           ;incstack = 0
  1996  00162A  BE23               	btfsc	lenHelper@x+1,7,c
  1997  00162C  D00B               	goto	l1449
  1998  00162E  0EE8               	movlw	232
  1999  001630  5C22               	subwf	lenHelper@x,w,c
  2000  001632  0E03               	movlw	3
  2001  001634  5823               	subwfb	lenHelper@x+1,w,c
  2002  001636  A0D8               	btfss	status,0,c
  2003  001638  D005               	goto	l1449
  2004  00163A  0E00               	movlw	0
  2005  00163C  6E23               	movwf	?_lenHelper+1,c
  2006  00163E  0E04               	movlw	4
  2007  001640  6E22               	movwf	?_lenHelper,c
  2008  001642  0012               	return	
  2009  001644                     l1449:
  2010                           
  2011                           ;bufferhandler.c: 167: if(x>=100) return 3;
  2012  001644  BE23               	btfsc	lenHelper@x+1,7,c
  2013  001646  D00B               	goto	l1455
  2014  001648  5023               	movf	lenHelper@x+1,w,c
  2015  00164A  E104               	bnz	u690
  2016  00164C  0E64               	movlw	100
  2017  00164E  5C22               	subwf	lenHelper@x,w,c
  2018  001650  A0D8               	btfss	status,0,c
  2019  001652  D005               	goto	l1455
  2020  001654                     u690:
  2021  001654  0E00               	movlw	0
  2022  001656  6E23               	movwf	?_lenHelper+1,c
  2023  001658  0E03               	movlw	3
  2024  00165A  6E22               	movwf	?_lenHelper,c
  2025  00165C  0012               	return	
  2026  00165E                     l1455:
  2027                           
  2028                           ;bufferhandler.c: 168: if(x>=10) return 2;
  2029  00165E  BE23               	btfsc	lenHelper@x+1,7,c
  2030  001660  D00B               	goto	l1461
  2031  001662  5023               	movf	lenHelper@x+1,w,c
  2032  001664  E104               	bnz	u700
  2033  001666  0E0A               	movlw	10
  2034  001668  5C22               	subwf	lenHelper@x,w,c
  2035  00166A  A0D8               	btfss	status,0,c
  2036  00166C  D005               	goto	l1461
  2037  00166E                     u700:
  2038  00166E  0E00               	movlw	0
  2039  001670  6E23               	movwf	?_lenHelper+1,c
  2040  001672  0E02               	movlw	2
  2041  001674  6E22               	movwf	?_lenHelper,c
  2042  001676  0012               	return	
  2043  001678                     l1461:
  2044                           
  2045                           ;bufferhandler.c: 169: return 1;
  2046  001678  0E00               	movlw	0
  2047  00167A  6E23               	movwf	?_lenHelper+1,c
  2048  00167C  0E01               	movlw	1
  2049  00167E  6E22               	movwf	?_lenHelper,c
  2050  001680  0012               	return	
  2051  001682                     __end_of_lenHelper:
  2052                           	opt stack 0
  2053                           tblptru	equ	0xFF8
  2054                           tblptrh	equ	0xFF7
  2055                           tblptrl	equ	0xFF6
  2056                           tablat	equ	0xFF5
  2057                           prodh	equ	0xFF4
  2058                           prodl	equ	0xFF3
  2059                           indf0	equ	0xFEF
  2060                           postinc0	equ	0xFEE
  2061                           fsr0h	equ	0xFEA
  2062                           fsr0l	equ	0xFE9
  2063                           wreg	equ	0xFE8
  2064                           indf2	equ	0xFDF
  2065                           postinc2	equ	0xFDE
  2066                           postdec2	equ	0xFDD
  2067                           plusw2	equ	0xFDB
  2068                           fsr2h	equ	0xFDA
  2069                           fsr2l	equ	0xFD9
  2070                           status	equ	0xFD8
  2071                           
  2072 ;; *************** function ___awmod *****************
  2073 ;; Defined at:
  2074 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;  dividend        2   33[COMRAM] int 
  2077 ;;  divisor         2   35[COMRAM] int 
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;  sign            1   38[COMRAM] unsigned char 
  2080 ;;  counter         1   37[COMRAM] unsigned char 
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  2   33[COMRAM] int 
  2083 ;; Registers used:
  2084 ;;		wreg, status,2, status,0
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2090 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2091 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2093 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2094 ;;Total ram usage:        6 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; Hardware stack levels required when called:    3
  2097 ;; This function calls:
  2098 ;;		Nothing
  2099 ;; This function is called by:
  2100 ;;		_parseString
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text10
  2105  00155C                     __ptext10:
  2106                           	opt stack 0
  2107  00155C                     ___awmod:
  2108                           	opt stack 26
  2109                           
  2110                           ;incstack = 0
  2111  00155C  0E00               	movlw	0
  2112  00155E  6E27               	movwf	___awmod@sign,c
  2113  001560  AE23               	btfss	___awmod@dividend+1,7,c
  2114  001562  D006               	goto	l1517
  2115  001564  6C22               	negf	___awmod@dividend,c
  2116  001566  1E23               	comf	___awmod@dividend+1,f,c
  2117  001568  B0D8               	btfsc	status,0,c
  2118  00156A  2A23               	incf	___awmod@dividend+1,f,c
  2119  00156C  0E01               	movlw	1
  2120  00156E  6E27               	movwf	___awmod@sign,c
  2121  001570                     l1517:
  2122  001570  AE25               	btfss	___awmod@divisor+1,7,c
  2123  001572  D004               	goto	l1521
  2124  001574  6C24               	negf	___awmod@divisor,c
  2125  001576  1E25               	comf	___awmod@divisor+1,f,c
  2126  001578  B0D8               	btfsc	status,0,c
  2127  00157A  2A25               	incf	___awmod@divisor+1,f,c
  2128  00157C                     l1521:
  2129  00157C  5024               	movf	___awmod@divisor,w,c
  2130  00157E  1025               	iorwf	___awmod@divisor+1,w,c
  2131  001580  B4D8               	btfsc	status,2,c
  2132  001582  D018               	goto	l1537
  2133  001584  0E01               	movlw	1
  2134  001586  6E26               	movwf	___awmod@counter,c
  2135  001588  D004               	goto	l1527
  2136  00158A                     l1525:
  2137  00158A  90D8               	bcf	status,0,c
  2138  00158C  3624               	rlcf	___awmod@divisor,f,c
  2139  00158E  3625               	rlcf	___awmod@divisor+1,f,c
  2140  001590  2A26               	incf	___awmod@counter,f,c
  2141  001592                     l1527:
  2142  001592  AE25               	btfss	___awmod@divisor+1,7,c
  2143  001594  D7FA               	goto	l1525
  2144  001596                     l1529:
  2145  001596  5024               	movf	___awmod@divisor,w,c
  2146  001598  5C22               	subwf	___awmod@dividend,w,c
  2147  00159A  5025               	movf	___awmod@divisor+1,w,c
  2148  00159C  5823               	subwfb	___awmod@dividend+1,w,c
  2149  00159E  A0D8               	btfss	status,0,c
  2150  0015A0  D004               	goto	l1533
  2151  0015A2  5024               	movf	___awmod@divisor,w,c
  2152  0015A4  5E22               	subwf	___awmod@dividend,f,c
  2153  0015A6  5025               	movf	___awmod@divisor+1,w,c
  2154  0015A8  5A23               	subwfb	___awmod@dividend+1,f,c
  2155  0015AA                     l1533:
  2156  0015AA  90D8               	bcf	status,0,c
  2157  0015AC  3225               	rrcf	___awmod@divisor+1,f,c
  2158  0015AE  3224               	rrcf	___awmod@divisor,f,c
  2159  0015B0  2E26               	decfsz	___awmod@counter,f,c
  2160  0015B2  D7F1               	goto	l1529
  2161  0015B4                     l1537:
  2162  0015B4  5027               	movf	___awmod@sign,w,c
  2163  0015B6  B4D8               	btfsc	status,2,c
  2164  0015B8  D004               	goto	l1541
  2165  0015BA  6C22               	negf	___awmod@dividend,c
  2166  0015BC  1E23               	comf	___awmod@dividend+1,f,c
  2167  0015BE  B0D8               	btfsc	status,0,c
  2168  0015C0  2A23               	incf	___awmod@dividend+1,f,c
  2169  0015C2                     l1541:
  2170  0015C2  C022  F022         	movff	___awmod@dividend,?___awmod
  2171  0015C6  C023  F023         	movff	___awmod@dividend+1,?___awmod+1
  2172  0015CA  0012               	return	
  2173  0015CC                     __end_of___awmod:
  2174                           	opt stack 0
  2175                           tblptru	equ	0xFF8
  2176                           tblptrh	equ	0xFF7
  2177                           tblptrl	equ	0xFF6
  2178                           tablat	equ	0xFF5
  2179                           prodh	equ	0xFF4
  2180                           prodl	equ	0xFF3
  2181                           indf0	equ	0xFEF
  2182                           postinc0	equ	0xFEE
  2183                           fsr0h	equ	0xFEA
  2184                           fsr0l	equ	0xFE9
  2185                           wreg	equ	0xFE8
  2186                           indf2	equ	0xFDF
  2187                           postinc2	equ	0xFDE
  2188                           postdec2	equ	0xFDD
  2189                           plusw2	equ	0xFDB
  2190                           fsr2h	equ	0xFDA
  2191                           fsr2l	equ	0xFD9
  2192                           status	equ	0xFD8
  2193                           
  2194 ;; *************** function ___awdiv *****************
  2195 ;; Defined at:
  2196 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  dividend        2   33[COMRAM] int 
  2199 ;;  divisor         2   35[COMRAM] int 
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;  quotient        2   39[COMRAM] int 
  2202 ;;  sign            1   38[COMRAM] unsigned char 
  2203 ;;  counter         1   37[COMRAM] unsigned char 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;                  2   33[COMRAM] int 
  2206 ;; Registers used:
  2207 ;;		wreg, status,2, status,0
  2208 ;; Tracked objects:
  2209 ;;		On entry : 0/0
  2210 ;;		On exit  : 0/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2213 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2214 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2216 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2217 ;;Total ram usage:        8 bytes
  2218 ;; Hardware stack levels used:    1
  2219 ;; Hardware stack levels required when called:    3
  2220 ;; This function calls:
  2221 ;;		Nothing
  2222 ;; This function is called by:
  2223 ;;		_parseString
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text11
  2228  0014D8                     __ptext11:
  2229                           	opt stack 0
  2230  0014D8                     ___awdiv:
  2231                           	opt stack 26
  2232                           
  2233                           ;incstack = 0
  2234  0014D8  0E00               	movlw	0
  2235  0014DA  6E27               	movwf	___awdiv@sign,c
  2236  0014DC  AE25               	btfss	___awdiv@divisor+1,7,c
  2237  0014DE  D006               	goto	l1473
  2238  0014E0  6C24               	negf	___awdiv@divisor,c
  2239  0014E2  1E25               	comf	___awdiv@divisor+1,f,c
  2240  0014E4  B0D8               	btfsc	status,0,c
  2241  0014E6  2A25               	incf	___awdiv@divisor+1,f,c
  2242  0014E8  0E01               	movlw	1
  2243  0014EA  6E27               	movwf	___awdiv@sign,c
  2244  0014EC                     l1473:
  2245  0014EC  AE23               	btfss	___awdiv@dividend+1,7,c
  2246  0014EE  D006               	goto	l1479
  2247  0014F0  6C22               	negf	___awdiv@dividend,c
  2248  0014F2  1E23               	comf	___awdiv@dividend+1,f,c
  2249  0014F4  B0D8               	btfsc	status,0,c
  2250  0014F6  2A23               	incf	___awdiv@dividend+1,f,c
  2251  0014F8  0E01               	movlw	1
  2252  0014FA  1A27               	xorwf	___awdiv@sign,f,c
  2253  0014FC                     l1479:
  2254  0014FC  0E00               	movlw	0
  2255  0014FE  6E29               	movwf	___awdiv@quotient+1,c
  2256  001500  0E00               	movlw	0
  2257  001502  6E28               	movwf	___awdiv@quotient,c
  2258  001504  5024               	movf	___awdiv@divisor,w,c
  2259  001506  1025               	iorwf	___awdiv@divisor+1,w,c
  2260  001508  B4D8               	btfsc	status,2,c
  2261  00150A  D01C               	goto	l1501
  2262  00150C  0E01               	movlw	1
  2263  00150E  6E26               	movwf	___awdiv@counter,c
  2264  001510  D004               	goto	l1487
  2265  001512                     l1485:
  2266  001512  90D8               	bcf	status,0,c
  2267  001514  3624               	rlcf	___awdiv@divisor,f,c
  2268  001516  3625               	rlcf	___awdiv@divisor+1,f,c
  2269  001518  2A26               	incf	___awdiv@counter,f,c
  2270  00151A                     l1487:
  2271  00151A  AE25               	btfss	___awdiv@divisor+1,7,c
  2272  00151C  D7FA               	goto	l1485
  2273  00151E                     l1489:
  2274  00151E  90D8               	bcf	status,0,c
  2275  001520  3628               	rlcf	___awdiv@quotient,f,c
  2276  001522  3629               	rlcf	___awdiv@quotient+1,f,c
  2277  001524  5024               	movf	___awdiv@divisor,w,c
  2278  001526  5C22               	subwf	___awdiv@dividend,w,c
  2279  001528  5025               	movf	___awdiv@divisor+1,w,c
  2280  00152A  5823               	subwfb	___awdiv@dividend+1,w,c
  2281  00152C  A0D8               	btfss	status,0,c
  2282  00152E  D005               	goto	l1497
  2283  001530  5024               	movf	___awdiv@divisor,w,c
  2284  001532  5E22               	subwf	___awdiv@dividend,f,c
  2285  001534  5025               	movf	___awdiv@divisor+1,w,c
  2286  001536  5A23               	subwfb	___awdiv@dividend+1,f,c
  2287  001538  8028               	bsf	___awdiv@quotient,0,c
  2288  00153A                     l1497:
  2289  00153A  90D8               	bcf	status,0,c
  2290  00153C  3225               	rrcf	___awdiv@divisor+1,f,c
  2291  00153E  3224               	rrcf	___awdiv@divisor,f,c
  2292  001540  2E26               	decfsz	___awdiv@counter,f,c
  2293  001542  D7ED               	goto	l1489
  2294  001544                     l1501:
  2295  001544  5027               	movf	___awdiv@sign,w,c
  2296  001546  B4D8               	btfsc	status,2,c
  2297  001548  D004               	goto	l1505
  2298  00154A  6C28               	negf	___awdiv@quotient,c
  2299  00154C  1E29               	comf	___awdiv@quotient+1,f,c
  2300  00154E  B0D8               	btfsc	status,0,c
  2301  001550  2A29               	incf	___awdiv@quotient+1,f,c
  2302  001552                     l1505:
  2303  001552  C028  F022         	movff	___awdiv@quotient,?___awdiv
  2304  001556  C029  F023         	movff	___awdiv@quotient+1,?___awdiv+1
  2305  00155A  0012               	return	
  2306  00155C                     __end_of___awdiv:
  2307                           	opt stack 0
  2308                           tblptru	equ	0xFF8
  2309                           tblptrh	equ	0xFF7
  2310                           tblptrl	equ	0xFF6
  2311                           tablat	equ	0xFF5
  2312                           prodh	equ	0xFF4
  2313                           prodl	equ	0xFF3
  2314                           indf0	equ	0xFEF
  2315                           postinc0	equ	0xFEE
  2316                           fsr0h	equ	0xFEA
  2317                           fsr0l	equ	0xFE9
  2318                           wreg	equ	0xFE8
  2319                           indf2	equ	0xFDF
  2320                           postinc2	equ	0xFDE
  2321                           postdec2	equ	0xFDD
  2322                           plusw2	equ	0xFDB
  2323                           fsr2h	equ	0xFDA
  2324                           fsr2l	equ	0xFD9
  2325                           status	equ	0xFD8
  2326                           
  2327 ;; *************** function _isValid *****************
  2328 ;; Defined at:
  2329 ;;		line 73 in file "bufferhandler.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;		None
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;		None
  2334 ;; Return value:  Size  Location     Type
  2335 ;;                  1    wreg      unsigned char 
  2336 ;; Registers used:
  2337 ;;		wreg, status,2, status,0
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2347 ;;Total ram usage:        0 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; Hardware stack levels required when called:    3
  2350 ;; This function calls:
  2351 ;;		Nothing
  2352 ;; This function is called by:
  2353 ;;		_main
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text12
  2358  001808                     __ptext12:
  2359                           	opt stack 0
  2360  001808                     _isValid:
  2361                           	opt stack 27
  2362                           
  2363                           ;bufferhandler.c: 74: if(tmpString[0] == 0x54 &&
  2364                           ;bufferhandler.c: 75: tmpString[1] == 0x59 &&
  2365                           ;bufferhandler.c: 76: tmpString[2] == 0x52 &&
  2366                           ;bufferhandler.c: 77: tmpString[3] == 0x49 &&
  2367                           ;bufferhandler.c: 78: tmpString[4] == 0x5F){
  2368                           
  2369                           ;incstack = 0
  2370  001808  0E54               	movlw	84
  2371  00180A  0100               	movlb	0	; () banked
  2372  00180C  1990               	xorwf	_tmpString& (0+255),w,b
  2373  00180E  A4D8               	btfss	status,2,c
  2374  001810  D016               	goto	l1593
  2375                           
  2376                           ; BSR set to: 0
  2377  001812  0E59               	movlw	89
  2378  001814  0100               	movlb	0	; () banked
  2379  001816  1991               	xorwf	(_tmpString+1)& (0+255),w,b
  2380  001818  A4D8               	btfss	status,2,c
  2381  00181A  D011               	goto	l1593
  2382                           
  2383                           ; BSR set to: 0
  2384  00181C  0E52               	movlw	82
  2385  00181E  0100               	movlb	0	; () banked
  2386  001820  1992               	xorwf	(_tmpString+2)& (0+255),w,b
  2387  001822  A4D8               	btfss	status,2,c
  2388  001824  D00C               	goto	l1593
  2389                           
  2390                           ; BSR set to: 0
  2391  001826  0E49               	movlw	73
  2392  001828  0100               	movlb	0	; () banked
  2393  00182A  1993               	xorwf	(_tmpString+3)& (0+255),w,b
  2394  00182C  A4D8               	btfss	status,2,c
  2395  00182E  D007               	goto	l1593
  2396                           
  2397                           ; BSR set to: 0
  2398  001830  0E5F               	movlw	95
  2399  001832  0100               	movlb	0	; () banked
  2400  001834  1994               	xorwf	(_tmpString+4)& (0+255),w,b
  2401  001836  A4D8               	btfss	status,2,c
  2402  001838  D002               	goto	l1593
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;bufferhandler.c: 79: return 1;
  2406  00183A  0E01               	movlw	1
  2407                           
  2408                           ; BSR set to: 0
  2409  00183C  0012               	return	
  2410  00183E                     l1593:
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;bufferhandler.c: 80: }
  2414                           ;bufferhandler.c: 81: return 0;
  2415  00183E  0E00               	movlw	0
  2416  001840  0012               	return	
  2417  001842                     __end_of_isValid:
  2418                           	opt stack 0
  2419                           tblptru	equ	0xFF8
  2420                           tblptrh	equ	0xFF7
  2421                           tblptrl	equ	0xFF6
  2422                           tablat	equ	0xFF5
  2423                           prodh	equ	0xFF4
  2424                           prodl	equ	0xFF3
  2425                           indf0	equ	0xFEF
  2426                           postinc0	equ	0xFEE
  2427                           fsr0h	equ	0xFEA
  2428                           fsr0l	equ	0xFE9
  2429                           wreg	equ	0xFE8
  2430                           indf2	equ	0xFDF
  2431                           postinc2	equ	0xFDE
  2432                           postdec2	equ	0xFDD
  2433                           plusw2	equ	0xFDB
  2434                           fsr2h	equ	0xFDA
  2435                           fsr2l	equ	0xFD9
  2436                           status	equ	0xFD8
  2437                           
  2438 ;; *************** function _isItLongEnough *****************
  2439 ;; Defined at:
  2440 ;;		line 35 in file "bufferhandler.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;		None
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;		None
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  1    wreg      unsigned char 
  2447 ;; Registers used:
  2448 ;;		wreg, status,2, status,0
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2458 ;;Total ram usage:        0 bytes
  2459 ;; Hardware stack levels used:    1
  2460 ;; Hardware stack levels required when called:    3
  2461 ;; This function calls:
  2462 ;;		Nothing
  2463 ;; This function is called by:
  2464 ;;		_main
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           	psect	text13
  2469  00193A                     __ptext13:
  2470                           	opt stack 0
  2471  00193A                     _isItLongEnough:
  2472                           	opt stack 27
  2473                           
  2474                           ;bufferhandler.c: 37: if(index == 64){
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;incstack = 0
  2478  00193A  0E40               	movlw	64
  2479  00193C  1837               	xorwf	_index,w,c
  2480  00193E  1038               	iorwf	_index+1,w,c
  2481  001940  A4D8               	btfss	status,2,c
  2482  001942  D002               	goto	l1133
  2483                           
  2484                           ;bufferhandler.c: 38: return 1;
  2485  001944  0E01               	movlw	1
  2486                           
  2487                           ;bufferhandler.c: 39: }else{
  2488  001946  0012               	return	
  2489  001948                     l1133:
  2490                           
  2491                           ;bufferhandler.c: 40: return 0;
  2492  001948  0E00               	movlw	0
  2493  00194A  0012               	return	
  2494  00194C                     __end_of_isItLongEnough:
  2495                           	opt stack 0
  2496                           tblptru	equ	0xFF8
  2497                           tblptrh	equ	0xFF7
  2498                           tblptrl	equ	0xFF6
  2499                           tablat	equ	0xFF5
  2500                           prodh	equ	0xFF4
  2501                           prodl	equ	0xFF3
  2502                           indf0	equ	0xFEF
  2503                           postinc0	equ	0xFEE
  2504                           fsr0h	equ	0xFEA
  2505                           fsr0l	equ	0xFE9
  2506                           wreg	equ	0xFE8
  2507                           indf2	equ	0xFDF
  2508                           postinc2	equ	0xFDE
  2509                           postdec2	equ	0xFDD
  2510                           plusw2	equ	0xFDB
  2511                           fsr2h	equ	0xFDA
  2512                           fsr2l	equ	0xFD9
  2513                           status	equ	0xFD8
  2514                           
  2515 ;; *************** function _copyTmpBuffer *****************
  2516 ;; Defined at:
  2517 ;;		line 52 in file "bufferhandler.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;		None
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  i               2   34[COMRAM] int 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  1    wreg      void 
  2524 ;; Registers used:
  2525 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2532 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2534 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2535 ;;Total ram usage:        3 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    3
  2538 ;; This function calls:
  2539 ;;		Nothing
  2540 ;; This function is called by:
  2541 ;;		_main
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           	psect	text14
  2546  0017C8                     __ptext14:
  2547                           	opt stack 0
  2548  0017C8                     _copyTmpBuffer:
  2549                           	opt stack 27
  2550                           
  2551                           ;bufferhandler.c: 53: for(int i = 0; i<index; i++){
  2552                           
  2553                           ;incstack = 0
  2554  0017C8  0E00               	movlw	0
  2555  0017CA  6E24               	movwf	copyTmpBuffer@i+1,c
  2556  0017CC  0E00               	movlw	0
  2557  0017CE  6E23               	movwf	copyTmpBuffer@i,c
  2558  0017D0  D010               	goto	l1603
  2559  0017D2                     l1599:
  2560                           
  2561                           ;bufferhandler.c: 54: allDataString[i] = tmpString[i];
  2562  0017D2  0E90               	movlw	low _tmpString
  2563  0017D4  2423               	addwf	copyTmpBuffer@i,w,c
  2564  0017D6  6ED9               	movwf	fsr2l,c
  2565  0017D8  0E00               	movlw	high _tmpString
  2566  0017DA  2024               	addwfc	copyTmpBuffer@i+1,w,c
  2567  0017DC  6EDA               	movwf	fsr2h,c
  2568  0017DE  0E00               	movlw	low _allDataString
  2569  0017E0  2423               	addwf	copyTmpBuffer@i,w,c
  2570  0017E2  6EE1               	movwf	fsr1l,c
  2571  0017E4  0E01               	movlw	high _allDataString
  2572  0017E6  2024               	addwfc	copyTmpBuffer@i+1,w,c
  2573  0017E8  6EE2               	movwf	fsr1h,c
  2574  0017EA  CFDF FFE7          	movff	indf2,indf1
  2575  0017EE  4A23               	infsnz	copyTmpBuffer@i,f,c
  2576  0017F0  2A24               	incf	copyTmpBuffer@i+1,f,c
  2577  0017F2                     l1603:
  2578  0017F2  5037               	movf	_index,w,c
  2579  0017F4  5C23               	subwf	copyTmpBuffer@i,w,c
  2580  0017F6  5024               	movf	copyTmpBuffer@i+1,w,c
  2581  0017F8  0A80               	xorlw	128
  2582  0017FA  6E22               	movwf	??_copyTmpBuffer& (0+255),c
  2583  0017FC  5038               	movf	_index+1,w,c
  2584  0017FE  0A80               	xorlw	128
  2585  001800  5822               	subwfb	??_copyTmpBuffer& (0+255),w,c
  2586  001802  B0D8               	btfsc	status,0,c
  2587  001804  0012               	return	
  2588  001806  D7E5               	goto	l1599
  2589  001808                     __end_of_copyTmpBuffer:
  2590                           	opt stack 0
  2591                           tblptru	equ	0xFF8
  2592                           tblptrh	equ	0xFF7
  2593                           tblptrl	equ	0xFF6
  2594                           tablat	equ	0xFF5
  2595                           prodh	equ	0xFF4
  2596                           prodl	equ	0xFF3
  2597                           indf0	equ	0xFEF
  2598                           postinc0	equ	0xFEE
  2599                           fsr0h	equ	0xFEA
  2600                           fsr0l	equ	0xFE9
  2601                           wreg	equ	0xFE8
  2602                           indf1	equ	0xFE7
  2603                           fsr1h	equ	0xFE2
  2604                           fsr1l	equ	0xFE1
  2605                           indf2	equ	0xFDF
  2606                           postinc2	equ	0xFDE
  2607                           postdec2	equ	0xFDD
  2608                           plusw2	equ	0xFDB
  2609                           fsr2h	equ	0xFDA
  2610                           fsr2l	equ	0xFD9
  2611                           status	equ	0xFD8
  2612                           
  2613 ;; *************** function _clearBuffer *****************
  2614 ;; Defined at:
  2615 ;;		line 44 in file "bufferhandler.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;		None
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;  i               2   39[COMRAM] int 
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2630 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2632 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2633 ;;Total ram usage:        2 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:    4
  2636 ;; This function calls:
  2637 ;;		_strlen
  2638 ;; This function is called by:
  2639 ;;		_main
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643                           	psect	text15
  2644  001782                     __ptext15:
  2645                           	opt stack 0
  2646  001782                     _clearBuffer:
  2647                           	opt stack 26
  2648                           
  2649                           ;bufferhandler.c: 45: for(int i = 0; i<strlen(tmpString); i++){
  2650                           
  2651                           ;incstack = 0
  2652  001782  0E00               	movlw	0
  2653  001784  6E29               	movwf	clearBuffer@i+1,c
  2654  001786  0E00               	movlw	0
  2655  001788  6E28               	movwf	clearBuffer@i,c
  2656  00178A  D00A               	goto	l1575
  2657  00178C                     l1571:
  2658                           
  2659                           ;bufferhandler.c: 46: tmpString[i] = "";
  2660  00178C  0E90               	movlw	low _tmpString
  2661  00178E  2428               	addwf	clearBuffer@i,w,c
  2662  001790  6ED9               	movwf	fsr2l,c
  2663  001792  0E00               	movlw	high _tmpString
  2664  001794  2029               	addwfc	clearBuffer@i+1,w,c
  2665  001796  6EDA               	movwf	fsr2h,c
  2666  001798  0E05               	movlw	low (STR_1+4)
  2667  00179A  6EDF               	movwf	indf2,c
  2668  00179C  4A28               	infsnz	clearBuffer@i,f,c
  2669  00179E  2A29               	incf	clearBuffer@i+1,f,c
  2670  0017A0                     l1575:
  2671  0017A0  0E90               	movlw	low _tmpString
  2672  0017A2  6E22               	movwf	strlen@s,c
  2673  0017A4  0E00               	movlw	high _tmpString
  2674  0017A6  6E23               	movwf	strlen@s+1,c
  2675  0017A8  EC97  F00B         	call	_strlen	;wreg free
  2676  0017AC  5022               	movf	?_strlen,w,c
  2677  0017AE  5C28               	subwf	clearBuffer@i,w,c
  2678  0017B0  5023               	movf	?_strlen+1,w,c
  2679  0017B2  5829               	subwfb	clearBuffer@i+1,w,c
  2680  0017B4  A0D8               	btfss	status,0,c
  2681  0017B6  D7EA               	goto	l1571
  2682                           
  2683                           ;bufferhandler.c: 47: }
  2684                           ;bufferhandler.c: 48: tmpString[0] = '\0';
  2685  0017B8  0E00               	movlw	0
  2686  0017BA  0100               	movlb	0	; () banked
  2687  0017BC  6F90               	movwf	_tmpString& (0+255),b
  2688                           
  2689                           ;bufferhandler.c: 49: index = 0;
  2690  0017BE  0E00               	movlw	0
  2691  0017C0  6E38               	movwf	_index+1,c
  2692  0017C2  0E00               	movlw	0
  2693  0017C4  6E37               	movwf	_index,c
  2694                           
  2695                           ; BSR set to: 0
  2696  0017C6  0012               	return		;funcret
  2697  0017C8                     __end_of_clearBuffer:
  2698                           	opt stack 0
  2699                           tblptru	equ	0xFF8
  2700                           tblptrh	equ	0xFF7
  2701                           tblptrl	equ	0xFF6
  2702                           tablat	equ	0xFF5
  2703                           prodh	equ	0xFF4
  2704                           prodl	equ	0xFF3
  2705                           indf0	equ	0xFEF
  2706                           postinc0	equ	0xFEE
  2707                           fsr0h	equ	0xFEA
  2708                           fsr0l	equ	0xFE9
  2709                           wreg	equ	0xFE8
  2710                           indf1	equ	0xFE7
  2711                           fsr1h	equ	0xFE2
  2712                           fsr1l	equ	0xFE1
  2713                           indf2	equ	0xFDF
  2714                           postinc2	equ	0xFDE
  2715                           postdec2	equ	0xFDD
  2716                           plusw2	equ	0xFDB
  2717                           fsr2h	equ	0xFDA
  2718                           fsr2l	equ	0xFD9
  2719                           status	equ	0xFD8
  2720                           
  2721 ;; *************** function _strlen *****************
  2722 ;; Defined at:
  2723 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;  s               2   33[COMRAM] PTR const unsigned char 
  2726 ;;		 -> allDataString(70), tmpString(70), STR_2(4), STR_1(5), 
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;  cp              2   37[COMRAM] PTR const unsigned char 
  2729 ;;		 -> allDataString(70), tmpString(70), STR_2(4), STR_1(5), 
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  2   33[COMRAM] unsigned int 
  2732 ;; Registers used:
  2733 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2739 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2740 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2741 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2742 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2743 ;;Total ram usage:        6 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    3
  2746 ;; This function calls:
  2747 ;;		Nothing
  2748 ;; This function is called by:
  2749 ;;		_writeString
  2750 ;;		_clearBuffer
  2751 ;;		_checkPos
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	text16
  2756  00172E                     __ptext16:
  2757                           	opt stack 0
  2758  00172E                     _strlen:
  2759                           	opt stack 26
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;incstack = 0
  2763  00172E  C022  F026         	movff	strlen@s,strlen@cp
  2764  001732  C023  F027         	movff	strlen@s+1,strlen@cp+1
  2765  001736  D002               	goto	l1367
  2766  001738                     l1365:
  2767  001738  4A26               	infsnz	strlen@cp,f,c
  2768  00173A  2A27               	incf	strlen@cp+1,f,c
  2769  00173C                     l1367:
  2770  00173C  C026  FFF6         	movff	strlen@cp,tblptrl
  2771  001740  C027  FFF7         	movff	strlen@cp+1,tblptrh
  2772  001744  0E00               	movlw	low (__smallconst shr (0+16))
  2773  001746  6EF8               	movwf	tblptru,c
  2774  001748  0E0E               	movlw	(high __ramtop+-1)
  2775  00174A  64F7               	cpfsgt	tblptrh,c
  2776  00174C  D003               	bra	u587
  2777  00174E  0008               	tblrd		*
  2778  001750  50F5               	movf	tablat,w,c
  2779  001752  D005               	bra	u580
  2780  001754                     u587:
  2781  001754  CFF6 FFE9          	movff	tblptrl,fsr0l
  2782  001758  CFF7 FFEA          	movff	tblptrh,fsr0h
  2783  00175C  50EF               	movf	indf0,w,c
  2784  00175E                     u580:
  2785  00175E  0900               	iorlw	0
  2786  001760  A4D8               	btfss	status,2,c
  2787  001762  D7EA               	goto	l1365
  2788  001764  C022  F024         	movff	strlen@s,??_strlen
  2789  001768  C023  F025         	movff	strlen@s+1,??_strlen+1
  2790  00176C  1E24               	comf	??_strlen,f,c
  2791  00176E  1E25               	comf	??_strlen+1,f,c
  2792  001770  4A24               	infsnz	??_strlen,f,c
  2793  001772  2A25               	incf	??_strlen+1,f,c
  2794  001774  5026               	movf	strlen@cp,w,c
  2795  001776  2424               	addwf	??_strlen,w,c
  2796  001778  6E22               	movwf	?_strlen,c
  2797  00177A  5027               	movf	strlen@cp+1,w,c
  2798  00177C  2025               	addwfc	??_strlen+1,w,c
  2799  00177E  6E23               	movwf	?_strlen+1,c
  2800  001780  0012               	return	
  2801  001782                     __end_of_strlen:
  2802                           	opt stack 0
  2803                           tblptru	equ	0xFF8
  2804                           tblptrh	equ	0xFF7
  2805                           tblptrl	equ	0xFF6
  2806                           tablat	equ	0xFF5
  2807                           prodh	equ	0xFF4
  2808                           prodl	equ	0xFF3
  2809                           indf0	equ	0xFEF
  2810                           postinc0	equ	0xFEE
  2811                           fsr0h	equ	0xFEA
  2812                           fsr0l	equ	0xFE9
  2813                           wreg	equ	0xFE8
  2814                           indf1	equ	0xFE7
  2815                           fsr1h	equ	0xFE2
  2816                           fsr1l	equ	0xFE1
  2817                           indf2	equ	0xFDF
  2818                           postinc2	equ	0xFDE
  2819                           postdec2	equ	0xFDD
  2820                           plusw2	equ	0xFDB
  2821                           fsr2h	equ	0xFDA
  2822                           fsr2l	equ	0xFD9
  2823                           status	equ	0xFD8
  2824                           
  2825 ;; *************** function _UART_Init *****************
  2826 ;; Defined at:
  2827 ;;		line 31 in file "uart.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;  baudrate        4   33[COMRAM] const long 
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;		None
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      unsigned char 
  2834 ;; Registers used:
  2835 ;;		wreg, status,2
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2841 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2844 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2845 ;;Total ram usage:        4 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    3
  2848 ;; This function calls:
  2849 ;;		Nothing
  2850 ;; This function is called by:
  2851 ;;		_main
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           	psect	text17
  2856  001842                     __ptext17:
  2857                           	opt stack 0
  2858  001842                     _UART_Init:
  2859                           	opt stack 27
  2860                           
  2861                           ;uart.c: 35: TXSTA1 = 0x24;
  2862                           
  2863                           ;incstack = 0
  2864  001842  0E24               	movlw	36
  2865  001844  6EAD               	movwf	4013,c	;volatile
  2866                           
  2867                           ;uart.c: 36: RCSTA1 = 0x90;
  2868  001846  0E90               	movlw	144
  2869  001848  6EAC               	movwf	4012,c	;volatile
  2870                           
  2871                           ;uart.c: 37: RC1IE = 1;
  2872  00184A  8A9D               	bsf	3997,5,c	;volatile
  2873                           
  2874                           ;uart.c: 38: BAUDCON1bits.BRG16 = 0;
  2875  00184C  967E               	bcf	3966,3,c	;volatile
  2876                           
  2877                           ;uart.c: 39: SPBRG1 = 155;
  2878  00184E  0E9B               	movlw	155
  2879  001850  6EB0               	movwf	4016,c	;volatile
  2880                           
  2881                           ;uart.c: 40: SPBRGH1 = 155;
  2882  001852  0E9B               	movlw	155
  2883  001854  6E7F               	movwf	3967,c	;volatile
  2884                           
  2885                           ;uart.c: 41: TRISC7 = 1;
  2886  001856  8E94               	bsf	3988,7,c	;volatile
  2887                           
  2888                           ;uart.c: 42: TRISC6 = 0;
  2889  001858  9C94               	bcf	3988,6,c	;volatile
  2890                           
  2891                           ;uart.c: 46: RCSTA2 = 0b10010000;
  2892  00185A  0E90               	movlw	144
  2893  00185C  6E9C               	movwf	3996,c	;volatile
  2894                           
  2895                           ;uart.c: 47: TXSTA2 = 0b00100100;
  2896  00185E  0E24               	movlw	36
  2897  001860  6EA8               	movwf	4008,c	;volatile
  2898                           
  2899                           ;uart.c: 48: RC2IE = 1;
  2900  001862  8AA3               	bsf	4003,5,c	;volatile
  2901                           
  2902                           ;uart.c: 49: BAUDCON2bits.BRG16 = 0;
  2903  001864  967C               	bcf	3964,3,c	;volatile
  2904                           
  2905                           ;uart.c: 50: SPBRG2 = 25;
  2906  001866  0E19               	movlw	25
  2907  001868  6EAB               	movwf	4011,c	;volatile
  2908                           
  2909                           ;uart.c: 51: SPBRGH2 = 25;
  2910  00186A  0E19               	movlw	25
  2911  00186C  6E7D               	movwf	3965,c	;volatile
  2912                           
  2913                           ;uart.c: 52: TRISB4 = 1;
  2914  00186E  8893               	bsf	3987,4,c	;volatile
  2915                           
  2916                           ;uart.c: 53: TRISB5 = 0;
  2917  001870  9A93               	bcf	3987,5,c	;volatile
  2918  001872  0012               	return	
  2919  001874                     __end_of_UART_Init:
  2920                           	opt stack 0
  2921                           tblptru	equ	0xFF8
  2922                           tblptrh	equ	0xFF7
  2923                           tblptrl	equ	0xFF6
  2924                           tablat	equ	0xFF5
  2925                           prodh	equ	0xFF4
  2926                           prodl	equ	0xFF3
  2927                           indf0	equ	0xFEF
  2928                           postinc0	equ	0xFEE
  2929                           fsr0h	equ	0xFEA
  2930                           fsr0l	equ	0xFE9
  2931                           wreg	equ	0xFE8
  2932                           indf1	equ	0xFE7
  2933                           fsr1h	equ	0xFE2
  2934                           fsr1l	equ	0xFE1
  2935                           indf2	equ	0xFDF
  2936                           postinc2	equ	0xFDE
  2937                           postdec2	equ	0xFDD
  2938                           plusw2	equ	0xFDB
  2939                           fsr2h	equ	0xFDA
  2940                           fsr2l	equ	0xFD9
  2941                           status	equ	0xFD8
  2942                           
  2943 ;; *************** function _InitApp *****************
  2944 ;; Defined at:
  2945 ;;		line 29 in file "user.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;		None
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;		None
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  1    wreg      void 
  2952 ;; Registers used:
  2953 ;;		wreg, status,2
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2963 ;;Total ram usage:        0 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; Hardware stack levels required when called:    3
  2966 ;; This function calls:
  2967 ;;		Nothing
  2968 ;; This function is called by:
  2969 ;;		_main
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           	psect	text18
  2974  0018E8                     __ptext18:
  2975                           	opt stack 0
  2976  0018E8                     _InitApp:
  2977                           	opt stack 27
  2978                           
  2979                           ;user.c: 33: PPSCON = 0b00000000;
  2980                           
  2981                           ;incstack = 0
  2982  0018E8  0E00               	movlw	0
  2983  0018EA  010E               	movlb	14	; () banked
  2984  0018EC  6FBF               	movwf	191,b	;volatile
  2985                           
  2986                           ;user.c: 34: RPOR8 = 0b00000110;
  2987  0018EE  0E06               	movlw	6
  2988  0018F0  010E               	movlb	14	; () banked
  2989  0018F2  6FC8               	movwf	200,b	;volatile
  2990                           
  2991                           ;user.c: 35: RPINR16 = 0b00000111;
  2992  0018F4  0E07               	movlw	7
  2993  0018F6  010E               	movlb	14	; () banked
  2994  0018F8  6FF7               	movwf	247,b	;volatile
  2995                           
  2996                           ;user.c: 36: PPSCON = 0b00000001;
  2997  0018FA  0E01               	movlw	1
  2998  0018FC  010E               	movlb	14	; () banked
  2999  0018FE  6FBF               	movwf	191,b	;volatile
  3000                           
  3001                           ;user.c: 39: INTCON = 0xC0;
  3002  001900  0EC0               	movlw	192
  3003  001902  6EF2               	movwf	intcon,c	;volatile
  3004                           
  3005                           ; BSR set to: 14
  3006  001904  0012               	return		;funcret
  3007  001906                     __end_of_InitApp:
  3008                           	opt stack 0
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           prodh	equ	0xFF4
  3014                           prodl	equ	0xFF3
  3015                           intcon	equ	0xFF2
  3016                           indf0	equ	0xFEF
  3017                           postinc0	equ	0xFEE
  3018                           fsr0h	equ	0xFEA
  3019                           fsr0l	equ	0xFE9
  3020                           wreg	equ	0xFE8
  3021                           indf1	equ	0xFE7
  3022                           fsr1h	equ	0xFE2
  3023                           fsr1l	equ	0xFE1
  3024                           indf2	equ	0xFDF
  3025                           postinc2	equ	0xFDE
  3026                           postdec2	equ	0xFDD
  3027                           plusw2	equ	0xFDB
  3028                           fsr2h	equ	0xFDA
  3029                           fsr2l	equ	0xFD9
  3030                           status	equ	0xFD8
  3031                           
  3032 ;; *************** function _ConfigureOscillator *****************
  3033 ;; Defined at:
  3034 ;;		line 24 in file "system.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;		None
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;		None
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  1    wreg      void 
  3041 ;; Registers used:
  3042 ;;		wreg, status,2
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3052 ;;Total ram usage:        0 bytes
  3053 ;; Hardware stack levels used:    1
  3054 ;; Hardware stack levels required when called:    3
  3055 ;; This function calls:
  3056 ;;		Nothing
  3057 ;; This function is called by:
  3058 ;;		_main
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           	psect	text19
  3063  00194C                     __ptext19:
  3064                           	opt stack 0
  3065  00194C                     _ConfigureOscillator:
  3066                           	opt stack 27
  3067                           
  3068                           ;system.c: 26: OSCCONbits.IRCF = 0b110;
  3069                           
  3070                           ; BSR set to: 14
  3071                           ;incstack = 0
  3072  00194C  50D3               	movf	4051,w,c	;volatile
  3073  00194E  0B8F               	andlw	-113
  3074  001950  0960               	iorlw	96
  3075  001952  6ED3               	movwf	4051,c	;volatile
  3076                           
  3077                           ;system.c: 27: OSCTUNEbits.PLLEN = 0b1;
  3078  001954  8C9B               	bsf	3995,6,c	;volatile
  3079  001956  0012               	return		;funcret
  3080  001958                     __end_of_ConfigureOscillator:
  3081                           	opt stack 0
  3082                           tblptru	equ	0xFF8
  3083                           tblptrh	equ	0xFF7
  3084                           tblptrl	equ	0xFF6
  3085                           tablat	equ	0xFF5
  3086                           prodh	equ	0xFF4
  3087                           prodl	equ	0xFF3
  3088                           intcon	equ	0xFF2
  3089                           indf0	equ	0xFEF
  3090                           postinc0	equ	0xFEE
  3091                           fsr0h	equ	0xFEA
  3092                           fsr0l	equ	0xFE9
  3093                           wreg	equ	0xFE8
  3094                           indf1	equ	0xFE7
  3095                           fsr1h	equ	0xFE2
  3096                           fsr1l	equ	0xFE1
  3097                           indf2	equ	0xFDF
  3098                           postinc2	equ	0xFDE
  3099                           postdec2	equ	0xFDD
  3100                           plusw2	equ	0xFDB
  3101                           fsr2h	equ	0xFDA
  3102                           fsr2l	equ	0xFD9
  3103                           status	equ	0xFD8
  3104                           
  3105 ;; *************** function _low_isr *****************
  3106 ;; Defined at:
  3107 ;;		line 66 in file "interrupts.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;		None
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;		None
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  1    wreg      void 
  3114 ;; Registers used:
  3115 ;;		None
  3116 ;; Tracked objects:
  3117 ;;		On entry : 0/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3123 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3124 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3125 ;;Total ram usage:       17 bytes
  3126 ;; Hardware stack levels used:    1
  3127 ;; Hardware stack levels required when called:    2
  3128 ;; This function calls:
  3129 ;;		Nothing
  3130 ;; This function is called by:
  3131 ;;		Interrupt level 1
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           	psect	intcodelo
  3136  000018                     __pintcodelo:
  3137                           	opt stack 0
  3138  000018                     _low_isr:
  3139                           	opt stack 25
  3140                           
  3141                           ;incstack = 0
  3142  000018  8039               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3143  00001A  CFD8 F011          	movff	status,??_low_isr
  3144  00001E  CFE8 F012          	movff	wreg,??_low_isr+1
  3145  000022  CFE0 F013          	movff	bsr,??_low_isr+2
  3146  000026  CFFA F014          	movff	pclath,??_low_isr+3
  3147  00002A  CFFB F015          	movff	pclatu,??_low_isr+4
  3148  00002E  CFE9 F016          	movff	fsr0l,??_low_isr+5
  3149  000032  CFEA F017          	movff	fsr0h,??_low_isr+6
  3150  000036  CFE1 F018          	movff	fsr1l,??_low_isr+7
  3151  00003A  CFE2 F019          	movff	fsr1h,??_low_isr+8
  3152  00003E  CFD9 F01A          	movff	fsr2l,??_low_isr+9
  3153  000042  CFDA F01B          	movff	fsr2h,??_low_isr+10
  3154  000046  CFF3 F01C          	movff	prodl,??_low_isr+11
  3155  00004A  CFF4 F01D          	movff	prodh,??_low_isr+12
  3156  00004E  CFF6 F01E          	movff	tblptrl,??_low_isr+13
  3157  000052  CFF7 F01F          	movff	tblptrh,??_low_isr+14
  3158  000056  CFF8 F020          	movff	tblptru,??_low_isr+15
  3159  00005A  CFF5 F021          	movff	tablat,??_low_isr+16
  3160  00005E  C021  FFF5         	movff	??_low_isr+16,tablat
  3161  000062  C020  FFF8         	movff	??_low_isr+15,tblptru
  3162  000066  C01F  FFF7         	movff	??_low_isr+14,tblptrh
  3163  00006A  C01E  FFF6         	movff	??_low_isr+13,tblptrl
  3164  00006E  C01D  FFF4         	movff	??_low_isr+12,prodh
  3165  000072  C01C  FFF3         	movff	??_low_isr+11,prodl
  3166  000076  C01B  FFDA         	movff	??_low_isr+10,fsr2h
  3167  00007A  C01A  FFD9         	movff	??_low_isr+9,fsr2l
  3168  00007E  C019  FFE2         	movff	??_low_isr+8,fsr1h
  3169  000082  C018  FFE1         	movff	??_low_isr+7,fsr1l
  3170  000086  C017  FFEA         	movff	??_low_isr+6,fsr0h
  3171  00008A  C016  FFE9         	movff	??_low_isr+5,fsr0l
  3172  00008E  C015  FFFB         	movff	??_low_isr+4,pclatu
  3173  000092  C014  FFFA         	movff	??_low_isr+3,pclath
  3174  000096  C013  FFE0         	movff	??_low_isr+2,bsr
  3175  00009A  C012  FFE8         	movff	??_low_isr+1,wreg
  3176  00009E  C011  FFD8         	movff	??_low_isr,status
  3177  0000A2  9039               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3178  0000A4  0010               	retfie	
  3179  0000A6                     __end_of_low_isr:
  3180                           	opt stack 0
  3181                           pclatu	equ	0xFFB
  3182                           pclath	equ	0xFFA
  3183                           tblptru	equ	0xFF8
  3184                           tblptrh	equ	0xFF7
  3185                           tblptrl	equ	0xFF6
  3186                           tablat	equ	0xFF5
  3187                           prodh	equ	0xFF4
  3188                           prodl	equ	0xFF3
  3189                           intcon	equ	0xFF2
  3190                           indf0	equ	0xFEF
  3191                           postinc0	equ	0xFEE
  3192                           fsr0h	equ	0xFEA
  3193                           fsr0l	equ	0xFE9
  3194                           wreg	equ	0xFE8
  3195                           indf1	equ	0xFE7
  3196                           fsr1h	equ	0xFE2
  3197                           fsr1l	equ	0xFE1
  3198                           bsr	equ	0xFE0
  3199                           indf2	equ	0xFDF
  3200                           postinc2	equ	0xFDE
  3201                           postdec2	equ	0xFDD
  3202                           plusw2	equ	0xFDB
  3203                           fsr2h	equ	0xFDA
  3204                           fsr2l	equ	0xFD9
  3205                           status	equ	0xFD8
  3206                           
  3207 ;; *************** function _high_isr *****************
  3208 ;; Defined at:
  3209 ;;		line 30 in file "interrupts.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;		None
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;		None
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  1    wreg      void 
  3216 ;; Registers used:
  3217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3225 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3226 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3227 ;;Total ram usage:       15 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:    1
  3230 ;; This function calls:
  3231 ;;		_appendChar
  3232 ;; This function is called by:
  3233 ;;		Interrupt level 2
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           	psect	intcode
  3238  000008                     __pintcode:
  3239                           	opt stack 0
  3240  000008                     _high_isr:
  3241                           	opt stack 25
  3242                           
  3243                           ;incstack = 0
  3244  000008  8239               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3245  00000A  EF1F  F00A         	goto	int_func
  3246                           pclatu	equ	0xFFB
  3247                           pclath	equ	0xFFA
  3248                           tblptru	equ	0xFF8
  3249                           tblptrh	equ	0xFF7
  3250                           tblptrl	equ	0xFF6
  3251                           tablat	equ	0xFF5
  3252                           prodh	equ	0xFF4
  3253                           prodl	equ	0xFF3
  3254                           intcon	equ	0xFF2
  3255                           indf0	equ	0xFEF
  3256                           postinc0	equ	0xFEE
  3257                           fsr0h	equ	0xFEA
  3258                           fsr0l	equ	0xFE9
  3259                           wreg	equ	0xFE8
  3260                           indf1	equ	0xFE7
  3261                           fsr1h	equ	0xFE2
  3262                           fsr1l	equ	0xFE1
  3263                           bsr	equ	0xFE0
  3264                           indf2	equ	0xFDF
  3265                           postinc2	equ	0xFDE
  3266                           postdec2	equ	0xFDD
  3267                           plusw2	equ	0xFDB
  3268                           fsr2h	equ	0xFDA
  3269                           fsr2l	equ	0xFD9
  3270                           status	equ	0xFD8
  3271                           
  3272                           	psect	intcode_body
  3273  00143E                     __pintcode_body:
  3274                           	opt stack 25
  3275  00143E                     int_func:
  3276                           	opt stack 25
  3277  00143E  CFFA F003          	movff	pclath,??_high_isr+1
  3278  001442  CFFB F004          	movff	pclatu,??_high_isr+2
  3279  001446  CFE9 F005          	movff	fsr0l,??_high_isr+3
  3280  00144A  CFEA F006          	movff	fsr0h,??_high_isr+4
  3281  00144E  CFE1 F007          	movff	fsr1l,??_high_isr+5
  3282  001452  CFE2 F008          	movff	fsr1h,??_high_isr+6
  3283  001456  CFD9 F009          	movff	fsr2l,??_high_isr+7
  3284  00145A  CFDA F00A          	movff	fsr2h,??_high_isr+8
  3285  00145E  CFF3 F00B          	movff	prodl,??_high_isr+9
  3286  001462  CFF4 F00C          	movff	prodh,??_high_isr+10
  3287  001466  CFF6 F00D          	movff	tblptrl,??_high_isr+11
  3288  00146A  CFF7 F00E          	movff	tblptrh,??_high_isr+12
  3289  00146E  CFF8 F00F          	movff	tblptru,??_high_isr+13
  3290  001472  CFF5 F010          	movff	tablat,??_high_isr+14
  3291                           
  3292                           ;interrupts.c: 45: if(RC1IF){
  3293  001476  AA9E               	btfss	3998,5,c	;volatile
  3294  001478  D00F               	goto	i2l1691
  3295                           
  3296                           ;interrupts.c: 46: LATAbits.LATA0 = !LATAbits.LATA0;
  3297  00147A  B089               	btfsc	3977,0,c	;volatile
  3298  00147C  D003               	goto	i2u95_40
  3299  00147E  6A02               	clrf	??_high_isr& (0+255),c
  3300  001480  2A02               	incf	??_high_isr& (0+255),f,c
  3301  001482  D001               	goto	i2u96_48
  3302  001484                     i2u95_40:
  3303  001484  6A02               	clrf	??_high_isr& (0+255),c
  3304  001486                     i2u96_48:
  3305  001486  5089               	movf	3977,w,c	;volatile
  3306  001488  1802               	xorwf	??_high_isr,w,c
  3307  00148A  0BFE               	andlw	-2
  3308  00148C  1802               	xorwf	??_high_isr,w,c
  3309  00148E  6E89               	movwf	3977,c	;volatile
  3310                           
  3311                           ;interrupts.c: 47: appendChar(RCREG1);
  3312  001490  50AF               	movf	4015,w,c	;volatile
  3313  001492  EC91  F00C         	call	_appendChar
  3314                           
  3315                           ;interrupts.c: 49: RC1IF = 0;
  3316  001496  9A9E               	bcf	3998,5,c	;volatile
  3317  001498                     i2l1691:
  3318                           
  3319                           ;interrupts.c: 50: }
  3320                           ;interrupts.c: 52: if(RC2IF){
  3321  001498  BAA4               	btfsc	4004,5,c	;volatile
  3322                           
  3323                           ;interrupts.c: 57: RC2IF = 0;
  3324  00149A  9AA4               	bcf	4004,5,c	;volatile
  3325  00149C  C010  FFF5         	movff	??_high_isr+14,tablat
  3326  0014A0  C00F  FFF8         	movff	??_high_isr+13,tblptru
  3327  0014A4  C00E  FFF7         	movff	??_high_isr+12,tblptrh
  3328  0014A8  C00D  FFF6         	movff	??_high_isr+11,tblptrl
  3329  0014AC  C00C  FFF4         	movff	??_high_isr+10,prodh
  3330  0014B0  C00B  FFF3         	movff	??_high_isr+9,prodl
  3331  0014B4  C00A  FFDA         	movff	??_high_isr+8,fsr2h
  3332  0014B8  C009  FFD9         	movff	??_high_isr+7,fsr2l
  3333  0014BC  C008  FFE2         	movff	??_high_isr+6,fsr1h
  3334  0014C0  C007  FFE1         	movff	??_high_isr+5,fsr1l
  3335  0014C4  C006  FFEA         	movff	??_high_isr+4,fsr0h
  3336  0014C8  C005  FFE9         	movff	??_high_isr+3,fsr0l
  3337  0014CC  C004  FFFB         	movff	??_high_isr+2,pclatu
  3338  0014D0  C003  FFFA         	movff	??_high_isr+1,pclath
  3339  0014D4  9239               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3340  0014D6  0011               	retfie		f
  3341  0014D8                     __end_of_high_isr:
  3342                           	opt stack 0
  3343                           pclatu	equ	0xFFB
  3344                           pclath	equ	0xFFA
  3345                           tblptru	equ	0xFF8
  3346                           tblptrh	equ	0xFF7
  3347                           tblptrl	equ	0xFF6
  3348                           tablat	equ	0xFF5
  3349                           prodh	equ	0xFF4
  3350                           prodl	equ	0xFF3
  3351                           intcon	equ	0xFF2
  3352                           indf0	equ	0xFEF
  3353                           postinc0	equ	0xFEE
  3354                           fsr0h	equ	0xFEA
  3355                           fsr0l	equ	0xFE9
  3356                           wreg	equ	0xFE8
  3357                           indf1	equ	0xFE7
  3358                           fsr1h	equ	0xFE2
  3359                           fsr1l	equ	0xFE1
  3360                           bsr	equ	0xFE0
  3361                           indf2	equ	0xFDF
  3362                           postinc2	equ	0xFDE
  3363                           postdec2	equ	0xFDD
  3364                           plusw2	equ	0xFDB
  3365                           fsr2h	equ	0xFDA
  3366                           fsr2l	equ	0xFD9
  3367                           status	equ	0xFD8
  3368                           
  3369 ;; *************** function _appendChar *****************
  3370 ;; Defined at:
  3371 ;;		line 29 in file "bufferhandler.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;  data            1    wreg     unsigned char 
  3374 ;; Auto vars:     Size  Location     Type
  3375 ;;  data            1    0[COMRAM] unsigned char 
  3376 ;; Return value:  Size  Location     Type
  3377 ;;                  1    wreg      void 
  3378 ;; Registers used:
  3379 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3380 ;; Tracked objects:
  3381 ;;		On entry : 0/0
  3382 ;;		On exit  : 0/0
  3383 ;;		Unchanged: 0/0
  3384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3386 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3388 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3389 ;;Total ram usage:        1 bytes
  3390 ;; Hardware stack levels used:    1
  3391 ;; This function calls:
  3392 ;;		Nothing
  3393 ;; This function is called by:
  3394 ;;		_high_isr
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           	psect	text22
  3399  001922                     __ptext22:
  3400                           	opt stack 0
  3401  001922                     _appendChar:
  3402                           	opt stack 25
  3403                           
  3404                           ;incstack = 0
  3405                           ;appendChar@data stored from wreg
  3406  001922  6E01               	movwf	appendChar@data,c
  3407                           
  3408                           ;bufferhandler.c: 30: tmpString[index] = data;
  3409  001924  0E90               	movlw	low _tmpString
  3410  001926  2437               	addwf	_index,w,c
  3411  001928  6ED9               	movwf	fsr2l,c
  3412  00192A  0E00               	movlw	high _tmpString
  3413  00192C  2038               	addwfc	_index+1,w,c
  3414  00192E  6EDA               	movwf	fsr2h,c
  3415  001930  C001  FFDF         	movff	appendChar@data,indf2
  3416                           
  3417                           ;bufferhandler.c: 31: index++;
  3418  001934  4A37               	infsnz	_index,f,c
  3419  001936  2A38               	incf	_index+1,f,c
  3420  001938  0012               	return		;funcret
  3421  00193A                     __end_of_appendChar:
  3422                           	opt stack 0
  3423                           pclatu	equ	0xFFB
  3424                           pclath	equ	0xFFA
  3425                           tblptru	equ	0xFF8
  3426                           tblptrh	equ	0xFF7
  3427                           tblptrl	equ	0xFF6
  3428                           tablat	equ	0xFF5
  3429                           prodh	equ	0xFF4
  3430                           prodl	equ	0xFF3
  3431                           intcon	equ	0xFF2
  3432                           indf0	equ	0xFEF
  3433                           postinc0	equ	0xFEE
  3434                           fsr0h	equ	0xFEA
  3435                           fsr0l	equ	0xFE9
  3436                           wreg	equ	0xFE8
  3437                           indf1	equ	0xFE7
  3438                           fsr1h	equ	0xFE2
  3439                           fsr1l	equ	0xFE1
  3440                           bsr	equ	0xFE0
  3441                           indf2	equ	0xFDF
  3442                           postinc2	equ	0xFDE
  3443                           postdec2	equ	0xFDD
  3444                           plusw2	equ	0xFDB
  3445                           fsr2h	equ	0xFDA
  3446                           fsr2l	equ	0xFD9
  3447                           status	equ	0xFD8
  3448                           pclatu	equ	0xFFB
  3449                           pclath	equ	0xFFA
  3450                           tblptru	equ	0xFF8
  3451                           tblptrh	equ	0xFF7
  3452                           tblptrl	equ	0xFF6
  3453                           tablat	equ	0xFF5
  3454                           prodh	equ	0xFF4
  3455                           prodl	equ	0xFF3
  3456                           intcon	equ	0xFF2
  3457                           indf0	equ	0xFEF
  3458                           postinc0	equ	0xFEE
  3459                           fsr0h	equ	0xFEA
  3460                           fsr0l	equ	0xFE9
  3461                           wreg	equ	0xFE8
  3462                           indf1	equ	0xFE7
  3463                           fsr1h	equ	0xFE2
  3464                           fsr1l	equ	0xFE1
  3465                           bsr	equ	0xFE0
  3466                           indf2	equ	0xFDF
  3467                           postinc2	equ	0xFDE
  3468                           postdec2	equ	0xFDD
  3469                           plusw2	equ	0xFDB
  3470                           fsr2h	equ	0xFDA
  3471                           fsr2l	equ	0xFD9
  3472                           status	equ	0xFD8
  3473                           
  3474                           	psect	rparam
  3475  0000                     pclatu	equ	0xFFB
  3476                           pclath	equ	0xFFA
  3477                           tblptru	equ	0xFF8
  3478                           tblptrh	equ	0xFF7
  3479                           tblptrl	equ	0xFF6
  3480                           tablat	equ	0xFF5
  3481                           prodh	equ	0xFF4
  3482                           prodl	equ	0xFF3
  3483                           intcon	equ	0xFF2
  3484                           indf0	equ	0xFEF
  3485                           postinc0	equ	0xFEE
  3486                           fsr0h	equ	0xFEA
  3487                           fsr0l	equ	0xFE9
  3488                           wreg	equ	0xFE8
  3489                           indf1	equ	0xFE7
  3490                           fsr1h	equ	0xFE2
  3491                           fsr1l	equ	0xFE1
  3492                           bsr	equ	0xFE0
  3493                           indf2	equ	0xFDF
  3494                           postinc2	equ	0xFDE
  3495                           postdec2	equ	0xFDD
  3496                           plusw2	equ	0xFDB
  3497                           fsr2h	equ	0xFDA
  3498                           fsr2l	equ	0xFD9
  3499                           status	equ	0xFD8
  3500                           
  3501                           	psect	temp
  3502  000039                     btemp:
  3503                           	opt stack 0
  3504  000039                     	ds	1
  3505  0000                     int$flags	set	btemp
  3506                           pclatu	equ	0xFFB
  3507                           pclath	equ	0xFFA
  3508                           tblptru	equ	0xFF8
  3509                           tblptrh	equ	0xFF7
  3510                           tblptrl	equ	0xFF6
  3511                           tablat	equ	0xFF5
  3512                           prodh	equ	0xFF4
  3513                           prodl	equ	0xFF3
  3514                           intcon	equ	0xFF2
  3515                           indf0	equ	0xFEF
  3516                           postinc0	equ	0xFEE
  3517                           fsr0h	equ	0xFEA
  3518                           fsr0l	equ	0xFE9
  3519                           wreg	equ	0xFE8
  3520                           indf1	equ	0xFE7
  3521                           fsr1h	equ	0xFE2
  3522                           fsr1l	equ	0xFE1
  3523                           bsr	equ	0xFE0
  3524                           indf2	equ	0xFDF
  3525                           postinc2	equ	0xFDE
  3526                           postdec2	equ	0xFDD
  3527                           plusw2	equ	0xFDB
  3528                           fsr2h	equ	0xFDA
  3529                           fsr2l	equ	0xFD9
  3530                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    0
    Data        0
    BSS         200
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      56
    BANK0           160     23     147
    BANK1           256      0      70
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 70
		 -> allDataString(BANK1[70]), tmpString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 70
		 -> allDataString(BANK1[70]), tmpString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 

    transformToTwoDigitNumber@number	PTR int  size(2) Largest target is 6
		 -> SOC(BANK0[6]), 

    writeString@str	PTR unsigned char  size(2) Largest target is 70
		 -> allDataString(BANK1[70]), STR_2(CODE[4]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_parseString
    _writeResult->_wait_ms
    _writeString->_strlen
    _wait_ms->___lmul
    _parseString->_transformToTwoDigitNumber
    _transformToTwoDigitNumber->___wmul
    _clearBuffer->_strlen

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_appendChar

Critical Paths under _main in BANK0

    _main->_parseString

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6184
                                             49 COMRAM     1     1      0
                _ConfigureOscillator
                            _InitApp
                          _UART_Init
                         _UART_Write
                        _clearBuffer
                      _copyTmpBuffer
                     _isItLongEnough
                            _isValid
                        _parseString
                            _wait_ms
                        _writeResult
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeResult                                          1     1      0    1530
                                             47 COMRAM     1     1      0
                            _wait_ms
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeString                                          7     4      3    1036
                                             39 COMRAM     7     4      3
                         _UART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           2     1      1     258
                                             33 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _wait_ms                                              2     0      2     472
                                             45 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     322
                                             33 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _parseString                                         25    25      0    2427
                                             47 COMRAM     2     2      0
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___awmod
                          _lenHelper
          _transformToTwoDigitNumber
 ---------------------------------------------------------------------------------
 (2) _transformToTwoDigitNumber                            8     4      4     661
                                             39 COMRAM     8     4      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     287
                                             33 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _lenHelper                                            2     0      2     130
                                             33 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     552
                                             33 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                             33 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _isValid                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _isItLongEnough                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _copyTmpBuffer                                        3     3      0      68
                                             33 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _clearBuffer                                          2     2      0     328
                                             39 COMRAM     2     2      0
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     282
                                             33 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4      64
                                             33 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                             16 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            15    15      0      22
                                              1 COMRAM    15    15      0
                         _appendChar
 ---------------------------------------------------------------------------------
 (6) _appendChar                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _UART_Init
   _UART_Write
   _clearBuffer
     _strlen
   _copyTmpBuffer
   _isItLongEnough
   _isValid
   _parseString
     ___awdiv
     ___awmod
     _lenHelper
     _transformToTwoDigitNumber
       ___wmul
   _wait_ms
     ___lmul
   _writeResult
     _wait_ms
       ___lmul
     _writeString
       _UART_Write
       _strlen
   _writeString
     _UART_Write
     _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)
   _appendChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      46       8       27.3%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     17      93       5       91.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      38       1       59.6%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     111       6        0.0%
DATA                 0      0     111       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Apr 22 13:55:23 2017

 __end_of_transformToTwoDigitNumber 1398                                  l54 1430  
                                l73 16CA                                  l57 1432  
                      ___awdiv@sign 0027                      writeResult@dev 0030  
                                bsr 000FE0                 ___wmul@multiplicand 0024  
                      __CFG_CP0$OFF 000000                                 l150 1918  
                               l146 190E                                 l262 12F4  
                               l265 1368                                 u700 166E  
                               u620 1608                                 u650 12A4  
                               u627 15FE                                 u580 175E  
                               u660 12E6                                 u670 135A  
                               u690 1654                                 u930 113E  
                               u587 1754                                 _SOC 00D6  
                      ___awmod@sign 0027                                 wreg 000FE8  
                        _TXSTA1bits 000FAD                        __CFG_IESO$ON 000000  
                        _TXSTA2bits 000FA8                                l1133 1948  
                              l1411 12AE                                l1403 1288  
                              l1501 1544                                l1415 12B6  
                              l1505 1552                                l1521 157C  
                              l1425 12FE                                l1603 17F2  
                              l1611 0F80                                l1365 1738  
                              l1541 15C2                                l1533 15AA  
                              l1525 158A                                l1517 1570  
                              l1461 1678                                l1437 1372  
                              l1381 16E8                                l1367 173C  
                              l1527 1592                                l1455 165E  
                              l1631 10AA                                l1623 1016  
                              l1391 15D6                                l1473 14EC  
                              l1529 1596                                l1537 15B4  
                              l1449 1644                                l1617 0FC0  
                              l1385 16FC                                l1571 178C  
                              l1395 1610                                l1485 1512  
                              l1629 1096                                l1733 142A  
                              l1575 17A0                                l1487 151A  
                              l1479 14FC                                l1639 10F6  
                              l1399 16BA                                l1719 13FA  
                              l1593 183E                                l1497 153A  
                              l1489 151E                                l1657 1148  
                              l1599 17D2                  __CFG_WPFP$PAGE_127 000000  
                     _copyTmpBuffer 17C8                                STR_1 0F01  
                              STR_2 0F06                                STR_3 0F05  
                              STR_4 0F0A                                STR_5 0F0E  
                              STR_6 0F12                                STR_7 0F10  
                              STR_8 0F0A                                STR_9 0F0C  
                              _RCIF 007CF5                       __CFG_FCMEN$ON 000000  
                              _main 1398                                fsr0h 000FEA  
                              fsr1h 000FE2                                indf0 000FEF  
                              fsr2h 000FDA                                fsr0l 000FE9  
                              indf1 000FE7                                indf2 000FDF  
                              fsr1l 000FE1                                fsr2l 000FD9  
                              btemp 0039                                prodh 000FF4  
                              prodl 000FF3                                start 00A6  
                    writeString@dev 002A                        ___param_bank 000000  
                    writeString@str 0028                     __end_of_InitApp 1906  
                     __CFG_PLLDIV$1 000000                        _BAUDCON1bits 000F7E  
                      _BAUDCON2bits 000F7C                               ?_main 0001  
                   __end_of___awdiv 155C                               STR_10 0F0E  
                             STR_11 0F14                               STR_12 0F0A  
                   __end_of___awmod 15CC                     ___awdiv@divisor 0024  
                             _RC1IE 007CED                               _RC1IF 007CF5  
                             _RC2IE 007D1D                               _RC2IF 007D25  
                   ___awdiv@counter 0026                         _writeResult 18C8  
                             _RPOR8 000EC8                 _ConfigureOscillator 194C  
                       _writeString 15CC                 ___lmul@multiplicand 0026  
                  ??_isItLongEnough 0022                         ?_UART_Write 0022  
                __size_of_UART_Init 0032                     __end_of_isValid 1842  
                             _index 0037                      ?_copyTmpBuffer 0001  
                    __CFG_CLKOEC$ON 000000                     __end_of_low_isr 00A6  
                             pclath 000FFA                               tablat 000FF5  
                   __end_of_wait_ms 16D8                               plusw2 000FDB  
                parseString@chgStop 00DC                               status 000FD8  
              ?_ConfigureOscillator 0001                __size_of_clearBuffer 0046  
           __CFG_DSWDTOSC$INTOSCREF 000000                     __initialization 1874  
                      ?_parseString 0001                  parseString@socSize 00E0  
                      __end_of_main 143E                              ??_main 0032  
                     __activetblptr 000003                    ___awdiv@dividend 0022  
                    __CFG_WDTEN$OFF 000000                              i2l1691 1498  
                            _INTCON 000FF2                              _RCREG1 000FAF  
                            _RCREG2 000FAA                              _RCSTA1 000FAC  
                            _RCSTA2 000F9C                              _SPBRG1 000FB0  
                            _SPBRG2 000FAB                              _PPSCON 000EBF  
                            _TRISB4 007C9C                              _TRISB5 007C9D  
                    __CFG_WPCFG$OFF 000000                              _TRISC6 007CA6  
                            _TRISC7 007CA7                              _TXREG1 000FAE  
                            _TXREG2 000FA9                              _TXSTA1 000FAD  
                            _TXSTA2 000FA8                           ??_InitApp 0022  
             ??_ConfigureOscillator 0022                      __CFG_WPDIS$OFF 000000  
                    __CFG_XINST$OFF 000000                   __end_of_UART_Init 1874  
                  __end_of_high_isr 14D8                              ___lmul 16D8  
               __size_of_UART_Write 001C                              ___wmul 18A2  
                         ??___awdiv 0026                      __CFG_STVREN$ON 000000  
                         ??___awmod 0026              parseString@socStartPos 00E7  
                            clear_0 187A                              clear_1 1886  
                  ___awdiv@quotient 0028                     ___awmod@divisor 0024  
                   ___awmod@counter 0026                              _strlen 172E  
                         ??_isValid 0022                        __mediumconst 0000  
                         ??_low_isr 0011                              tblptrh 000FF7  
                   ??_copyTmpBuffer 0022                              tblptrl 000FF6  
                            tblptru 000FF8                           ??_wait_ms 0030  
               parseString@chgStart 00E2                     __CFG_DSBOREN$ON 000000  
              __CFG_LS48MHZ$SYS48X8 000000                          __accesstop 0060  
           __end_of__initialization 1898                       ___rparam_used 000001  
                   __CFG_IOL1WAY$ON 000000                __CFG_WPEND$PAGE_WPFP 000000  
                    __pcstackCOMRAM 0001                     __CFG_DSWDTEN$ON 000000  
                   __CFG_DSWDTPS$G2 000000                     __CFG_OSC$INTOSC 000000  
                __size_of_lenHelper 0058         parseString@parsedStringSize 00DE  
                        __pbssBANK0 0060                          __pbssBANK1 0100  
                           ?___lmul 0022                             ?___wmul 0022  
              __size_of_parseString 0366          ?_transformToTwoDigitNumber 0028  
                    ___lmul@product 002A                          _appendChar 1922  
                           ?_strlen 0022                       _allDataString 0100  
                      ?_writeResult 0001                        ?_writeString 0028  
                      ??_UART_Write 0023                             _SPBRGH1 000F7F  
                           _SPBRGH2 000F7D                             _RPINR16 000EF7  
                           i2u95_40 1484                             i2u96_48 1486  
                         ?_high_isr 0001                             _InitApp 18E8  
                           __Hparam 0000                             __Lparam 0000  
     transformToTwoDigitNumber@size 002A                   __end_of_lenHelper 1682  
                           ___awdiv 14D8                     __size_of___lmul 0056  
                           ___awmod 155C                     __size_of___wmul 0026  
                __end_of_UART_Write 1922                        __psmallconst 0F00  
                           _charSOC 008D                             __pcinit 1874  
                           __ramtop 0F00                             __ptext0 1398  
                           __ptext1 18C8                             __ptext2 15CC  
                           __ptext3 1906                             __ptext4 1682  
                           __ptext5 16D8                             __ptext6 0F18  
                           __ptext7 127E                             __ptext8 18A2  
                           __ptext9 162A                             _isValid 1808  
                   __size_of_strlen 0054                    ___awmod@dividend 0022  
                           _low_isr 0018                             _wait_ms 1682  
                           main@var 0032                      parseString@CHG 00E6  
                        ??_high_isr 0002                      __pintcode_body 143E  
              end_of_initialization 1898                      parseString@tmp 00EF  
                     ??_clearBuffer 0028                             int_func 143E  
                           postdec2 000FDD                             postinc0 000FEE  
                           postinc2 000FDE                         wait_ms@time 002E  
                           strlen@s 0022                           _UART_Init 1842  
                         _PORTDbits 000F83                         ?_appendChar 0001  
                    UART_Write@data 0023                    __CFG_CPUDIV$OSC1 000000  
                         _TRISAbits 000F92                           _TRISDbits 000F95  
                 __CFG_SOSCSEL$HIGH 000000         __end_of_ConfigureOscillator 1958  
                      writeString@i 002D                          lenHelper@x 0022  
           __size_of_isItLongEnough 0012                 __CFG_MSSP7B_EN$MSK7 000000  
               __end_of_clearBuffer 17C8                parseString@socEndPos 00E9  
                    __end_of___lmul 172E                      __end_of___wmul 18C8  
                        ?_UART_Init 0022                      __end_of_strlen 1782  
               start_initialization 1874                __size_of_writeResult 0020  
              __size_of_writeString 005E               __end_of_copyTmpBuffer 1808  
               __size_of_appendChar 0018                            ??___lmul 002A  
                          ??___wmul 0026                   __CFG_ADCSEL$BIT10 000000  
                      parseString@i 00EB                        parseString@k 00E4  
                      parseString@n 00F1     transformToTwoDigitNumber@number 0028  
   transformToTwoDigitNumber@result 002E         ??_transformToTwoDigitNumber 002C  
                          ??_strlen 0024                         __pbssCOMRAM 0033  
                     __pcstackBANK0 00DC                   __size_of_high_isr 14D0  
                       _clearBuffer 1782                            ?_InitApp 0001  
                     ??_parseString 0030                           __pintcode 0008  
                          ?___awdiv 0022                            ?___awmod 0022  
                       __pintcodelo 0018                         ??_UART_Init 0026  
                         _lenHelper 162A                            ?_isValid 0001  
                       __smallconst 0F00                __CFG_RTCOSC$T1OSCREF 000000  
                          ?_low_isr 0001                            ?_wait_ms 002E  
         _transformToTwoDigitNumber 127E                      copyTmpBuffer@i 0023  
                    ___wmul@product 0026                      _isItLongEnough 193A  
                          _LATAbits 000F89                    __CFG_WDTPS$32768 000000  
                      _parsedString 0076                        clearBuffer@i 0028  
                     UART_Write@dev 0022                           _tmpString 0090  
                 UART_Init@baudrate 0022                           _positions 0060  
                        ?_lenHelper 0022                 __end_of_parseString 127E  
                      ??_appendChar 0001                   ___wmul@multiplier 0022  
                 __CFG_CFGPLLEN$OFF 000000                   ___lmul@multiplier 0022  
            __end_of_isItLongEnough 194C                    parseString@count 00ED  
                __end_of_appendChar 193A                    __size_of_InitApp 001E  
                          __Hrparam 0000                            __Lrparam 0000  
                  __size_of___awdiv 0084                    __size_of___awmod 0070  
                  __size_of_isValid 003A                         _toCharArray 0087  
                  __size_of_low_isr 008E                            __ptext10 155C  
                          __ptext11 14D8                            __ptext12 1808  
                          __ptext13 193A                            __ptext22 1922  
                          __ptext14 17C8                            __ptext15 1782  
                          __ptext16 172E                            __ptext17 1842  
                          __ptext18 18E8                            __ptext19 194C  
                  __size_of_wait_ms 0056                            _high_isr 0008  
                   ?_isItLongEnough 0001                       __size_of_main 00A6  
                    appendChar@data 0001        __size_of_ConfigureOscillator 000C  
                       _parseString 0F18                            int$flags 0039  
                       ??_lenHelper 0024                       ??_writeResult 0030  
                     ??_writeString 002B                         _OSCTUNEbits 000F9B  
                          intlevel1 0000                            intlevel2 0000  
                      ?_clearBuffer 0001                          _OSCCONbits 000FD3  
__size_of_transformToTwoDigitNumber 011A              __size_of_copyTmpBuffer 0040  
                      wait_ms@timel 0033                            strlen@cp 0026  
                        _UART_Write 1906                 __end_of_writeResult 18E8  
               __end_of_writeString 162A  
