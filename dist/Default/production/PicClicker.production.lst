

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Apr 24 22:06:31 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F47J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 1.41
    44                           ; Generated 25/01/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F47J53 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataBANK0
    79  001840                     __pidataBANK0:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _parsedString
    83  001840  53                 	db	83
    84  001841  4F                 	db	79
    85  001842  43                 	db	67
    86  001843  78                 	db	120
    87  001844  78                 	db	120
    88  001845  3B                 	db	59
    89  001846  43                 	db	67
    90  001847  48                 	db	72
    91  001848  47                 	db	71
    92  001849  78                 	db	120
    93  00184A  3B                 	db	59
    94  00184B  41                 	db	65
    95  00184C  43                 	db	67
    96  00184D  4B                 	db	75
    97  00184E  3B                 	db	59
    98  00184F  00                 	db	0
    99  001850  00                 	db	0
   100  0000                     _RPINR16	set	3831
   101  0000                     _RPOR8	set	3784
   102  0000                     _PPSCON	set	3775
   103  0000                     _RCREG2	set	4010
   104  0000                     _TXREG2	set	4009
   105  0000                     _TXSTA2bits	set	4008
   106  0000                     _TXREG1	set	4014
   107  0000                     _TXSTA1bits	set	4013
   108  0000                     _SPBRGH2	set	3965
   109  0000                     _SPBRG2	set	4011
   110  0000                     _BAUDCON2bits	set	3964
   111  0000                     _TXSTA2	set	4008
   112  0000                     _RCSTA2	set	3996
   113  0000                     _SPBRGH1	set	3967
   114  0000                     _SPBRG1	set	4016
   115  0000                     _BAUDCON1bits	set	3966
   116  0000                     _RCSTA1	set	4012
   117  0000                     _TXSTA1	set	4013
   118  0000                     _INTCON	set	4082
   119  0000                     _OSCTUNEbits	set	3995
   120  0000                     _OSCCONbits	set	4051
   121  0000                     _PORTDbits	set	3971
   122  0000                     _TRISDbits	set	3989
   123  0000                     _TRISAbits	set	3986
   124  0000                     _RCREG1	set	4015
   125  0000                     _LATAbits	set	3977
   126  0000                     _RCIF	set	31989
   127  0000                     _TRISB5	set	31901
   128  0000                     _TRISB4	set	31900
   129  0000                     _RC2IE	set	32029
   130  0000                     _TRISC6	set	31910
   131  0000                     _TRISC7	set	31911
   132  0000                     _RC1IE	set	31981
   133  0000                     _RC2IF	set	32037
   134  0000                     _RC1IF	set	31989
   135                           
   136                           	psect	smallconst
   137  000F00                     __psmallconst:
   138                           	opt stack 0
   139  000F00  00                 	db	0
   140  000F01                     STR_1:
   141  000F01  4C                 	db	76	;'L'
   142  000F02  20                 	db	32
   143  000F03  35                 	db	53	;'5'
   144  000F04  30                 	db	48	;'0'
   145  000F05  00                 	db	0
   146  000F06                     STR_2:
   147  000F06  44                 	db	68	;'D'
   148  000F07  20                 	db	32
   149  000F08  38                 	db	56	;'8'
   150  000F09  00                 	db	0
   151  0000                     
   152                           ; #config settings
   153  000F0A  00                 	db	0	; dummy byte at the end
   154  0000                     
   155                           	psect	cinit
   156  001606                     __pcinit:
   157                           	opt stack 0
   158  001606                     start_initialization:
   159                           	opt stack 0
   160  001606                     __initialization:
   161                           	opt stack 0
   162                           
   163                           ; Initialize objects allocated to BANK0 (17 bytes)
   164                           ; load TBLPTR registers with __pidataBANK0
   165  001606  0E40               	movlw	low __pidataBANK0
   166  001608  6EF6               	movwf	tblptrl,c
   167  00160A  0E18               	movlw	high __pidataBANK0
   168  00160C  6EF7               	movwf	tblptrh,c
   169  00160E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   170  001610  6EF8               	movwf	tblptru,c
   171  001612  EE00  F0D9         	lfsr	0,__pdataBANK0
   172  001616  EE10 F011          	lfsr	1,17
   173  00161A                     copy_data0:
   174  00161A  0009               	tblrd		*+
   175  00161C  CFF5 FFEE          	movff	tablat,postinc0
   176  001620  50E5               	movf	postdec1,w,c
   177  001622  50E1               	movf	fsr1l,w,c
   178  001624  E1FA               	bnz	copy_data0
   179                           
   180                           ; Clear objects allocated to BANK1 (70 bytes)
   181  001626  EE01  F000         	lfsr	0,__pbssBANK1
   182  00162A  0E46               	movlw	70
   183  00162C                     clear_0:
   184  00162C  6AEE               	clrf	postinc0,c
   185  00162E  06E8               	decf	wreg,f,c
   186  001630  E1FD               	bnz	clear_0
   187                           
   188                           ; Clear objects allocated to BANK0 (101 bytes)
   189  001632  EE00  F060         	lfsr	0,__pbssBANK0
   190  001636  0E65               	movlw	101
   191  001638                     clear_1:
   192  001638  6AEE               	clrf	postinc0,c
   193  00163A  06E8               	decf	wreg,f,c
   194  00163C  E1FD               	bnz	clear_1
   195                           
   196                           ; Clear objects allocated to COMRAM (10 bytes)
   197  00163E  EE00  F034         	lfsr	0,__pbssCOMRAM
   198  001642  0E0A               	movlw	10
   199  001644                     clear_2:
   200  001644  6AEE               	clrf	postinc0,c
   201  001646  06E8               	decf	wreg,f,c
   202  001648  E1FD               	bnz	clear_2
   203  00164A                     end_of_initialization:
   204                           	opt stack 0
   205  00164A                     __end_of__initialization:
   206                           	opt stack 0
   207  00164A  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   208  00164C  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   209  00164E  0100               	movlb	0
   210  001650  EF46  F009         	goto	_main	;jump to C main() function
   211                           tblptru	equ	0xFF8
   212                           tblptrh	equ	0xFF7
   213                           tblptrl	equ	0xFF6
   214                           tablat	equ	0xFF5
   215                           postinc0	equ	0xFEE
   216                           wreg	equ	0xFE8
   217                           postdec1	equ	0xFE5
   218                           fsr1l	equ	0xFE1
   219                           
   220                           	psect	bssCOMRAM
   221  000034                     __pbssCOMRAM:
   222                           	opt stack 0
   223  000034                     wait_ms@timel:
   224                           	opt stack 0
   225  000034                     	ds	4
   226  000038                     _index:
   227                           	opt stack 0
   228  000038                     	ds	2
   229  00003A                     _toCharArray:
   230                           	opt stack 0
   231  00003A                     	ds	4
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           postdec1	equ	0xFE5
   239                           fsr1l	equ	0xFE1
   240                           
   241                           	psect	bssBANK0
   242  000060                     __pbssBANK0:
   243                           	opt stack 0
   244  000060                     _positions:
   245                           	opt stack 0
   246  000060                     	ds	22
   247  000076                     _charSOC:
   248                           	opt stack 0
   249  000076                     	ds	3
   250  000079                     _tmpString:
   251                           	opt stack 0
   252  000079                     	ds	70
   253  0000BF                     _SOC:
   254                           	opt stack 0
   255  0000BF                     	ds	6
   256                           tblptru	equ	0xFF8
   257                           tblptrh	equ	0xFF7
   258                           tblptrl	equ	0xFF6
   259                           tablat	equ	0xFF5
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           postdec1	equ	0xFE5
   263                           fsr1l	equ	0xFE1
   264                           
   265                           	psect	dataBANK0
   266  0000D9                     __pdataBANK0:
   267                           	opt stack 0
   268  0000D9                     _parsedString:
   269                           	opt stack 0
   270  0000D9                     	ds	17
   271                           tblptru	equ	0xFF8
   272                           tblptrh	equ	0xFF7
   273                           tblptrl	equ	0xFF6
   274                           tablat	equ	0xFF5
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           postdec1	equ	0xFE5
   278                           fsr1l	equ	0xFE1
   279                           
   280                           	psect	bssBANK1
   281  000100                     __pbssBANK1:
   282                           	opt stack 0
   283  000100                     _allDataString:
   284                           	opt stack 0
   285  000100                     	ds	70
   286                           tblptru	equ	0xFF8
   287                           tblptrh	equ	0xFF7
   288                           tblptrl	equ	0xFF6
   289                           tablat	equ	0xFF5
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           postdec1	equ	0xFE5
   293                           fsr1l	equ	0xFE1
   294                           
   295                           	psect	cstackBANK0
   296  0000C5                     __pcstackBANK0:
   297                           	opt stack 0
   298  0000C5                     ??_parseString:
   299                           
   300                           ; 1 bytes @ 0x0
   301  0000C5                     	ds	2
   302  0000C7                     parseString@chgStop:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x2
   306  0000C7                     	ds	2
   307  0000C9                     parseString@tmpSOC:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0x4
   311  0000C9                     	ds	1
   312  0000CA                     parseString@socSize:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x5
   316  0000CA                     	ds	2
   317  0000CC                     parseString@chgStart:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x7
   321  0000CC                     	ds	2
   322  0000CE                     parseString@CHG:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x9
   326  0000CE                     	ds	1
   327  0000CF                     parseString@socStartPos:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0xA
   331  0000CF                     	ds	2
   332  0000D1                     parseString@socEndPos:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0xC
   336  0000D1                     	ds	2
   337  0000D3                     parseString@k:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0xE
   341  0000D3                     	ds	2
   342  0000D5                     parseString@tmp:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x10
   346  0000D5                     	ds	2
   347  0000D7                     parseString@i:
   348                           	opt stack 0
   349                           
   350                           ; 2 bytes @ 0x12
   351  0000D7                     	ds	2
   352                           tblptru	equ	0xFF8
   353                           tblptrh	equ	0xFF7
   354                           tblptrl	equ	0xFF6
   355                           tablat	equ	0xFF5
   356                           postinc0	equ	0xFEE
   357                           wreg	equ	0xFE8
   358                           postdec1	equ	0xFE5
   359                           fsr1l	equ	0xFE1
   360                           
   361                           	psect	cstackCOMRAM
   362  000001                     __pcstackCOMRAM:
   363                           	opt stack 0
   364  000001                     appendChar@data:
   365                           	opt stack 0
   366                           
   367                           ; 1 bytes @ 0x0
   368  000001                     	ds	1
   369  000002                     ??_high_isr:
   370                           
   371                           ; 1 bytes @ 0x1
   372  000002                     	ds	15
   373  000011                     ??_low_isr:
   374                           
   375                           ; 1 bytes @ 0x10
   376  000011                     	ds	17
   377  000022                     ??_copyTmpBuffer:
   378  000022                     ?_strlen:
   379                           	opt stack 0
   380  000022                     ?_lenHelper:
   381                           	opt stack 0
   382  000022                     ?___wmul:
   383                           	opt stack 0
   384  000022                     ?___awdiv:
   385                           	opt stack 0
   386  000022                     ?___lmul:
   387                           	opt stack 0
   388  000022                     UART_Write@dev:
   389                           	opt stack 0
   390  000022                     lenHelper@x:
   391                           	opt stack 0
   392  000022                     ___wmul@multiplier:
   393                           	opt stack 0
   394  000022                     ___awdiv@dividend:
   395                           	opt stack 0
   396  000022                     strlen@s:
   397                           	opt stack 0
   398  000022                     UART_Init@baudrate:
   399                           	opt stack 0
   400  000022                     ___lmul@multiplier:
   401                           	opt stack 0
   402                           
   403                           ; 4 bytes @ 0x21
   404  000022                     	ds	1
   405  000023                     UART_Write@data:
   406                           	opt stack 0
   407  000023                     copyTmpBuffer@i:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x22
   411  000023                     	ds	1
   412  000024                     ??_strlen:
   413  000024                     ___wmul@multiplicand:
   414                           	opt stack 0
   415  000024                     ___awdiv@divisor:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x23
   419  000024                     	ds	2
   420  000026                     ___awdiv@counter:
   421                           	opt stack 0
   422  000026                     ___wmul@product:
   423                           	opt stack 0
   424  000026                     strlen@cp:
   425                           	opt stack 0
   426  000026                     ___lmul@multiplicand:
   427                           	opt stack 0
   428                           
   429                           ; 4 bytes @ 0x25
   430  000026                     	ds	1
   431  000027                     ___awdiv@sign:
   432                           	opt stack 0
   433                           
   434                           ; 1 bytes @ 0x26
   435  000027                     	ds	1
   436  000028                     ?_transformToTwoDigitNumber:
   437                           	opt stack 0
   438  000028                     ?_checkPos:
   439                           	opt stack 0
   440  000028                     writeString@str:
   441                           	opt stack 0
   442  000028                     clearBuffer@i:
   443                           	opt stack 0
   444  000028                     transformToTwoDigitNumber@number:
   445                           	opt stack 0
   446  000028                     checkPos@pos:
   447                           	opt stack 0
   448  000028                     ___awdiv@quotient:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x27
   452  000028                     	ds	2
   453  00002A                     writeString@dev:
   454                           	opt stack 0
   455  00002A                     transformToTwoDigitNumber@size:
   456                           	opt stack 0
   457  00002A                     ___lmul@product:
   458                           	opt stack 0
   459                           
   460                           ; 4 bytes @ 0x29
   461  00002A                     	ds	1
   462  00002B                     ??_writeString:
   463  00002B                     checkPos@i:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x2A
   467  00002B                     	ds	1
   468  00002C                     ??_transformToTwoDigitNumber:
   469                           
   470                           ; 1 bytes @ 0x2B
   471  00002C                     	ds	1
   472  00002D                     ??_checkString:
   473  00002D                     writeString@i:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x2C
   477  00002D                     	ds	1
   478  00002E                     wait_ms@time:
   479                           	opt stack 0
   480  00002E                     transformToTwoDigitNumber@result:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x2D
   484  00002E                     	ds	2
   485  000030                     writeResult@dev:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x2F
   489  000030                     	ds	1
   490  000031                     checkString@i:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x30
   494  000031                     	ds	2
   495  000033                     main@var:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x32
   499  000033                     	ds	1
   500                           tblptru	equ	0xFF8
   501                           tblptrh	equ	0xFF7
   502                           tblptrl	equ	0xFF6
   503                           tablat	equ	0xFF5
   504                           postinc0	equ	0xFEE
   505                           wreg	equ	0xFE8
   506                           postdec1	equ	0xFE5
   507                           fsr1l	equ	0xFE1
   508                           
   509 ;;
   510 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   511 ;;
   512 ;; *************** function _main *****************
   513 ;; Defined at:
   514 ;;		line 39 in file "main.c"
   515 ;; Parameters:    Size  Location     Type
   516 ;;		None
   517 ;; Auto vars:     Size  Location     Type
   518 ;;  var             1   50[COMRAM] unsigned char 
   519 ;;  result          1    0        unsigned char 
   520 ;; Return value:  Size  Location     Type
   521 ;;                  1    wreg      void 
   522 ;; Registers used:
   523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   530 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   532 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   533 ;;Total ram usage:        1 bytes
   534 ;; Hardware stack levels required when called:    7
   535 ;; This function calls:
   536 ;;		_ConfigureOscillator
   537 ;;		_InitApp
   538 ;;		_UART_Init
   539 ;;		_UART_Write
   540 ;;		_clearBuffer
   541 ;;		_copyTmpBuffer
   542 ;;		_isItLongEnough
   543 ;;		_isValid
   544 ;;		_parseString
   545 ;;		_wait_ms
   546 ;;		_writeResult
   547 ;;		_writeString
   548 ;; This function is called by:
   549 ;;		Startup code after reset
   550 ;; This function uses a non-reentrant model
   551 ;;
   552                           
   553                           	psect	text0
   554  00128C                     __ptext0:
   555                           	opt stack 0
   556  00128C                     _main:
   557                           	opt stack 24
   558                           
   559                           ;main.c: 45: ConfigureOscillator();
   560                           
   561                           ;incstack = 0
   562  00128C  EC29  F00C         	call	_ConfigureOscillator	;wreg free
   563                           
   564                           ;main.c: 48: InitApp();
   565  001290  ECEB  F00B         	call	_InitApp	;wreg free
   566                           
   567                           ;main.c: 50: UART_Init(19200);
   568  001294  0E00               	movlw	0
   569  001296  6E22               	movwf	UART_Init@baudrate,c
   570  001298  0E4B               	movlw	75
   571  00129A  6E23               	movwf	UART_Init@baudrate+1,c
   572  00129C  0E00               	movlw	0
   573  00129E  6E24               	movwf	UART_Init@baudrate+2,c
   574  0012A0  0E00               	movlw	0
   575  0012A2  6E25               	movwf	UART_Init@baudrate+3,c
   576  0012A4  ECAF  F00B         	call	_UART_Init	;wreg free
   577                           
   578                           ;main.c: 51: writeString("L 50", 1);
   579  0012A8  0E01               	movlw	low STR_1
   580  0012AA  6E28               	movwf	writeString@str,c
   581  0012AC  0E0F               	movlw	high STR_1
   582  0012AE  6E29               	movwf	writeString@str+1,c
   583  0012B0  0E01               	movlw	1
   584  0012B2  6E2A               	movwf	writeString@dev,c
   585  0012B4  EC28  F00A         	call	_writeString	;wreg free
   586                           
   587                           ;main.c: 52: UART_Write(0x0D,1);
   588  0012B8  0E01               	movlw	1
   589  0012BA  6E22               	movwf	UART_Write@dev,c
   590  0012BC  0E0D               	movlw	13
   591  0012BE  ECFA  F00B         	call	_UART_Write
   592                           
   593                           ;main.c: 53: writeString("D 8", 1);
   594  0012C2  0E06               	movlw	low STR_2
   595  0012C4  6E28               	movwf	writeString@str,c
   596  0012C6  0E0F               	movlw	high STR_2
   597  0012C8  6E29               	movwf	writeString@str+1,c
   598  0012CA  0E01               	movlw	1
   599  0012CC  6E2A               	movwf	writeString@dev,c
   600  0012CE  EC28  F00A         	call	_writeString	;wreg free
   601                           
   602                           ;main.c: 54: UART_Write(0x0D,1);
   603  0012D2  0E01               	movlw	1
   604  0012D4  6E22               	movwf	UART_Write@dev,c
   605  0012D6  0E0D               	movlw	13
   606  0012D8  ECFA  F00B         	call	_UART_Write
   607                           
   608                           ;main.c: 56: uint8_t var = 0;
   609  0012DC  0E00               	movlw	0
   610  0012DE  6E33               	movwf	main@var,c
   611                           
   612                           ;main.c: 57: char result;
   613                           ;main.c: 60: TRISAbits.TRISA0 = 0;
   614  0012E0  9092               	bcf	3986,0,c	;volatile
   615                           
   616                           ;main.c: 61: TRISAbits.TRISA1 = 0;
   617  0012E2  9292               	bcf	3986,1,c	;volatile
   618                           
   619                           ;main.c: 62: LATAbits.LATA0 = 0;
   620  0012E4  9089               	bcf	3977,0,c	;volatile
   621                           
   622                           ;main.c: 63: LATAbits.LATA1 = 0;
   623  0012E6  9289               	bcf	3977,1,c	;volatile
   624                           
   625                           ;main.c: 64: TRISDbits.TRISD3 = 1;
   626  0012E8  8695               	bsf	3989,3,c	;volatile
   627                           
   628                           ;main.c: 66: clearBuffer();
   629  0012EA  EC4F  F00B         	call	_clearBuffer	;wreg free
   630  0012EE                     l1751:
   631                           
   632                           ;main.c: 71: if(isItLongEnough()){
   633  0012EE  EC08  F00C         	call	_isItLongEnough	;wreg free
   634  0012F2  0900               	iorlw	0
   635  0012F4  B4D8               	btfsc	status,2,c
   636  0012F6  D016               	goto	l54
   637                           
   638                           ;main.c: 72: if(isValid()){
   639  0012F8  EC92  F00B         	call	_isValid	;wreg free
   640  0012FC  0900               	iorlw	0
   641  0012FE  B4D8               	btfsc	status,2,c
   642  001300  D00E               	goto	l1765
   643                           
   644                           ;main.c: 73: LATAbits.LATA1 = 1;
   645  001302  8289               	bsf	3977,1,c	;volatile
   646                           
   647                           ;main.c: 74: wait_ms(1000);
   648  001304  0E03               	movlw	3
   649  001306  6E2F               	movwf	wait_ms@time+1,c
   650  001308  0EE8               	movlw	232
   651  00130A  6E2E               	movwf	wait_ms@time,c
   652  00130C  EC83  F00A         	call	_wait_ms	;wreg free
   653                           
   654                           ;main.c: 75: copyTmpBuffer();
   655  001310  EC72  F00B         	call	_copyTmpBuffer	;wreg free
   656                           
   657                           ;main.c: 76: parseString();
   658  001314  EC86  F007         	call	_parseString	;wreg free
   659                           
   660                           ;main.c: 77: clearBuffer();
   661  001318  EC4F  F00B         	call	_clearBuffer	;wreg free
   662                           
   663                           ;main.c: 78: }else{
   664  00131C  D004               	goto	l57
   665  00131E                     l1765:
   666                           
   667                           ;main.c: 79: clearBuffer();
   668  00131E  EC4F  F00B         	call	_clearBuffer	;wreg free
   669                           
   670                           ;main.c: 80: }
   671                           ;main.c: 81: }else{
   672  001322  D001               	goto	l57
   673  001324                     l54:
   674                           
   675                           ;main.c: 82: LATAbits.LATA1 = 0;
   676  001324  9289               	bcf	3977,1,c	;volatile
   677  001326                     l57:
   678                           
   679                           ;main.c: 83: }
   680                           ;main.c: 85: if(!PORTDbits.RD3){
   681  001326  B683               	btfsc	3971,3,c	;volatile
   682  001328  D7E2               	goto	l1751
   683                           
   684                           ;main.c: 86: writeResult(2);
   685  00132A  0E02               	movlw	2
   686  00132C  ECDB  F00B         	call	_writeResult
   687  001330  D7DE               	goto	l1751
   688  001332                     __end_of_main:
   689                           	opt stack 0
   690                           tblptru	equ	0xFF8
   691                           tblptrh	equ	0xFF7
   692                           tblptrl	equ	0xFF6
   693                           tablat	equ	0xFF5
   694                           postinc0	equ	0xFEE
   695                           wreg	equ	0xFE8
   696                           postdec1	equ	0xFE5
   697                           fsr1l	equ	0xFE1
   698                           status	equ	0xFD8
   699                           
   700 ;; *************** function _writeResult *****************
   701 ;; Defined at:
   702 ;;		line 63 in file "bufferhandler.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;  dev             1    wreg     unsigned char 
   705 ;; Auto vars:     Size  Location     Type
   706 ;;  dev             1   47[COMRAM] unsigned char 
   707 ;; Return value:  Size  Location     Type
   708 ;;                  1    wreg      void 
   709 ;; Registers used:
   710 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   717 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   719 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   720 ;;Total ram usage:        1 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; Hardware stack levels required when called:    5
   723 ;; This function calls:
   724 ;;		_wait_ms
   725 ;;		_writeString
   726 ;; This function is called by:
   727 ;;		_main
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text1
   732  0017B6                     __ptext1:
   733                           	opt stack 0
   734  0017B6                     _writeResult:
   735                           	opt stack 25
   736                           
   737                           ;incstack = 0
   738                           ;writeResult@dev stored from wreg
   739  0017B6  6E30               	movwf	writeResult@dev,c
   740                           
   741                           ;bufferhandler.c: 66: writeString(toCharArray, dev);
   742  0017B8  0E3A               	movlw	low _toCharArray
   743  0017BA  6E28               	movwf	writeString@str,c
   744  0017BC  0E00               	movlw	high _toCharArray
   745  0017BE  6E29               	movwf	writeString@str+1,c
   746  0017C0  C030  F02A         	movff	writeResult@dev,writeString@dev
   747  0017C4  EC28  F00A         	call	_writeString	;wreg free
   748                           
   749                           ;bufferhandler.c: 68: wait_ms(1000);
   750  0017C8  0E03               	movlw	3
   751  0017CA  6E2F               	movwf	wait_ms@time+1,c
   752  0017CC  0EE8               	movlw	232
   753  0017CE  6E2E               	movwf	wait_ms@time,c
   754  0017D0  EC83  F00A         	call	_wait_ms	;wreg free
   755  0017D4  0012               	return		;funcret
   756  0017D6                     __end_of_writeResult:
   757                           	opt stack 0
   758                           tblptru	equ	0xFF8
   759                           tblptrh	equ	0xFF7
   760                           tblptrl	equ	0xFF6
   761                           tablat	equ	0xFF5
   762                           postinc0	equ	0xFEE
   763                           wreg	equ	0xFE8
   764                           postdec1	equ	0xFE5
   765                           fsr1l	equ	0xFE1
   766                           status	equ	0xFD8
   767                           
   768 ;; *************** function _writeString *****************
   769 ;; Defined at:
   770 ;;		line 97 in file "uart.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;  str             2   39[COMRAM] PTR unsigned char 
   773 ;;		 -> toCharArray(4), STR_2(4), STR_1(5), 
   774 ;;  dev             1   41[COMRAM] unsigned char 
   775 ;; Auto vars:     Size  Location     Type
   776 ;;  i               2   44[COMRAM] int 
   777 ;; Return value:  Size  Location     Type
   778 ;;                  1    wreg      void 
   779 ;; Registers used:
   780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   781 ;; Tracked objects:
   782 ;;		On entry : 0/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   786 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   787 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   788 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   789 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   790 ;;Total ram usage:        7 bytes
   791 ;; Hardware stack levels used:    1
   792 ;; Hardware stack levels required when called:    4
   793 ;; This function calls:
   794 ;;		_UART_Write
   795 ;;		_strlen
   796 ;; This function is called by:
   797 ;;		_main
   798 ;;		_writeResult
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text2
   803  001450                     __ptext2:
   804                           	opt stack 0
   805  001450                     _writeString:
   806                           	opt stack 26
   807                           
   808                           ;uart.c: 99: for(int i = 0; i<strlen(str); i++)
   809                           
   810                           ;incstack = 0
   811  001450  0E00               	movlw	0
   812  001452  6E2E               	movwf	writeString@i+1,c
   813  001454  0E00               	movlw	0
   814  001456  6E2D               	movwf	writeString@i,c
   815  001458  D01D               	goto	l1349
   816  00145A                     l1345:
   817                           
   818                           ;uart.c: 100: {
   819                           ;uart.c: 101: UART_Write(str[i], dev);
   820  00145A  C02A  F022         	movff	writeString@dev,UART_Write@dev
   821  00145E  502D               	movf	writeString@i,w,c
   822  001460  2428               	addwf	writeString@str,w,c
   823  001462  6E2B               	movwf	??_writeString& (0+255),c
   824  001464  502E               	movf	writeString@i+1,w,c
   825  001466  2029               	addwfc	writeString@str+1,w,c
   826  001468  6E2C               	movwf	(??_writeString+1)& (0+255),c
   827  00146A  C02B  FFF6         	movff	??_writeString,tblptrl
   828  00146E  C02C  FFF7         	movff	??_writeString+1,tblptrh
   829  001472  0E00               	movlw	low (__smallconst shr (0+16))
   830  001474  6EF8               	movwf	tblptru,c
   831  001476  0E0E               	movlw	(high __ramtop+-1)
   832  001478  64F7               	cpfsgt	tblptrh,c
   833  00147A  D003               	bra	u577
   834  00147C  0008               	tblrd		*
   835  00147E  50F5               	movf	tablat,w,c
   836  001480  D005               	bra	u570
   837  001482                     u577:
   838  001482  CFF6 FFE9          	movff	tblptrl,fsr0l
   839  001486  CFF7 FFEA          	movff	tblptrh,fsr0h
   840  00148A  50EF               	movf	indf0,w,c
   841  00148C                     u570:
   842  00148C  ECFA  F00B         	call	_UART_Write
   843  001490  4A2D               	infsnz	writeString@i,f,c
   844  001492  2A2E               	incf	writeString@i+1,f,c
   845  001494                     l1349:
   846  001494  C028  F022         	movff	writeString@str,strlen@s
   847  001498  C029  F023         	movff	writeString@str+1,strlen@s+1
   848  00149C  ECD9  F00A         	call	_strlen	;wreg free
   849  0014A0  5022               	movf	?_strlen,w,c
   850  0014A2  5C2D               	subwf	writeString@i,w,c
   851  0014A4  5023               	movf	?_strlen+1,w,c
   852  0014A6  582E               	subwfb	writeString@i+1,w,c
   853  0014A8  B0D8               	btfsc	status,0,c
   854  0014AA  0012               	return	
   855  0014AC  D7D6               	goto	l1345
   856  0014AE                     __end_of_writeString:
   857                           	opt stack 0
   858                           tblptru	equ	0xFF8
   859                           tblptrh	equ	0xFF7
   860                           tblptrl	equ	0xFF6
   861                           tablat	equ	0xFF5
   862                           indf0	equ	0xFEF
   863                           postinc0	equ	0xFEE
   864                           fsr0h	equ	0xFEA
   865                           fsr0l	equ	0xFE9
   866                           wreg	equ	0xFE8
   867                           postdec1	equ	0xFE5
   868                           fsr1l	equ	0xFE1
   869                           status	equ	0xFD8
   870                           
   871 ;; *************** function _UART_Write *****************
   872 ;; Defined at:
   873 ;;		line 61 in file "uart.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;  data            1    wreg     unsigned char 
   876 ;;  dev             1   33[COMRAM] unsigned char 
   877 ;; Auto vars:     Size  Location     Type
   878 ;;  data            1   34[COMRAM] unsigned char 
   879 ;; Return value:  Size  Location     Type
   880 ;;                  1    wreg      void 
   881 ;; Registers used:
   882 ;;		wreg, status,2, status,0
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   888 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   891 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   892 ;;Total ram usage:        2 bytes
   893 ;; Hardware stack levels used:    1
   894 ;; Hardware stack levels required when called:    3
   895 ;; This function calls:
   896 ;;		Nothing
   897 ;; This function is called by:
   898 ;;		_main
   899 ;;		_writeString
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           	psect	text3
   904  0017F4                     __ptext3:
   905                           	opt stack 0
   906  0017F4                     _UART_Write:
   907                           	opt stack 26
   908                           
   909                           ;incstack = 0
   910                           ;UART_Write@data stored from wreg
   911  0017F4  6E23               	movwf	UART_Write@data,c
   912                           
   913                           ;uart.c: 63: if (dev == 1)
   914  0017F6  0422               	decf	UART_Write@dev,w,c
   915  0017F8  A4D8               	btfss	status,2,c
   916  0017FA  D005               	goto	l150
   917  0017FC                     l146:
   918  0017FC  A2AD               	btfss	4013,1,c	;volatile
   919  0017FE  D7FE               	goto	l146
   920                           
   921                           ;uart.c: 66: TXREG1 = data;
   922  001800  C023  FFAE         	movff	UART_Write@data,4014	;volatile
   923                           
   924                           ;uart.c: 67: }
   925  001804  0012               	return	
   926  001806                     l150:
   927  001806  A2A8               	btfss	4008,1,c	;volatile
   928  001808  D7FE               	goto	l150
   929                           
   930                           ;uart.c: 71: TXREG2 = data;
   931  00180A  C023  FFA9         	movff	UART_Write@data,4009	;volatile
   932  00180E  0012               	return	
   933  001810                     __end_of_UART_Write:
   934                           	opt stack 0
   935                           tblptru	equ	0xFF8
   936                           tblptrh	equ	0xFF7
   937                           tblptrl	equ	0xFF6
   938                           tablat	equ	0xFF5
   939                           indf0	equ	0xFEF
   940                           postinc0	equ	0xFEE
   941                           fsr0h	equ	0xFEA
   942                           fsr0l	equ	0xFE9
   943                           wreg	equ	0xFE8
   944                           postdec1	equ	0xFE5
   945                           fsr1l	equ	0xFE1
   946                           status	equ	0xFD8
   947                           
   948 ;; *************** function _wait_ms *****************
   949 ;; Defined at:
   950 ;;		line 35 in file "system.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;  time            2   45[COMRAM] int 
   953 ;; Auto vars:     Size  Location     Type
   954 ;;		None
   955 ;; Return value:  Size  Location     Type
   956 ;;                  1    wreg      void 
   957 ;; Registers used:
   958 ;;		wreg, status,2, status,0, cstack
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   964 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   967 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   968 ;;Total ram usage:        2 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    4
   971 ;; This function calls:
   972 ;;		___lmul
   973 ;; This function is called by:
   974 ;;		_main
   975 ;;		_writeResult
   976 ;; This function uses a non-reentrant model
   977 ;;
   978                           
   979                           	psect	text4
   980  001506                     __ptext4:
   981                           	opt stack 0
   982  001506                     _wait_ms:
   983                           	opt stack 25
   984                           
   985                           ;system.c: 37: static long timel = 0;
   986                           ;system.c: 38: timel = time * 1000l;
   987                           
   988                           ;incstack = 0
   989  001506  C02E  F022         	movff	wait_ms@time,___lmul@multiplier
   990  00150A  C02F  F023         	movff	wait_ms@time+1,___lmul@multiplier+1
   991  00150E  0E00               	movlw	0
   992  001510  BE23               	btfsc	___lmul@multiplier+1,7,c
   993  001512  0EFF               	movlw	-1
   994  001514  6E24               	movwf	___lmul@multiplier+2,c
   995  001516  6E25               	movwf	___lmul@multiplier+3,c
   996  001518  0EE8               	movlw	232
   997  00151A  6E26               	movwf	___lmul@multiplicand,c
   998  00151C  0E03               	movlw	3
   999  00151E  6E27               	movwf	___lmul@multiplicand+1,c
  1000  001520  0E00               	movlw	0
  1001  001522  6E28               	movwf	___lmul@multiplicand+2,c
  1002  001524  0E00               	movlw	0
  1003  001526  6E29               	movwf	___lmul@multiplicand+3,c
  1004  001528  ECAE  F00A         	call	___lmul	;wreg free
  1005  00152C  C022  F034         	movff	?___lmul,wait_ms@timel
  1006  001530  C023  F035         	movff	?___lmul+1,wait_ms@timel+1
  1007  001534  C024  F036         	movff	?___lmul+2,wait_ms@timel+2
  1008  001538  C025  F037         	movff	?___lmul+3,wait_ms@timel+3
  1009                           
  1010                           ;system.c: 39: for( ; timel; timel--);
  1011  00153C  D008               	goto	l73
  1012  00153E                     l1353:
  1013  00153E  0EFF               	movlw	255
  1014  001540  2634               	addwf	wait_ms@timel,f,c
  1015  001542  0EFF               	movlw	255
  1016  001544  2235               	addwfc	wait_ms@timel+1,f,c
  1017  001546  0EFF               	movlw	255
  1018  001548  2236               	addwfc	wait_ms@timel+2,f,c
  1019  00154A  0EFF               	movlw	255
  1020  00154C  2237               	addwfc	wait_ms@timel+3,f,c
  1021  00154E                     l73:
  1022  00154E  5034               	movf	wait_ms@timel,w,c
  1023  001550  1035               	iorwf	wait_ms@timel+1,w,c
  1024  001552  1036               	iorwf	wait_ms@timel+2,w,c
  1025  001554  1037               	iorwf	wait_ms@timel+3,w,c
  1026  001556  B4D8               	btfsc	status,2,c
  1027  001558  0012               	return	
  1028  00155A  D7F1               	goto	l1353
  1029  00155C                     __end_of_wait_ms:
  1030                           	opt stack 0
  1031                           tblptru	equ	0xFF8
  1032                           tblptrh	equ	0xFF7
  1033                           tblptrl	equ	0xFF6
  1034                           tablat	equ	0xFF5
  1035                           indf0	equ	0xFEF
  1036                           postinc0	equ	0xFEE
  1037                           fsr0h	equ	0xFEA
  1038                           fsr0l	equ	0xFE9
  1039                           wreg	equ	0xFE8
  1040                           postdec1	equ	0xFE5
  1041                           fsr1l	equ	0xFE1
  1042                           status	equ	0xFD8
  1043                           
  1044 ;; *************** function ___lmul *****************
  1045 ;; Defined at:
  1046 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  1047 ;; Parameters:    Size  Location     Type
  1048 ;;  multiplier      4   33[COMRAM] unsigned long 
  1049 ;;  multiplicand    4   37[COMRAM] unsigned long 
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;  product         4   41[COMRAM] unsigned long 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  4   33[COMRAM] unsigned long 
  1054 ;; Registers used:
  1055 ;;		wreg, status,2, status,0
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1061 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1062 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1064 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1065 ;;Total ram usage:       12 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; Hardware stack levels required when called:    3
  1068 ;; This function calls:
  1069 ;;		Nothing
  1070 ;; This function is called by:
  1071 ;;		_wait_ms
  1072 ;; This function uses a non-reentrant model
  1073 ;;
  1074                           
  1075                           	psect	text5
  1076  00155C                     __ptext5:
  1077                           	opt stack 0
  1078  00155C                     ___lmul:
  1079                           	opt stack 25
  1080                           
  1081                           ;incstack = 0
  1082  00155C  0E00               	movlw	0
  1083  00155E  6E2A               	movwf	___lmul@product,c
  1084  001560  0E00               	movlw	0
  1085  001562  6E2B               	movwf	___lmul@product+1,c
  1086  001564  0E00               	movlw	0
  1087  001566  6E2C               	movwf	___lmul@product+2,c
  1088  001568  0E00               	movlw	0
  1089  00156A  6E2D               	movwf	___lmul@product+3,c
  1090  00156C                     l1335:
  1091  00156C  A022               	btfss	___lmul@multiplier,0,c
  1092  00156E  D008               	goto	l1339
  1093  001570  5026               	movf	___lmul@multiplicand,w,c
  1094  001572  262A               	addwf	___lmul@product,f,c
  1095  001574  5027               	movf	___lmul@multiplicand+1,w,c
  1096  001576  222B               	addwfc	___lmul@product+1,f,c
  1097  001578  5028               	movf	___lmul@multiplicand+2,w,c
  1098  00157A  222C               	addwfc	___lmul@product+2,f,c
  1099  00157C  5029               	movf	___lmul@multiplicand+3,w,c
  1100  00157E  222D               	addwfc	___lmul@product+3,f,c
  1101  001580                     l1339:
  1102  001580  90D8               	bcf	status,0,c
  1103  001582  3626               	rlcf	___lmul@multiplicand,f,c
  1104  001584  3627               	rlcf	___lmul@multiplicand+1,f,c
  1105  001586  3628               	rlcf	___lmul@multiplicand+2,f,c
  1106  001588  3629               	rlcf	___lmul@multiplicand+3,f,c
  1107  00158A  90D8               	bcf	status,0,c
  1108  00158C  3225               	rrcf	___lmul@multiplier+3,f,c
  1109  00158E  3224               	rrcf	___lmul@multiplier+2,f,c
  1110  001590  3223               	rrcf	___lmul@multiplier+1,f,c
  1111  001592  3222               	rrcf	___lmul@multiplier,f,c
  1112  001594  5022               	movf	___lmul@multiplier,w,c
  1113  001596  1023               	iorwf	___lmul@multiplier+1,w,c
  1114  001598  1024               	iorwf	___lmul@multiplier+2,w,c
  1115  00159A  1025               	iorwf	___lmul@multiplier+3,w,c
  1116  00159C  A4D8               	btfss	status,2,c
  1117  00159E  D7E6               	goto	l1335
  1118  0015A0  C02A  F022         	movff	___lmul@product,?___lmul
  1119  0015A4  C02B  F023         	movff	___lmul@product+1,?___lmul+1
  1120  0015A8  C02C  F024         	movff	___lmul@product+2,?___lmul+2
  1121  0015AC  C02D  F025         	movff	___lmul@product+3,?___lmul+3
  1122  0015B0  0012               	return		;funcret
  1123  0015B2                     __end_of___lmul:
  1124                           	opt stack 0
  1125                           tblptru	equ	0xFF8
  1126                           tblptrh	equ	0xFF7
  1127                           tblptrl	equ	0xFF6
  1128                           tablat	equ	0xFF5
  1129                           indf0	equ	0xFEF
  1130                           postinc0	equ	0xFEE
  1131                           fsr0h	equ	0xFEA
  1132                           fsr0l	equ	0xFE9
  1133                           wreg	equ	0xFE8
  1134                           postdec1	equ	0xFE5
  1135                           fsr1l	equ	0xFE1
  1136                           status	equ	0xFD8
  1137                           
  1138 ;; *************** function _parseString *****************
  1139 ;; Defined at:
  1140 ;;		line 98 in file "bufferhandler.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;  i               2   18[BANK0 ] int 
  1145 ;;  tmp             2   16[BANK0 ] int 
  1146 ;;  k               2   14[BANK0 ] int 
  1147 ;;  socEndPos       2   12[BANK0 ] int 
  1148 ;;  socStartPos     2   10[BANK0 ] int 
  1149 ;;  chgStart        2    7[BANK0 ] int 
  1150 ;;  socSize         2    5[BANK0 ] int 
  1151 ;;  chgStop         2    2[BANK0 ] int 
  1152 ;;  CHG             1    9[BANK0 ] unsigned char 
  1153 ;;  tmpSOC          1    4[BANK0 ] unsigned char 
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  1    wreg      unsigned char 
  1156 ;; Registers used:
  1157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1164 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1165 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1166 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1167 ;;Total ram usage:       20 bytes
  1168 ;; Hardware stack levels used:    1
  1169 ;; Hardware stack levels required when called:    6
  1170 ;; This function calls:
  1171 ;;		___awdiv
  1172 ;;		_checkString
  1173 ;;		_lenHelper
  1174 ;;		_transformToTwoDigitNumber
  1175 ;; This function is called by:
  1176 ;;		_main
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           	psect	text6
  1181  000F0C                     __ptext6:
  1182                           	opt stack 0
  1183  000F0C                     _parseString:
  1184                           	opt stack 24
  1185                           
  1186                           ;bufferhandler.c: 100: checkString();
  1187                           
  1188                           ;incstack = 0
  1189  000F0C  ECEA  F008         	call	_checkString	;wreg free
  1190                           
  1191                           ;bufferhandler.c: 106: int socStartPos = positions[8]+1;
  1192  000F10  0E01               	movlw	1
  1193  000F12  0100               	movlb	0	; () banked
  1194  000F14  2570               	addwf	(_positions+16)& (0+255),w,b
  1195  000F16  0100               	movlb	0	; () banked
  1196  000F18  6FCF               	movwf	parseString@socStartPos& (0+255),b
  1197  000F1A  0E00               	movlw	0
  1198  000F1C  0100               	movlb	0	; () banked
  1199  000F1E  2171               	addwfc	(_positions+17)& (0+255),w,b
  1200  000F20  0100               	movlb	0	; () banked
  1201  000F22  6FD0               	movwf	(parseString@socStartPos+1)& (0+255),b
  1202                           
  1203                           ; BSR set to: 0
  1204                           ;bufferhandler.c: 107: int socEndPos = positions[9]-1;
  1205  000F24  0EFF               	movlw	255
  1206  000F26  0100               	movlb	0	; () banked
  1207  000F28  2572               	addwf	(_positions+18)& (0+255),w,b
  1208  000F2A  0100               	movlb	0	; () banked
  1209  000F2C  6FD1               	movwf	parseString@socEndPos& (0+255),b
  1210  000F2E  0EFF               	movlw	255
  1211  000F30  0100               	movlb	0	; () banked
  1212  000F32  2173               	addwfc	(_positions+19)& (0+255),w,b
  1213  000F34  0100               	movlb	0	; () banked
  1214  000F36  6FD2               	movwf	(parseString@socEndPos+1)& (0+255),b
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;bufferhandler.c: 108: int socSize = (socEndPos - socStartPos)+1;
  1218  000F38  C0CF  F0C5         	movff	parseString@socStartPos,??_parseString
  1219  000F3C  C0D0  F0C6         	movff	parseString@socStartPos+1,??_parseString+1
  1220  000F40  0100               	movlb	0	; () banked
  1221  000F42  1FC5               	comf	??_parseString& (0+255),f,b
  1222  000F44  1FC6               	comf	(??_parseString+1)& (0+255),f,b
  1223  000F46  4BC5               	infsnz	??_parseString& (0+255),f,b
  1224  000F48  2BC6               	incf	(??_parseString+1)& (0+255),f,b
  1225  000F4A  0100               	movlb	0	; () banked
  1226  000F4C  51D1               	movf	parseString@socEndPos& (0+255),w,b
  1227  000F4E  0100               	movlb	0	; () banked
  1228  000F50  27C5               	addwf	??_parseString& (0+255),f,b
  1229  000F52  0100               	movlb	0	; () banked
  1230  000F54  51D2               	movf	(parseString@socEndPos+1)& (0+255),w,b
  1231  000F56  0100               	movlb	0	; () banked
  1232  000F58  23C6               	addwfc	(??_parseString+1)& (0+255),f,b
  1233  000F5A  0E01               	movlw	1
  1234  000F5C  0100               	movlb	0	; () banked
  1235  000F5E  25C5               	addwf	??_parseString& (0+255),w,b
  1236  000F60  0100               	movlb	0	; () banked
  1237  000F62  6FCA               	movwf	parseString@socSize& (0+255),b
  1238  000F64  0E00               	movlw	0
  1239  000F66  0100               	movlb	0	; () banked
  1240  000F68  21C6               	addwfc	(??_parseString+1)& (0+255),w,b
  1241  000F6A  0100               	movlb	0	; () banked
  1242  000F6C  6FCB               	movwf	(parseString@socSize+1)& (0+255),b
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;bufferhandler.c: 111: int k = 0;
  1246  000F6E  0E00               	movlw	0
  1247  000F70  0100               	movlb	0	; () banked
  1248  000F72  6FD4               	movwf	(parseString@k+1)& (0+255),b
  1249  000F74  0E00               	movlw	0
  1250  000F76  6FD3               	movwf	parseString@k& (0+255),b
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;bufferhandler.c: 112: for(int i = socStartPos; i<=socEndPos; i++){
  1254  000F78  C0CF  F0D7         	movff	parseString@socStartPos,parseString@i
  1255  000F7C  C0D0  F0D8         	movff	parseString@socStartPos+1,parseString@i+1
  1256  000F80  D034               	goto	l1697
  1257  000F82                     l1689:
  1258                           
  1259                           ; BSR set to: 0
  1260                           ;bufferhandler.c: 113: SOC[k] = allDataString[i];
  1261  000F82  0E00               	movlw	low _allDataString
  1262  000F84  0100               	movlb	0	; () banked
  1263  000F86  25D7               	addwf	parseString@i& (0+255),w,b
  1264  000F88  6ED9               	movwf	fsr2l,c
  1265  000F8A  0E01               	movlw	high _allDataString
  1266  000F8C  0100               	movlb	0	; () banked
  1267  000F8E  21D8               	addwfc	(parseString@i+1)& (0+255),w,b
  1268  000F90  6EDA               	movwf	fsr2h,c
  1269  000F92  50DF               	movf	indf2,w,c
  1270  000F94  0100               	movlb	0	; () banked
  1271  000F96  6FC5               	movwf	??_parseString& (0+255),b
  1272  000F98  6BC6               	clrf	(??_parseString+1)& (0+255),b
  1273  000F9A  90D8               	bcf	status,0,c
  1274  000F9C  0100               	movlb	0	; () banked
  1275  000F9E  35D3               	rlcf	parseString@k& (0+255),w,b
  1276  000FA0  6ED9               	movwf	fsr2l,c
  1277  000FA2  0100               	movlb	0	; () banked
  1278  000FA4  35D4               	rlcf	(parseString@k+1)& (0+255),w,b
  1279  000FA6  6EDA               	movwf	fsr2h,c
  1280  000FA8  0EBF               	movlw	low _SOC
  1281  000FAA  26D9               	addwf	fsr2l,f,c
  1282  000FAC  0E00               	movlw	high _SOC
  1283  000FAE  22DA               	addwfc	fsr2h,f,c
  1284  000FB0  C0C5  FFDE         	movff	??_parseString,postinc2
  1285  000FB4  C0C6  FFDD         	movff	??_parseString+1,postdec2
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;bufferhandler.c: 114: toCharArray[k] = allDataString[i] +48;
  1289  000FB8  0E3A               	movlw	low _toCharArray
  1290  000FBA  0100               	movlb	0	; () banked
  1291  000FBC  25D3               	addwf	parseString@k& (0+255),w,b
  1292  000FBE  6ED9               	movwf	fsr2l,c
  1293  000FC0  0E00               	movlw	high _toCharArray
  1294  000FC2  0100               	movlb	0	; () banked
  1295  000FC4  21D4               	addwfc	(parseString@k+1)& (0+255),w,b
  1296  000FC6  6EDA               	movwf	fsr2h,c
  1297  000FC8  0E00               	movlw	low _allDataString
  1298  000FCA  0100               	movlb	0	; () banked
  1299  000FCC  25D7               	addwf	parseString@i& (0+255),w,b
  1300  000FCE  6EE1               	movwf	fsr1l,c
  1301  000FD0  0E01               	movlw	high _allDataString
  1302  000FD2  0100               	movlb	0	; () banked
  1303  000FD4  21D8               	addwfc	(parseString@i+1)& (0+255),w,b
  1304  000FD6  6EE2               	movwf	fsr1h,c
  1305  000FD8  50E7               	movf	indf1,w,c
  1306  000FDA  0F30               	addlw	48
  1307  000FDC  6EDF               	movwf	indf2,c
  1308                           
  1309                           ; BSR set to: 0
  1310                           ;bufferhandler.c: 115: k++;
  1311  000FDE  0100               	movlb	0	; () banked
  1312  000FE0  4BD3               	infsnz	parseString@k& (0+255),f,b
  1313  000FE2  2BD4               	incf	(parseString@k+1)& (0+255),f,b
  1314                           
  1315                           ; BSR set to: 0
  1316  000FE4  0100               	movlb	0	; () banked
  1317  000FE6  4BD7               	infsnz	parseString@i& (0+255),f,b
  1318  000FE8  2BD8               	incf	(parseString@i+1)& (0+255),f,b
  1319  000FEA                     l1697:
  1320                           
  1321                           ; BSR set to: 0
  1322  000FEA  0100               	movlb	0	; () banked
  1323  000FEC  51D7               	movf	parseString@i& (0+255),w,b
  1324  000FEE  0100               	movlb	0	; () banked
  1325  000FF0  5DD1               	subwf	parseString@socEndPos& (0+255),w,b
  1326  000FF2  0100               	movlb	0	; () banked
  1327  000FF4  51D2               	movf	(parseString@socEndPos+1)& (0+255),w,b
  1328  000FF6  0A80               	xorlw	128
  1329  000FF8  0100               	movlb	0	; () banked
  1330  000FFA  6FC5               	movwf	??_parseString& (0+255),b
  1331  000FFC  0100               	movlb	0	; () banked
  1332  000FFE  51D8               	movf	(parseString@i+1)& (0+255),w,b
  1333  001000  0A80               	xorlw	128
  1334  001002  0100               	movlb	0	; () banked
  1335  001004  59C5               	subwfb	??_parseString& (0+255),w,b
  1336  001006  B0D8               	btfsc	status,0,c
  1337  001008  D7BC               	goto	l1689
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;bufferhandler.c: 116: }
  1341                           ;bufferhandler.c: 121: int tmp = transformToTwoDigitNumber(SOC, socSize);
  1342                           
  1343                           ; BSR set to: 0
  1344  00100A  0EBF               	movlw	low _SOC
  1345  00100C  6E28               	movwf	transformToTwoDigitNumber@number,c
  1346  00100E  0E00               	movlw	high _SOC
  1347  001010  6E29               	movwf	transformToTwoDigitNumber@number+1,c
  1348  001012  C0CA  F02A         	movff	parseString@socSize,transformToTwoDigitNumber@size
  1349  001016  C0CB  F02B         	movff	parseString@socSize+1,transformToTwoDigitNumber@size+1
  1350  00101A  EC5E  F008         	call	_transformToTwoDigitNumber	;wreg free
  1351  00101E  C028  F0D5         	movff	?_transformToTwoDigitNumber,parseString@tmp
  1352  001022  C029  F0D6         	movff	?_transformToTwoDigitNumber+1,parseString@tmp+1
  1353                           
  1354                           ;bufferhandler.c: 122: char tmpSOC = 'a';
  1355  001026  0E61               	movlw	97
  1356  001028  0100               	movlb	0	; () banked
  1357  00102A  6FC9               	movwf	parseString@tmpSOC& (0+255),b
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;bufferhandler.c: 124: if(lenHelper(tmp) == 1){
  1361  00102C  C0D5  F022         	movff	parseString@tmp,lenHelper@x
  1362  001030  C0D6  F023         	movff	parseString@tmp+1,lenHelper@x+1
  1363  001034  EC57  F00A         	call	_lenHelper	;wreg free
  1364  001038  0422               	decf	?_lenHelper,w,c
  1365  00103A  1023               	iorwf	?_lenHelper+1,w,c
  1366  00103C  A4D8               	btfss	status,2,c
  1367  00103E  D003               	goto	l1707
  1368                           
  1369                           ;bufferhandler.c: 125: charSOC[0] = (tmp) + 48;
  1370  001040  0100               	movlb	0	; () banked
  1371  001042  51D5               	movf	parseString@tmp& (0+255),w,b
  1372  001044  D00B               	goto	L1
  1373  001046                     l1707:
  1374                           
  1375                           ;bufferhandler.c: 127: charSOC[0] = (tmp/10) + 48;
  1376  001046  C0D5  F022         	movff	parseString@tmp,___awdiv@dividend
  1377  00104A  C0D6  F023         	movff	parseString@tmp+1,___awdiv@dividend+1
  1378  00104E  0E00               	movlw	0
  1379  001050  6E25               	movwf	___awdiv@divisor+1,c
  1380  001052  0E0A               	movlw	10
  1381  001054  6E24               	movwf	___awdiv@divisor,c
  1382  001056  ECE6  F009         	call	___awdiv	;wreg free
  1383  00105A  5022               	movf	?___awdiv,w,c
  1384  00105C                     L1:
  1385  00105C  0F30               	addlw	48
  1386  00105E  0100               	movlb	0	; () banked
  1387  001060  6F76               	movwf	_charSOC& (0+255),b
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;bufferhandler.c: 128: }
  1391                           ;bufferhandler.c: 132: int chgStart = positions[6] + 1;
  1392                           
  1393                           ; BSR set to: 0
  1394  001062  0E01               	movlw	1
  1395  001064  0100               	movlb	0	; () banked
  1396  001066  256C               	addwf	(_positions+12)& (0+255),w,b
  1397  001068  0100               	movlb	0	; () banked
  1398  00106A  6FCC               	movwf	parseString@chgStart& (0+255),b
  1399  00106C  0E00               	movlw	0
  1400  00106E  0100               	movlb	0	; () banked
  1401  001070  216D               	addwfc	(_positions+13)& (0+255),w,b
  1402  001072  0100               	movlb	0	; () banked
  1403  001074  6FCD               	movwf	(parseString@chgStart+1)& (0+255),b
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;bufferhandler.c: 133: int chgStop = positions[7] - 1;
  1407  001076  0EFF               	movlw	255
  1408  001078  0100               	movlb	0	; () banked
  1409  00107A  256E               	addwf	(_positions+14)& (0+255),w,b
  1410  00107C  0100               	movlb	0	; () banked
  1411  00107E  6FC7               	movwf	parseString@chgStop& (0+255),b
  1412  001080  0EFF               	movlw	255
  1413  001082  0100               	movlb	0	; () banked
  1414  001084  216F               	addwfc	(_positions+15)& (0+255),w,b
  1415  001086  0100               	movlb	0	; () banked
  1416  001088  6FC8               	movwf	(parseString@chgStop+1)& (0+255),b
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;bufferhandler.c: 136: char CHG = '0';
  1420  00108A  0E30               	movlw	48
  1421  00108C  0100               	movlb	0	; () banked
  1422  00108E  6FCE               	movwf	parseString@CHG& (0+255),b
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;bufferhandler.c: 138: if(allDataString[chgStart] == 0x2D){
  1426  001090  0E00               	movlw	low _allDataString
  1427  001092  0100               	movlb	0	; () banked
  1428  001094  25CC               	addwf	parseString@chgStart& (0+255),w,b
  1429  001096  6ED9               	movwf	fsr2l,c
  1430  001098  0E01               	movlw	high _allDataString
  1431  00109A  0100               	movlb	0	; () banked
  1432  00109C  21CD               	addwfc	(parseString@chgStart+1)& (0+255),w,b
  1433  00109E  6EDA               	movwf	fsr2h,c
  1434  0010A0  0E2D               	movlw	45
  1435  0010A2  18DE               	xorwf	postinc2,w,c
  1436  0010A4  A4D8               	btfss	status,2,c
  1437  0010A6  D003               	goto	l1719
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;bufferhandler.c: 139: CHG = '1';
  1441  0010A8  0E31               	movlw	49
  1442  0010AA  0100               	movlb	0	; () banked
  1443  0010AC  6FCE               	movwf	parseString@CHG& (0+255),b
  1444  0010AE                     l1719:
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;bufferhandler.c: 140: }
  1448                           ;bufferhandler.c: 143: parsedString[3] = charSOC[0];
  1449  0010AE  C076  F0DC         	movff	_charSOC,_parsedString+3
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;bufferhandler.c: 144: parsedString[4] = charSOC[0];
  1453  0010B2  C076  F0DD         	movff	_charSOC,_parsedString+4
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;bufferhandler.c: 148: parsedString[9] = CHG;
  1457  0010B6  C0CE  F0E2         	movff	parseString@CHG,_parsedString+9
  1458  0010BA  0012               	return	
  1459  0010BC                     __end_of_parseString:
  1460                           	opt stack 0
  1461                           tblptru	equ	0xFF8
  1462                           tblptrh	equ	0xFF7
  1463                           tblptrl	equ	0xFF6
  1464                           tablat	equ	0xFF5
  1465                           indf0	equ	0xFEF
  1466                           postinc0	equ	0xFEE
  1467                           fsr0h	equ	0xFEA
  1468                           fsr0l	equ	0xFE9
  1469                           wreg	equ	0xFE8
  1470                           indf1	equ	0xFE7
  1471                           postdec1	equ	0xFE5
  1472                           fsr1h	equ	0xFE2
  1473                           fsr1l	equ	0xFE1
  1474                           indf2	equ	0xFDF
  1475                           postinc2	equ	0xFDE
  1476                           postdec2	equ	0xFDD
  1477                           fsr2h	equ	0xFDA
  1478                           fsr2l	equ	0xFD9
  1479                           status	equ	0xFD8
  1480                           
  1481 ;; *************** function _transformToTwoDigitNumber *****************
  1482 ;; Defined at:
  1483 ;;		line 168 in file "bufferhandler.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;  number          2   39[COMRAM] PTR int 
  1486 ;;		 -> SOC(6), 
  1487 ;;  size            2   41[COMRAM] int 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  result          2   45[COMRAM] int 
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  2   39[COMRAM] int 
  1492 ;; Registers used:
  1493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1499 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1500 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1501 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1502 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1503 ;;Total ram usage:        8 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; Hardware stack levels required when called:    4
  1506 ;; This function calls:
  1507 ;;		___wmul
  1508 ;; This function is called by:
  1509 ;;		_parseString
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513                           	psect	text7
  1514  0010BC                     __ptext7:
  1515                           	opt stack 0
  1516  0010BC                     _transformToTwoDigitNumber:
  1517                           	opt stack 25
  1518                           
  1519                           ;bufferhandler.c: 170: int result = 0;
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;incstack = 0
  1523  0010BC  0E00               	movlw	0
  1524  0010BE  6E2F               	movwf	transformToTwoDigitNumber@result+1,c
  1525  0010C0  0E00               	movlw	0
  1526  0010C2  6E2E               	movwf	transformToTwoDigitNumber@result,c
  1527                           
  1528                           ;bufferhandler.c: 171: switch(size){
  1529  0010C4  D070               	goto	l1407
  1530  0010C6                     l1373:
  1531                           
  1532                           ;bufferhandler.c: 173: if(number[0] >= 5){
  1533  0010C6  C028  FFD9         	movff	transformToTwoDigitNumber@number,fsr2l
  1534  0010CA  C029  FFDA         	movff	transformToTwoDigitNumber@number+1,fsr2h
  1535  0010CE  0E01               	movlw	1
  1536  0010D0  BEDB               	btfsc	plusw2,7,c
  1537  0010D2  D00C               	goto	l1381
  1538  0010D4  0E01               	movlw	1
  1539  0010D6  50DB               	movf	plusw2,w,c
  1540  0010D8  E104               	bnz	u620
  1541  0010DA  0E05               	movlw	5
  1542  0010DC  5CDE               	subwf	postinc2,w,c
  1543  0010DE  A0D8               	btfss	status,0,c
  1544  0010E0  D005               	goto	l1381
  1545  0010E2                     u620:
  1546                           
  1547                           ;bufferhandler.c: 174: return 1;
  1548  0010E2  0E00               	movlw	0
  1549  0010E4  6E29               	movwf	?_transformToTwoDigitNumber+1,c
  1550  0010E6  0E01               	movlw	1
  1551  0010E8  6E28               	movwf	?_transformToTwoDigitNumber,c
  1552  0010EA  0012               	return	
  1553  0010EC                     l1381:
  1554                           
  1555                           ;bufferhandler.c: 176: return 0;
  1556  0010EC  0E00               	movlw	0
  1557  0010EE  6E29               	movwf	?_transformToTwoDigitNumber+1,c
  1558  0010F0  0E00               	movlw	0
  1559  0010F2  D7FA               	goto	L2
  1560  0010F4                     l1385:
  1561                           
  1562                           ;bufferhandler.c: 179: result = number[0];
  1563  0010F4  C028  FFD9         	movff	transformToTwoDigitNumber@number,fsr2l
  1564  0010F8  C029  FFDA         	movff	transformToTwoDigitNumber@number+1,fsr2h
  1565  0010FC  CFDE F02E          	movff	postinc2,transformToTwoDigitNumber@result
  1566  001100  CFDD F02F          	movff	postdec2,transformToTwoDigitNumber@result+1
  1567                           
  1568                           ;bufferhandler.c: 180: if(number[1] >= 5){
  1569  001104  EE20 F002          	lfsr	2,2
  1570  001108  5028               	movf	transformToTwoDigitNumber@number,w,c
  1571  00110A  26D9               	addwf	fsr2l,f,c
  1572  00110C  5029               	movf	transformToTwoDigitNumber@number+1,w,c
  1573  00110E  22DA               	addwfc	fsr2h,f,c
  1574  001110  0E01               	movlw	1
  1575  001112  BEDB               	btfsc	plusw2,7,c
  1576  001114  D00E               	goto	l262
  1577  001116  0E01               	movlw	1
  1578  001118  50DB               	movf	plusw2,w,c
  1579  00111A  E104               	bnz	u630
  1580  00111C  0E05               	movlw	5
  1581  00111E  5CDE               	subwf	postinc2,w,c
  1582  001120  A0D8               	btfss	status,0,c
  1583  001122  D007               	goto	l262
  1584  001124                     u630:
  1585                           
  1586                           ;bufferhandler.c: 181: return result++;
  1587  001124  502E               	movf	transformToTwoDigitNumber@result,w,c
  1588  001126  6E28               	movwf	?_transformToTwoDigitNumber,c
  1589  001128  502F               	movf	transformToTwoDigitNumber@result+1,w,c
  1590  00112A  6E29               	movwf	?_transformToTwoDigitNumber+1,c
  1591  00112C  4A2E               	infsnz	transformToTwoDigitNumber@result,f,c
  1592  00112E  2A2F               	incf	transformToTwoDigitNumber@result+1,f,c
  1593  001130  0012               	return	
  1594  001132                     l262:
  1595                           
  1596                           ;bufferhandler.c: 183: return result;
  1597  001132  C02E  F028         	movff	transformToTwoDigitNumber@result,?_transformToTwoDigitNumber
  1598  001136  C02F  F029         	movff	transformToTwoDigitNumber@result+1,?_transformToTwoDigitNumber+1
  1599  00113A  0012               	return	
  1600  00113C                     l1395:
  1601                           
  1602                           ;bufferhandler.c: 186: result = (number[0]*10)+(number[1]);
  1603  00113C  EE20 F002          	lfsr	2,2
  1604  001140  5028               	movf	transformToTwoDigitNumber@number,w,c
  1605  001142  26D9               	addwf	fsr2l,f,c
  1606  001144  5029               	movf	transformToTwoDigitNumber@number+1,w,c
  1607  001146  22DA               	addwfc	fsr2h,f,c
  1608  001148  CFDE F02C          	movff	postinc2,??_transformToTwoDigitNumber
  1609  00114C  CFDD F02D          	movff	postdec2,??_transformToTwoDigitNumber+1
  1610  001150  C028  FFD9         	movff	transformToTwoDigitNumber@number,fsr2l
  1611  001154  C029  FFDA         	movff	transformToTwoDigitNumber@number+1,fsr2h
  1612  001158  CFDE F022          	movff	postinc2,___wmul@multiplier
  1613  00115C  CFDD F023          	movff	postdec2,___wmul@multiplier+1
  1614  001160  0E00               	movlw	0
  1615  001162  6E25               	movwf	___wmul@multiplicand+1,c
  1616  001164  0E0A               	movlw	10
  1617  001166  6E24               	movwf	___wmul@multiplicand,c
  1618  001168  ECC8  F00B         	call	___wmul	;wreg free
  1619  00116C  502C               	movf	??_transformToTwoDigitNumber,w,c
  1620  00116E  2422               	addwf	?___wmul,w,c
  1621  001170  6E2E               	movwf	transformToTwoDigitNumber@result,c
  1622  001172  502D               	movf	??_transformToTwoDigitNumber+1,w,c
  1623  001174  2023               	addwfc	?___wmul+1,w,c
  1624  001176  6E2F               	movwf	transformToTwoDigitNumber@result+1,c
  1625                           
  1626                           ;bufferhandler.c: 187: if(number[2] >= 5){
  1627  001178  EE20 F004          	lfsr	2,4
  1628  00117C  5028               	movf	transformToTwoDigitNumber@number,w,c
  1629  00117E  26D9               	addwf	fsr2l,f,c
  1630  001180  5029               	movf	transformToTwoDigitNumber@number+1,w,c
  1631  001182  22DA               	addwfc	fsr2h,f,c
  1632  001184  0E01               	movlw	1
  1633  001186  BEDB               	btfsc	plusw2,7,c
  1634  001188  D009               	goto	l1401
  1635  00118A  0E01               	movlw	1
  1636  00118C  50DB               	movf	plusw2,w,c
  1637  00118E  E104               	bnz	u640
  1638  001190  0E05               	movlw	5
  1639  001192  5CDE               	subwf	postinc2,w,c
  1640  001194  A0D8               	btfss	status,0,c
  1641  001196  D002               	goto	l1401
  1642  001198                     u640:
  1643                           
  1644                           ;bufferhandler.c: 188: result++;
  1645  001198  4A2E               	infsnz	transformToTwoDigitNumber@result,f,c
  1646  00119A  2A2F               	incf	transformToTwoDigitNumber@result+1,f,c
  1647  00119C                     l1401:
  1648                           
  1649                           ;bufferhandler.c: 189: return result;
  1650  00119C  C02E  F028         	movff	transformToTwoDigitNumber@result,?_transformToTwoDigitNumber
  1651  0011A0  C02F  F029         	movff	transformToTwoDigitNumber@result+1,?_transformToTwoDigitNumber+1
  1652  0011A4  0012               	return	
  1653  0011A6                     l1407:
  1654  0011A6  C02A  F02C         	movff	transformToTwoDigitNumber@size,??_transformToTwoDigitNumber
  1655  0011AA  C02B  F02D         	movff	transformToTwoDigitNumber@size+1,??_transformToTwoDigitNumber+1
  1656                           
  1657                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1658                           ; Switch size 1, requested type "space"
  1659                           ; Number of cases is 1, Range of values is 0 to 0
  1660                           ; switch strategies available:
  1661                           ; Name         Instructions Cycles
  1662                           ; simple_byte            4     3 (average)
  1663                           ;	Chosen strategy is simple_byte
  1664  0011AE  502D               	movf	??_transformToTwoDigitNumber+1,w,c
  1665  0011B0  0A00               	xorlw	0	; case 0
  1666  0011B2  A4D8               	btfss	status,2,c
  1667  0011B4  D00A               	goto	l1409
  1668                           
  1669                           ; Switch size 1, requested type "space"
  1670                           ; Number of cases is 3, Range of values is 1 to 3
  1671                           ; switch strategies available:
  1672                           ; Name         Instructions Cycles
  1673                           ; simple_byte           10     6 (average)
  1674                           ;	Chosen strategy is simple_byte
  1675  0011B6  502C               	movf	??_transformToTwoDigitNumber,w,c
  1676  0011B8  0A01               	xorlw	1	; case 1
  1677  0011BA  B4D8               	btfsc	status,2,c
  1678  0011BC  D784               	goto	l1373
  1679  0011BE  0A03               	xorlw	3	; case 2
  1680  0011C0  B4D8               	btfsc	status,2,c
  1681  0011C2  D798               	goto	l1385
  1682  0011C4  0A01               	xorlw	1	; case 3
  1683  0011C6  B4D8               	btfsc	status,2,c
  1684  0011C8  D7B9               	goto	l1395
  1685  0011CA                     l1409:
  1686                           
  1687                           ;bufferhandler.c: 195: return 1;
  1688  0011CA  0E00               	movlw	0
  1689  0011CC  6E29               	movwf	?_transformToTwoDigitNumber+1,c
  1690  0011CE  0E01               	movlw	1
  1691  0011D0  6E28               	movwf	?_transformToTwoDigitNumber,c
  1692  0011D2  0012               	return	
  1693  0011D4                     __end_of_transformToTwoDigitNumber:
  1694                           	opt stack 0
  1695                           tblptru	equ	0xFF8
  1696                           tblptrh	equ	0xFF7
  1697                           tblptrl	equ	0xFF6
  1698                           tablat	equ	0xFF5
  1699                           indf0	equ	0xFEF
  1700                           postinc0	equ	0xFEE
  1701                           fsr0h	equ	0xFEA
  1702                           fsr0l	equ	0xFE9
  1703                           wreg	equ	0xFE8
  1704                           indf1	equ	0xFE7
  1705                           postdec1	equ	0xFE5
  1706                           fsr1h	equ	0xFE2
  1707                           fsr1l	equ	0xFE1
  1708                           indf2	equ	0xFDF
  1709                           postinc2	equ	0xFDE
  1710                           postdec2	equ	0xFDD
  1711                           plusw2	equ	0xFDB
  1712                           fsr2h	equ	0xFDA
  1713                           fsr2l	equ	0xFD9
  1714                           status	equ	0xFD8
  1715                           
  1716 ;; *************** function ___wmul *****************
  1717 ;; Defined at:
  1718 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;  multiplier      2   33[COMRAM] unsigned int 
  1721 ;;  multiplicand    2   35[COMRAM] unsigned int 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  product         2   37[COMRAM] unsigned int 
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  2   33[COMRAM] unsigned int 
  1726 ;; Registers used:
  1727 ;;		wreg, status,2, status,0, prodl, prodh
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1733 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1734 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1736 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1737 ;;Total ram usage:        6 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    3
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_transformToTwoDigitNumber
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	text8
  1748  001790                     __ptext8:
  1749                           	opt stack 0
  1750  001790                     ___wmul:
  1751                           	opt stack 25
  1752                           
  1753                           ;incstack = 0
  1754  001790  5022               	movf	___wmul@multiplier,w,c
  1755  001792  0224               	mulwf	___wmul@multiplicand,c
  1756  001794  CFF3 F026          	movff	prodl,___wmul@product
  1757  001798  CFF4 F027          	movff	prodh,___wmul@product+1
  1758  00179C  5022               	movf	___wmul@multiplier,w,c
  1759  00179E  0225               	mulwf	___wmul@multiplicand+1,c
  1760  0017A0  50F3               	movf	prodl,w,c
  1761  0017A2  2627               	addwf	___wmul@product+1,f,c
  1762  0017A4  5023               	movf	___wmul@multiplier+1,w,c
  1763  0017A6  0224               	mulwf	___wmul@multiplicand,c
  1764  0017A8  50F3               	movf	prodl,w,c
  1765  0017AA  2627               	addwf	___wmul@product+1,f,c
  1766  0017AC  C026  F022         	movff	___wmul@product,?___wmul
  1767  0017B0  C027  F023         	movff	___wmul@product+1,?___wmul+1
  1768  0017B4  0012               	return	
  1769  0017B6                     __end_of___wmul:
  1770                           	opt stack 0
  1771                           tblptru	equ	0xFF8
  1772                           tblptrh	equ	0xFF7
  1773                           tblptrl	equ	0xFF6
  1774                           tablat	equ	0xFF5
  1775                           prodh	equ	0xFF4
  1776                           prodl	equ	0xFF3
  1777                           indf0	equ	0xFEF
  1778                           postinc0	equ	0xFEE
  1779                           fsr0h	equ	0xFEA
  1780                           fsr0l	equ	0xFE9
  1781                           wreg	equ	0xFE8
  1782                           indf1	equ	0xFE7
  1783                           postdec1	equ	0xFE5
  1784                           fsr1h	equ	0xFE2
  1785                           fsr1l	equ	0xFE1
  1786                           indf2	equ	0xFDF
  1787                           postinc2	equ	0xFDE
  1788                           postdec2	equ	0xFDD
  1789                           plusw2	equ	0xFDB
  1790                           fsr2h	equ	0xFDA
  1791                           fsr2l	equ	0xFD9
  1792                           status	equ	0xFD8
  1793                           
  1794 ;; *************** function _lenHelper *****************
  1795 ;; Defined at:
  1796 ;;		line 157 in file "bufferhandler.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;  x               2   33[COMRAM] int 
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;		None
  1801 ;; Return value:  Size  Location     Type
  1802 ;;                  2   33[COMRAM] int 
  1803 ;; Registers used:
  1804 ;;		wreg, status,2, status,0
  1805 ;; Tracked objects:
  1806 ;;		On entry : 0/0
  1807 ;;		On exit  : 0/0
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1810 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1813 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1814 ;;Total ram usage:        2 bytes
  1815 ;; Hardware stack levels used:    1
  1816 ;; Hardware stack levels required when called:    3
  1817 ;; This function calls:
  1818 ;;		Nothing
  1819 ;; This function is called by:
  1820 ;;		_parseString
  1821 ;; This function uses a non-reentrant model
  1822 ;;
  1823                           
  1824                           	psect	text9
  1825  0014AE                     __ptext9:
  1826                           	opt stack 0
  1827  0014AE                     _lenHelper:
  1828                           	opt stack 26
  1829                           
  1830                           ;bufferhandler.c: 158: if(x>=1000) return 4;
  1831                           
  1832                           ;incstack = 0
  1833  0014AE  BE23               	btfsc	lenHelper@x+1,7,c
  1834  0014B0  D00B               	goto	l1423
  1835  0014B2  0EE8               	movlw	232
  1836  0014B4  5C22               	subwf	lenHelper@x,w,c
  1837  0014B6  0E03               	movlw	3
  1838  0014B8  5823               	subwfb	lenHelper@x+1,w,c
  1839  0014BA  A0D8               	btfss	status,0,c
  1840  0014BC  D005               	goto	l1423
  1841  0014BE  0E00               	movlw	0
  1842  0014C0  6E23               	movwf	?_lenHelper+1,c
  1843  0014C2  0E04               	movlw	4
  1844  0014C4  6E22               	movwf	?_lenHelper,c
  1845  0014C6  0012               	return	
  1846  0014C8                     l1423:
  1847                           
  1848                           ;bufferhandler.c: 159: if(x>=100) return 3;
  1849  0014C8  BE23               	btfsc	lenHelper@x+1,7,c
  1850  0014CA  D00B               	goto	l1429
  1851  0014CC  5023               	movf	lenHelper@x+1,w,c
  1852  0014CE  E104               	bnz	u660
  1853  0014D0  0E64               	movlw	100
  1854  0014D2  5C22               	subwf	lenHelper@x,w,c
  1855  0014D4  A0D8               	btfss	status,0,c
  1856  0014D6  D005               	goto	l1429
  1857  0014D8                     u660:
  1858  0014D8  0E00               	movlw	0
  1859  0014DA  6E23               	movwf	?_lenHelper+1,c
  1860  0014DC  0E03               	movlw	3
  1861  0014DE  6E22               	movwf	?_lenHelper,c
  1862  0014E0  0012               	return	
  1863  0014E2                     l1429:
  1864                           
  1865                           ;bufferhandler.c: 160: if(x>=10) return 2;
  1866  0014E2  BE23               	btfsc	lenHelper@x+1,7,c
  1867  0014E4  D00B               	goto	l1435
  1868  0014E6  5023               	movf	lenHelper@x+1,w,c
  1869  0014E8  E104               	bnz	u670
  1870  0014EA  0E0A               	movlw	10
  1871  0014EC  5C22               	subwf	lenHelper@x,w,c
  1872  0014EE  A0D8               	btfss	status,0,c
  1873  0014F0  D005               	goto	l1435
  1874  0014F2                     u670:
  1875  0014F2  0E00               	movlw	0
  1876  0014F4  6E23               	movwf	?_lenHelper+1,c
  1877  0014F6  0E02               	movlw	2
  1878  0014F8  6E22               	movwf	?_lenHelper,c
  1879  0014FA  0012               	return	
  1880  0014FC                     l1435:
  1881                           
  1882                           ;bufferhandler.c: 161: return 1;
  1883  0014FC  0E00               	movlw	0
  1884  0014FE  6E23               	movwf	?_lenHelper+1,c
  1885  001500  0E01               	movlw	1
  1886  001502  6E22               	movwf	?_lenHelper,c
  1887  001504  0012               	return	
  1888  001506                     __end_of_lenHelper:
  1889                           	opt stack 0
  1890                           tblptru	equ	0xFF8
  1891                           tblptrh	equ	0xFF7
  1892                           tblptrl	equ	0xFF6
  1893                           tablat	equ	0xFF5
  1894                           prodh	equ	0xFF4
  1895                           prodl	equ	0xFF3
  1896                           indf0	equ	0xFEF
  1897                           postinc0	equ	0xFEE
  1898                           fsr0h	equ	0xFEA
  1899                           fsr0l	equ	0xFE9
  1900                           wreg	equ	0xFE8
  1901                           indf1	equ	0xFE7
  1902                           postdec1	equ	0xFE5
  1903                           fsr1h	equ	0xFE2
  1904                           fsr1l	equ	0xFE1
  1905                           indf2	equ	0xFDF
  1906                           postinc2	equ	0xFDE
  1907                           postdec2	equ	0xFDD
  1908                           plusw2	equ	0xFDB
  1909                           fsr2h	equ	0xFDA
  1910                           fsr2l	equ	0xFD9
  1911                           status	equ	0xFD8
  1912                           
  1913 ;; *************** function _checkString *****************
  1914 ;; Defined at:
  1915 ;;		line 201 in file "bufferhandler.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;		None
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;  i               2   48[COMRAM] int 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1930 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1931 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1932 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1933 ;;Total ram usage:        6 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    5
  1936 ;; This function calls:
  1937 ;;		_checkPos
  1938 ;; This function is called by:
  1939 ;;		_parseString
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text10
  1944  0011D4                     __ptext10:
  1945                           	opt stack 0
  1946  0011D4                     _checkString:
  1947                           	opt stack 24
  1948                           
  1949                           ;bufferhandler.c: 206: positions[0] = 8;
  1950                           
  1951                           ;incstack = 0
  1952  0011D4  0E00               	movlw	0
  1953  0011D6  0100               	movlb	0	; () banked
  1954  0011D8  6F61               	movwf	(_positions+1)& (0+255),b
  1955  0011DA  0E08               	movlw	8
  1956  0011DC  6F60               	movwf	_positions& (0+255),b
  1957                           
  1958                           ;bufferhandler.c: 208: for(int i = 0; i<10;i++){
  1959  0011DE  0E00               	movlw	0
  1960  0011E0  6E32               	movwf	checkString@i+1,c
  1961  0011E2  0E00               	movlw	0
  1962  0011E4  6E31               	movwf	checkString@i,c
  1963  0011E6                     l1357:
  1964                           
  1965                           ; BSR set to: 0
  1966  0011E6  BE32               	btfsc	checkString@i+1,7,c
  1967  0011E8  D006               	goto	l1361
  1968  0011EA  5032               	movf	checkString@i+1,w,c
  1969  0011EC  E149               	bnz	l1369
  1970  0011EE  0E0A               	movlw	10
  1971  0011F0  5C31               	subwf	checkString@i,w,c
  1972  0011F2  B0D8               	btfsc	status,0,c
  1973  0011F4  D045               	goto	l1369
  1974  0011F6                     l1361:
  1975                           
  1976                           ;bufferhandler.c: 209: positions[i] = checkPos(positions[i]);
  1977  0011F6  90D8               	bcf	status,0,c
  1978  0011F8  3431               	rlcf	checkString@i,w,c
  1979  0011FA  6ED9               	movwf	fsr2l,c
  1980  0011FC  3432               	rlcf	checkString@i+1,w,c
  1981  0011FE  6EDA               	movwf	fsr2h,c
  1982  001200  0E60               	movlw	low _positions
  1983  001202  26D9               	addwf	fsr2l,f,c
  1984  001204  0E00               	movlw	high _positions
  1985  001206  22DA               	addwfc	fsr2h,f,c
  1986  001208  CFDE F028          	movff	postinc2,checkPos@pos
  1987  00120C  CFDD F029          	movff	postdec2,checkPos@pos+1
  1988  001210  EC2A  F00B         	call	_checkPos	;wreg free
  1989  001214  90D8               	bcf	status,0,c
  1990  001216  3431               	rlcf	checkString@i,w,c
  1991  001218  6ED9               	movwf	fsr2l,c
  1992  00121A  3432               	rlcf	checkString@i+1,w,c
  1993  00121C  6EDA               	movwf	fsr2h,c
  1994  00121E  0E60               	movlw	low _positions
  1995  001220  26D9               	addwf	fsr2l,f,c
  1996  001222  0E00               	movlw	high _positions
  1997  001224  22DA               	addwfc	fsr2h,f,c
  1998  001226  C028  FFDE         	movff	?_checkPos,postinc2
  1999  00122A  C029  FFDD         	movff	?_checkPos+1,postdec2
  2000                           
  2001                           ;bufferhandler.c: 210: positions[i+1] = positions[i] + 1;
  2002  00122E  90D8               	bcf	status,0,c
  2003  001230  3431               	rlcf	checkString@i,w,c
  2004  001232  6ED9               	movwf	fsr2l,c
  2005  001234  3432               	rlcf	checkString@i+1,w,c
  2006  001236  6EDA               	movwf	fsr2h,c
  2007  001238  0E60               	movlw	low _positions
  2008  00123A  26D9               	addwf	fsr2l,f,c
  2009  00123C  0E00               	movlw	high _positions
  2010  00123E  22DA               	addwfc	fsr2h,f,c
  2011  001240  CFDE F02D          	movff	postinc2,??_checkString
  2012  001244  CFDD F02E          	movff	postdec2,??_checkString+1
  2013  001248  0E01               	movlw	1
  2014  00124A  262D               	addwf	??_checkString,f,c
  2015  00124C  0E00               	movlw	0
  2016  00124E  222E               	addwfc	??_checkString+1,f,c
  2017  001250  C031  F02F         	movff	checkString@i,??_checkString+2
  2018  001254  C032  F030         	movff	checkString@i+1,??_checkString+3
  2019  001258  90D8               	bcf	status,0,c
  2020  00125A  362F               	rlcf	??_checkString+2,f,c
  2021  00125C  3630               	rlcf	??_checkString+3,f,c
  2022  00125E  0E02               	movlw	2
  2023  001260  262F               	addwf	??_checkString+2,f,c
  2024  001262  0E00               	movlw	0
  2025  001264  2230               	addwfc	??_checkString+3,f,c
  2026  001266  0E60               	movlw	low _positions
  2027  001268  242F               	addwf	??_checkString+2,w,c
  2028  00126A  6ED9               	movwf	fsr2l,c
  2029  00126C  0E00               	movlw	high _positions
  2030  00126E  2030               	addwfc	??_checkString+3,w,c
  2031  001270  6EDA               	movwf	fsr2h,c
  2032  001272  C02D  FFDE         	movff	??_checkString,postinc2
  2033  001276  C02E  FFDD         	movff	??_checkString+1,postdec2
  2034  00127A  4A31               	infsnz	checkString@i,f,c
  2035  00127C  2A32               	incf	checkString@i+1,f,c
  2036  00127E  D7B3               	goto	l1357
  2037  001280                     l1369:
  2038                           
  2039                           ;bufferhandler.c: 211: }
  2040                           ;bufferhandler.c: 213: positions[10] = '\0';
  2041  001280  0E00               	movlw	0
  2042  001282  0100               	movlb	0	; () banked
  2043  001284  6F75               	movwf	(_positions+21)& (0+255),b
  2044  001286  0E00               	movlw	0
  2045  001288  6F74               	movwf	(_positions+20)& (0+255),b
  2046                           
  2047                           ; BSR set to: 0
  2048  00128A  0012               	return		;funcret
  2049  00128C                     __end_of_checkString:
  2050                           	opt stack 0
  2051                           tblptru	equ	0xFF8
  2052                           tblptrh	equ	0xFF7
  2053                           tblptrl	equ	0xFF6
  2054                           tablat	equ	0xFF5
  2055                           prodh	equ	0xFF4
  2056                           prodl	equ	0xFF3
  2057                           indf0	equ	0xFEF
  2058                           postinc0	equ	0xFEE
  2059                           fsr0h	equ	0xFEA
  2060                           fsr0l	equ	0xFE9
  2061                           wreg	equ	0xFE8
  2062                           indf1	equ	0xFE7
  2063                           postdec1	equ	0xFE5
  2064                           fsr1h	equ	0xFE2
  2065                           fsr1l	equ	0xFE1
  2066                           indf2	equ	0xFDF
  2067                           postinc2	equ	0xFDE
  2068                           postdec2	equ	0xFDD
  2069                           plusw2	equ	0xFDB
  2070                           fsr2h	equ	0xFDA
  2071                           fsr2l	equ	0xFD9
  2072                           status	equ	0xFD8
  2073                           
  2074 ;; *************** function _checkPos *****************
  2075 ;; Defined at:
  2076 ;;		line 217 in file "bufferhandler.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;  pos             2   39[COMRAM] int 
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;  i               2   42[COMRAM] int 
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  2   39[COMRAM] int 
  2083 ;; Registers used:
  2084 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2091 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2092 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2093 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2094 ;;Total ram usage:        5 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; Hardware stack levels required when called:    4
  2097 ;; This function calls:
  2098 ;;		_strlen
  2099 ;; This function is called by:
  2100 ;;		_checkString
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text11
  2105  001654                     __ptext11:
  2106                           	opt stack 0
  2107  001654                     _checkPos:
  2108                           	opt stack 24
  2109                           
  2110                           ;bufferhandler.c: 218: for(int i = pos+1; i < strlen(allDataString); i++){
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;incstack = 0
  2114  001654  0E01               	movlw	1
  2115  001656  2428               	addwf	checkPos@pos,w,c
  2116  001658  6E2B               	movwf	checkPos@i,c
  2117  00165A  0E00               	movlw	0
  2118  00165C  2029               	addwfc	checkPos@pos+1,w,c
  2119  00165E  6E2C               	movwf	checkPos@i+1,c
  2120  001660  D011               	goto	l1325
  2121  001662                     l1319:
  2122                           
  2123                           ;bufferhandler.c: 219: if(allDataString[i] == 0x3B){
  2124  001662  0E00               	movlw	low _allDataString
  2125  001664  242B               	addwf	checkPos@i,w,c
  2126  001666  6ED9               	movwf	fsr2l,c
  2127  001668  0E01               	movlw	high _allDataString
  2128  00166A  202C               	addwfc	checkPos@i+1,w,c
  2129  00166C  6EDA               	movwf	fsr2h,c
  2130  00166E  0E3B               	movlw	59
  2131  001670  18DE               	xorwf	postinc2,w,c
  2132  001672  A4D8               	btfss	status,2,c
  2133  001674  D005               	goto	l1323
  2134                           
  2135                           ;bufferhandler.c: 220: return i;
  2136  001676  C02B  F028         	movff	checkPos@i,?_checkPos
  2137  00167A  C02C  F029         	movff	checkPos@i+1,?_checkPos+1
  2138  00167E  0012               	return	
  2139  001680                     l1323:
  2140  001680  4A2B               	infsnz	checkPos@i,f,c
  2141  001682  2A2C               	incf	checkPos@i+1,f,c
  2142  001684                     l1325:
  2143  001684  0E00               	movlw	low _allDataString
  2144  001686  6E22               	movwf	strlen@s,c
  2145  001688  0E01               	movlw	high _allDataString
  2146  00168A  6E23               	movwf	strlen@s+1,c
  2147  00168C  ECD9  F00A         	call	_strlen	;wreg free
  2148  001690  5022               	movf	?_strlen,w,c
  2149  001692  5C2B               	subwf	checkPos@i,w,c
  2150  001694  5023               	movf	?_strlen+1,w,c
  2151  001696  582C               	subwfb	checkPos@i+1,w,c
  2152  001698  B0D8               	btfsc	status,0,c
  2153  00169A  0012               	return	
  2154  00169C  D7E2               	goto	l1319
  2155  00169E                     __end_of_checkPos:
  2156                           	opt stack 0
  2157                           tblptru	equ	0xFF8
  2158                           tblptrh	equ	0xFF7
  2159                           tblptrl	equ	0xFF6
  2160                           tablat	equ	0xFF5
  2161                           prodh	equ	0xFF4
  2162                           prodl	equ	0xFF3
  2163                           indf0	equ	0xFEF
  2164                           postinc0	equ	0xFEE
  2165                           fsr0h	equ	0xFEA
  2166                           fsr0l	equ	0xFE9
  2167                           wreg	equ	0xFE8
  2168                           indf1	equ	0xFE7
  2169                           postdec1	equ	0xFE5
  2170                           fsr1h	equ	0xFE2
  2171                           fsr1l	equ	0xFE1
  2172                           indf2	equ	0xFDF
  2173                           postinc2	equ	0xFDE
  2174                           postdec2	equ	0xFDD
  2175                           plusw2	equ	0xFDB
  2176                           fsr2h	equ	0xFDA
  2177                           fsr2l	equ	0xFD9
  2178                           status	equ	0xFD8
  2179                           
  2180 ;; *************** function ___awdiv *****************
  2181 ;; Defined at:
  2182 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;  dividend        2   33[COMRAM] int 
  2185 ;;  divisor         2   35[COMRAM] int 
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;  quotient        2   39[COMRAM] int 
  2188 ;;  sign            1   38[COMRAM] unsigned char 
  2189 ;;  counter         1   37[COMRAM] unsigned char 
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  2   33[COMRAM] int 
  2192 ;; Registers used:
  2193 ;;		wreg, status,2, status,0
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2199 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2200 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2202 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2203 ;;Total ram usage:        8 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    3
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_parseString
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           	psect	text12
  2214  0013CC                     __ptext12:
  2215                           	opt stack 0
  2216  0013CC                     ___awdiv:
  2217                           	opt stack 26
  2218                           
  2219                           ;incstack = 0
  2220  0013CC  0E00               	movlw	0
  2221  0013CE  6E27               	movwf	___awdiv@sign,c
  2222  0013D0  AE25               	btfss	___awdiv@divisor+1,7,c
  2223  0013D2  D006               	goto	l1447
  2224  0013D4  6C24               	negf	___awdiv@divisor,c
  2225  0013D6  1E25               	comf	___awdiv@divisor+1,f,c
  2226  0013D8  B0D8               	btfsc	status,0,c
  2227  0013DA  2A25               	incf	___awdiv@divisor+1,f,c
  2228  0013DC  0E01               	movlw	1
  2229  0013DE  6E27               	movwf	___awdiv@sign,c
  2230  0013E0                     l1447:
  2231  0013E0  AE23               	btfss	___awdiv@dividend+1,7,c
  2232  0013E2  D006               	goto	l1453
  2233  0013E4  6C22               	negf	___awdiv@dividend,c
  2234  0013E6  1E23               	comf	___awdiv@dividend+1,f,c
  2235  0013E8  B0D8               	btfsc	status,0,c
  2236  0013EA  2A23               	incf	___awdiv@dividend+1,f,c
  2237  0013EC  0E01               	movlw	1
  2238  0013EE  1A27               	xorwf	___awdiv@sign,f,c
  2239  0013F0                     l1453:
  2240  0013F0  0E00               	movlw	0
  2241  0013F2  6E29               	movwf	___awdiv@quotient+1,c
  2242  0013F4  0E00               	movlw	0
  2243  0013F6  6E28               	movwf	___awdiv@quotient,c
  2244  0013F8  5024               	movf	___awdiv@divisor,w,c
  2245  0013FA  1025               	iorwf	___awdiv@divisor+1,w,c
  2246  0013FC  B4D8               	btfsc	status,2,c
  2247  0013FE  D01C               	goto	l1475
  2248  001400  0E01               	movlw	1
  2249  001402  6E26               	movwf	___awdiv@counter,c
  2250  001404  D004               	goto	l1461
  2251  001406                     l1459:
  2252  001406  90D8               	bcf	status,0,c
  2253  001408  3624               	rlcf	___awdiv@divisor,f,c
  2254  00140A  3625               	rlcf	___awdiv@divisor+1,f,c
  2255  00140C  2A26               	incf	___awdiv@counter,f,c
  2256  00140E                     l1461:
  2257  00140E  AE25               	btfss	___awdiv@divisor+1,7,c
  2258  001410  D7FA               	goto	l1459
  2259  001412                     l1463:
  2260  001412  90D8               	bcf	status,0,c
  2261  001414  3628               	rlcf	___awdiv@quotient,f,c
  2262  001416  3629               	rlcf	___awdiv@quotient+1,f,c
  2263  001418  5024               	movf	___awdiv@divisor,w,c
  2264  00141A  5C22               	subwf	___awdiv@dividend,w,c
  2265  00141C  5025               	movf	___awdiv@divisor+1,w,c
  2266  00141E  5823               	subwfb	___awdiv@dividend+1,w,c
  2267  001420  A0D8               	btfss	status,0,c
  2268  001422  D005               	goto	l1471
  2269  001424  5024               	movf	___awdiv@divisor,w,c
  2270  001426  5E22               	subwf	___awdiv@dividend,f,c
  2271  001428  5025               	movf	___awdiv@divisor+1,w,c
  2272  00142A  5A23               	subwfb	___awdiv@dividend+1,f,c
  2273  00142C  8028               	bsf	___awdiv@quotient,0,c
  2274  00142E                     l1471:
  2275  00142E  90D8               	bcf	status,0,c
  2276  001430  3225               	rrcf	___awdiv@divisor+1,f,c
  2277  001432  3224               	rrcf	___awdiv@divisor,f,c
  2278  001434  2E26               	decfsz	___awdiv@counter,f,c
  2279  001436  D7ED               	goto	l1463
  2280  001438                     l1475:
  2281  001438  5027               	movf	___awdiv@sign,w,c
  2282  00143A  B4D8               	btfsc	status,2,c
  2283  00143C  D004               	goto	l1479
  2284  00143E  6C28               	negf	___awdiv@quotient,c
  2285  001440  1E29               	comf	___awdiv@quotient+1,f,c
  2286  001442  B0D8               	btfsc	status,0,c
  2287  001444  2A29               	incf	___awdiv@quotient+1,f,c
  2288  001446                     l1479:
  2289  001446  C028  F022         	movff	___awdiv@quotient,?___awdiv
  2290  00144A  C029  F023         	movff	___awdiv@quotient+1,?___awdiv+1
  2291  00144E  0012               	return	
  2292  001450                     __end_of___awdiv:
  2293                           	opt stack 0
  2294                           tblptru	equ	0xFF8
  2295                           tblptrh	equ	0xFF7
  2296                           tblptrl	equ	0xFF6
  2297                           tablat	equ	0xFF5
  2298                           prodh	equ	0xFF4
  2299                           prodl	equ	0xFF3
  2300                           indf0	equ	0xFEF
  2301                           postinc0	equ	0xFEE
  2302                           fsr0h	equ	0xFEA
  2303                           fsr0l	equ	0xFE9
  2304                           wreg	equ	0xFE8
  2305                           indf1	equ	0xFE7
  2306                           postdec1	equ	0xFE5
  2307                           fsr1h	equ	0xFE2
  2308                           fsr1l	equ	0xFE1
  2309                           indf2	equ	0xFDF
  2310                           postinc2	equ	0xFDE
  2311                           postdec2	equ	0xFDD
  2312                           plusw2	equ	0xFDB
  2313                           fsr2h	equ	0xFDA
  2314                           fsr2l	equ	0xFD9
  2315                           status	equ	0xFD8
  2316                           
  2317 ;; *************** function _isValid *****************
  2318 ;; Defined at:
  2319 ;;		line 79 in file "bufferhandler.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;		None
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;		None
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  1    wreg      unsigned char 
  2326 ;; Registers used:
  2327 ;;		wreg, status,2, status,0
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2337 ;;Total ram usage:        0 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    3
  2340 ;; This function calls:
  2341 ;;		Nothing
  2342 ;; This function is called by:
  2343 ;;		_main
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347                           	psect	text13
  2348  001724                     __ptext13:
  2349                           	opt stack 0
  2350  001724                     _isValid:
  2351                           	opt stack 27
  2352                           
  2353                           ;bufferhandler.c: 80: if(tmpString[0] == 0x54 &&
  2354                           ;bufferhandler.c: 81: tmpString[1] == 0x59 &&
  2355                           ;bufferhandler.c: 82: tmpString[2] == 0x52 &&
  2356                           ;bufferhandler.c: 83: tmpString[3] == 0x49 &&
  2357                           ;bufferhandler.c: 84: tmpString[4] == 0x5F){
  2358                           
  2359                           ;incstack = 0
  2360  001724  0E54               	movlw	84
  2361  001726  0100               	movlb	0	; () banked
  2362  001728  1979               	xorwf	_tmpString& (0+255),w,b
  2363  00172A  A4D8               	btfss	status,2,c
  2364  00172C  D016               	goto	l1531
  2365                           
  2366                           ; BSR set to: 0
  2367  00172E  0E59               	movlw	89
  2368  001730  0100               	movlb	0	; () banked
  2369  001732  197A               	xorwf	(_tmpString+1)& (0+255),w,b
  2370  001734  A4D8               	btfss	status,2,c
  2371  001736  D011               	goto	l1531
  2372                           
  2373                           ; BSR set to: 0
  2374  001738  0E52               	movlw	82
  2375  00173A  0100               	movlb	0	; () banked
  2376  00173C  197B               	xorwf	(_tmpString+2)& (0+255),w,b
  2377  00173E  A4D8               	btfss	status,2,c
  2378  001740  D00C               	goto	l1531
  2379                           
  2380                           ; BSR set to: 0
  2381  001742  0E49               	movlw	73
  2382  001744  0100               	movlb	0	; () banked
  2383  001746  197C               	xorwf	(_tmpString+3)& (0+255),w,b
  2384  001748  A4D8               	btfss	status,2,c
  2385  00174A  D007               	goto	l1531
  2386                           
  2387                           ; BSR set to: 0
  2388  00174C  0E5F               	movlw	95
  2389  00174E  0100               	movlb	0	; () banked
  2390  001750  197D               	xorwf	(_tmpString+4)& (0+255),w,b
  2391  001752  A4D8               	btfss	status,2,c
  2392  001754  D002               	goto	l1531
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;bufferhandler.c: 85: return 1;
  2396  001756  0E01               	movlw	1
  2397                           
  2398                           ; BSR set to: 0
  2399  001758  0012               	return	
  2400  00175A                     l1531:
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;bufferhandler.c: 86: }
  2404                           ;bufferhandler.c: 87: return 0;
  2405  00175A  0E00               	movlw	0
  2406  00175C  0012               	return	
  2407  00175E                     __end_of_isValid:
  2408                           	opt stack 0
  2409                           tblptru	equ	0xFF8
  2410                           tblptrh	equ	0xFF7
  2411                           tblptrl	equ	0xFF6
  2412                           tablat	equ	0xFF5
  2413                           prodh	equ	0xFF4
  2414                           prodl	equ	0xFF3
  2415                           indf0	equ	0xFEF
  2416                           postinc0	equ	0xFEE
  2417                           fsr0h	equ	0xFEA
  2418                           fsr0l	equ	0xFE9
  2419                           wreg	equ	0xFE8
  2420                           indf1	equ	0xFE7
  2421                           postdec1	equ	0xFE5
  2422                           fsr1h	equ	0xFE2
  2423                           fsr1l	equ	0xFE1
  2424                           indf2	equ	0xFDF
  2425                           postinc2	equ	0xFDE
  2426                           postdec2	equ	0xFDD
  2427                           plusw2	equ	0xFDB
  2428                           fsr2h	equ	0xFDA
  2429                           fsr2l	equ	0xFD9
  2430                           status	equ	0xFD8
  2431                           
  2432 ;; *************** function _isItLongEnough *****************
  2433 ;; Defined at:
  2434 ;;		line 40 in file "bufferhandler.c"
  2435 ;; Parameters:    Size  Location     Type
  2436 ;;		None
  2437 ;; Auto vars:     Size  Location     Type
  2438 ;;		None
  2439 ;; Return value:  Size  Location     Type
  2440 ;;                  1    wreg      unsigned char 
  2441 ;; Registers used:
  2442 ;;		wreg, status,2, status,0
  2443 ;; Tracked objects:
  2444 ;;		On entry : 0/0
  2445 ;;		On exit  : 0/0
  2446 ;;		Unchanged: 0/0
  2447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2452 ;;Total ram usage:        0 bytes
  2453 ;; Hardware stack levels used:    1
  2454 ;; Hardware stack levels required when called:    3
  2455 ;; This function calls:
  2456 ;;		Nothing
  2457 ;; This function is called by:
  2458 ;;		_main
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462                           	psect	text14
  2463  001810                     __ptext14:
  2464                           	opt stack 0
  2465  001810                     _isItLongEnough:
  2466                           	opt stack 27
  2467                           
  2468                           ;bufferhandler.c: 42: if(index >= 64){
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;incstack = 0
  2472  001810  BE39               	btfsc	_index+1,7,c
  2473  001812  D008               	goto	l1127
  2474  001814  5039               	movf	_index+1,w,c
  2475  001816  E104               	bnz	u280
  2476  001818  0E40               	movlw	64
  2477  00181A  5C38               	subwf	_index,w,c
  2478  00181C  A0D8               	btfss	status,0,c
  2479  00181E  D002               	goto	l1127
  2480  001820                     u280:
  2481                           
  2482                           ;bufferhandler.c: 43: return 1;
  2483  001820  0E01               	movlw	1
  2484                           
  2485                           ;bufferhandler.c: 44: }else{
  2486  001822  0012               	return	
  2487  001824                     l1127:
  2488                           
  2489                           ;bufferhandler.c: 45: return 0;
  2490  001824  0E00               	movlw	0
  2491  001826  0012               	return	
  2492  001828                     __end_of_isItLongEnough:
  2493                           	opt stack 0
  2494                           tblptru	equ	0xFF8
  2495                           tblptrh	equ	0xFF7
  2496                           tblptrl	equ	0xFF6
  2497                           tablat	equ	0xFF5
  2498                           prodh	equ	0xFF4
  2499                           prodl	equ	0xFF3
  2500                           indf0	equ	0xFEF
  2501                           postinc0	equ	0xFEE
  2502                           fsr0h	equ	0xFEA
  2503                           fsr0l	equ	0xFE9
  2504                           wreg	equ	0xFE8
  2505                           indf1	equ	0xFE7
  2506                           postdec1	equ	0xFE5
  2507                           fsr1h	equ	0xFE2
  2508                           fsr1l	equ	0xFE1
  2509                           indf2	equ	0xFDF
  2510                           postinc2	equ	0xFDE
  2511                           postdec2	equ	0xFDD
  2512                           plusw2	equ	0xFDB
  2513                           fsr2h	equ	0xFDA
  2514                           fsr2l	equ	0xFD9
  2515                           status	equ	0xFD8
  2516                           
  2517 ;; *************** function _copyTmpBuffer *****************
  2518 ;; Defined at:
  2519 ;;		line 57 in file "bufferhandler.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;		None
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;  i               2   34[COMRAM] int 
  2524 ;; Return value:  Size  Location     Type
  2525 ;;                  1    wreg      void 
  2526 ;; Registers used:
  2527 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2534 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2535 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2536 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2537 ;;Total ram usage:        3 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    3
  2540 ;; This function calls:
  2541 ;;		Nothing
  2542 ;; This function is called by:
  2543 ;;		_main
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           	psect	text15
  2548  0016E4                     __ptext15:
  2549                           	opt stack 0
  2550  0016E4                     _copyTmpBuffer:
  2551                           	opt stack 27
  2552                           
  2553                           ;bufferhandler.c: 58: for(int i = 0; i<index; i++){
  2554                           
  2555                           ;incstack = 0
  2556  0016E4  0E00               	movlw	0
  2557  0016E6  6E24               	movwf	copyTmpBuffer@i+1,c
  2558  0016E8  0E00               	movlw	0
  2559  0016EA  6E23               	movwf	copyTmpBuffer@i,c
  2560  0016EC  D010               	goto	l1541
  2561  0016EE                     l1537:
  2562                           
  2563                           ;bufferhandler.c: 59: allDataString[i] = tmpString[i];
  2564  0016EE  0E79               	movlw	low _tmpString
  2565  0016F0  2423               	addwf	copyTmpBuffer@i,w,c
  2566  0016F2  6ED9               	movwf	fsr2l,c
  2567  0016F4  0E00               	movlw	high _tmpString
  2568  0016F6  2024               	addwfc	copyTmpBuffer@i+1,w,c
  2569  0016F8  6EDA               	movwf	fsr2h,c
  2570  0016FA  0E00               	movlw	low _allDataString
  2571  0016FC  2423               	addwf	copyTmpBuffer@i,w,c
  2572  0016FE  6EE1               	movwf	fsr1l,c
  2573  001700  0E01               	movlw	high _allDataString
  2574  001702  2024               	addwfc	copyTmpBuffer@i+1,w,c
  2575  001704  6EE2               	movwf	fsr1h,c
  2576  001706  CFDF FFE7          	movff	indf2,indf1
  2577  00170A  4A23               	infsnz	copyTmpBuffer@i,f,c
  2578  00170C  2A24               	incf	copyTmpBuffer@i+1,f,c
  2579  00170E                     l1541:
  2580  00170E  5038               	movf	_index,w,c
  2581  001710  5C23               	subwf	copyTmpBuffer@i,w,c
  2582  001712  5024               	movf	copyTmpBuffer@i+1,w,c
  2583  001714  0A80               	xorlw	128
  2584  001716  6E22               	movwf	??_copyTmpBuffer& (0+255),c
  2585  001718  5039               	movf	_index+1,w,c
  2586  00171A  0A80               	xorlw	128
  2587  00171C  5822               	subwfb	??_copyTmpBuffer& (0+255),w,c
  2588  00171E  B0D8               	btfsc	status,0,c
  2589  001720  0012               	return	
  2590  001722  D7E5               	goto	l1537
  2591  001724                     __end_of_copyTmpBuffer:
  2592                           	opt stack 0
  2593                           tblptru	equ	0xFF8
  2594                           tblptrh	equ	0xFF7
  2595                           tblptrl	equ	0xFF6
  2596                           tablat	equ	0xFF5
  2597                           prodh	equ	0xFF4
  2598                           prodl	equ	0xFF3
  2599                           indf0	equ	0xFEF
  2600                           postinc0	equ	0xFEE
  2601                           fsr0h	equ	0xFEA
  2602                           fsr0l	equ	0xFE9
  2603                           wreg	equ	0xFE8
  2604                           indf1	equ	0xFE7
  2605                           postdec1	equ	0xFE5
  2606                           fsr1h	equ	0xFE2
  2607                           fsr1l	equ	0xFE1
  2608                           indf2	equ	0xFDF
  2609                           postinc2	equ	0xFDE
  2610                           postdec2	equ	0xFDD
  2611                           plusw2	equ	0xFDB
  2612                           fsr2h	equ	0xFDA
  2613                           fsr2l	equ	0xFD9
  2614                           status	equ	0xFD8
  2615                           
  2616 ;; *************** function _clearBuffer *****************
  2617 ;; Defined at:
  2618 ;;		line 49 in file "bufferhandler.c"
  2619 ;; Parameters:    Size  Location     Type
  2620 ;;		None
  2621 ;; Auto vars:     Size  Location     Type
  2622 ;;  i               2   39[COMRAM] int 
  2623 ;; Return value:  Size  Location     Type
  2624 ;;                  1    wreg      void 
  2625 ;; Registers used:
  2626 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2627 ;; Tracked objects:
  2628 ;;		On entry : 0/0
  2629 ;;		On exit  : 0/0
  2630 ;;		Unchanged: 0/0
  2631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2633 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2635 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2636 ;;Total ram usage:        2 bytes
  2637 ;; Hardware stack levels used:    1
  2638 ;; Hardware stack levels required when called:    4
  2639 ;; This function calls:
  2640 ;;		_strlen
  2641 ;; This function is called by:
  2642 ;;		_main
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           	psect	text16
  2647  00169E                     __ptext16:
  2648                           	opt stack 0
  2649  00169E                     _clearBuffer:
  2650                           	opt stack 26
  2651                           
  2652                           ;bufferhandler.c: 50: for(int i = 0; i<strlen(tmpString); i++){
  2653                           
  2654                           ;incstack = 0
  2655  00169E  0E00               	movlw	0
  2656  0016A0  6E29               	movwf	clearBuffer@i+1,c
  2657  0016A2  0E00               	movlw	0
  2658  0016A4  6E28               	movwf	clearBuffer@i,c
  2659  0016A6  D00A               	goto	l1513
  2660  0016A8                     l1509:
  2661                           
  2662                           ;bufferhandler.c: 51: tmpString[i] = "";
  2663  0016A8  0E79               	movlw	low _tmpString
  2664  0016AA  2428               	addwf	clearBuffer@i,w,c
  2665  0016AC  6ED9               	movwf	fsr2l,c
  2666  0016AE  0E00               	movlw	high _tmpString
  2667  0016B0  2029               	addwfc	clearBuffer@i+1,w,c
  2668  0016B2  6EDA               	movwf	fsr2h,c
  2669  0016B4  0E05               	movlw	low (STR_1+4)
  2670  0016B6  6EDF               	movwf	indf2,c
  2671  0016B8  4A28               	infsnz	clearBuffer@i,f,c
  2672  0016BA  2A29               	incf	clearBuffer@i+1,f,c
  2673  0016BC                     l1513:
  2674  0016BC  0E79               	movlw	low _tmpString
  2675  0016BE  6E22               	movwf	strlen@s,c
  2676  0016C0  0E00               	movlw	high _tmpString
  2677  0016C2  6E23               	movwf	strlen@s+1,c
  2678  0016C4  ECD9  F00A         	call	_strlen	;wreg free
  2679  0016C8  5022               	movf	?_strlen,w,c
  2680  0016CA  5C28               	subwf	clearBuffer@i,w,c
  2681  0016CC  5023               	movf	?_strlen+1,w,c
  2682  0016CE  5829               	subwfb	clearBuffer@i+1,w,c
  2683  0016D0  A0D8               	btfss	status,0,c
  2684  0016D2  D7EA               	goto	l1509
  2685                           
  2686                           ;bufferhandler.c: 52: }
  2687                           ;bufferhandler.c: 53: tmpString[0] = '\0';
  2688  0016D4  0E00               	movlw	0
  2689  0016D6  0100               	movlb	0	; () banked
  2690  0016D8  6F79               	movwf	_tmpString& (0+255),b
  2691                           
  2692                           ;bufferhandler.c: 54: index = 0;
  2693  0016DA  0E00               	movlw	0
  2694  0016DC  6E39               	movwf	_index+1,c
  2695  0016DE  0E00               	movlw	0
  2696  0016E0  6E38               	movwf	_index,c
  2697                           
  2698                           ; BSR set to: 0
  2699  0016E2  0012               	return		;funcret
  2700  0016E4                     __end_of_clearBuffer:
  2701                           	opt stack 0
  2702                           tblptru	equ	0xFF8
  2703                           tblptrh	equ	0xFF7
  2704                           tblptrl	equ	0xFF6
  2705                           tablat	equ	0xFF5
  2706                           prodh	equ	0xFF4
  2707                           prodl	equ	0xFF3
  2708                           indf0	equ	0xFEF
  2709                           postinc0	equ	0xFEE
  2710                           fsr0h	equ	0xFEA
  2711                           fsr0l	equ	0xFE9
  2712                           wreg	equ	0xFE8
  2713                           indf1	equ	0xFE7
  2714                           postdec1	equ	0xFE5
  2715                           fsr1h	equ	0xFE2
  2716                           fsr1l	equ	0xFE1
  2717                           indf2	equ	0xFDF
  2718                           postinc2	equ	0xFDE
  2719                           postdec2	equ	0xFDD
  2720                           plusw2	equ	0xFDB
  2721                           fsr2h	equ	0xFDA
  2722                           fsr2l	equ	0xFD9
  2723                           status	equ	0xFD8
  2724                           
  2725 ;; *************** function _strlen *****************
  2726 ;; Defined at:
  2727 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;  s               2   33[COMRAM] PTR const unsigned char 
  2730 ;;		 -> toCharArray(4), allDataString(70), tmpString(70), STR_2(4), 
  2731 ;;		 -> STR_1(5), 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  cp              2   37[COMRAM] PTR const unsigned char 
  2734 ;;		 -> toCharArray(4), allDataString(70), tmpString(70), STR_2(4), 
  2735 ;;		 -> STR_1(5), 
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  2   33[COMRAM] unsigned int 
  2738 ;; Registers used:
  2739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2745 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2746 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2747 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2748 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2749 ;;Total ram usage:        6 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    3
  2752 ;; This function calls:
  2753 ;;		Nothing
  2754 ;; This function is called by:
  2755 ;;		_writeString
  2756 ;;		_clearBuffer
  2757 ;;		_checkPos
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text17
  2762  0015B2                     __ptext17:
  2763                           	opt stack 0
  2764  0015B2                     _strlen:
  2765                           	opt stack 26
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;incstack = 0
  2769  0015B2  C022  F026         	movff	strlen@s,strlen@cp
  2770  0015B6  C023  F027         	movff	strlen@s+1,strlen@cp+1
  2771  0015BA  D002               	goto	l1307
  2772  0015BC                     l1305:
  2773  0015BC  4A26               	infsnz	strlen@cp,f,c
  2774  0015BE  2A27               	incf	strlen@cp+1,f,c
  2775  0015C0                     l1307:
  2776  0015C0  C026  FFF6         	movff	strlen@cp,tblptrl
  2777  0015C4  C027  FFF7         	movff	strlen@cp+1,tblptrh
  2778  0015C8  0E00               	movlw	low (__smallconst shr (0+16))
  2779  0015CA  6EF8               	movwf	tblptru,c
  2780  0015CC  0E0E               	movlw	(high __ramtop+-1)
  2781  0015CE  64F7               	cpfsgt	tblptrh,c
  2782  0015D0  D003               	bra	u487
  2783  0015D2  0008               	tblrd		*
  2784  0015D4  50F5               	movf	tablat,w,c
  2785  0015D6  D005               	bra	u480
  2786  0015D8                     u487:
  2787  0015D8  CFF6 FFE9          	movff	tblptrl,fsr0l
  2788  0015DC  CFF7 FFEA          	movff	tblptrh,fsr0h
  2789  0015E0  50EF               	movf	indf0,w,c
  2790  0015E2                     u480:
  2791  0015E2  0900               	iorlw	0
  2792  0015E4  A4D8               	btfss	status,2,c
  2793  0015E6  D7EA               	goto	l1305
  2794  0015E8  C022  F024         	movff	strlen@s,??_strlen
  2795  0015EC  C023  F025         	movff	strlen@s+1,??_strlen+1
  2796  0015F0  1E24               	comf	??_strlen,f,c
  2797  0015F2  1E25               	comf	??_strlen+1,f,c
  2798  0015F4  4A24               	infsnz	??_strlen,f,c
  2799  0015F6  2A25               	incf	??_strlen+1,f,c
  2800  0015F8  5026               	movf	strlen@cp,w,c
  2801  0015FA  2424               	addwf	??_strlen,w,c
  2802  0015FC  6E22               	movwf	?_strlen,c
  2803  0015FE  5027               	movf	strlen@cp+1,w,c
  2804  001600  2025               	addwfc	??_strlen+1,w,c
  2805  001602  6E23               	movwf	?_strlen+1,c
  2806  001604  0012               	return	
  2807  001606                     __end_of_strlen:
  2808                           	opt stack 0
  2809                           tblptru	equ	0xFF8
  2810                           tblptrh	equ	0xFF7
  2811                           tblptrl	equ	0xFF6
  2812                           tablat	equ	0xFF5
  2813                           prodh	equ	0xFF4
  2814                           prodl	equ	0xFF3
  2815                           indf0	equ	0xFEF
  2816                           postinc0	equ	0xFEE
  2817                           fsr0h	equ	0xFEA
  2818                           fsr0l	equ	0xFE9
  2819                           wreg	equ	0xFE8
  2820                           indf1	equ	0xFE7
  2821                           postdec1	equ	0xFE5
  2822                           fsr1h	equ	0xFE2
  2823                           fsr1l	equ	0xFE1
  2824                           indf2	equ	0xFDF
  2825                           postinc2	equ	0xFDE
  2826                           postdec2	equ	0xFDD
  2827                           plusw2	equ	0xFDB
  2828                           fsr2h	equ	0xFDA
  2829                           fsr2l	equ	0xFD9
  2830                           status	equ	0xFD8
  2831                           
  2832 ;; *************** function _UART_Init *****************
  2833 ;; Defined at:
  2834 ;;		line 31 in file "uart.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  baudrate        4   33[COMRAM] const long 
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;		None
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  1    wreg      unsigned char 
  2841 ;; Registers used:
  2842 ;;		wreg, status,2
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2848 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2851 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2852 ;;Total ram usage:        4 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; Hardware stack levels required when called:    3
  2855 ;; This function calls:
  2856 ;;		Nothing
  2857 ;; This function is called by:
  2858 ;;		_main
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           	psect	text18
  2863  00175E                     __ptext18:
  2864                           	opt stack 0
  2865  00175E                     _UART_Init:
  2866                           	opt stack 27
  2867                           
  2868                           ;uart.c: 35: TXSTA1 = 0x24;
  2869                           
  2870                           ;incstack = 0
  2871  00175E  0E24               	movlw	36
  2872  001760  6EAD               	movwf	4013,c	;volatile
  2873                           
  2874                           ;uart.c: 36: RCSTA1 = 0x90;
  2875  001762  0E90               	movlw	144
  2876  001764  6EAC               	movwf	4012,c	;volatile
  2877                           
  2878                           ;uart.c: 37: RC1IE = 1;
  2879  001766  8A9D               	bsf	3997,5,c	;volatile
  2880                           
  2881                           ;uart.c: 38: BAUDCON1bits.BRG16 = 0;
  2882  001768  967E               	bcf	3966,3,c	;volatile
  2883                           
  2884                           ;uart.c: 39: SPBRG1 = 155;
  2885  00176A  0E9B               	movlw	155
  2886  00176C  6EB0               	movwf	4016,c	;volatile
  2887                           
  2888                           ;uart.c: 40: SPBRGH1 = 155;
  2889  00176E  0E9B               	movlw	155
  2890  001770  6E7F               	movwf	3967,c	;volatile
  2891                           
  2892                           ;uart.c: 41: TRISC7 = 1;
  2893  001772  8E94               	bsf	3988,7,c	;volatile
  2894                           
  2895                           ;uart.c: 42: TRISC6 = 0;
  2896  001774  9C94               	bcf	3988,6,c	;volatile
  2897                           
  2898                           ;uart.c: 46: RCSTA2 = 0b10010000;
  2899  001776  0E90               	movlw	144
  2900  001778  6E9C               	movwf	3996,c	;volatile
  2901                           
  2902                           ;uart.c: 47: TXSTA2 = 0b00100100;
  2903  00177A  0E24               	movlw	36
  2904  00177C  6EA8               	movwf	4008,c	;volatile
  2905                           
  2906                           ;uart.c: 48: RC2IE = 1;
  2907  00177E  8AA3               	bsf	4003,5,c	;volatile
  2908                           
  2909                           ;uart.c: 49: BAUDCON2bits.BRG16 = 0;
  2910  001780  967C               	bcf	3964,3,c	;volatile
  2911                           
  2912                           ;uart.c: 50: SPBRG2 = 25;
  2913  001782  0E19               	movlw	25
  2914  001784  6EAB               	movwf	4011,c	;volatile
  2915                           
  2916                           ;uart.c: 51: SPBRGH2 = 25;
  2917  001786  0E19               	movlw	25
  2918  001788  6E7D               	movwf	3965,c	;volatile
  2919                           
  2920                           ;uart.c: 52: TRISB4 = 1;
  2921  00178A  8893               	bsf	3987,4,c	;volatile
  2922                           
  2923                           ;uart.c: 53: TRISB5 = 0;
  2924  00178C  9A93               	bcf	3987,5,c	;volatile
  2925  00178E  0012               	return	
  2926  001790                     __end_of_UART_Init:
  2927                           	opt stack 0
  2928                           tblptru	equ	0xFF8
  2929                           tblptrh	equ	0xFF7
  2930                           tblptrl	equ	0xFF6
  2931                           tablat	equ	0xFF5
  2932                           prodh	equ	0xFF4
  2933                           prodl	equ	0xFF3
  2934                           indf0	equ	0xFEF
  2935                           postinc0	equ	0xFEE
  2936                           fsr0h	equ	0xFEA
  2937                           fsr0l	equ	0xFE9
  2938                           wreg	equ	0xFE8
  2939                           indf1	equ	0xFE7
  2940                           postdec1	equ	0xFE5
  2941                           fsr1h	equ	0xFE2
  2942                           fsr1l	equ	0xFE1
  2943                           indf2	equ	0xFDF
  2944                           postinc2	equ	0xFDE
  2945                           postdec2	equ	0xFDD
  2946                           plusw2	equ	0xFDB
  2947                           fsr2h	equ	0xFDA
  2948                           fsr2l	equ	0xFD9
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function _InitApp *****************
  2952 ;; Defined at:
  2953 ;;		line 29 in file "user.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;		None
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;		None
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  1    wreg      void 
  2960 ;; Registers used:
  2961 ;;		wreg, status,2
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2971 ;;Total ram usage:        0 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    3
  2974 ;; This function calls:
  2975 ;;		Nothing
  2976 ;; This function is called by:
  2977 ;;		_main
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text19
  2982  0017D6                     __ptext19:
  2983                           	opt stack 0
  2984  0017D6                     _InitApp:
  2985                           	opt stack 27
  2986                           
  2987                           ;user.c: 33: PPSCON = 0b00000000;
  2988                           
  2989                           ;incstack = 0
  2990  0017D6  0E00               	movlw	0
  2991  0017D8  010E               	movlb	14	; () banked
  2992  0017DA  6FBF               	movwf	191,b	;volatile
  2993                           
  2994                           ;user.c: 34: RPOR8 = 0b00000110;
  2995  0017DC  0E06               	movlw	6
  2996  0017DE  010E               	movlb	14	; () banked
  2997  0017E0  6FC8               	movwf	200,b	;volatile
  2998                           
  2999                           ;user.c: 35: RPINR16 = 0b00000111;
  3000  0017E2  0E07               	movlw	7
  3001  0017E4  010E               	movlb	14	; () banked
  3002  0017E6  6FF7               	movwf	247,b	;volatile
  3003                           
  3004                           ;user.c: 36: PPSCON = 0b00000001;
  3005  0017E8  0E01               	movlw	1
  3006  0017EA  010E               	movlb	14	; () banked
  3007  0017EC  6FBF               	movwf	191,b	;volatile
  3008                           
  3009                           ;user.c: 39: INTCON = 0xC0;
  3010  0017EE  0EC0               	movlw	192
  3011  0017F0  6EF2               	movwf	intcon,c	;volatile
  3012                           
  3013                           ; BSR set to: 14
  3014  0017F2  0012               	return		;funcret
  3015  0017F4                     __end_of_InitApp:
  3016                           	opt stack 0
  3017                           tblptru	equ	0xFF8
  3018                           tblptrh	equ	0xFF7
  3019                           tblptrl	equ	0xFF6
  3020                           tablat	equ	0xFF5
  3021                           prodh	equ	0xFF4
  3022                           prodl	equ	0xFF3
  3023                           intcon	equ	0xFF2
  3024                           indf0	equ	0xFEF
  3025                           postinc0	equ	0xFEE
  3026                           fsr0h	equ	0xFEA
  3027                           fsr0l	equ	0xFE9
  3028                           wreg	equ	0xFE8
  3029                           indf1	equ	0xFE7
  3030                           postdec1	equ	0xFE5
  3031                           fsr1h	equ	0xFE2
  3032                           fsr1l	equ	0xFE1
  3033                           indf2	equ	0xFDF
  3034                           postinc2	equ	0xFDE
  3035                           postdec2	equ	0xFDD
  3036                           plusw2	equ	0xFDB
  3037                           fsr2h	equ	0xFDA
  3038                           fsr2l	equ	0xFD9
  3039                           status	equ	0xFD8
  3040                           
  3041 ;; *************** function _ConfigureOscillator *****************
  3042 ;; Defined at:
  3043 ;;		line 24 in file "system.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;		None
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;		None
  3048 ;; Return value:  Size  Location     Type
  3049 ;;                  1    wreg      void 
  3050 ;; Registers used:
  3051 ;;		wreg, status,2
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 0/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3061 ;;Total ram usage:        0 bytes
  3062 ;; Hardware stack levels used:    1
  3063 ;; Hardware stack levels required when called:    3
  3064 ;; This function calls:
  3065 ;;		Nothing
  3066 ;; This function is called by:
  3067 ;;		_main
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           	psect	text20
  3072  001852                     __ptext20:
  3073                           	opt stack 0
  3074  001852                     _ConfigureOscillator:
  3075                           	opt stack 27
  3076                           
  3077                           ;system.c: 26: OSCCONbits.IRCF = 0b110;
  3078                           
  3079                           ; BSR set to: 14
  3080                           ;incstack = 0
  3081  001852  50D3               	movf	4051,w,c	;volatile
  3082  001854  0B8F               	andlw	-113
  3083  001856  0960               	iorlw	96
  3084  001858  6ED3               	movwf	4051,c	;volatile
  3085                           
  3086                           ;system.c: 27: OSCTUNEbits.PLLEN = 0b1;
  3087  00185A  8C9B               	bsf	3995,6,c	;volatile
  3088  00185C  0012               	return		;funcret
  3089  00185E                     __end_of_ConfigureOscillator:
  3090                           	opt stack 0
  3091                           tblptru	equ	0xFF8
  3092                           tblptrh	equ	0xFF7
  3093                           tblptrl	equ	0xFF6
  3094                           tablat	equ	0xFF5
  3095                           prodh	equ	0xFF4
  3096                           prodl	equ	0xFF3
  3097                           intcon	equ	0xFF2
  3098                           indf0	equ	0xFEF
  3099                           postinc0	equ	0xFEE
  3100                           fsr0h	equ	0xFEA
  3101                           fsr0l	equ	0xFE9
  3102                           wreg	equ	0xFE8
  3103                           indf1	equ	0xFE7
  3104                           postdec1	equ	0xFE5
  3105                           fsr1h	equ	0xFE2
  3106                           fsr1l	equ	0xFE1
  3107                           indf2	equ	0xFDF
  3108                           postinc2	equ	0xFDE
  3109                           postdec2	equ	0xFDD
  3110                           plusw2	equ	0xFDB
  3111                           fsr2h	equ	0xFDA
  3112                           fsr2l	equ	0xFD9
  3113                           status	equ	0xFD8
  3114                           
  3115 ;; *************** function _low_isr *****************
  3116 ;; Defined at:
  3117 ;;		line 66 in file "interrupts.c"
  3118 ;; Parameters:    Size  Location     Type
  3119 ;;		None
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;		None
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  1    wreg      void 
  3124 ;; Registers used:
  3125 ;;		None
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3133 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3134 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3135 ;;Total ram usage:       17 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; Hardware stack levels required when called:    2
  3138 ;; This function calls:
  3139 ;;		Nothing
  3140 ;; This function is called by:
  3141 ;;		Interrupt level 1
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           	psect	intcodelo
  3146  000018                     __pintcodelo:
  3147                           	opt stack 0
  3148  000018                     _low_isr:
  3149                           	opt stack 24
  3150                           
  3151                           ;incstack = 0
  3152  000018  803E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3153  00001A  CFD8 F011          	movff	status,??_low_isr
  3154  00001E  CFE8 F012          	movff	wreg,??_low_isr+1
  3155  000022  CFE0 F013          	movff	bsr,??_low_isr+2
  3156  000026  CFFA F014          	movff	pclath,??_low_isr+3
  3157  00002A  CFFB F015          	movff	pclatu,??_low_isr+4
  3158  00002E  CFE9 F016          	movff	fsr0l,??_low_isr+5
  3159  000032  CFEA F017          	movff	fsr0h,??_low_isr+6
  3160  000036  CFE1 F018          	movff	fsr1l,??_low_isr+7
  3161  00003A  CFE2 F019          	movff	fsr1h,??_low_isr+8
  3162  00003E  CFD9 F01A          	movff	fsr2l,??_low_isr+9
  3163  000042  CFDA F01B          	movff	fsr2h,??_low_isr+10
  3164  000046  CFF3 F01C          	movff	prodl,??_low_isr+11
  3165  00004A  CFF4 F01D          	movff	prodh,??_low_isr+12
  3166  00004E  CFF6 F01E          	movff	tblptrl,??_low_isr+13
  3167  000052  CFF7 F01F          	movff	tblptrh,??_low_isr+14
  3168  000056  CFF8 F020          	movff	tblptru,??_low_isr+15
  3169  00005A  CFF5 F021          	movff	tablat,??_low_isr+16
  3170  00005E  C021  FFF5         	movff	??_low_isr+16,tablat
  3171  000062  C020  FFF8         	movff	??_low_isr+15,tblptru
  3172  000066  C01F  FFF7         	movff	??_low_isr+14,tblptrh
  3173  00006A  C01E  FFF6         	movff	??_low_isr+13,tblptrl
  3174  00006E  C01D  FFF4         	movff	??_low_isr+12,prodh
  3175  000072  C01C  FFF3         	movff	??_low_isr+11,prodl
  3176  000076  C01B  FFDA         	movff	??_low_isr+10,fsr2h
  3177  00007A  C01A  FFD9         	movff	??_low_isr+9,fsr2l
  3178  00007E  C019  FFE2         	movff	??_low_isr+8,fsr1h
  3179  000082  C018  FFE1         	movff	??_low_isr+7,fsr1l
  3180  000086  C017  FFEA         	movff	??_low_isr+6,fsr0h
  3181  00008A  C016  FFE9         	movff	??_low_isr+5,fsr0l
  3182  00008E  C015  FFFB         	movff	??_low_isr+4,pclatu
  3183  000092  C014  FFFA         	movff	??_low_isr+3,pclath
  3184  000096  C013  FFE0         	movff	??_low_isr+2,bsr
  3185  00009A  C012  FFE8         	movff	??_low_isr+1,wreg
  3186  00009E  C011  FFD8         	movff	??_low_isr,status
  3187  0000A2  903E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3188  0000A4  0010               	retfie	
  3189  0000A6                     __end_of_low_isr:
  3190                           	opt stack 0
  3191                           pclatu	equ	0xFFB
  3192                           pclath	equ	0xFFA
  3193                           tblptru	equ	0xFF8
  3194                           tblptrh	equ	0xFF7
  3195                           tblptrl	equ	0xFF6
  3196                           tablat	equ	0xFF5
  3197                           prodh	equ	0xFF4
  3198                           prodl	equ	0xFF3
  3199                           intcon	equ	0xFF2
  3200                           indf0	equ	0xFEF
  3201                           postinc0	equ	0xFEE
  3202                           fsr0h	equ	0xFEA
  3203                           fsr0l	equ	0xFE9
  3204                           wreg	equ	0xFE8
  3205                           indf1	equ	0xFE7
  3206                           postdec1	equ	0xFE5
  3207                           fsr1h	equ	0xFE2
  3208                           fsr1l	equ	0xFE1
  3209                           bsr	equ	0xFE0
  3210                           indf2	equ	0xFDF
  3211                           postinc2	equ	0xFDE
  3212                           postdec2	equ	0xFDD
  3213                           plusw2	equ	0xFDB
  3214                           fsr2h	equ	0xFDA
  3215                           fsr2l	equ	0xFD9
  3216                           status	equ	0xFD8
  3217                           
  3218 ;; *************** function _high_isr *****************
  3219 ;; Defined at:
  3220 ;;		line 30 in file "interrupts.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;		None
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;		None
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  1    wreg      void 
  3227 ;; Registers used:
  3228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3236 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3237 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3238 ;;Total ram usage:       15 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    1
  3241 ;; This function calls:
  3242 ;;		_appendChar
  3243 ;; This function is called by:
  3244 ;;		Interrupt level 2
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	intcode
  3249  000008                     __pintcode:
  3250                           	opt stack 0
  3251  000008                     _high_isr:
  3252                           	opt stack 24
  3253                           
  3254                           ;incstack = 0
  3255  000008  823E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3256  00000A  EF99  F009         	goto	int_func
  3257                           pclatu	equ	0xFFB
  3258                           pclath	equ	0xFFA
  3259                           tblptru	equ	0xFF8
  3260                           tblptrh	equ	0xFF7
  3261                           tblptrl	equ	0xFF6
  3262                           tablat	equ	0xFF5
  3263                           prodh	equ	0xFF4
  3264                           prodl	equ	0xFF3
  3265                           intcon	equ	0xFF2
  3266                           indf0	equ	0xFEF
  3267                           postinc0	equ	0xFEE
  3268                           fsr0h	equ	0xFEA
  3269                           fsr0l	equ	0xFE9
  3270                           wreg	equ	0xFE8
  3271                           indf1	equ	0xFE7
  3272                           postdec1	equ	0xFE5
  3273                           fsr1h	equ	0xFE2
  3274                           fsr1l	equ	0xFE1
  3275                           bsr	equ	0xFE0
  3276                           indf2	equ	0xFDF
  3277                           postinc2	equ	0xFDE
  3278                           postdec2	equ	0xFDD
  3279                           plusw2	equ	0xFDB
  3280                           fsr2h	equ	0xFDA
  3281                           fsr2l	equ	0xFD9
  3282                           status	equ	0xFD8
  3283                           
  3284                           	psect	intcode_body
  3285  001332                     __pintcode_body:
  3286                           	opt stack 24
  3287  001332                     int_func:
  3288                           	opt stack 24
  3289  001332  CFFA F003          	movff	pclath,??_high_isr+1
  3290  001336  CFFB F004          	movff	pclatu,??_high_isr+2
  3291  00133A  CFE9 F005          	movff	fsr0l,??_high_isr+3
  3292  00133E  CFEA F006          	movff	fsr0h,??_high_isr+4
  3293  001342  CFE1 F007          	movff	fsr1l,??_high_isr+5
  3294  001346  CFE2 F008          	movff	fsr1h,??_high_isr+6
  3295  00134A  CFD9 F009          	movff	fsr2l,??_high_isr+7
  3296  00134E  CFDA F00A          	movff	fsr2h,??_high_isr+8
  3297  001352  CFF3 F00B          	movff	prodl,??_high_isr+9
  3298  001356  CFF4 F00C          	movff	prodh,??_high_isr+10
  3299  00135A  CFF6 F00D          	movff	tblptrl,??_high_isr+11
  3300  00135E  CFF7 F00E          	movff	tblptrh,??_high_isr+12
  3301  001362  CFF8 F00F          	movff	tblptru,??_high_isr+13
  3302  001366  CFF5 F010          	movff	tablat,??_high_isr+14
  3303                           
  3304                           ;interrupts.c: 45: if(RC1IF){
  3305  00136A  AA9E               	btfss	3998,5,c	;volatile
  3306  00136C  D00F               	goto	i2l1605
  3307                           
  3308                           ;interrupts.c: 46: LATAbits.LATA0 = !LATAbits.LATA0;
  3309  00136E  B089               	btfsc	3977,0,c	;volatile
  3310  001370  D003               	goto	i2u85_40
  3311  001372  6A02               	clrf	??_high_isr& (0+255),c
  3312  001374  2A02               	incf	??_high_isr& (0+255),f,c
  3313  001376  D001               	goto	i2u86_48
  3314  001378                     i2u85_40:
  3315  001378  6A02               	clrf	??_high_isr& (0+255),c
  3316  00137A                     i2u86_48:
  3317  00137A  5089               	movf	3977,w,c	;volatile
  3318  00137C  1802               	xorwf	??_high_isr,w,c
  3319  00137E  0BFE               	andlw	-2
  3320  001380  1802               	xorwf	??_high_isr,w,c
  3321  001382  6E89               	movwf	3977,c	;volatile
  3322                           
  3323                           ;interrupts.c: 47: appendChar(RCREG1);
  3324  001384  50AF               	movf	4015,w,c	;volatile
  3325  001386  EC14  F00C         	call	_appendChar
  3326                           
  3327                           ;interrupts.c: 49: RC1IF = 0;
  3328  00138A  9A9E               	bcf	3998,5,c	;volatile
  3329  00138C                     i2l1605:
  3330                           
  3331                           ;interrupts.c: 50: }
  3332                           ;interrupts.c: 52: if(RC2IF){
  3333  00138C  BAA4               	btfsc	4004,5,c	;volatile
  3334                           
  3335                           ;interrupts.c: 57: RC2IF = 0;
  3336  00138E  9AA4               	bcf	4004,5,c	;volatile
  3337  001390  C010  FFF5         	movff	??_high_isr+14,tablat
  3338  001394  C00F  FFF8         	movff	??_high_isr+13,tblptru
  3339  001398  C00E  FFF7         	movff	??_high_isr+12,tblptrh
  3340  00139C  C00D  FFF6         	movff	??_high_isr+11,tblptrl
  3341  0013A0  C00C  FFF4         	movff	??_high_isr+10,prodh
  3342  0013A4  C00B  FFF3         	movff	??_high_isr+9,prodl
  3343  0013A8  C00A  FFDA         	movff	??_high_isr+8,fsr2h
  3344  0013AC  C009  FFD9         	movff	??_high_isr+7,fsr2l
  3345  0013B0  C008  FFE2         	movff	??_high_isr+6,fsr1h
  3346  0013B4  C007  FFE1         	movff	??_high_isr+5,fsr1l
  3347  0013B8  C006  FFEA         	movff	??_high_isr+4,fsr0h
  3348  0013BC  C005  FFE9         	movff	??_high_isr+3,fsr0l
  3349  0013C0  C004  FFFB         	movff	??_high_isr+2,pclatu
  3350  0013C4  C003  FFFA         	movff	??_high_isr+1,pclath
  3351  0013C8  923E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3352  0013CA  0011               	retfie		f
  3353  0013CC                     __end_of_high_isr:
  3354                           	opt stack 0
  3355                           pclatu	equ	0xFFB
  3356                           pclath	equ	0xFFA
  3357                           tblptru	equ	0xFF8
  3358                           tblptrh	equ	0xFF7
  3359                           tblptrl	equ	0xFF6
  3360                           tablat	equ	0xFF5
  3361                           prodh	equ	0xFF4
  3362                           prodl	equ	0xFF3
  3363                           intcon	equ	0xFF2
  3364                           indf0	equ	0xFEF
  3365                           postinc0	equ	0xFEE
  3366                           fsr0h	equ	0xFEA
  3367                           fsr0l	equ	0xFE9
  3368                           wreg	equ	0xFE8
  3369                           indf1	equ	0xFE7
  3370                           postdec1	equ	0xFE5
  3371                           fsr1h	equ	0xFE2
  3372                           fsr1l	equ	0xFE1
  3373                           bsr	equ	0xFE0
  3374                           indf2	equ	0xFDF
  3375                           postinc2	equ	0xFDE
  3376                           postdec2	equ	0xFDD
  3377                           plusw2	equ	0xFDB
  3378                           fsr2h	equ	0xFDA
  3379                           fsr2l	equ	0xFD9
  3380                           status	equ	0xFD8
  3381                           
  3382 ;; *************** function _appendChar *****************
  3383 ;; Defined at:
  3384 ;;		line 34 in file "bufferhandler.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;  data            1    wreg     unsigned char 
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;  data            1    0[COMRAM] unsigned char 
  3389 ;; Return value:  Size  Location     Type
  3390 ;;                  1    wreg      void 
  3391 ;; Registers used:
  3392 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3399 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3401 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3402 ;;Total ram usage:        1 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; This function calls:
  3405 ;;		Nothing
  3406 ;; This function is called by:
  3407 ;;		_high_isr
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           	psect	text23
  3412  001828                     __ptext23:
  3413                           	opt stack 0
  3414  001828                     _appendChar:
  3415                           	opt stack 24
  3416                           
  3417                           ;incstack = 0
  3418                           ;appendChar@data stored from wreg
  3419  001828  6E01               	movwf	appendChar@data,c
  3420                           
  3421                           ;bufferhandler.c: 35: tmpString[index] = data;
  3422  00182A  0E79               	movlw	low _tmpString
  3423  00182C  2438               	addwf	_index,w,c
  3424  00182E  6ED9               	movwf	fsr2l,c
  3425  001830  0E00               	movlw	high _tmpString
  3426  001832  2039               	addwfc	_index+1,w,c
  3427  001834  6EDA               	movwf	fsr2h,c
  3428  001836  C001  FFDF         	movff	appendChar@data,indf2
  3429                           
  3430                           ;bufferhandler.c: 36: index++;
  3431  00183A  4A38               	infsnz	_index,f,c
  3432  00183C  2A39               	incf	_index+1,f,c
  3433  00183E  0012               	return		;funcret
  3434  001840                     __end_of_appendChar:
  3435                           	opt stack 0
  3436                           pclatu	equ	0xFFB
  3437                           pclath	equ	0xFFA
  3438                           tblptru	equ	0xFF8
  3439                           tblptrh	equ	0xFF7
  3440                           tblptrl	equ	0xFF6
  3441                           tablat	equ	0xFF5
  3442                           prodh	equ	0xFF4
  3443                           prodl	equ	0xFF3
  3444                           intcon	equ	0xFF2
  3445                           indf0	equ	0xFEF
  3446                           postinc0	equ	0xFEE
  3447                           fsr0h	equ	0xFEA
  3448                           fsr0l	equ	0xFE9
  3449                           wreg	equ	0xFE8
  3450                           indf1	equ	0xFE7
  3451                           postdec1	equ	0xFE5
  3452                           fsr1h	equ	0xFE2
  3453                           fsr1l	equ	0xFE1
  3454                           bsr	equ	0xFE0
  3455                           indf2	equ	0xFDF
  3456                           postinc2	equ	0xFDE
  3457                           postdec2	equ	0xFDD
  3458                           plusw2	equ	0xFDB
  3459                           fsr2h	equ	0xFDA
  3460                           fsr2l	equ	0xFD9
  3461                           status	equ	0xFD8
  3462                           pclatu	equ	0xFFB
  3463                           pclath	equ	0xFFA
  3464                           tblptru	equ	0xFF8
  3465                           tblptrh	equ	0xFF7
  3466                           tblptrl	equ	0xFF6
  3467                           tablat	equ	0xFF5
  3468                           prodh	equ	0xFF4
  3469                           prodl	equ	0xFF3
  3470                           intcon	equ	0xFF2
  3471                           indf0	equ	0xFEF
  3472                           postinc0	equ	0xFEE
  3473                           fsr0h	equ	0xFEA
  3474                           fsr0l	equ	0xFE9
  3475                           wreg	equ	0xFE8
  3476                           indf1	equ	0xFE7
  3477                           postdec1	equ	0xFE5
  3478                           fsr1h	equ	0xFE2
  3479                           fsr1l	equ	0xFE1
  3480                           bsr	equ	0xFE0
  3481                           indf2	equ	0xFDF
  3482                           postinc2	equ	0xFDE
  3483                           postdec2	equ	0xFDD
  3484                           plusw2	equ	0xFDB
  3485                           fsr2h	equ	0xFDA
  3486                           fsr2l	equ	0xFD9
  3487                           status	equ	0xFD8
  3488                           
  3489                           	psect	rparam
  3490  0000                     pclatu	equ	0xFFB
  3491                           pclath	equ	0xFFA
  3492                           tblptru	equ	0xFF8
  3493                           tblptrh	equ	0xFF7
  3494                           tblptrl	equ	0xFF6
  3495                           tablat	equ	0xFF5
  3496                           prodh	equ	0xFF4
  3497                           prodl	equ	0xFF3
  3498                           intcon	equ	0xFF2
  3499                           indf0	equ	0xFEF
  3500                           postinc0	equ	0xFEE
  3501                           fsr0h	equ	0xFEA
  3502                           fsr0l	equ	0xFE9
  3503                           wreg	equ	0xFE8
  3504                           indf1	equ	0xFE7
  3505                           postdec1	equ	0xFE5
  3506                           fsr1h	equ	0xFE2
  3507                           fsr1l	equ	0xFE1
  3508                           bsr	equ	0xFE0
  3509                           indf2	equ	0xFDF
  3510                           postinc2	equ	0xFDE
  3511                           postdec2	equ	0xFDD
  3512                           plusw2	equ	0xFDB
  3513                           fsr2h	equ	0xFDA
  3514                           fsr2l	equ	0xFD9
  3515                           status	equ	0xFD8
  3516                           
  3517                           	psect	temp
  3518  00003E                     btemp:
  3519                           	opt stack 0
  3520  00003E                     	ds	1
  3521  0000                     int$flags	set	btemp
  3522                           pclatu	equ	0xFFB
  3523                           pclath	equ	0xFFA
  3524                           tblptru	equ	0xFF8
  3525                           tblptrh	equ	0xFF7
  3526                           tblptrl	equ	0xFF6
  3527                           tablat	equ	0xFF5
  3528                           prodh	equ	0xFF4
  3529                           prodl	equ	0xFF3
  3530                           intcon	equ	0xFF2
  3531                           indf0	equ	0xFEF
  3532                           postinc0	equ	0xFEE
  3533                           fsr0h	equ	0xFEA
  3534                           fsr0l	equ	0xFE9
  3535                           wreg	equ	0xFE8
  3536                           indf1	equ	0xFE7
  3537                           postdec1	equ	0xFE5
  3538                           fsr1h	equ	0xFE2
  3539                           fsr1l	equ	0xFE1
  3540                           bsr	equ	0xFE0
  3541                           indf2	equ	0xFDF
  3542                           postinc2	equ	0xFDE
  3543                           postdec2	equ	0xFDD
  3544                           plusw2	equ	0xFDB
  3545                           fsr2h	equ	0xFDA
  3546                           fsr2l	equ	0xFD9
  3547                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    0
    Data        17
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      61
    BANK0           160     20     138
    BANK1           256      0      70
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 70
		 -> toCharArray(COMRAM[4]), allDataString(BANK1[70]), tmpString(BANK0[70]), STR_2(CODE[4]), 
		 -> STR_1(CODE[5]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 70
		 -> toCharArray(COMRAM[4]), allDataString(BANK1[70]), tmpString(BANK0[70]), STR_2(CODE[4]), 
		 -> STR_1(CODE[5]), 

    transformToTwoDigitNumber@number	PTR int  size(2) Largest target is 6
		 -> SOC(BANK0[6]), 

    writeString@str	PTR unsigned char  size(2) Largest target is 5
		 -> toCharArray(COMRAM[4]), STR_2(CODE[4]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _writeResult->_wait_ms
    _writeString->_strlen
    _wait_ms->___lmul
    _parseString->_checkString
    _transformToTwoDigitNumber->___wmul
    _checkString->_checkPos
    _checkPos->_strlen
    _clearBuffer->_strlen

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_appendChar

Critical Paths under _main in BANK0

    _main->_parseString

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6052
                                             50 COMRAM     1     1      0
                _ConfigureOscillator
                            _InitApp
                          _UART_Init
                         _UART_Write
                        _clearBuffer
                      _copyTmpBuffer
                     _isItLongEnough
                            _isValid
                        _parseString
                            _wait_ms
                        _writeResult
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeResult                                          1     1      0    1530
                                             47 COMRAM     1     1      0
                            _wait_ms
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeString                                          7     4      3    1036
                                             39 COMRAM     7     4      3
                         _UART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           2     1      1     258
                                             33 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _wait_ms                                              2     0      2     472
                                             45 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     322
                                             33 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _parseString                                         20    20      0    2293
                                              0 BANK0     20    20      0
                            ___awdiv
                        _checkString
                          _lenHelper
          _transformToTwoDigitNumber
 ---------------------------------------------------------------------------------
 (2) _transformToTwoDigitNumber                            8     4      4     661
                                             39 COMRAM     8     4      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     287
                                             33 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _lenHelper                                            2     0      2     130
                                             33 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _checkString                                          6     6      0     570
                                             44 COMRAM     6     6      0
                           _checkPos
 ---------------------------------------------------------------------------------
 (3) _checkPos                                             5     3      2     436
                                             39 COMRAM     5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                             33 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _isValid                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _isItLongEnough                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _copyTmpBuffer                                        3     3      0      68
                                             33 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _clearBuffer                                          2     2      0     328
                                             39 COMRAM     2     2      0
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     282
                                             33 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4      64
                                             33 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             17    17      0       0
                                             16 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            15    15      0      22
                                              1 COMRAM    15    15      0
                         _appendChar
 ---------------------------------------------------------------------------------
 (7) _appendChar                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _UART_Init
   _UART_Write
   _clearBuffer
     _strlen
   _copyTmpBuffer
   _isItLongEnough
   _isValid
   _parseString
     ___awdiv
     _checkString
       _checkPos
         _strlen
     _lenHelper
     _transformToTwoDigitNumber
       ___wmul
   _wait_ms
     ___lmul
   _writeResult
     _wait_ms
       ___lmul
     _writeString
       _UART_Write
       _strlen
   _writeString
     _UART_Write
     _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)
   _appendChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      46       8       27.3%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     14      8A       5       86.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      3D       1       64.9%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10D       6        0.0%
DATA                 0      0     10D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Apr 24 22:06:31 2017

 __end_of_transformToTwoDigitNumber 11D4                                  l54 1324  
                                l73 154E                                  l57 1326  
                      ___awdiv@sign 0027                      writeResult@dev 0030  
                                bsr 000FE0                 ___wmul@multiplicand 0024  
                      __CFG_CP0$OFF 000000                                 l150 1806  
                               l146 17FC                                 l262 1132  
                               u280 1820                                 u620 10E2  
                               u630 1124                                 u480 15E2  
                               u640 1198                                 u570 148C  
                               u660 14D8                                 u670 14F2  
                               u487 15D8                                 u577 1482  
                               _SOC 00BF                                 wreg 000FE8  
                        _TXSTA1bits 000FAD                        __CFG_IESO$ON 000000  
                        _TXSTA2bits 000FA8                                l1127 1824  
                              l1305 15BC                                l1401 119C  
                              l1307 15C0                                l1323 1680  
                              l1325 1684                                l1319 1662  
                              l1423 14C8                                l1407 11A6  
                              l1335 156C                                l1513 16BC  
                              l1361 11F6                                l1409 11CA  
                              l1353 153E                                l1345 145A  
                              l1531 175A                                l1435 14FC  
                              l1339 1580                                l1509 16A8  
                              l1541 170E                                l1461 140E  
                              l1453 13F0                                l1357 11E6  
                              l1429 14E2                                l1381 10EC  
                              l1373 10C6                                l1349 1494  
                              l1471 142E                                l1463 1412  
                              l1447 13E0                                l1537 16EE  
                              l1369 1280                                l1385 10F4  
                              l1459 1406                                l1475 1438  
                              l1395 113C                                l1707 1046  
                              l1479 1446                                l1719 10AE  
                              l1751 12EE                                l1765 131E  
                              l1689 0F82                                l1697 0FEA  
                __CFG_WPFP$PAGE_127 000000                       _copyTmpBuffer 16E4  
                              STR_1 0F01                                STR_2 0F06  
                              STR_3 0F05                                _RCIF 007CF5  
                     __CFG_FCMEN$ON 000000                                _main 128C  
                              fsr0h 000FEA                                fsr1h 000FE2  
                              indf0 000FEF                                fsr2h 000FDA  
                              fsr0l 000FE9                                indf1 000FE7  
                              indf2 000FDF                                fsr1l 000FE1  
                              fsr2l 000FD9                                btemp 003E  
                              prodh 000FF4                                prodl 000FF3  
                              start 00A6                      writeString@dev 002A  
                      ___param_bank 000000                      writeString@str 0028  
                   __end_of_InitApp 17F4                       __CFG_PLLDIV$1 000000  
                      _BAUDCON1bits 000F7E                        _BAUDCON2bits 000F7C  
                             ?_main 0001                     __end_of___awdiv 1450  
                   ___awdiv@divisor 0024                               _RC1IE 007CED  
                             _RC1IF 007CF5                               _RC2IE 007D1D  
                             _RC2IF 007D25                     ___awdiv@counter 0026  
                       _writeResult 17B6                               _RPOR8 000EC8  
               _ConfigureOscillator 1852                         _writeString 1450  
               ___lmul@multiplicand 0026                    ??_isItLongEnough 0022  
                       ?_UART_Write 0022                  __size_of_UART_Init 0032  
              __size_of_checkString 00B8                     __end_of_isValid 175E  
                             _index 0038                      ?_copyTmpBuffer 0001  
                    __CFG_CLKOEC$ON 000000                     __end_of_low_isr 00A6  
                             pclath 000FFA                               tablat 000FF5  
                   __end_of_wait_ms 155C                               plusw2 000FDB  
                parseString@chgStop 00C7                               status 000FD8  
              ?_ConfigureOscillator 0001                __size_of_clearBuffer 0046  
           __CFG_DSWDTOSC$INTOSCREF 000000                     __initialization 1606  
                      ?_parseString 0001                  parseString@socSize 00CA  
                      __end_of_main 1332                              ??_main 0033  
                     __activetblptr 000003                    ___awdiv@dividend 0022  
                            i2l1605 138C                      __CFG_WDTEN$OFF 000000  
                            _INTCON 000FF2                              _RCREG1 000FAF  
                            _RCREG2 000FAA                              _RCSTA1 000FAC  
                            _RCSTA2 000F9C                              _SPBRG1 000FB0  
                            _SPBRG2 000FAB                              _PPSCON 000EBF  
                            _TRISB4 007C9C                              _TRISB5 007C9D  
                    __CFG_WPCFG$OFF 000000                              _TRISC6 007CA6  
                            _TRISC7 007CA7                    __end_of_checkPos 169E  
                            _TXREG1 000FAE                              _TXREG2 000FA9  
                            _TXSTA1 000FAD                              _TXSTA2 000FA8  
                         ??_InitApp 0022               ??_ConfigureOscillator 0022  
                    __CFG_WPDIS$OFF 000000                      __CFG_XINST$OFF 000000  
                 __end_of_UART_Init 1790                    __end_of_high_isr 13CC  
                            ___lmul 155C                 __size_of_UART_Write 001C  
                            ___wmul 1790                           ??___awdiv 0026  
                    __CFG_STVREN$ON 000000              parseString@socStartPos 00CF  
                            clear_0 162C                              clear_1 1638  
                            clear_2 1644                    ___awdiv@quotient 0028  
                            _strlen 15B2                           ??_isValid 0022  
                      __mediumconst 0000                           ??_low_isr 0011  
                            tblptrh 000FF7                     ??_copyTmpBuffer 0022  
                            tblptrl 000FF6                              tblptru 000FF8  
                         ??_wait_ms 0030                 parseString@chgStart 00CC  
                   __CFG_DSBOREN$ON 000000                __CFG_LS48MHZ$SYS48X8 000000  
                        __accesstop 0060             __end_of__initialization 164A  
                     ___rparam_used 000001                     __CFG_IOL1WAY$ON 000000  
              __CFG_WPEND$PAGE_WPFP 000000                      __pcstackCOMRAM 0001  
                      __pidataBANK0 1840                     __CFG_DSWDTEN$ON 000000  
                   __CFG_DSWDTPS$G2 000000                     __CFG_OSC$INTOSC 000000  
                __size_of_lenHelper 0058                          __pbssBANK0 0060  
                        __pbssBANK1 0100                             ?___lmul 0022  
                           ?___wmul 0022                __size_of_parseString 01B0  
        ?_transformToTwoDigitNumber 0028                      ___lmul@product 002A  
                        _appendChar 1828                             ?_strlen 0022  
                     _allDataString 0100                        ?_writeResult 0001  
                         ?_checkPos 0028                        ?_writeString 0028  
                      ??_UART_Write 0023                             _SPBRGH1 000F7F  
                           _SPBRGH2 000F7D                             i2u85_40 1378  
                           _RPINR16 000EF7                             i2u86_48 137A  
                         ?_high_isr 0001                             _InitApp 17D6  
                           __Hparam 0000                             __Lparam 0000  
     transformToTwoDigitNumber@size 002A                   __end_of_lenHelper 1506  
                           ___awdiv 13CC                     __size_of___lmul 0056  
                   __size_of___wmul 0026                  __end_of_UART_Write 1810  
                      __psmallconst 0F00                             _charSOC 0076  
                           __pcinit 1606                             __ramtop 0F00  
                           __ptext0 128C                             __ptext1 17B6  
                           __ptext2 1450                             __ptext3 17F4  
                           __ptext4 1506                             __ptext5 155C  
                           __ptext6 0F0C                             __ptext7 10BC  
                           __ptext8 1790                             __ptext9 14AE  
                           _isValid 1724                       ??_checkString 002D  
                   __size_of_strlen 0054                          ??_checkPos 002A  
                           _low_isr 0018                             _wait_ms 1506  
                           main@var 0033                      parseString@CHG 00CE  
                        ??_high_isr 0002                      __pintcode_body 1332  
              end_of_initialization 164A                      parseString@tmp 00D5  
                     ??_clearBuffer 0028                             int_func 1332  
                           postdec1 000FE5                             postdec2 000FDD  
                           postinc0 000FEE                             postinc2 000FDE  
                       wait_ms@time 002E                             strlen@s 0022  
                         _UART_Init 175E                           _PORTDbits 000F83  
                       ?_appendChar 0001                      UART_Write@data 0023  
                  __CFG_CPUDIV$OSC1 000000                           _TRISAbits 000F92  
                         _TRISDbits 000F95                 __end_of_checkString 128C  
                 __CFG_SOSCSEL$HIGH 000000         __end_of_ConfigureOscillator 185E  
                      writeString@i 002D                          lenHelper@x 0022  
           __size_of_isItLongEnough 0018                 __CFG_MSSP7B_EN$MSK7 000000  
               __end_of_clearBuffer 16E4                parseString@socEndPos 00D1  
                    __end_of___lmul 15B2                      __end_of___wmul 17B6  
                        ?_UART_Init 0022                      __end_of_strlen 1606  
               start_initialization 1606                __size_of_writeResult 0020  
                 parseString@tmpSOC 00C9                __size_of_writeString 005E  
             __end_of_copyTmpBuffer 1724                 __size_of_appendChar 0018  
                          ??___lmul 002A                            ??___wmul 0026  
                 __CFG_ADCSEL$BIT10 000000                         __pdataBANK0 00D9  
                      parseString@i 00D7                        parseString@k 00D3  
   transformToTwoDigitNumber@number 0028     transformToTwoDigitNumber@result 002E  
       ??_transformToTwoDigitNumber 002C                            ??_strlen 0024  
                       _checkString 11D4                         __pbssCOMRAM 0034  
                     __pcstackBANK0 00C5                   __size_of_checkPos 004A  
                      checkString@i 0031                   __size_of_high_isr 13C4  
                       _clearBuffer 169E                            ?_InitApp 0001  
                     ??_parseString 00C5                           __pintcode 0008  
                          ?___awdiv 0022                         __pintcodelo 0018  
                       ??_UART_Init 0026                           _lenHelper 14AE  
                          ?_isValid 0001                         __smallconst 0F00  
              __CFG_RTCOSC$T1OSCREF 000000                            ?_low_isr 0001  
                          ?_wait_ms 002E                           checkPos@i 002B  
         _transformToTwoDigitNumber 10BC                      copyTmpBuffer@i 0023  
                    ___wmul@product 0026                      _isItLongEnough 1810  
                          _LATAbits 000F89                    __CFG_WDTPS$32768 000000  
                      _parsedString 00D9                        clearBuffer@i 0028  
                     UART_Write@dev 0022                           _tmpString 0079  
                 UART_Init@baudrate 0022                           _positions 0060  
                        ?_lenHelper 0022                 __end_of_parseString 10BC  
                      ??_appendChar 0001                   ___wmul@multiplier 0022  
                 __CFG_CFGPLLEN$OFF 000000                   ___lmul@multiplier 0022  
                         copy_data0 161A              __end_of_isItLongEnough 1828  
                __end_of_appendChar 1840                    __size_of_InitApp 001E  
                          __Hrparam 0000                            __Lrparam 0000  
                       checkPos@pos 0028                    __size_of___awdiv 0084  
                  __size_of_isValid 003A                            _checkPos 1654  
                       _toCharArray 003A                    __size_of_low_isr 008E  
                          __ptext10 11D4                            __ptext11 1654  
                          __ptext20 1852                            __ptext12 13CC  
                          __ptext13 1724                            __ptext14 1810  
                          __ptext23 1828                            __ptext15 16E4  
                          __ptext16 169E                            __ptext17 15B2  
                          __ptext18 175E                            __ptext19 17D6  
                  __size_of_wait_ms 0056                            _high_isr 0008  
                   ?_isItLongEnough 0001                       __size_of_main 00A6  
                    appendChar@data 0001        __size_of_ConfigureOscillator 000C  
                       _parseString 0F0C                            int$flags 003E  
                       ??_lenHelper 0024                       ??_writeResult 0030  
                      ?_checkString 0001                       ??_writeString 002B  
                       _OSCTUNEbits 000F9B                            intlevel1 0000  
                          intlevel2 0000                        ?_clearBuffer 0001  
                        _OSCCONbits 000FD3  __size_of_transformToTwoDigitNumber 0118  
            __size_of_copyTmpBuffer 0040                        wait_ms@timel 0034  
                          strlen@cp 0026                          _UART_Write 17F4  
               __end_of_writeResult 17D6                 __end_of_writeString 14AE  
