

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Apr 21 18:12:20 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F47J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 1.41
    41                           ; Generated 25/01/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F47J53 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     _RPINR16	set	3831
    75  0000                     _RPOR8	set	3784
    76  0000                     _PPSCON	set	3775
    77  0000                     _RCREG2	set	4010
    78  0000                     _TXREG2	set	4009
    79  0000                     _TXSTA2bits	set	4008
    80  0000                     _TXREG1	set	4014
    81  0000                     _TXSTA1bits	set	4013
    82  0000                     _SPBRGH2	set	3965
    83  0000                     _SPBRG2	set	4011
    84  0000                     _BAUDCON2bits	set	3964
    85  0000                     _TXSTA2	set	4008
    86  0000                     _RCSTA2	set	3996
    87  0000                     _SPBRGH1	set	3967
    88  0000                     _SPBRG1	set	4016
    89  0000                     _BAUDCON1bits	set	3966
    90  0000                     _RCSTA1	set	4012
    91  0000                     _TXSTA1	set	4013
    92  0000                     _INTCON	set	4082
    93  0000                     _OSCTUNEbits	set	3995
    94  0000                     _OSCCONbits	set	4051
    95  0000                     _PORTDbits	set	3971
    96  0000                     _TRISDbits	set	3989
    97  0000                     _TRISAbits	set	3986
    98  0000                     _RCREG1	set	4015
    99  0000                     _LATAbits	set	3977
   100  0000                     _RCIF	set	31989
   101  0000                     _TRISB5	set	31901
   102  0000                     _TRISB4	set	31900
   103  0000                     _RC2IE	set	32029
   104  0000                     _TRISC6	set	31910
   105  0000                     _TRISC7	set	31911
   106  0000                     _RC1IE	set	31981
   107  0000                     _RC2IF	set	32037
   108  0000                     _RC1IF	set	31989
   109                           
   110                           	psect	smallconst
   111  000F00                     __psmallconst:
   112                           	opt stack 0
   113  000F00  00                 	db	0
   114  000F01                     STR_1:
   115  000F01  4C                 	db	76	;'L'
   116  000F02  20                 	db	32
   117  000F03  35                 	db	53	;'5'
   118  000F04  30                 	db	48	;'0'
   119  000F05  00                 	db	0
   120  000F06                     STR_4:
   121  000F06  68                 	db	104	;'h'
   122  000F07  65                 	db	101	;'e'
   123  000F08  6A                 	db	106	;'j'
   124  000F09  00                 	db	0
   125  000F0A                     STR_2:
   126  000F0A  44                 	db	68	;'D'
   127  000F0B  20                 	db	32
   128  000F0C  38                 	db	56	;'8'
   129  000F0D  00                 	db	0
   130  0000                     
   131                           ; #config settings
   132  000F0E  00                 	db	0	; dummy byte at the end
   133  0000                     
   134                           	psect	cinit
   135  0016F2                     __pcinit:
   136                           	opt stack 0
   137  0016F2                     start_initialization:
   138                           	opt stack 0
   139  0016F2                     __initialization:
   140                           	opt stack 0
   141                           
   142                           ; Clear objects allocated to BANK1 (70 bytes)
   143  0016F2  EE01  F000         	lfsr	0,__pbssBANK1
   144  0016F6  0E46               	movlw	70
   145  0016F8                     clear_0:
   146  0016F8  6AEE               	clrf	postinc0,c
   147  0016FA  06E8               	decf	wreg,f,c
   148  0016FC  E1FD               	bnz	clear_0
   149                           
   150                           ; Clear objects allocated to BANK0 (73 bytes)
   151  0016FE  EE00  F060         	lfsr	0,__pbssBANK0
   152  001702  0E49               	movlw	73
   153  001704                     clear_1:
   154  001704  6AEE               	clrf	postinc0,c
   155  001706  06E8               	decf	wreg,f,c
   156  001708  E1FD               	bnz	clear_1
   157                           
   158                           ; Clear objects allocated to COMRAM (23 bytes)
   159  00170A  EE00  F027         	lfsr	0,__pbssCOMRAM
   160  00170E  0E17               	movlw	23
   161  001710                     clear_2:
   162  001710  6AEE               	clrf	postinc0,c
   163  001712  06E8               	decf	wreg,f,c
   164  001714  E1FD               	bnz	clear_2
   165  001716                     end_of_initialization:
   166                           	opt stack 0
   167  001716                     __end_of__initialization:
   168                           	opt stack 0
   169  001716  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   170  001718  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   171  00171A  0100               	movlb	0
   172  00171C  EF0E  F009         	goto	_main	;jump to C main() function
   173                           postinc0	equ	0xFEE
   174                           wreg	equ	0xFE8
   175                           
   176                           	psect	bssCOMRAM
   177  000027                     __pbssCOMRAM:
   178                           	opt stack 0
   179  000027                     wait_ms@timel:
   180                           	opt stack 0
   181  000027                     	ds	4
   182  00002B                     _index:
   183                           	opt stack 0
   184  00002B                     	ds	2
   185  00002D                     _parsedString:
   186                           	opt stack 0
   187  00002D                     	ds	17
   188                           postinc0	equ	0xFEE
   189                           wreg	equ	0xFE8
   190                           
   191                           	psect	bssBANK0
   192  000060                     __pbssBANK0:
   193                           	opt stack 0
   194  000060                     parseString@F8386:
   195                           	opt stack 0
   196  000060                     	ds	3
   197  000063                     _tmpString:
   198                           	opt stack 0
   199  000063                     	ds	70
   200                           postinc0	equ	0xFEE
   201                           wreg	equ	0xFE8
   202                           
   203                           	psect	bssBANK1
   204  000100                     __pbssBANK1:
   205                           	opt stack 0
   206  000100                     _allDataString:
   207                           	opt stack 0
   208  000100                     	ds	70
   209                           postinc0	equ	0xFEE
   210                           wreg	equ	0xFE8
   211                           
   212                           	psect	cstackBANK0
   213  0000A9                     __pcstackBANK0:
   214                           	opt stack 0
   215  0000A9                     ?___lmul:
   216                           	opt stack 0
   217  0000A9                     createCHG@tmp:
   218                           	opt stack 0
   219  0000A9                     ___wmul@product:
   220                           	opt stack 0
   221  0000A9                     strlen@cp:
   222                           	opt stack 0
   223  0000A9                     strncpy@to:
   224                           	opt stack 0
   225  0000A9                     ___lmul@multiplier:
   226                           	opt stack 0
   227                           
   228                           ; 4 bytes @ 0x0
   229  0000A9                     	ds	2
   230  0000AB                     ?_atoi:
   231                           	opt stack 0
   232  0000AB                     writeString@str:
   233                           	opt stack 0
   234  0000AB                     clearBuffer@i:
   235                           	opt stack 0
   236  0000AB                     atoi@s:
   237                           	opt stack 0
   238  0000AB                     strncpy@from:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x2
   242  0000AB                     	ds	2
   243  0000AD                     ??_atoi:
   244  0000AD                     writeString@dev:
   245                           	opt stack 0
   246  0000AD                     strncpy@size:
   247                           	opt stack 0
   248  0000AD                     ___lmul@multiplicand:
   249                           	opt stack 0
   250                           
   251                           ; 4 bytes @ 0x4
   252  0000AD                     	ds	1
   253  0000AE                     ??_writeString:
   254                           
   255                           ; 1 bytes @ 0x5
   256  0000AE                     	ds	1
   257  0000AF                     atoi@sign:
   258                           	opt stack 0
   259                           
   260                           ; 1 bytes @ 0x6
   261  0000AF                     	ds	1
   262  0000B0                     writeString@i:
   263                           	opt stack 0
   264  0000B0                     atoi@a:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x7
   268  0000B0                     	ds	1
   269  0000B1                     wait_ms@time:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x8
   273  0000B1                     	ds	1
   274  0000B2                     ??_parseString:
   275                           
   276                           ; 1 bytes @ 0x9
   277  0000B2                     	ds	3
   278  0000B5                     parseString@ichg:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0xC
   282  0000B5                     	ds	2
   283  0000B7                     parseString@SOC:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0xE
   287  0000B7                     	ds	2
   288  0000B9                     parseString@chg:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x10
   292  0000B9                     	ds	2
   293  0000BB                     parseString@tmpsoc:
   294                           	opt stack 0
   295                           
   296                           ; 3 bytes @ 0x12
   297  0000BB                     	ds	3
   298  0000BE                     parseString@k:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x15
   302  0000BE                     	ds	2
   303  0000C0                     parseString@pos:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x17
   307  0000C0                     	ds	2
   308  0000C2                     parseString@i_730:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x19
   312  0000C2                     	ds	2
   313  0000C4                     parseString@startPos:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x1B
   317  0000C4                     	ds	2
   318  0000C6                     parseString@i:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x1D
   322  0000C6                     	ds	2
   323  0000C8                     main@var:
   324                           	opt stack 0
   325                           
   326                           ; 1 bytes @ 0x1F
   327  0000C8                     	ds	1
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           
   331                           	psect	cstackCOMRAM
   332  000001                     __pcstackCOMRAM:
   333                           	opt stack 0
   334  000001                     appendChar@data:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0x0
   338  000001                     	ds	1
   339  000002                     ??_high_isr:
   340                           
   341                           ; 1 bytes @ 0x1
   342  000002                     	ds	15
   343  000011                     ??_low_isr:
   344                           
   345                           ; 1 bytes @ 0x10
   346  000011                     	ds	17
   347  000022                     ??_copyTmpBuffer:
   348  000022                     ??_isdigit:
   349  000022                     ?_strlen:
   350                           	opt stack 0
   351  000022                     ?_createCHG:
   352                           	opt stack 0
   353  000022                     ?___wmul:
   354                           	opt stack 0
   355  000022                     UART_Write@dev:
   356                           	opt stack 0
   357  000022                     createCHG@pos:
   358                           	opt stack 0
   359  000022                     ___wmul@multiplier:
   360                           	opt stack 0
   361  000022                     strlen@s:
   362                           	opt stack 0
   363  000022                     strncpy@cp:
   364                           	opt stack 0
   365  000022                     UART_Init@baudrate:
   366                           	opt stack 0
   367  000022                     ___lmul@product:
   368                           	opt stack 0
   369                           
   370                           ; 4 bytes @ 0x21
   371  000022                     	ds	1
   372  000023                     UART_Write@data:
   373                           	opt stack 0
   374  000023                     _isdigit$959:
   375                           	opt stack 0
   376  000023                     copyTmpBuffer@i:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x22
   380  000023                     	ds	1
   381  000024                     ??_strlen:
   382  000024                     ??_createCHG:
   383  000024                     isdigit@c:
   384                           	opt stack 0
   385  000024                     ___wmul@multiplicand:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x23
   389  000024                     	ds	2
   390  000026                     writeResult@dev:
   391                           	opt stack 0
   392                           
   393                           ; 1 bytes @ 0x25
   394  000026                     	ds	1
   395  000027                     postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           
   398                           ; 1 bytes @ 0x26
   399 ;;
   400 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   401 ;;
   402 ;; *************** function _main *****************
   403 ;; Defined at:
   404 ;;		line 39 in file "main.c"
   405 ;; Parameters:    Size  Location     Type
   406 ;;		None
   407 ;; Auto vars:     Size  Location     Type
   408 ;;  var             1   31[BANK0 ] unsigned char 
   409 ;;  result          1    0        unsigned char 
   410 ;; Return value:  Size  Location     Type
   411 ;;                  1    wreg      void 
   412 ;; Registers used:
   413 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   414 ;; Tracked objects:
   415 ;;		On entry : 0/0
   416 ;;		On exit  : 0/0
   417 ;;		Unchanged: 0/0
   418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   422 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   423 ;;Total ram usage:        1 bytes
   424 ;; Hardware stack levels required when called:    6
   425 ;; This function calls:
   426 ;;		_ConfigureOscillator
   427 ;;		_InitApp
   428 ;;		_UART_Init
   429 ;;		_UART_Write
   430 ;;		_clearBuffer
   431 ;;		_copyTmpBuffer
   432 ;;		_isItLongEnough
   433 ;;		_isValid
   434 ;;		_parseString
   435 ;;		_wait_ms
   436 ;;		_writeResult
   437 ;;		_writeString
   438 ;; This function is called by:
   439 ;;		Startup code after reset
   440 ;; This function uses a non-reentrant model
   441 ;;
   442                           
   443                           	psect	text0
   444  00121C                     __ptext0:
   445                           	opt stack 0
   446  00121C                     _main:
   447                           	opt stack 25
   448                           
   449                           ;main.c: 45: ConfigureOscillator();
   450                           
   451                           ;incstack = 0
   452  00121C  ECF9  F00B         	call	_ConfigureOscillator	;wreg free
   453                           
   454                           ;main.c: 48: InitApp();
   455  001220  ECC7  F00B         	call	_InitApp	;wreg free
   456                           
   457                           ;main.c: 50: UART_Init(19200);
   458  001224  0E00               	movlw	0
   459  001226  6E22               	movwf	UART_Init@baudrate,c
   460  001228  0E4B               	movlw	75
   461  00122A  6E23               	movwf	UART_Init@baudrate+1,c
   462  00122C  0E00               	movlw	0
   463  00122E  6E24               	movwf	UART_Init@baudrate+2,c
   464  001230  0E00               	movlw	0
   465  001232  6E25               	movwf	UART_Init@baudrate+3,c
   466  001234  EC60  F00B         	call	_UART_Init	;wreg free
   467                           
   468                           ;main.c: 51: writeString("L 50", 1);
   469  001238  0E01               	movlw	low STR_1
   470  00123A  0100               	movlb	0	; () banked
   471  00123C  6FAB               	movwf	writeString@str& (0+255),b
   472  00123E  0E0F               	movlw	high STR_1
   473  001240  0100               	movlb	0	; () banked
   474  001242  6FAC               	movwf	(writeString@str+1)& (0+255),b
   475  001244  0E01               	movlw	1
   476  001246  0100               	movlb	0	; () banked
   477  001248  6FAD               	movwf	writeString@dev& (0+255),b
   478  00124A  ECF8  F009         	call	_writeString	;wreg free
   479                           
   480                           ;main.c: 52: UART_Write(0x0D,1);
   481  00124E  0E01               	movlw	1
   482  001250  6E22               	movwf	UART_Write@dev,c
   483  001252  0E0D               	movlw	13
   484  001254  ECD6  F00B         	call	_UART_Write
   485                           
   486                           ;main.c: 53: writeString("D 8", 1);
   487  001258  0E0A               	movlw	low STR_2
   488  00125A  0100               	movlb	0	; () banked
   489  00125C  6FAB               	movwf	writeString@str& (0+255),b
   490  00125E  0E0F               	movlw	high STR_2
   491  001260  0100               	movlb	0	; () banked
   492  001262  6FAC               	movwf	(writeString@str+1)& (0+255),b
   493  001264  0E01               	movlw	1
   494  001266  0100               	movlb	0	; () banked
   495  001268  6FAD               	movwf	writeString@dev& (0+255),b
   496  00126A  ECF8  F009         	call	_writeString	;wreg free
   497                           
   498                           ;main.c: 54: UART_Write(0x0D,1);
   499  00126E  0E01               	movlw	1
   500  001270  6E22               	movwf	UART_Write@dev,c
   501  001272  0E0D               	movlw	13
   502  001274  ECD6  F00B         	call	_UART_Write
   503                           
   504                           ;main.c: 56: uint8_t var = 0;
   505  001278  0E00               	movlw	0
   506  00127A  0100               	movlb	0	; () banked
   507  00127C  6FC8               	movwf	main@var& (0+255),b
   508                           
   509                           ; BSR set to: 0
   510                           ;main.c: 57: char result;
   511                           ;main.c: 60: TRISAbits.TRISA0 = 0;
   512  00127E  9092               	bcf	3986,0,c	;volatile
   513                           
   514                           ; BSR set to: 0
   515                           ;main.c: 61: TRISAbits.TRISA1 = 0;
   516  001280  9292               	bcf	3986,1,c	;volatile
   517                           
   518                           ; BSR set to: 0
   519                           ;main.c: 62: LATAbits.LATA0 = 0;
   520  001282  9089               	bcf	3977,0,c	;volatile
   521                           
   522                           ; BSR set to: 0
   523                           ;main.c: 63: LATAbits.LATA1 = 0;
   524  001284  9289               	bcf	3977,1,c	;volatile
   525                           
   526                           ; BSR set to: 0
   527                           ;main.c: 64: TRISDbits.TRISD3 = 1;
   528  001286  8695               	bsf	3989,3,c	;volatile
   529                           
   530                           ; BSR set to: 0
   531                           ;main.c: 66: clearBuffer();
   532  001288  ECFA  F00A         	call	_clearBuffer	;wreg free
   533  00128C                     l1880:
   534                           
   535                           ;main.c: 71: if(isItLongEnough()){
   536  00128C  ECF0  F00B         	call	_isItLongEnough	;wreg free
   537  001290  0900               	iorlw	0
   538  001292  B4D8               	btfsc	status,2,c
   539  001294  D017               	goto	l54
   540                           
   541                           ;main.c: 72: if(isValid()){
   542  001296  EC43  F00B         	call	_isValid	;wreg free
   543  00129A  0900               	iorlw	0
   544  00129C  B4D8               	btfsc	status,2,c
   545  00129E  D00F               	goto	l1894
   546                           
   547                           ;main.c: 73: LATAbits.LATA1 = 1;
   548  0012A0  8289               	bsf	3977,1,c	;volatile
   549                           
   550                           ;main.c: 74: wait_ms(1000);
   551  0012A2  0E03               	movlw	3
   552  0012A4  0100               	movlb	0	; () banked
   553  0012A6  6FB2               	movwf	(wait_ms@time+1)& (0+255),b
   554  0012A8  0EE8               	movlw	232
   555  0012AA  6FB1               	movwf	wait_ms@time& (0+255),b
   556  0012AC  ECA0  F00A         	call	_wait_ms	;wreg free
   557                           
   558                           ;main.c: 75: copyTmpBuffer();
   559  0012B0  EC23  F00B         	call	_copyTmpBuffer	;wreg free
   560                           
   561                           ;main.c: 76: clearBuffer();
   562  0012B4  ECFA  F00A         	call	_clearBuffer	;wreg free
   563                           
   564                           ;main.c: 77: parseString();
   565  0012B8  EC88  F007         	call	_parseString	;wreg free
   566                           
   567                           ;main.c: 78: }else{
   568  0012BC  D004               	goto	l57
   569  0012BE                     l1894:
   570                           
   571                           ;main.c: 79: clearBuffer();
   572  0012BE  ECFA  F00A         	call	_clearBuffer	;wreg free
   573                           
   574                           ;main.c: 80: }
   575                           ;main.c: 81: }else{
   576  0012C2  D001               	goto	l57
   577  0012C4                     l54:
   578                           
   579                           ;main.c: 82: LATAbits.LATA1 = 0;
   580  0012C4  9289               	bcf	3977,1,c	;volatile
   581  0012C6                     l57:
   582                           
   583                           ;main.c: 83: }
   584                           ;main.c: 85: if(!PORTDbits.RD3){
   585  0012C6  B683               	btfsc	3971,3,c	;volatile
   586  0012C8  D7E1               	goto	l1880
   587                           
   588                           ;main.c: 86: writeResult(2);
   589  0012CA  0E02               	movlw	2
   590  0012CC  ECA5  F00B         	call	_writeResult
   591  0012D0  D7DD               	goto	l1880
   592  0012D2                     __end_of_main:
   593                           	opt stack 0
   594                           postinc0	equ	0xFEE
   595                           wreg	equ	0xFE8
   596                           status	equ	0xFD8
   597                           
   598 ;; *************** function _writeResult *****************
   599 ;; Defined at:
   600 ;;		line 56 in file "bufferhandler.c"
   601 ;; Parameters:    Size  Location     Type
   602 ;;  dev             1    wreg     unsigned char 
   603 ;; Auto vars:     Size  Location     Type
   604 ;;  dev             1   37[COMRAM] unsigned char 
   605 ;; Return value:  Size  Location     Type
   606 ;;                  1    wreg      void 
   607 ;; Registers used:
   608 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   617 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   618 ;;Total ram usage:        1 bytes
   619 ;; Hardware stack levels used:    1
   620 ;; Hardware stack levels required when called:    5
   621 ;; This function calls:
   622 ;;		_wait_ms
   623 ;;		_writeString
   624 ;; This function is called by:
   625 ;;		_main
   626 ;; This function uses a non-reentrant model
   627 ;;
   628                           
   629                           	psect	text1
   630  00174A                     __ptext1:
   631                           	opt stack 0
   632  00174A                     _writeResult:
   633                           	opt stack 25
   634                           
   635                           ;incstack = 0
   636                           ;writeResult@dev stored from wreg
   637  00174A  6E26               	movwf	writeResult@dev,c
   638                           
   639                           ;bufferhandler.c: 58: writeString(parsedString, dev);
   640  00174C  0E2D               	movlw	low _parsedString
   641  00174E  0100               	movlb	0	; () banked
   642  001750  6FAB               	movwf	writeString@str& (0+255),b
   643  001752  0E00               	movlw	high _parsedString
   644  001754  0100               	movlb	0	; () banked
   645  001756  6FAC               	movwf	(writeString@str+1)& (0+255),b
   646  001758  C026  F0AD         	movff	writeResult@dev,writeString@dev
   647  00175C  ECF8  F009         	call	_writeString	;wreg free
   648                           
   649                           ;bufferhandler.c: 59: wait_ms(1000);
   650  001760  0E03               	movlw	3
   651  001762  0100               	movlb	0	; () banked
   652  001764  6FB2               	movwf	(wait_ms@time+1)& (0+255),b
   653  001766  0EE8               	movlw	232
   654  001768  6FB1               	movwf	wait_ms@time& (0+255),b
   655  00176A  ECA0  F00A         	call	_wait_ms	;wreg free
   656  00176E  0012               	return		;funcret
   657  001770                     __end_of_writeResult:
   658                           	opt stack 0
   659                           postinc0	equ	0xFEE
   660                           wreg	equ	0xFE8
   661                           status	equ	0xFD8
   662                           
   663 ;; *************** function _writeString *****************
   664 ;; Defined at:
   665 ;;		line 97 in file "uart.c"
   666 ;; Parameters:    Size  Location     Type
   667 ;;  str             2    2[BANK0 ] PTR unsigned char 
   668 ;;		 -> parsedString(17), STR_2(4), STR_1(5), 
   669 ;;  dev             1    4[BANK0 ] unsigned char 
   670 ;; Auto vars:     Size  Location     Type
   671 ;;  i               2    7[BANK0 ] int 
   672 ;; Return value:  Size  Location     Type
   673 ;;                  1    wreg      void 
   674 ;; Registers used:
   675 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   676 ;; Tracked objects:
   677 ;;		On entry : 0/0
   678 ;;		On exit  : 0/0
   679 ;;		Unchanged: 0/0
   680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   681 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   682 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   683 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   684 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   685 ;;Total ram usage:        7 bytes
   686 ;; Hardware stack levels used:    1
   687 ;; Hardware stack levels required when called:    4
   688 ;; This function calls:
   689 ;;		_UART_Write
   690 ;;		_strlen
   691 ;; This function is called by:
   692 ;;		_main
   693 ;;		_writeResult
   694 ;; This function uses a non-reentrant model
   695 ;;
   696                           
   697                           	psect	text2
   698  0013F0                     __ptext2:
   699                           	opt stack 0
   700  0013F0                     _writeString:
   701                           	opt stack 26
   702                           
   703                           ;uart.c: 99: for(int i = 0; i<strlen(str); i++)
   704                           
   705                           ;incstack = 0
   706  0013F0  0E00               	movlw	0
   707  0013F2  0100               	movlb	0	; () banked
   708  0013F4  6FB1               	movwf	(writeString@i+1)& (0+255),b
   709  0013F6  0E00               	movlw	0
   710  0013F8  6FB0               	movwf	writeString@i& (0+255),b
   711  0013FA  D024               	goto	l1652
   712  0013FC                     l1648:
   713                           
   714                           ; BSR set to: 0
   715                           ;uart.c: 100: {
   716                           ;uart.c: 101: UART_Write(str[i], dev);
   717  0013FC  C0AD  F022         	movff	writeString@dev,UART_Write@dev
   718  001400  0100               	movlb	0	; () banked
   719  001402  51B0               	movf	writeString@i& (0+255),w,b
   720  001404  0100               	movlb	0	; () banked
   721  001406  25AB               	addwf	writeString@str& (0+255),w,b
   722  001408  0100               	movlb	0	; () banked
   723  00140A  6FAE               	movwf	??_writeString& (0+255),b
   724  00140C  0100               	movlb	0	; () banked
   725  00140E  51B1               	movf	(writeString@i+1)& (0+255),w,b
   726  001410  0100               	movlb	0	; () banked
   727  001412  21AC               	addwfc	(writeString@str+1)& (0+255),w,b
   728  001414  0100               	movlb	0	; () banked
   729  001416  6FAF               	movwf	(??_writeString+1)& (0+255),b
   730  001418  C0AE  FFF6         	movff	??_writeString,tblptrl
   731  00141C  C0AF  FFF7         	movff	??_writeString+1,tblptrh
   732  001420  0E00               	movlw	low (__smallconst shr (0+16))
   733  001422  6EF8               	movwf	tblptru,c
   734  001424  0E0E               	movlw	(high __ramtop+-1)
   735  001426  64F7               	cpfsgt	tblptrh,c
   736  001428  D003               	bra	u1047
   737  00142A  0008               	tblrd		*
   738  00142C  50F5               	movf	tablat,w,c
   739  00142E  D005               	bra	u1040
   740  001430                     u1047:
   741  001430  CFF6 FFE9          	movff	tblptrl,fsr0l
   742  001434  CFF7 FFEA          	movff	tblptrh,fsr0h
   743  001438  50EF               	movf	indf0,w,c
   744  00143A                     u1040:
   745  00143A  ECD6  F00B         	call	_UART_Write
   746  00143E  0100               	movlb	0	; () banked
   747  001440  4BB0               	infsnz	writeString@i& (0+255),f,b
   748  001442  2BB1               	incf	(writeString@i+1)& (0+255),f,b
   749  001444                     l1652:
   750                           
   751                           ; BSR set to: 0
   752  001444  C0AB  F022         	movff	writeString@str,strlen@s
   753  001448  C0AC  F023         	movff	writeString@str+1,strlen@s+1
   754  00144C  ECCD  F00A         	call	_strlen	;wreg free
   755  001450  5022               	movf	?_strlen,w,c
   756  001452  0100               	movlb	0	; () banked
   757  001454  5DB0               	subwf	writeString@i& (0+255),w,b
   758  001456  5023               	movf	?_strlen+1,w,c
   759  001458  0100               	movlb	0	; () banked
   760  00145A  59B1               	subwfb	(writeString@i+1)& (0+255),w,b
   761  00145C  B0D8               	btfsc	status,0,c
   762  00145E  0012               	return	
   763  001460  D7CD               	goto	l1648
   764  001462                     __end_of_writeString:
   765                           	opt stack 0
   766                           tblptru	equ	0xFF8
   767                           tblptrh	equ	0xFF7
   768                           tblptrl	equ	0xFF6
   769                           tablat	equ	0xFF5
   770                           indf0	equ	0xFEF
   771                           postinc0	equ	0xFEE
   772                           fsr0h	equ	0xFEA
   773                           fsr0l	equ	0xFE9
   774                           wreg	equ	0xFE8
   775                           status	equ	0xFD8
   776                           
   777 ;; *************** function _UART_Write *****************
   778 ;; Defined at:
   779 ;;		line 61 in file "uart.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;  data            1    wreg     unsigned char 
   782 ;;  dev             1   33[COMRAM] unsigned char 
   783 ;; Auto vars:     Size  Location     Type
   784 ;;  data            1   34[COMRAM] unsigned char 
   785 ;; Return value:  Size  Location     Type
   786 ;;                  1    wreg      void 
   787 ;; Registers used:
   788 ;;		wreg, status,2, status,0
   789 ;; Tracked objects:
   790 ;;		On entry : 0/0
   791 ;;		On exit  : 0/0
   792 ;;		Unchanged: 0/0
   793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   794 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   797 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   798 ;;Total ram usage:        2 bytes
   799 ;; Hardware stack levels used:    1
   800 ;; Hardware stack levels required when called:    3
   801 ;; This function calls:
   802 ;;		Nothing
   803 ;; This function is called by:
   804 ;;		_main
   805 ;;		_writeString
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text3
   810  0017AC                     __ptext3:
   811                           	opt stack 0
   812  0017AC                     _UART_Write:
   813                           	opt stack 26
   814                           
   815                           ; BSR set to: 0
   816                           ;incstack = 0
   817                           ;UART_Write@data stored from wreg
   818  0017AC  6E23               	movwf	UART_Write@data,c
   819                           
   820                           ;uart.c: 63: if (dev == 1)
   821  0017AE  0422               	decf	UART_Write@dev,w,c
   822  0017B0  A4D8               	btfss	status,2,c
   823  0017B2  D005               	goto	l150
   824  0017B4                     l146:
   825  0017B4  A2AD               	btfss	4013,1,c	;volatile
   826  0017B6  D7FE               	goto	l146
   827                           
   828                           ;uart.c: 66: TXREG1 = data;
   829  0017B8  C023  FFAE         	movff	UART_Write@data,4014	;volatile
   830                           
   831                           ;uart.c: 67: }
   832  0017BC  0012               	return	
   833  0017BE                     l150:
   834  0017BE  A2A8               	btfss	4008,1,c	;volatile
   835  0017C0  D7FE               	goto	l150
   836                           
   837                           ;uart.c: 71: TXREG2 = data;
   838  0017C2  C023  FFA9         	movff	UART_Write@data,4009	;volatile
   839  0017C6  0012               	return	
   840  0017C8                     __end_of_UART_Write:
   841                           	opt stack 0
   842                           tblptru	equ	0xFF8
   843                           tblptrh	equ	0xFF7
   844                           tblptrl	equ	0xFF6
   845                           tablat	equ	0xFF5
   846                           indf0	equ	0xFEF
   847                           postinc0	equ	0xFEE
   848                           fsr0h	equ	0xFEA
   849                           fsr0l	equ	0xFE9
   850                           wreg	equ	0xFE8
   851                           status	equ	0xFD8
   852                           
   853 ;; *************** function _wait_ms *****************
   854 ;; Defined at:
   855 ;;		line 35 in file "system.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;  time            2    8[BANK0 ] int 
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg, status,2, status,0, cstack
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   869 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   872 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   873 ;;Total ram usage:        2 bytes
   874 ;; Hardware stack levels used:    1
   875 ;; Hardware stack levels required when called:    4
   876 ;; This function calls:
   877 ;;		___lmul
   878 ;; This function is called by:
   879 ;;		_main
   880 ;;		_writeResult
   881 ;; This function uses a non-reentrant model
   882 ;;
   883                           
   884                           	psect	text4
   885  001540                     __ptext4:
   886                           	opt stack 0
   887  001540                     _wait_ms:
   888                           	opt stack 25
   889                           
   890                           ;system.c: 37: static long timel = 0;
   891                           ;system.c: 38: timel = time * 1000l;
   892                           
   893                           ;incstack = 0
   894  001540  C0B1  F0A9         	movff	wait_ms@time,___lmul@multiplier
   895  001544  C0B2  F0AA         	movff	wait_ms@time+1,___lmul@multiplier+1
   896  001548  0100               	movlb	0	; () banked
   897  00154A  0E00               	movlw	0
   898  00154C  BFAA               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
   899  00154E  0EFF               	movlw	-1
   900  001550  6FAB               	movwf	(___lmul@multiplier+2)& (0+255),b
   901  001552  6FAC               	movwf	(___lmul@multiplier+3)& (0+255),b
   902  001554  0EE8               	movlw	232
   903  001556  0100               	movlb	0	; () banked
   904  001558  6FAD               	movwf	___lmul@multiplicand& (0+255),b
   905  00155A  0E03               	movlw	3
   906  00155C  6FAE               	movwf	(___lmul@multiplicand+1)& (0+255),b
   907  00155E  0E00               	movlw	0
   908  001560  6FAF               	movwf	(___lmul@multiplicand+2)& (0+255),b
   909  001562  0E00               	movlw	0
   910  001564  6FB0               	movwf	(___lmul@multiplicand+3)& (0+255),b
   911  001566  EC6A  F00A         	call	___lmul	;wreg free
   912  00156A  C0A9  F027         	movff	?___lmul,wait_ms@timel
   913  00156E  C0AA  F028         	movff	?___lmul+1,wait_ms@timel+1
   914  001572  C0AB  F029         	movff	?___lmul+2,wait_ms@timel+2
   915  001576  C0AC  F02A         	movff	?___lmul+3,wait_ms@timel+3
   916                           
   917                           ;system.c: 39: for( ; timel; timel--);
   918  00157A  D008               	goto	l73
   919  00157C                     l1656:
   920  00157C  0EFF               	movlw	255
   921  00157E  2627               	addwf	wait_ms@timel,f,c
   922  001580  0EFF               	movlw	255
   923  001582  2228               	addwfc	wait_ms@timel+1,f,c
   924  001584  0EFF               	movlw	255
   925  001586  2229               	addwfc	wait_ms@timel+2,f,c
   926  001588  0EFF               	movlw	255
   927  00158A  222A               	addwfc	wait_ms@timel+3,f,c
   928  00158C                     l73:
   929  00158C  5027               	movf	wait_ms@timel,w,c
   930  00158E  1028               	iorwf	wait_ms@timel+1,w,c
   931  001590  1029               	iorwf	wait_ms@timel+2,w,c
   932  001592  102A               	iorwf	wait_ms@timel+3,w,c
   933  001594  B4D8               	btfsc	status,2,c
   934  001596  0012               	return	
   935  001598  D7F1               	goto	l1656
   936  00159A                     __end_of_wait_ms:
   937                           	opt stack 0
   938                           tblptru	equ	0xFF8
   939                           tblptrh	equ	0xFF7
   940                           tblptrl	equ	0xFF6
   941                           tablat	equ	0xFF5
   942                           indf0	equ	0xFEF
   943                           postinc0	equ	0xFEE
   944                           fsr0h	equ	0xFEA
   945                           fsr0l	equ	0xFE9
   946                           wreg	equ	0xFE8
   947                           status	equ	0xFD8
   948                           
   949 ;; *************** function ___lmul *****************
   950 ;; Defined at:
   951 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
   952 ;; Parameters:    Size  Location     Type
   953 ;;  multiplier      4    0[BANK0 ] unsigned long 
   954 ;;  multiplicand    4    4[BANK0 ] unsigned long 
   955 ;; Auto vars:     Size  Location     Type
   956 ;;  product         4   33[COMRAM] unsigned long 
   957 ;; Return value:  Size  Location     Type
   958 ;;                  4    0[BANK0 ] unsigned long 
   959 ;; Registers used:
   960 ;;		wreg, status,2, status,0
   961 ;; Tracked objects:
   962 ;;		On entry : 0/0
   963 ;;		On exit  : 0/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   966 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   967 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   969 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   970 ;;Total ram usage:       12 bytes
   971 ;; Hardware stack levels used:    1
   972 ;; Hardware stack levels required when called:    3
   973 ;; This function calls:
   974 ;;		Nothing
   975 ;; This function is called by:
   976 ;;		_wait_ms
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980                           	psect	text5
   981  0014D4                     __ptext5:
   982                           	opt stack 0
   983  0014D4                     ___lmul:
   984                           	opt stack 25
   985                           
   986                           ;incstack = 0
   987  0014D4  0E00               	movlw	0
   988  0014D6  6E22               	movwf	___lmul@product,c
   989  0014D8  0E00               	movlw	0
   990  0014DA  6E23               	movwf	___lmul@product+1,c
   991  0014DC  0E00               	movlw	0
   992  0014DE  6E24               	movwf	___lmul@product+2,c
   993  0014E0  0E00               	movlw	0
   994  0014E2  6E25               	movwf	___lmul@product+3,c
   995  0014E4                     l1626:
   996  0014E4  0100               	movlb	0	; () banked
   997  0014E6  A1A9               	btfss	___lmul@multiplier& (0+255),0,b
   998  0014E8  D00C               	goto	l1630
   999                           
  1000                           ; BSR set to: 0
  1001  0014EA  0100               	movlb	0	; () banked
  1002  0014EC  51AD               	movf	___lmul@multiplicand& (0+255),w,b
  1003  0014EE  2622               	addwf	___lmul@product,f,c
  1004  0014F0  0100               	movlb	0	; () banked
  1005  0014F2  51AE               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  1006  0014F4  2223               	addwfc	___lmul@product+1,f,c
  1007  0014F6  0100               	movlb	0	; () banked
  1008  0014F8  51AF               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  1009  0014FA  2224               	addwfc	___lmul@product+2,f,c
  1010  0014FC  0100               	movlb	0	; () banked
  1011  0014FE  51B0               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  1012  001500  2225               	addwfc	___lmul@product+3,f,c
  1013  001502                     l1630:
  1014                           
  1015                           ; BSR set to: 0
  1016  001502  0100               	movlb	0	; () banked
  1017  001504  90D8               	bcf	status,0,c
  1018  001506  37AD               	rlcf	___lmul@multiplicand& (0+255),f,b
  1019  001508  37AE               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  1020  00150A  37AF               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  1021  00150C  37B0               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  1022                           
  1023                           ; BSR set to: 0
  1024  00150E  0100               	movlb	0	; () banked
  1025  001510  90D8               	bcf	status,0,c
  1026  001512  33AC               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  1027  001514  33AB               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  1028  001516  33AA               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  1029  001518  33A9               	rrcf	___lmul@multiplier& (0+255),f,b
  1030  00151A  0100               	movlb	0	; () banked
  1031  00151C  51A9               	movf	___lmul@multiplier& (0+255),w,b
  1032  00151E  0100               	movlb	0	; () banked
  1033  001520  11AA               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  1034  001522  0100               	movlb	0	; () banked
  1035  001524  11AB               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  1036  001526  0100               	movlb	0	; () banked
  1037  001528  11AC               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  1038  00152A  A4D8               	btfss	status,2,c
  1039  00152C  D7DB               	goto	l1626
  1040                           
  1041                           ; BSR set to: 0
  1042  00152E  C022  F0A9         	movff	___lmul@product,?___lmul
  1043  001532  C023  F0AA         	movff	___lmul@product+1,?___lmul+1
  1044  001536  C024  F0AB         	movff	___lmul@product+2,?___lmul+2
  1045  00153A  C025  F0AC         	movff	___lmul@product+3,?___lmul+3
  1046                           
  1047                           ; BSR set to: 0
  1048  00153E  0012               	return		;funcret
  1049  001540                     __end_of___lmul:
  1050                           	opt stack 0
  1051                           tblptru	equ	0xFF8
  1052                           tblptrh	equ	0xFF7
  1053                           tblptrl	equ	0xFF6
  1054                           tablat	equ	0xFF5
  1055                           indf0	equ	0xFEF
  1056                           postinc0	equ	0xFEE
  1057                           fsr0h	equ	0xFEA
  1058                           fsr0l	equ	0xFE9
  1059                           wreg	equ	0xFE8
  1060                           status	equ	0xFD8
  1061                           
  1062 ;; *************** function _parseString *****************
  1063 ;; Defined at:
  1064 ;;		line 87 in file "bufferhandler.c"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;		None
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;  i               2   25[BANK0 ] int 
  1069 ;;  i               2   29[BANK0 ] int 
  1070 ;;  tmpsoc          3   18[BANK0 ] unsigned char [3]
  1071 ;;  startPos        2   27[BANK0 ] int 
  1072 ;;  pos             2   23[BANK0 ] int 
  1073 ;;  k               2   21[BANK0 ] int 
  1074 ;;  chg             2   16[BANK0 ] PTR unsigned char 
  1075 ;;		 -> STR_5(1), 
  1076 ;;  SOC             2   14[BANK0 ] int 
  1077 ;;  ichg            2   12[BANK0 ] int 
  1078 ;; Return value:  Size  Location     Type
  1079 ;;                  1    wreg      unsigned char 
  1080 ;; Registers used:
  1081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1082 ;; Tracked objects:
  1083 ;;		On entry : 0/0
  1084 ;;		On exit  : 0/0
  1085 ;;		Unchanged: 0/0
  1086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1088 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1089 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1090 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1091 ;;Total ram usage:       22 bytes
  1092 ;; Hardware stack levels used:    1
  1093 ;; Hardware stack levels required when called:    5
  1094 ;; This function calls:
  1095 ;;		_atoi
  1096 ;;		_createCHG
  1097 ;;		_strncpy
  1098 ;; This function is called by:
  1099 ;;		_main
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           	psect	text6
  1104  000F10                     __ptext6:
  1105                           	opt stack 0
  1106  000F10                     _parseString:
  1107                           	opt stack 25
  1108                           
  1109                           ;bufferhandler.c: 90: int pos = 0;
  1110                           
  1111                           ; BSR set to: 0
  1112                           ;incstack = 0
  1113  000F10  0E00               	movlw	0
  1114  000F12  0100               	movlb	0	; () banked
  1115  000F14  6FC1               	movwf	(parseString@pos+1)& (0+255),b
  1116  000F16  0E00               	movlw	0
  1117  000F18  6FC0               	movwf	parseString@pos& (0+255),b
  1118                           
  1119                           ;bufferhandler.c: 91: for(int i = 47; i<49; i++){
  1120  000F1A  0E00               	movlw	0
  1121  000F1C  0100               	movlb	0	; () banked
  1122  000F1E  6FC7               	movwf	(parseString@i+1)& (0+255),b
  1123  000F20  0E2F               	movlw	47
  1124  000F22  6FC6               	movwf	parseString@i& (0+255),b
  1125  000F24                     l1800:
  1126                           
  1127                           ; BSR set to: 0
  1128  000F24  0100               	movlb	0	; () banked
  1129  000F26  BFC7               	btfsc	(parseString@i+1)& (0+255),7,b
  1130  000F28  D008               	goto	l1804
  1131  000F2A  0100               	movlb	0	; () banked
  1132  000F2C  51C7               	movf	(parseString@i+1)& (0+255),w,b
  1133  000F2E  E118               	bnz	l1814
  1134  000F30  0E31               	movlw	49
  1135  000F32  0100               	movlb	0	; () banked
  1136  000F34  5DC6               	subwf	parseString@i& (0+255),w,b
  1137  000F36  B0D8               	btfsc	status,0,c
  1138  000F38  D013               	goto	l1814
  1139  000F3A                     l1804:
  1140                           
  1141                           ; BSR set to: 0
  1142                           ;bufferhandler.c: 92: pos++;
  1143  000F3A  0100               	movlb	0	; () banked
  1144  000F3C  4BC0               	infsnz	parseString@pos& (0+255),f,b
  1145  000F3E  2BC1               	incf	(parseString@pos+1)& (0+255),f,b
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;bufferhandler.c: 93: if(allDataString[i] == 0x3B){
  1149  000F40  0E00               	movlw	low _allDataString
  1150  000F42  0100               	movlb	0	; () banked
  1151  000F44  25C6               	addwf	parseString@i& (0+255),w,b
  1152  000F46  6ED9               	movwf	fsr2l,c
  1153  000F48  0E01               	movlw	high _allDataString
  1154  000F4A  0100               	movlb	0	; () banked
  1155  000F4C  21C7               	addwfc	(parseString@i+1)& (0+255),w,b
  1156  000F4E  6EDA               	movwf	fsr2h,c
  1157  000F50  0E3B               	movlw	59
  1158  000F52  18DE               	xorwf	postinc2,w,c
  1159  000F54  B4D8               	btfsc	status,2,c
  1160  000F56  D004               	goto	l1814
  1161                           
  1162                           ; BSR set to: 0
  1163                           
  1164                           ; BSR set to: 0
  1165                           
  1166                           ; BSR set to: 0
  1167                           ;bufferhandler.c: 94: break;
  1168  000F58  0100               	movlb	0	; () banked
  1169  000F5A  4BC6               	infsnz	parseString@i& (0+255),f,b
  1170  000F5C  2BC7               	incf	(parseString@i+1)& (0+255),f,b
  1171  000F5E  D7E2               	goto	l1800
  1172  000F60                     l1814:
  1173                           
  1174                           ; BSR set to: 0
  1175                           ;bufferhandler.c: 95: }
  1176                           ;bufferhandler.c: 96: }
  1177                           ;bufferhandler.c: 97: char* chg = createCHG(pos);
  1178  000F60  C0C0  F022         	movff	parseString@pos,createCHG@pos
  1179  000F64  C0C1  F023         	movff	parseString@pos+1,createCHG@pos+1
  1180  000F68  ECB6  F009         	call	_createCHG	;wreg free
  1181  000F6C  C022  F0B9         	movff	?_createCHG,parseString@chg
  1182  000F70  C023  F0BA         	movff	?_createCHG+1,parseString@chg+1
  1183                           
  1184                           ;bufferhandler.c: 100: int ichg = atoi(chg);
  1185  000F74  C0B9  F0AB         	movff	parseString@chg,atoi@s
  1186  000F78  C0BA  F0AC         	movff	parseString@chg+1,atoi@s+1
  1187  000F7C  EC50  F008         	call	_atoi	;wreg free
  1188  000F80  C0AB  F0B5         	movff	?_atoi,parseString@ichg
  1189  000F84  C0AC  F0B6         	movff	?_atoi+1,parseString@ichg+1
  1190                           
  1191                           ;bufferhandler.c: 107: int startPos = 50;
  1192  000F88  0E00               	movlw	0
  1193  000F8A  0100               	movlb	0	; () banked
  1194  000F8C  6FC5               	movwf	(parseString@startPos+1)& (0+255),b
  1195  000F8E  0E32               	movlw	50
  1196  000F90  6FC4               	movwf	parseString@startPos& (0+255),b
  1197                           
  1198                           ;bufferhandler.c: 108: switch(pos){
  1199  000F92  D010               	goto	l1828
  1200  000F94                     l1820:
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;bufferhandler.c: 110: startPos = 50;
  1204  000F94  0E00               	movlw	0
  1205  000F96  0100               	movlb	0	; () banked
  1206  000F98  6FC5               	movwf	(parseString@startPos+1)& (0+255),b
  1207  000F9A  0E32               	movlw	50
  1208  000F9C  D009               	goto	L2
  1209  000F9E                     l1822:
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;bufferhandler.c: 113: startPos = 51;
  1213  000F9E  0E00               	movlw	0
  1214  000FA0  0100               	movlb	0	; () banked
  1215  000FA2  6FC5               	movwf	(parseString@startPos+1)& (0+255),b
  1216  000FA4  0E33               	movlw	51
  1217  000FA6  D004               	goto	L2
  1218  000FA8                     l1824:
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;bufferhandler.c: 116: startPos = 52;
  1222  000FA8  0E00               	movlw	0
  1223  000FAA  0100               	movlb	0	; () banked
  1224  000FAC  6FC5               	movwf	(parseString@startPos+1)& (0+255),b
  1225  000FAE  0E34               	movlw	52
  1226  000FB0                     L2:
  1227  000FB0  6FC4               	movwf	parseString@startPos& (0+255),b
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;bufferhandler.c: 118: }
  1231                           
  1232                           ;bufferhandler.c: 117: break;
  1233  000FB2  D014               	goto	l236
  1234  000FB4                     l1828:
  1235                           
  1236                           ; BSR set to: 0
  1237  000FB4  C0C0  F0B2         	movff	parseString@pos,??_parseString
  1238  000FB8  C0C1  F0B3         	movff	parseString@pos+1,??_parseString+1
  1239                           
  1240                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1241                           ; Switch size 1, requested type "space"
  1242                           ; Number of cases is 1, Range of values is 0 to 0
  1243                           ; switch strategies available:
  1244                           ; Name         Instructions Cycles
  1245                           ; simple_byte            4     3 (average)
  1246                           ;	Chosen strategy is simple_byte
  1247  000FBC  0100               	movlb	0	; () banked
  1248  000FBE  51B3               	movf	(??_parseString+1)& (0+255),w,b
  1249  000FC0  0A00               	xorlw	0	; case 0
  1250  000FC2  A4D8               	btfss	status,2,c
  1251  000FC4  D00B               	goto	l236
  1252                           
  1253                           ; BSR set to: 0
  1254                           ; Switch size 1, requested type "space"
  1255                           ; Number of cases is 3, Range of values is 1 to 3
  1256                           ; switch strategies available:
  1257                           ; Name         Instructions Cycles
  1258                           ; simple_byte           10     6 (average)
  1259                           ;	Chosen strategy is simple_byte
  1260  000FC6  0100               	movlb	0	; () banked
  1261  000FC8  51B2               	movf	??_parseString& (0+255),w,b
  1262  000FCA  0A01               	xorlw	1	; case 1
  1263  000FCC  B4D8               	btfsc	status,2,c
  1264  000FCE  D7E2               	goto	l1820
  1265  000FD0  0A03               	xorlw	3	; case 2
  1266  000FD2  B4D8               	btfsc	status,2,c
  1267  000FD4  D7E4               	goto	l1822
  1268  000FD6  0A01               	xorlw	1	; case 3
  1269  000FD8  B4D8               	btfsc	status,2,c
  1270  000FDA  D7E6               	goto	l1824
  1271  000FDC                     l236:
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;bufferhandler.c: 121: char tmpsoc [3] = "";
  1275  000FDC  C060  F0BB         	movff	parseString@F8386,parseString@tmpsoc
  1276  000FE0  C061  F0BC         	movff	parseString@F8386+1,parseString@tmpsoc+1
  1277  000FE4  C062  F0BD         	movff	parseString@F8386+2,parseString@tmpsoc+2
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;bufferhandler.c: 122: int k = 0;
  1281  000FE8  0E00               	movlw	0
  1282  000FEA  0100               	movlb	0	; () banked
  1283  000FEC  6FBF               	movwf	(parseString@k+1)& (0+255),b
  1284  000FEE  0E00               	movlw	0
  1285  000FF0  6FBE               	movwf	parseString@k& (0+255),b
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;bufferhandler.c: 123: for(int i = startPos; i< (startPos+3); i++){
  1289  000FF2  C0C4  F0C2         	movff	parseString@startPos,parseString@i_730
  1290  000FF6  C0C5  F0C3         	movff	parseString@startPos+1,parseString@i_730+1
  1291  000FFA  D018               	goto	l1840
  1292  000FFC                     l1834:
  1293                           
  1294                           ; BSR set to: 0
  1295                           ;bufferhandler.c: 124: tmpsoc[k] = allDataString[i];
  1296  000FFC  0E00               	movlw	low _allDataString
  1297  000FFE  0100               	movlb	0	; () banked
  1298  001000  25C2               	addwf	parseString@i_730& (0+255),w,b
  1299  001002  6ED9               	movwf	fsr2l,c
  1300  001004  0E01               	movlw	high _allDataString
  1301  001006  0100               	movlb	0	; () banked
  1302  001008  21C3               	addwfc	(parseString@i_730+1)& (0+255),w,b
  1303  00100A  6EDA               	movwf	fsr2h,c
  1304  00100C  0EBB               	movlw	low parseString@tmpsoc
  1305  00100E  0100               	movlb	0	; () banked
  1306  001010  25BE               	addwf	parseString@k& (0+255),w,b
  1307  001012  6EE1               	movwf	fsr1l,c
  1308  001014  0E00               	movlw	high parseString@tmpsoc
  1309  001016  0100               	movlb	0	; () banked
  1310  001018  21BF               	addwfc	(parseString@k+1)& (0+255),w,b
  1311  00101A  6EE2               	movwf	fsr1h,c
  1312  00101C  CFDF FFE7          	movff	indf2,indf1
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;bufferhandler.c: 125: k++;
  1316  001020  0100               	movlb	0	; () banked
  1317  001022  4BBE               	infsnz	parseString@k& (0+255),f,b
  1318  001024  2BBF               	incf	(parseString@k+1)& (0+255),f,b
  1319                           
  1320                           ; BSR set to: 0
  1321  001026  0100               	movlb	0	; () banked
  1322  001028  4BC2               	infsnz	parseString@i_730& (0+255),f,b
  1323  00102A  2BC3               	incf	(parseString@i_730+1)& (0+255),f,b
  1324  00102C                     l1840:
  1325                           
  1326                           ; BSR set to: 0
  1327  00102C  0E03               	movlw	3
  1328  00102E  0100               	movlb	0	; () banked
  1329  001030  25C4               	addwf	parseString@startPos& (0+255),w,b
  1330  001032  0100               	movlb	0	; () banked
  1331  001034  6FB2               	movwf	??_parseString& (0+255),b
  1332  001036  0E00               	movlw	0
  1333  001038  0100               	movlb	0	; () banked
  1334  00103A  21C5               	addwfc	(parseString@startPos+1)& (0+255),w,b
  1335  00103C  0100               	movlb	0	; () banked
  1336  00103E  6FB3               	movwf	(??_parseString+1)& (0+255),b
  1337  001040  0100               	movlb	0	; () banked
  1338  001042  51B2               	movf	??_parseString& (0+255),w,b
  1339  001044  0100               	movlb	0	; () banked
  1340  001046  5DC2               	subwf	parseString@i_730& (0+255),w,b
  1341  001048  0100               	movlb	0	; () banked
  1342  00104A  51C3               	movf	(parseString@i_730+1)& (0+255),w,b
  1343  00104C  0A80               	xorlw	128
  1344  00104E  0100               	movlb	0	; () banked
  1345  001050  6FB4               	movwf	(??_parseString+2)& (0+255),b
  1346  001052  0100               	movlb	0	; () banked
  1347  001054  51B3               	movf	(??_parseString+1)& (0+255),w,b
  1348  001056  0A80               	xorlw	128
  1349  001058  0100               	movlb	0	; () banked
  1350  00105A  59B4               	subwfb	(??_parseString+2)& (0+255),w,b
  1351  00105C  A0D8               	btfss	status,0,c
  1352  00105E  D7CE               	goto	l1834
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;bufferhandler.c: 126: }
  1356                           ;bufferhandler.c: 128: int SOC = atoi(tmpsoc);
  1357                           
  1358                           ; BSR set to: 0
  1359  001060  0EBB               	movlw	low parseString@tmpsoc
  1360  001062  0100               	movlb	0	; () banked
  1361  001064  6FAB               	movwf	atoi@s& (0+255),b
  1362  001066  0E00               	movlw	high parseString@tmpsoc
  1363  001068  0100               	movlb	0	; () banked
  1364  00106A  6FAC               	movwf	(atoi@s+1)& (0+255),b
  1365  00106C  EC50  F008         	call	_atoi	;wreg free
  1366  001070  C0AB  F0B7         	movff	?_atoi,parseString@SOC
  1367  001074  C0AC  F0B8         	movff	?_atoi+1,parseString@SOC+1
  1368                           
  1369                           ;bufferhandler.c: 131: strncpy(parsedString, "hej",17);
  1370  001078  0E2D               	movlw	low _parsedString
  1371  00107A  0100               	movlb	0	; () banked
  1372  00107C  6FA9               	movwf	strncpy@to& (0+255),b
  1373  00107E  0E00               	movlw	high _parsedString
  1374  001080  0100               	movlb	0	; () banked
  1375  001082  6FAA               	movwf	(strncpy@to+1)& (0+255),b
  1376  001084  0E06               	movlw	low STR_4
  1377  001086  0100               	movlb	0	; () banked
  1378  001088  6FAB               	movwf	strncpy@from& (0+255),b
  1379  00108A  0E0F               	movlw	high STR_4
  1380  00108C  0100               	movlb	0	; () banked
  1381  00108E  6FAC               	movwf	(strncpy@from+1)& (0+255),b
  1382  001090  0E00               	movlw	0
  1383  001092  0100               	movlb	0	; () banked
  1384  001094  6FAE               	movwf	(strncpy@size+1)& (0+255),b
  1385  001096  0E11               	movlw	17
  1386  001098  6FAD               	movwf	strncpy@size& (0+255),b
  1387  00109A  EC31  F00A         	call	_strncpy	;wreg free
  1388  00109E  0012               	return	
  1389  0010A0                     __end_of_parseString:
  1390                           	opt stack 0
  1391                           tblptru	equ	0xFF8
  1392                           tblptrh	equ	0xFF7
  1393                           tblptrl	equ	0xFF6
  1394                           tablat	equ	0xFF5
  1395                           indf0	equ	0xFEF
  1396                           postinc0	equ	0xFEE
  1397                           fsr0h	equ	0xFEA
  1398                           fsr0l	equ	0xFE9
  1399                           wreg	equ	0xFE8
  1400                           indf1	equ	0xFE7
  1401                           fsr1h	equ	0xFE2
  1402                           fsr1l	equ	0xFE1
  1403                           indf2	equ	0xFDF
  1404                           postinc2	equ	0xFDE
  1405                           fsr2h	equ	0xFDA
  1406                           fsr2l	equ	0xFD9
  1407                           status	equ	0xFD8
  1408                           
  1409 ;; *************** function _strncpy *****************
  1410 ;; Defined at:
  1411 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncpy.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;  to              2    0[BANK0 ] PTR unsigned char 
  1414 ;;		 -> parsedString(17), 
  1415 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  1416 ;;		 -> STR_4(4), 
  1417 ;;  size            2    4[BANK0 ] unsigned int 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  cp              2   33[COMRAM] PTR unsigned char 
  1420 ;;		 -> parsedString(17), 
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  2    0[BANK0 ] PTR unsigned char 
  1423 ;; Registers used:
  1424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1430 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1431 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1433 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1434 ;;Total ram usage:        8 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    3
  1437 ;; This function calls:
  1438 ;;		Nothing
  1439 ;; This function is called by:
  1440 ;;		_parseString
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text7
  1445  001462                     __ptext7:
  1446                           	opt stack 0
  1447  001462                     _strncpy:
  1448                           	opt stack 26
  1449                           
  1450                           ;incstack = 0
  1451  001462  C0A9  F022         	movff	strncpy@to,strncpy@cp
  1452  001466  C0AA  F023         	movff	strncpy@to+1,strncpy@cp+1
  1453  00146A  D019               	goto	l1716
  1454  00146C                     l1710:
  1455  00146C  0100               	movlb	0	; () banked
  1456  00146E  07AD               	decf	strncpy@size& (0+255),f,b
  1457  001470  A0D8               	btfss	status,0,c
  1458  001472  07AE               	decf	(strncpy@size+1)& (0+255),f,b
  1459                           
  1460                           ; BSR set to: 0
  1461  001474  C0AB  FFF6         	movff	strncpy@from,tblptrl
  1462  001478  C0AC  FFF7         	movff	strncpy@from+1,tblptrh
  1463  00147C  0100               	movlb	0	; () banked
  1464  00147E  4BAB               	infsnz	strncpy@from& (0+255),f,b
  1465  001480  2BAC               	incf	(strncpy@from+1)& (0+255),f,b
  1466  001482                     	if	0	;tblptru may be non-zero
  1467  001482                     	endif
  1468  001482                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1469  001482  0E00               	movlw	low (__mediumconst shr (0+16))
  1470  001484  6EF8               	movwf	tblptru,c
  1471  001486                     	endif
  1472  001486  C022  FFD9         	movff	strncpy@cp,fsr2l
  1473  00148A  C023  FFDA         	movff	strncpy@cp+1,fsr2h
  1474  00148E  4A22               	infsnz	strncpy@cp,f,c
  1475  001490  2A23               	incf	strncpy@cp+1,f,c
  1476  001492  0008               	tblrd		*
  1477  001494  CFF5 FFDF          	movff	tablat,indf2
  1478  001498  50DF               	movf	indf2,w,c
  1479  00149A  B4D8               	btfsc	status,2,c
  1480  00149C  D00F               	goto	l1722
  1481  00149E                     l1716:
  1482  00149E  0100               	movlb	0	; () banked
  1483  0014A0  51AD               	movf	strncpy@size& (0+255),w,b
  1484  0014A2  0100               	movlb	0	; () banked
  1485  0014A4  11AE               	iorwf	(strncpy@size+1)& (0+255),w,b
  1486  0014A6  B4D8               	btfsc	status,2,c
  1487  0014A8  D009               	goto	l1722
  1488  0014AA  D7E0               	goto	l1710
  1489  0014AC                     l1718:
  1490                           
  1491                           ; BSR set to: 0
  1492  0014AC  C022  FFD9         	movff	strncpy@cp,fsr2l
  1493  0014B0  C023  FFDA         	movff	strncpy@cp+1,fsr2h
  1494  0014B4  0E00               	movlw	0
  1495  0014B6  6EDF               	movwf	indf2,c
  1496                           
  1497                           ; BSR set to: 0
  1498  0014B8  4A22               	infsnz	strncpy@cp,f,c
  1499  0014BA  2A23               	incf	strncpy@cp+1,f,c
  1500  0014BC                     l1722:
  1501                           
  1502                           ; BSR set to: 0
  1503  0014BC  0100               	movlb	0	; () banked
  1504  0014BE  07AD               	decf	strncpy@size& (0+255),f,b
  1505  0014C0  A0D8               	btfss	status,0,c
  1506  0014C2  07AE               	decf	(strncpy@size+1)& (0+255),f,b
  1507  0014C4  0100               	movlb	0	; () banked
  1508  0014C6  29AD               	incf	strncpy@size& (0+255),w,b
  1509  0014C8  E1F1               	bnz	l1718
  1510  0014CA  0100               	movlb	0	; () banked
  1511  0014CC  29AE               	incf	(strncpy@size+1)& (0+255),w,b
  1512  0014CE  B4D8               	btfsc	status,2,c
  1513  0014D0  0012               	return	
  1514  0014D2  D7EC               	goto	l1718
  1515  0014D4                     __end_of_strncpy:
  1516                           	opt stack 0
  1517                           tblptru	equ	0xFF8
  1518                           tblptrh	equ	0xFF7
  1519                           tblptrl	equ	0xFF6
  1520                           tablat	equ	0xFF5
  1521                           indf0	equ	0xFEF
  1522                           postinc0	equ	0xFEE
  1523                           fsr0h	equ	0xFEA
  1524                           fsr0l	equ	0xFE9
  1525                           wreg	equ	0xFE8
  1526                           indf1	equ	0xFE7
  1527                           fsr1h	equ	0xFE2
  1528                           fsr1l	equ	0xFE1
  1529                           indf2	equ	0xFDF
  1530                           postinc2	equ	0xFDE
  1531                           fsr2h	equ	0xFDA
  1532                           fsr2l	equ	0xFD9
  1533                           status	equ	0xFD8
  1534                           
  1535 ;; *************** function _createCHG *****************
  1536 ;; Defined at:
  1537 ;;		line 137 in file "bufferhandler.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;  pos             2   33[COMRAM] int 
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;  tmp             2    0[BANK0 ] PTR unsigned char 
  1542 ;;		 -> STR_5(1), 
  1543 ;; Return value:  Size  Location     Type
  1544 ;;                  2   33[COMRAM] PTR unsigned char 
  1545 ;; Registers used:
  1546 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  1547 ;; Tracked objects:
  1548 ;;		On entry : 0/0
  1549 ;;		On exit  : 0/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1552 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1553 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1554 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1555 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1556 ;;Total ram usage:        6 bytes
  1557 ;; Hardware stack levels used:    1
  1558 ;; Hardware stack levels required when called:    3
  1559 ;; This function calls:
  1560 ;;		Nothing
  1561 ;; This function is called by:
  1562 ;;		_parseString
  1563 ;; This function uses a non-reentrant model
  1564 ;;
  1565                           
  1566                           	psect	text8
  1567  00136C                     __ptext8:
  1568                           	opt stack 0
  1569  00136C                     _createCHG:
  1570                           	opt stack 26
  1571                           
  1572                           ;bufferhandler.c: 138: char *tmp = "";
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;incstack = 0
  1576  00136C  0E05               	movlw	low (STR_1+4)
  1577  00136E  0100               	movlb	0	; () banked
  1578  001370  6FA9               	movwf	createCHG@tmp& (0+255),b
  1579  001372  0E0F               	movlw	high (STR_1+4)
  1580  001374  0100               	movlb	0	; () banked
  1581  001376  6FAA               	movwf	(createCHG@tmp+1)& (0+255),b
  1582                           
  1583                           ;bufferhandler.c: 139: switch(pos){
  1584  001378  D024               	goto	l1668
  1585  00137A                     l1660:
  1586                           
  1587                           ;bufferhandler.c: 141: *tmp = allDataString[46];
  1588  00137A  C0A9  FFF6         	movff	createCHG@tmp,tblptrl
  1589  00137E  C0AA  FFF7         	movff	createCHG@tmp+1,tblptrh
  1590  001382                     	if	0	;tblptru may be non-zero
  1591  001382                     	endif
  1592  001382                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1593  001382  0E00               	movlw	low (__mediumconst shr (0+16))
  1594  001384  6EF8               	movwf	tblptru,c
  1595  001386                     	endif
  1596  001386  C12E  FFF5         	movff	_allDataString+46,tablat
  1597  00138A  D00B               	goto	L3
  1598  00138C                     l1662:
  1599                           
  1600                           ;bufferhandler.c: 144: *tmp = allDataString[46] + allDataString[47];
  1601  00138C  C0A9  FFF6         	movff	createCHG@tmp,tblptrl
  1602  001390  C0AA  FFF7         	movff	createCHG@tmp+1,tblptrh
  1603  001394                     	if	0	;tblptru may be non-zero
  1604  001394                     	endif
  1605  001394                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1606  001394  0E00               	movlw	low (__mediumconst shr (0+16))
  1607  001396  6EF8               	movwf	tblptru,c
  1608  001398                     	endif
  1609  001398  0101               	movlb	1	; () banked
  1610  00139A  512E               	movf	(_allDataString+46)& (0+255),w,b
  1611  00139C  0101               	movlb	1	; () banked
  1612  00139E  252F               	addwf	(_allDataString+47)& (0+255),w,b
  1613  0013A0  D00E               	goto	L4
  1614  0013A2                     L3:
  1615  0013A2  000C               	tblwt		*
  1616                           
  1617                           ;bufferhandler.c: 145: break;
  1618  0013A4  D020               	goto	l1670
  1619  0013A6                     l1664:
  1620                           
  1621                           ;bufferhandler.c: 147: *tmp = allDataString[46] + allDataString[47] + allDataString[48];
  1622  0013A6  C0A9  FFF6         	movff	createCHG@tmp,tblptrl
  1623  0013AA  C0AA  FFF7         	movff	createCHG@tmp+1,tblptrh
  1624  0013AE                     	if	0	;tblptru may be non-zero
  1625  0013AE                     	endif
  1626  0013AE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1627  0013AE  0E00               	movlw	low (__mediumconst shr (0+16))
  1628  0013B0  6EF8               	movwf	tblptru,c
  1629  0013B2                     	endif
  1630  0013B2  0101               	movlb	1	; () banked
  1631  0013B4  512E               	movf	(_allDataString+46)& (0+255),w,b
  1632  0013B6  0101               	movlb	1	; () banked
  1633  0013B8  252F               	addwf	(_allDataString+47)& (0+255),w,b
  1634  0013BA  0101               	movlb	1	; () banked
  1635  0013BC  2530               	addwf	(_allDataString+48)& (0+255),w,b
  1636  0013BE                     L4:
  1637  0013BE  6EF5               	movwf	tablat,c
  1638  0013C0  D7F0               	goto	L3
  1639  0013C2                     l1668:
  1640  0013C2  C022  F024         	movff	createCHG@pos,??_createCHG
  1641  0013C6  C023  F025         	movff	createCHG@pos+1,??_createCHG+1
  1642                           
  1643                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1644                           ; Switch size 1, requested type "space"
  1645                           ; Number of cases is 1, Range of values is 0 to 0
  1646                           ; switch strategies available:
  1647                           ; Name         Instructions Cycles
  1648                           ; simple_byte            4     3 (average)
  1649                           ;	Chosen strategy is simple_byte
  1650  0013CA  5025               	movf	??_createCHG+1,w,c
  1651  0013CC  0A00               	xorlw	0	; case 0
  1652  0013CE  A4D8               	btfss	status,2,c
  1653  0013D0  D00A               	goto	l1670
  1654                           
  1655                           ; Switch size 1, requested type "space"
  1656                           ; Number of cases is 3, Range of values is 1 to 3
  1657                           ; switch strategies available:
  1658                           ; Name         Instructions Cycles
  1659                           ; simple_byte           10     6 (average)
  1660                           ;	Chosen strategy is simple_byte
  1661  0013D2  5024               	movf	??_createCHG,w,c
  1662  0013D4  0A01               	xorlw	1	; case 1
  1663  0013D6  B4D8               	btfsc	status,2,c
  1664  0013D8  D7D0               	goto	l1660
  1665  0013DA  0A03               	xorlw	3	; case 2
  1666  0013DC  B4D8               	btfsc	status,2,c
  1667  0013DE  D7D6               	goto	l1662
  1668  0013E0  0A01               	xorlw	1	; case 3
  1669  0013E2  B4D8               	btfsc	status,2,c
  1670  0013E4  D7E0               	goto	l1664
  1671  0013E6                     l1670:
  1672                           
  1673                           ;bufferhandler.c: 150: return tmp;
  1674  0013E6  C0A9  F022         	movff	createCHG@tmp,?_createCHG
  1675  0013EA  C0AA  F023         	movff	createCHG@tmp+1,?_createCHG+1
  1676  0013EE  0012               	return	
  1677  0013F0                     __end_of_createCHG:
  1678                           	opt stack 0
  1679                           tblptru	equ	0xFF8
  1680                           tblptrh	equ	0xFF7
  1681                           tblptrl	equ	0xFF6
  1682                           tablat	equ	0xFF5
  1683                           indf0	equ	0xFEF
  1684                           postinc0	equ	0xFEE
  1685                           fsr0h	equ	0xFEA
  1686                           fsr0l	equ	0xFE9
  1687                           wreg	equ	0xFE8
  1688                           indf1	equ	0xFE7
  1689                           fsr1h	equ	0xFE2
  1690                           fsr1l	equ	0xFE1
  1691                           indf2	equ	0xFDF
  1692                           postinc2	equ	0xFDE
  1693                           fsr2h	equ	0xFDA
  1694                           fsr2l	equ	0xFD9
  1695                           status	equ	0xFD8
  1696                           
  1697 ;; *************** function _atoi *****************
  1698 ;; Defined at:
  1699 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  1700 ;; Parameters:    Size  Location     Type
  1701 ;;  s               2    2[BANK0 ] PTR const unsigned char 
  1702 ;;		 -> STR_5(1), parseString@tmpsoc(3), 
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;  a               2    7[BANK0 ] int 
  1705 ;;  sign            1    6[BANK0 ] unsigned char 
  1706 ;; Return value:  Size  Location     Type
  1707 ;;                  2    2[BANK0 ] int 
  1708 ;; Registers used:
  1709 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1710 ;; Tracked objects:
  1711 ;;		On entry : 0/0
  1712 ;;		On exit  : 0/0
  1713 ;;		Unchanged: 0/0
  1714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1715 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1716 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1717 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1718 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1719 ;;Total ram usage:        7 bytes
  1720 ;; Hardware stack levels used:    1
  1721 ;; Hardware stack levels required when called:    4
  1722 ;; This function calls:
  1723 ;;		___wmul
  1724 ;;		_isdigit
  1725 ;; This function is called by:
  1726 ;;		_parseString
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           	psect	text9
  1731  0010A0                     __ptext9:
  1732                           	opt stack 0
  1733  0010A0                     _atoi:
  1734                           	opt stack 25
  1735                           
  1736                           ;incstack = 0
  1737  0010A0  D003               	goto	l1684
  1738  0010A2                     l1682:
  1739  0010A2  0100               	movlb	0	; () banked
  1740  0010A4  4BAB               	infsnz	atoi@s& (0+255),f,b
  1741  0010A6  2BAC               	incf	(atoi@s+1)& (0+255),f,b
  1742  0010A8                     l1684:
  1743  0010A8  C0AB  FFF6         	movff	atoi@s,tblptrl
  1744  0010AC  C0AC  FFF7         	movff	atoi@s+1,tblptrh
  1745  0010B0  0E00               	movlw	low (__smallconst shr (0+16))
  1746  0010B2  6EF8               	movwf	tblptru,c
  1747  0010B4  0E0E               	movlw	(high __ramtop+-1)
  1748  0010B6  64F7               	cpfsgt	tblptrh,c
  1749  0010B8  D003               	bra	u1077
  1750  0010BA  0008               	tblrd		*
  1751  0010BC  50F5               	movf	tablat,w,c
  1752  0010BE  D005               	bra	u1070
  1753  0010C0                     u1077:
  1754  0010C0  CFF6 FFE9          	movff	tblptrl,fsr0l
  1755  0010C4  CFF7 FFEA          	movff	tblptrh,fsr0h
  1756  0010C8  50EF               	movf	indf0,w,c
  1757  0010CA                     u1070:
  1758  0010CA  0A20               	xorlw	32
  1759  0010CC  B4D8               	btfsc	status,2,c
  1760  0010CE  D7E9               	goto	l1682
  1761  0010D0  C0AB  FFF6         	movff	atoi@s,tblptrl
  1762  0010D4  C0AC  FFF7         	movff	atoi@s+1,tblptrh
  1763  0010D8  0E00               	movlw	low (__smallconst shr (0+16))
  1764  0010DA  6EF8               	movwf	tblptru,c
  1765  0010DC  0E0E               	movlw	(high __ramtop+-1)
  1766  0010DE  64F7               	cpfsgt	tblptrh,c
  1767  0010E0  D003               	bra	u1097
  1768  0010E2  0008               	tblrd		*
  1769  0010E4  50F5               	movf	tablat,w,c
  1770  0010E6  D005               	bra	u1090
  1771  0010E8                     u1097:
  1772  0010E8  CFF6 FFE9          	movff	tblptrl,fsr0l
  1773  0010EC  CFF7 FFEA          	movff	tblptrh,fsr0h
  1774  0010F0  50EF               	movf	indf0,w,c
  1775  0010F2                     u1090:
  1776  0010F2  0A09               	xorlw	9
  1777  0010F4  B4D8               	btfsc	status,2,c
  1778  0010F6  D7D5               	goto	l1682
  1779  0010F8  0E00               	movlw	0
  1780  0010FA  0100               	movlb	0	; () banked
  1781  0010FC  6FB1               	movwf	(atoi@a+1)& (0+255),b
  1782  0010FE  0E00               	movlw	0
  1783  001100  6FB0               	movwf	atoi@a& (0+255),b
  1784  001102  0E00               	movlw	0
  1785  001104  0100               	movlb	0	; () banked
  1786  001106  6FAF               	movwf	atoi@sign& (0+255),b
  1787                           
  1788                           ; BSR set to: 0
  1789  001108  C0AB  FFF6         	movff	atoi@s,tblptrl
  1790  00110C  C0AC  FFF7         	movff	atoi@s+1,tblptrh
  1791  001110  0E00               	movlw	low (__smallconst shr (0+16))
  1792  001112  6EF8               	movwf	tblptru,c
  1793  001114  0E0E               	movlw	(high __ramtop+-1)
  1794  001116  64F7               	cpfsgt	tblptrh,c
  1795  001118  D003               	bra	u1117
  1796  00111A  0008               	tblrd		*
  1797  00111C  50F5               	movf	tablat,w,c
  1798  00111E  D005               	bra	u1110
  1799  001120                     u1117:
  1800  001120  CFF6 FFE9          	movff	tblptrl,fsr0l
  1801  001124  CFF7 FFEA          	movff	tblptrh,fsr0h
  1802  001128  50EF               	movf	indf0,w,c
  1803  00112A                     u1110:
  1804  00112A  0A2D               	xorlw	45
  1805  00112C  A4D8               	btfss	status,2,c
  1806  00112E  D003               	goto	l1694
  1807  001130  0100               	movlb	0	; () banked
  1808  001132  2BAF               	incf	atoi@sign& (0+255),f,b
  1809  001134  D043               	goto	l1700
  1810  001136                     l1694:
  1811  001136  C0AB  FFF6         	movff	atoi@s,tblptrl
  1812  00113A  C0AC  FFF7         	movff	atoi@s+1,tblptrh
  1813  00113E  0E00               	movlw	low (__smallconst shr (0+16))
  1814  001140  6EF8               	movwf	tblptru,c
  1815  001142  0E0E               	movlw	(high __ramtop+-1)
  1816  001144  64F7               	cpfsgt	tblptrh,c
  1817  001146  D003               	bra	u1137
  1818  001148  0008               	tblrd		*
  1819  00114A  50F5               	movf	tablat,w,c
  1820  00114C  D005               	bra	u1130
  1821  00114E                     u1137:
  1822  00114E  CFF6 FFE9          	movff	tblptrl,fsr0l
  1823  001152  CFF7 FFEA          	movff	tblptrh,fsr0h
  1824  001156  50EF               	movf	indf0,w,c
  1825  001158                     u1130:
  1826  001158  0A2B               	xorlw	43
  1827  00115A  A4D8               	btfss	status,2,c
  1828  00115C  D032               	goto	l1702
  1829  00115E  D02E               	goto	l1700
  1830  001160                     l1698:
  1831  001160  C0B0  F022         	movff	atoi@a,___wmul@multiplier
  1832  001164  C0B1  F023         	movff	atoi@a+1,___wmul@multiplier+1
  1833  001168  0E00               	movlw	0
  1834  00116A  6E25               	movwf	___wmul@multiplicand+1,c
  1835  00116C  0E0A               	movlw	10
  1836  00116E  6E24               	movwf	___wmul@multiplicand,c
  1837  001170  EC90  F00B         	call	___wmul	;wreg free
  1838  001174  C0AB  FFF6         	movff	atoi@s,tblptrl
  1839  001178  C0AC  FFF7         	movff	atoi@s+1,tblptrh
  1840  00117C  0E00               	movlw	low (__smallconst shr (0+16))
  1841  00117E  6EF8               	movwf	tblptru,c
  1842  001180  0E0E               	movlw	(high __ramtop+-1)
  1843  001182  64F7               	cpfsgt	tblptrh,c
  1844  001184  D003               	bra	u1157
  1845  001186  0008               	tblrd		*
  1846  001188  50F5               	movf	tablat,w,c
  1847  00118A  D005               	bra	u1150
  1848  00118C                     u1157:
  1849  00118C  CFF6 FFE9          	movff	tblptrl,fsr0l
  1850  001190  CFF7 FFEA          	movff	tblptrh,fsr0h
  1851  001194  50EF               	movf	indf0,w,c
  1852  001196                     u1150:
  1853  001196  0100               	movlb	0	; () banked
  1854  001198  6FAD               	movwf	??_atoi& (0+255),b
  1855  00119A  6BAE               	clrf	(??_atoi+1)& (0+255),b
  1856  00119C  5022               	movf	?___wmul,w,c
  1857  00119E  0100               	movlb	0	; () banked
  1858  0011A0  27AD               	addwf	??_atoi& (0+255),f,b
  1859  0011A2  5023               	movf	?___wmul+1,w,c
  1860  0011A4  0100               	movlb	0	; () banked
  1861  0011A6  23AE               	addwfc	(??_atoi+1)& (0+255),f,b
  1862  0011A8  0ED0               	movlw	208
  1863  0011AA  0100               	movlb	0	; () banked
  1864  0011AC  25AD               	addwf	??_atoi& (0+255),w,b
  1865  0011AE  0100               	movlb	0	; () banked
  1866  0011B0  6FB0               	movwf	atoi@a& (0+255),b
  1867  0011B2  0EFF               	movlw	255
  1868  0011B4  0100               	movlb	0	; () banked
  1869  0011B6  21AE               	addwfc	(??_atoi+1)& (0+255),w,b
  1870  0011B8  0100               	movlb	0	; () banked
  1871  0011BA  6FB1               	movwf	(atoi@a+1)& (0+255),b
  1872  0011BC                     l1700:
  1873                           
  1874                           ; BSR set to: 0
  1875  0011BC  0100               	movlb	0	; () banked
  1876  0011BE  4BAB               	infsnz	atoi@s& (0+255),f,b
  1877  0011C0  2BAC               	incf	(atoi@s+1)& (0+255),f,b
  1878  0011C2                     l1702:
  1879  0011C2  C0AB  FFF6         	movff	atoi@s,tblptrl
  1880  0011C6  C0AC  FFF7         	movff	atoi@s+1,tblptrh
  1881  0011CA  0E00               	movlw	low (__smallconst shr (0+16))
  1882  0011CC  6EF8               	movwf	tblptru,c
  1883  0011CE  0E0E               	movlw	(high __ramtop+-1)
  1884  0011D0  64F7               	cpfsgt	tblptrh,c
  1885  0011D2  D003               	bra	u1167
  1886  0011D4  0008               	tblrd		*
  1887  0011D6  50F5               	movf	tablat,w,c
  1888  0011D8  D005               	bra	u1160
  1889  0011DA                     u1167:
  1890  0011DA  CFF6 FFE9          	movff	tblptrl,fsr0l
  1891  0011DE  CFF7 FFEA          	movff	tblptrh,fsr0h
  1892  0011E2  50EF               	movf	indf0,w,c
  1893  0011E4                     u1160:
  1894  0011E4  ECB8  F00B         	call	_isdigit
  1895  0011E8  B0D8               	btfsc	status,0,c
  1896  0011EA  D7BA               	goto	l1698
  1897  0011EC  0100               	movlb	0	; () banked
  1898  0011EE  51AF               	movf	atoi@sign& (0+255),w,b
  1899  0011F0  0100               	movlb	0	; () banked
  1900  0011F2  B4D8               	btfsc	status,2,c
  1901  0011F4  D00E               	goto	l425
  1902                           
  1903                           ; BSR set to: 0
  1904  0011F6  C0B0  F0AD         	movff	atoi@a,??_atoi
  1905  0011FA  C0B1  F0AE         	movff	atoi@a+1,??_atoi+1
  1906  0011FE  0100               	movlb	0	; () banked
  1907  001200  1FAD               	comf	??_atoi& (0+255),f,b
  1908  001202  1FAE               	comf	(??_atoi+1)& (0+255),f,b
  1909  001204  4BAD               	infsnz	??_atoi& (0+255),f,b
  1910  001206  2BAE               	incf	(??_atoi+1)& (0+255),f,b
  1911  001208  C0AD  F0AB         	movff	??_atoi,?_atoi
  1912  00120C  C0AE  F0AC         	movff	??_atoi+1,?_atoi+1
  1913  001210  0012               	return	
  1914  001212                     l425:
  1915                           
  1916                           ; BSR set to: 0
  1917  001212  C0B0  F0AB         	movff	atoi@a,?_atoi
  1918  001216  C0B1  F0AC         	movff	atoi@a+1,?_atoi+1
  1919                           
  1920                           ; BSR set to: 0
  1921  00121A  0012               	return		;funcret
  1922  00121C                     __end_of_atoi:
  1923                           	opt stack 0
  1924                           tblptru	equ	0xFF8
  1925                           tblptrh	equ	0xFF7
  1926                           tblptrl	equ	0xFF6
  1927                           tablat	equ	0xFF5
  1928                           indf0	equ	0xFEF
  1929                           postinc0	equ	0xFEE
  1930                           fsr0h	equ	0xFEA
  1931                           fsr0l	equ	0xFE9
  1932                           wreg	equ	0xFE8
  1933                           indf1	equ	0xFE7
  1934                           fsr1h	equ	0xFE2
  1935                           fsr1l	equ	0xFE1
  1936                           indf2	equ	0xFDF
  1937                           postinc2	equ	0xFDE
  1938                           fsr2h	equ	0xFDA
  1939                           fsr2l	equ	0xFD9
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _isdigit *****************
  1943 ;; Defined at:
  1944 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  c               1    wreg     unsigned char 
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;  c               1   35[COMRAM] unsigned char 
  1949 ;; Return value:  Size  Location     Type
  1950 ;;		None               void
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, status,0
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1959 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1960 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1961 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1962 ;;Total ram usage:        3 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    3
  1965 ;; This function calls:
  1966 ;;		Nothing
  1967 ;; This function is called by:
  1968 ;;		_atoi
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text10
  1973  001770                     __ptext10:
  1974                           	opt stack 0
  1975  001770                     _isdigit:
  1976                           	opt stack 25
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;incstack = 0
  1980                           ;isdigit@c stored from wreg
  1981  001770  6E24               	movwf	isdigit@c,c
  1982  001772  0E00               	movlw	0
  1983  001774  6E23               	movwf	_isdigit$959,c
  1984  001776  0E3A               	movlw	58
  1985  001778  6024               	cpfslt	isdigit@c,c
  1986  00177A  D005               	goto	l1642
  1987  00177C  0E2F               	movlw	47
  1988  00177E  6424               	cpfsgt	isdigit@c,c
  1989  001780  D002               	goto	l1642
  1990  001782  0E01               	movlw	1
  1991  001784  6E23               	movwf	_isdigit$959,c
  1992  001786                     l1642:
  1993  001786  C023  F022         	movff	_isdigit$959,??_isdigit
  1994  00178A  3022               	rrcf	??_isdigit,w,c
  1995  00178C  0012               	return	
  1996  00178E                     __end_of_isdigit:
  1997                           	opt stack 0
  1998                           tblptru	equ	0xFF8
  1999                           tblptrh	equ	0xFF7
  2000                           tblptrl	equ	0xFF6
  2001                           tablat	equ	0xFF5
  2002                           indf0	equ	0xFEF
  2003                           postinc0	equ	0xFEE
  2004                           fsr0h	equ	0xFEA
  2005                           fsr0l	equ	0xFE9
  2006                           wreg	equ	0xFE8
  2007                           indf1	equ	0xFE7
  2008                           fsr1h	equ	0xFE2
  2009                           fsr1l	equ	0xFE1
  2010                           indf2	equ	0xFDF
  2011                           postinc2	equ	0xFDE
  2012                           fsr2h	equ	0xFDA
  2013                           fsr2l	equ	0xFD9
  2014                           status	equ	0xFD8
  2015                           
  2016 ;; *************** function ___wmul *****************
  2017 ;; Defined at:
  2018 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;  multiplier      2   33[COMRAM] unsigned int 
  2021 ;;  multiplicand    2   35[COMRAM] unsigned int 
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;  product         2    0[BANK0 ] unsigned int 
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  2   33[COMRAM] unsigned int 
  2026 ;; Registers used:
  2027 ;;		wreg, status,2, status,0, prodl, prodh
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2033 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2034 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2036 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2037 ;;Total ram usage:        6 bytes
  2038 ;; Hardware stack levels used:    1
  2039 ;; Hardware stack levels required when called:    3
  2040 ;; This function calls:
  2041 ;;		Nothing
  2042 ;; This function is called by:
  2043 ;;		_atoi
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046                           
  2047                           	psect	text11
  2048  001720                     __ptext11:
  2049                           	opt stack 0
  2050  001720                     ___wmul:
  2051                           	opt stack 25
  2052                           
  2053                           ;incstack = 0
  2054  001720  5022               	movf	___wmul@multiplier,w,c
  2055  001722  0224               	mulwf	___wmul@multiplicand,c
  2056  001724  CFF3 F0A9          	movff	prodl,___wmul@product
  2057  001728  CFF4 F0AA          	movff	prodh,___wmul@product+1
  2058  00172C  5022               	movf	___wmul@multiplier,w,c
  2059  00172E  0225               	mulwf	___wmul@multiplicand+1,c
  2060  001730  50F3               	movf	prodl,w,c
  2061  001732  0100               	movlb	0	; () banked
  2062  001734  27AA               	addwf	(___wmul@product+1)& (0+255),f,b
  2063  001736  5023               	movf	___wmul@multiplier+1,w,c
  2064  001738  0224               	mulwf	___wmul@multiplicand,c
  2065  00173A  50F3               	movf	prodl,w,c
  2066  00173C  0100               	movlb	0	; () banked
  2067  00173E  27AA               	addwf	(___wmul@product+1)& (0+255),f,b
  2068                           
  2069                           ; BSR set to: 0
  2070  001740  C0A9  F022         	movff	___wmul@product,?___wmul
  2071  001744  C0AA  F023         	movff	___wmul@product+1,?___wmul+1
  2072  001748  0012               	return	
  2073  00174A                     __end_of___wmul:
  2074                           	opt stack 0
  2075                           tblptru	equ	0xFF8
  2076                           tblptrh	equ	0xFF7
  2077                           tblptrl	equ	0xFF6
  2078                           tablat	equ	0xFF5
  2079                           prodh	equ	0xFF4
  2080                           prodl	equ	0xFF3
  2081                           indf0	equ	0xFEF
  2082                           postinc0	equ	0xFEE
  2083                           fsr0h	equ	0xFEA
  2084                           fsr0l	equ	0xFE9
  2085                           wreg	equ	0xFE8
  2086                           indf1	equ	0xFE7
  2087                           fsr1h	equ	0xFE2
  2088                           fsr1l	equ	0xFE1
  2089                           indf2	equ	0xFDF
  2090                           postinc2	equ	0xFDE
  2091                           fsr2h	equ	0xFDA
  2092                           fsr2l	equ	0xFD9
  2093                           status	equ	0xFD8
  2094                           
  2095 ;; *************** function _isValid *****************
  2096 ;; Defined at:
  2097 ;;		line 70 in file "bufferhandler.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;		None
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;		None
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  1    wreg      unsigned char 
  2104 ;; Registers used:
  2105 ;;		wreg, status,2, status,0
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2115 ;;Total ram usage:        0 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; Hardware stack levels required when called:    3
  2118 ;; This function calls:
  2119 ;;		Nothing
  2120 ;; This function is called by:
  2121 ;;		_main
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           	psect	text12
  2126  001686                     __ptext12:
  2127                           	opt stack 0
  2128  001686                     _isValid:
  2129                           	opt stack 27
  2130                           
  2131                           ;bufferhandler.c: 71: if(tmpString[0] == 0x54 &&
  2132                           ;bufferhandler.c: 72: tmpString[1] == 0x59 &&
  2133                           ;bufferhandler.c: 73: tmpString[2] == 0x52 &&
  2134                           ;bufferhandler.c: 74: tmpString[3] == 0x49 &&
  2135                           ;bufferhandler.c: 75: tmpString[4] == 0x5F){
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;incstack = 0
  2139  001686  0E54               	movlw	84
  2140  001688  0100               	movlb	0	; () banked
  2141  00168A  1963               	xorwf	_tmpString& (0+255),w,b
  2142  00168C  A4D8               	btfss	status,2,c
  2143  00168E  D016               	goto	l1786
  2144                           
  2145                           ; BSR set to: 0
  2146  001690  0E59               	movlw	89
  2147  001692  0100               	movlb	0	; () banked
  2148  001694  1964               	xorwf	(_tmpString+1)& (0+255),w,b
  2149  001696  A4D8               	btfss	status,2,c
  2150  001698  D011               	goto	l1786
  2151                           
  2152                           ; BSR set to: 0
  2153  00169A  0E52               	movlw	82
  2154  00169C  0100               	movlb	0	; () banked
  2155  00169E  1965               	xorwf	(_tmpString+2)& (0+255),w,b
  2156  0016A0  A4D8               	btfss	status,2,c
  2157  0016A2  D00C               	goto	l1786
  2158                           
  2159                           ; BSR set to: 0
  2160  0016A4  0E49               	movlw	73
  2161  0016A6  0100               	movlb	0	; () banked
  2162  0016A8  1966               	xorwf	(_tmpString+3)& (0+255),w,b
  2163  0016AA  A4D8               	btfss	status,2,c
  2164  0016AC  D007               	goto	l1786
  2165                           
  2166                           ; BSR set to: 0
  2167  0016AE  0E5F               	movlw	95
  2168  0016B0  0100               	movlb	0	; () banked
  2169  0016B2  1967               	xorwf	(_tmpString+4)& (0+255),w,b
  2170  0016B4  A4D8               	btfss	status,2,c
  2171  0016B6  D002               	goto	l1786
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;bufferhandler.c: 76: return 1;
  2175  0016B8  0E01               	movlw	1
  2176                           
  2177                           ; BSR set to: 0
  2178  0016BA  0012               	return	
  2179  0016BC                     l1786:
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;bufferhandler.c: 77: }
  2183                           ;bufferhandler.c: 78: return 0;
  2184  0016BC  0E00               	movlw	0
  2185  0016BE  0012               	return	
  2186  0016C0                     __end_of_isValid:
  2187                           	opt stack 0
  2188                           tblptru	equ	0xFF8
  2189                           tblptrh	equ	0xFF7
  2190                           tblptrl	equ	0xFF6
  2191                           tablat	equ	0xFF5
  2192                           prodh	equ	0xFF4
  2193                           prodl	equ	0xFF3
  2194                           indf0	equ	0xFEF
  2195                           postinc0	equ	0xFEE
  2196                           fsr0h	equ	0xFEA
  2197                           fsr0l	equ	0xFE9
  2198                           wreg	equ	0xFE8
  2199                           indf1	equ	0xFE7
  2200                           fsr1h	equ	0xFE2
  2201                           fsr1l	equ	0xFE1
  2202                           indf2	equ	0xFDF
  2203                           postinc2	equ	0xFDE
  2204                           fsr2h	equ	0xFDA
  2205                           fsr2l	equ	0xFD9
  2206                           status	equ	0xFD8
  2207                           
  2208 ;; *************** function _isItLongEnough *****************
  2209 ;; Defined at:
  2210 ;;		line 33 in file "bufferhandler.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;		None
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;		None
  2215 ;; Return value:  Size  Location     Type
  2216 ;;                  1    wreg      unsigned char 
  2217 ;; Registers used:
  2218 ;;		wreg, status,2, status,0
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2228 ;;Total ram usage:        0 bytes
  2229 ;; Hardware stack levels used:    1
  2230 ;; Hardware stack levels required when called:    3
  2231 ;; This function calls:
  2232 ;;		Nothing
  2233 ;; This function is called by:
  2234 ;;		_main
  2235 ;; This function uses a non-reentrant model
  2236 ;;
  2237                           
  2238                           	psect	text13
  2239  0017E0                     __ptext13:
  2240                           	opt stack 0
  2241  0017E0                     _isItLongEnough:
  2242                           	opt stack 27
  2243                           
  2244                           ;bufferhandler.c: 35: if(index == 64){
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;incstack = 0
  2248  0017E0  0E40               	movlw	64
  2249  0017E2  182B               	xorwf	_index,w,c
  2250  0017E4  102C               	iorwf	_index+1,w,c
  2251  0017E6  A4D8               	btfss	status,2,c
  2252  0017E8  D002               	goto	l1768
  2253                           
  2254                           ;bufferhandler.c: 36: return 1;
  2255  0017EA  0E01               	movlw	1
  2256                           
  2257                           ;bufferhandler.c: 37: }else{
  2258  0017EC  0012               	return	
  2259  0017EE                     l1768:
  2260                           
  2261                           ;bufferhandler.c: 38: return 0;
  2262  0017EE  0E00               	movlw	0
  2263  0017F0  0012               	return	
  2264  0017F2                     __end_of_isItLongEnough:
  2265                           	opt stack 0
  2266                           tblptru	equ	0xFF8
  2267                           tblptrh	equ	0xFF7
  2268                           tblptrl	equ	0xFF6
  2269                           tablat	equ	0xFF5
  2270                           prodh	equ	0xFF4
  2271                           prodl	equ	0xFF3
  2272                           indf0	equ	0xFEF
  2273                           postinc0	equ	0xFEE
  2274                           fsr0h	equ	0xFEA
  2275                           fsr0l	equ	0xFE9
  2276                           wreg	equ	0xFE8
  2277                           indf1	equ	0xFE7
  2278                           fsr1h	equ	0xFE2
  2279                           fsr1l	equ	0xFE1
  2280                           indf2	equ	0xFDF
  2281                           postinc2	equ	0xFDE
  2282                           fsr2h	equ	0xFDA
  2283                           fsr2l	equ	0xFD9
  2284                           status	equ	0xFD8
  2285                           
  2286 ;; *************** function _copyTmpBuffer *****************
  2287 ;; Defined at:
  2288 ;;		line 50 in file "bufferhandler.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;		None
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;  i               2   34[COMRAM] int 
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2303 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2304 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2305 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2306 ;;Total ram usage:        3 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    3
  2309 ;; This function calls:
  2310 ;;		Nothing
  2311 ;; This function is called by:
  2312 ;;		_main
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text14
  2317  001646                     __ptext14:
  2318                           	opt stack 0
  2319  001646                     _copyTmpBuffer:
  2320                           	opt stack 27
  2321                           
  2322                           ;bufferhandler.c: 51: for(int i = 0; i<index; i++){
  2323                           
  2324                           ;incstack = 0
  2325  001646  0E00               	movlw	0
  2326  001648  6E24               	movwf	copyTmpBuffer@i+1,c
  2327  00164A  0E00               	movlw	0
  2328  00164C  6E23               	movwf	copyTmpBuffer@i,c
  2329  00164E  D010               	goto	l1796
  2330  001650                     l1792:
  2331                           
  2332                           ;bufferhandler.c: 52: allDataString[i] = tmpString[i];
  2333  001650  0E63               	movlw	low _tmpString
  2334  001652  2423               	addwf	copyTmpBuffer@i,w,c
  2335  001654  6ED9               	movwf	fsr2l,c
  2336  001656  0E00               	movlw	high _tmpString
  2337  001658  2024               	addwfc	copyTmpBuffer@i+1,w,c
  2338  00165A  6EDA               	movwf	fsr2h,c
  2339  00165C  0E00               	movlw	low _allDataString
  2340  00165E  2423               	addwf	copyTmpBuffer@i,w,c
  2341  001660  6EE1               	movwf	fsr1l,c
  2342  001662  0E01               	movlw	high _allDataString
  2343  001664  2024               	addwfc	copyTmpBuffer@i+1,w,c
  2344  001666  6EE2               	movwf	fsr1h,c
  2345  001668  CFDF FFE7          	movff	indf2,indf1
  2346  00166C  4A23               	infsnz	copyTmpBuffer@i,f,c
  2347  00166E  2A24               	incf	copyTmpBuffer@i+1,f,c
  2348  001670                     l1796:
  2349  001670  502B               	movf	_index,w,c
  2350  001672  5C23               	subwf	copyTmpBuffer@i,w,c
  2351  001674  5024               	movf	copyTmpBuffer@i+1,w,c
  2352  001676  0A80               	xorlw	128
  2353  001678  6E22               	movwf	??_copyTmpBuffer& (0+255),c
  2354  00167A  502C               	movf	_index+1,w,c
  2355  00167C  0A80               	xorlw	128
  2356  00167E  5822               	subwfb	??_copyTmpBuffer& (0+255),w,c
  2357  001680  B0D8               	btfsc	status,0,c
  2358  001682  0012               	return	
  2359  001684  D7E5               	goto	l1792
  2360  001686                     __end_of_copyTmpBuffer:
  2361                           	opt stack 0
  2362                           tblptru	equ	0xFF8
  2363                           tblptrh	equ	0xFF7
  2364                           tblptrl	equ	0xFF6
  2365                           tablat	equ	0xFF5
  2366                           prodh	equ	0xFF4
  2367                           prodl	equ	0xFF3
  2368                           indf0	equ	0xFEF
  2369                           postinc0	equ	0xFEE
  2370                           fsr0h	equ	0xFEA
  2371                           fsr0l	equ	0xFE9
  2372                           wreg	equ	0xFE8
  2373                           indf1	equ	0xFE7
  2374                           fsr1h	equ	0xFE2
  2375                           fsr1l	equ	0xFE1
  2376                           indf2	equ	0xFDF
  2377                           postinc2	equ	0xFDE
  2378                           fsr2h	equ	0xFDA
  2379                           fsr2l	equ	0xFD9
  2380                           status	equ	0xFD8
  2381                           
  2382 ;; *************** function _clearBuffer *****************
  2383 ;; Defined at:
  2384 ;;		line 42 in file "bufferhandler.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;  i               2    2[BANK0 ] int 
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  1    wreg      void 
  2391 ;; Registers used:
  2392 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2399 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2401 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2402 ;;Total ram usage:        2 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:    4
  2405 ;; This function calls:
  2406 ;;		_strlen
  2407 ;; This function is called by:
  2408 ;;		_main
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           	psect	text15
  2413  0015F4                     __ptext15:
  2414                           	opt stack 0
  2415  0015F4                     _clearBuffer:
  2416                           	opt stack 26
  2417                           
  2418                           ;bufferhandler.c: 43: for(int i = 0; i<strlen(tmpString); i++){
  2419                           
  2420                           ;incstack = 0
  2421  0015F4  0E00               	movlw	0
  2422  0015F6  0100               	movlb	0	; () banked
  2423  0015F8  6FAC               	movwf	(clearBuffer@i+1)& (0+255),b
  2424  0015FA  0E00               	movlw	0
  2425  0015FC  6FAB               	movwf	clearBuffer@i& (0+255),b
  2426  0015FE  D00D               	goto	l1756
  2427  001600                     l1752:
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;bufferhandler.c: 44: tmpString[i] = "";
  2431  001600  0E63               	movlw	low _tmpString
  2432  001602  0100               	movlb	0	; () banked
  2433  001604  25AB               	addwf	clearBuffer@i& (0+255),w,b
  2434  001606  6ED9               	movwf	fsr2l,c
  2435  001608  0E00               	movlw	high _tmpString
  2436  00160A  0100               	movlb	0	; () banked
  2437  00160C  21AC               	addwfc	(clearBuffer@i+1)& (0+255),w,b
  2438  00160E  6EDA               	movwf	fsr2h,c
  2439  001610  0E05               	movlw	low (STR_1+4)
  2440  001612  6EDF               	movwf	indf2,c
  2441                           
  2442                           ; BSR set to: 0
  2443  001614  0100               	movlb	0	; () banked
  2444  001616  4BAB               	infsnz	clearBuffer@i& (0+255),f,b
  2445  001618  2BAC               	incf	(clearBuffer@i+1)& (0+255),f,b
  2446  00161A                     l1756:
  2447                           
  2448                           ; BSR set to: 0
  2449  00161A  0E63               	movlw	low _tmpString
  2450  00161C  6E22               	movwf	strlen@s,c
  2451  00161E  0E00               	movlw	high _tmpString
  2452  001620  6E23               	movwf	strlen@s+1,c
  2453  001622  ECCD  F00A         	call	_strlen	;wreg free
  2454  001626  5022               	movf	?_strlen,w,c
  2455  001628  0100               	movlb	0	; () banked
  2456  00162A  5DAB               	subwf	clearBuffer@i& (0+255),w,b
  2457  00162C  5023               	movf	?_strlen+1,w,c
  2458  00162E  0100               	movlb	0	; () banked
  2459  001630  59AC               	subwfb	(clearBuffer@i+1)& (0+255),w,b
  2460  001632  A0D8               	btfss	status,0,c
  2461  001634  D7E5               	goto	l1752
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;bufferhandler.c: 45: }
  2465                           ;bufferhandler.c: 46: tmpString[0] = '\0';
  2466                           
  2467                           ; BSR set to: 0
  2468  001636  0E00               	movlw	0
  2469  001638  0100               	movlb	0	; () banked
  2470  00163A  6F63               	movwf	_tmpString& (0+255),b
  2471                           
  2472                           ;bufferhandler.c: 47: index = 0;
  2473  00163C  0E00               	movlw	0
  2474  00163E  6E2C               	movwf	_index+1,c
  2475  001640  0E00               	movlw	0
  2476  001642  6E2B               	movwf	_index,c
  2477                           
  2478                           ; BSR set to: 0
  2479  001644  0012               	return		;funcret
  2480  001646                     __end_of_clearBuffer:
  2481                           	opt stack 0
  2482                           tblptru	equ	0xFF8
  2483                           tblptrh	equ	0xFF7
  2484                           tblptrl	equ	0xFF6
  2485                           tablat	equ	0xFF5
  2486                           prodh	equ	0xFF4
  2487                           prodl	equ	0xFF3
  2488                           indf0	equ	0xFEF
  2489                           postinc0	equ	0xFEE
  2490                           fsr0h	equ	0xFEA
  2491                           fsr0l	equ	0xFE9
  2492                           wreg	equ	0xFE8
  2493                           indf1	equ	0xFE7
  2494                           fsr1h	equ	0xFE2
  2495                           fsr1l	equ	0xFE1
  2496                           indf2	equ	0xFDF
  2497                           postinc2	equ	0xFDE
  2498                           fsr2h	equ	0xFDA
  2499                           fsr2l	equ	0xFD9
  2500                           status	equ	0xFD8
  2501                           
  2502 ;; *************** function _strlen *****************
  2503 ;; Defined at:
  2504 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;  s               2   33[COMRAM] PTR const unsigned char 
  2507 ;;		 -> parsedString(17), tmpString(70), STR_2(4), STR_1(5), 
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;  cp              2    0[BANK0 ] PTR const unsigned char 
  2510 ;;		 -> parsedString(17), tmpString(70), STR_2(4), STR_1(5), 
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  2   33[COMRAM] unsigned int 
  2513 ;; Registers used:
  2514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2520 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2521 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2522 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2523 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2524 ;;Total ram usage:        6 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; Hardware stack levels required when called:    3
  2527 ;; This function calls:
  2528 ;;		Nothing
  2529 ;; This function is called by:
  2530 ;;		_writeString
  2531 ;;		_clearBuffer
  2532 ;; This function uses a non-reentrant model
  2533 ;;
  2534                           
  2535                           	psect	text16
  2536  00159A                     __ptext16:
  2537                           	opt stack 0
  2538  00159A                     _strlen:
  2539                           	opt stack 26
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;incstack = 0
  2543  00159A  C022  F0A9         	movff	strlen@s,strlen@cp
  2544  00159E  C023  F0AA         	movff	strlen@s+1,strlen@cp+1
  2545  0015A2  D003               	goto	l1612
  2546  0015A4                     l1610:
  2547  0015A4  0100               	movlb	0	; () banked
  2548  0015A6  4BA9               	infsnz	strlen@cp& (0+255),f,b
  2549  0015A8  2BAA               	incf	(strlen@cp+1)& (0+255),f,b
  2550  0015AA                     l1612:
  2551  0015AA  C0A9  FFF6         	movff	strlen@cp,tblptrl
  2552  0015AE  C0AA  FFF7         	movff	strlen@cp+1,tblptrh
  2553  0015B2  0E00               	movlw	low (__smallconst shr (0+16))
  2554  0015B4  6EF8               	movwf	tblptru,c
  2555  0015B6  0E0E               	movlw	(high __ramtop+-1)
  2556  0015B8  64F7               	cpfsgt	tblptrh,c
  2557  0015BA  D003               	bra	u987
  2558  0015BC  0008               	tblrd		*
  2559  0015BE  50F5               	movf	tablat,w,c
  2560  0015C0  D005               	bra	u980
  2561  0015C2                     u987:
  2562  0015C2  CFF6 FFE9          	movff	tblptrl,fsr0l
  2563  0015C6  CFF7 FFEA          	movff	tblptrh,fsr0h
  2564  0015CA  50EF               	movf	indf0,w,c
  2565  0015CC                     u980:
  2566  0015CC  0900               	iorlw	0
  2567  0015CE  A4D8               	btfss	status,2,c
  2568  0015D0  D7E9               	goto	l1610
  2569  0015D2  C022  F024         	movff	strlen@s,??_strlen
  2570  0015D6  C023  F025         	movff	strlen@s+1,??_strlen+1
  2571  0015DA  1E24               	comf	??_strlen,f,c
  2572  0015DC  1E25               	comf	??_strlen+1,f,c
  2573  0015DE  4A24               	infsnz	??_strlen,f,c
  2574  0015E0  2A25               	incf	??_strlen+1,f,c
  2575  0015E2  0100               	movlb	0	; () banked
  2576  0015E4  51A9               	movf	strlen@cp& (0+255),w,b
  2577  0015E6  2424               	addwf	??_strlen,w,c
  2578  0015E8  6E22               	movwf	?_strlen,c
  2579  0015EA  0100               	movlb	0	; () banked
  2580  0015EC  51AA               	movf	(strlen@cp+1)& (0+255),w,b
  2581  0015EE  2025               	addwfc	??_strlen+1,w,c
  2582  0015F0  6E23               	movwf	?_strlen+1,c
  2583  0015F2  0012               	return	
  2584  0015F4                     __end_of_strlen:
  2585                           	opt stack 0
  2586                           tblptru	equ	0xFF8
  2587                           tblptrh	equ	0xFF7
  2588                           tblptrl	equ	0xFF6
  2589                           tablat	equ	0xFF5
  2590                           prodh	equ	0xFF4
  2591                           prodl	equ	0xFF3
  2592                           indf0	equ	0xFEF
  2593                           postinc0	equ	0xFEE
  2594                           fsr0h	equ	0xFEA
  2595                           fsr0l	equ	0xFE9
  2596                           wreg	equ	0xFE8
  2597                           indf1	equ	0xFE7
  2598                           fsr1h	equ	0xFE2
  2599                           fsr1l	equ	0xFE1
  2600                           indf2	equ	0xFDF
  2601                           postinc2	equ	0xFDE
  2602                           fsr2h	equ	0xFDA
  2603                           fsr2l	equ	0xFD9
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _UART_Init *****************
  2607 ;; Defined at:
  2608 ;;		line 31 in file "uart.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;  baudrate        4   33[COMRAM] const long 
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      unsigned char 
  2615 ;; Registers used:
  2616 ;;		wreg, status,2
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2622 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2625 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2626 ;;Total ram usage:        4 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    3
  2629 ;; This function calls:
  2630 ;;		Nothing
  2631 ;; This function is called by:
  2632 ;;		_main
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text17
  2637  0016C0                     __ptext17:
  2638                           	opt stack 0
  2639  0016C0                     _UART_Init:
  2640                           	opt stack 27
  2641                           
  2642                           ;uart.c: 35: TXSTA1 = 0x24;
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;incstack = 0
  2646  0016C0  0E24               	movlw	36
  2647  0016C2  6EAD               	movwf	4013,c	;volatile
  2648                           
  2649                           ;uart.c: 36: RCSTA1 = 0x90;
  2650  0016C4  0E90               	movlw	144
  2651  0016C6  6EAC               	movwf	4012,c	;volatile
  2652                           
  2653                           ;uart.c: 37: RC1IE = 1;
  2654  0016C8  8A9D               	bsf	3997,5,c	;volatile
  2655                           
  2656                           ;uart.c: 38: BAUDCON1bits.BRG16 = 0;
  2657  0016CA  967E               	bcf	3966,3,c	;volatile
  2658                           
  2659                           ;uart.c: 39: SPBRG1 = 155;
  2660  0016CC  0E9B               	movlw	155
  2661  0016CE  6EB0               	movwf	4016,c	;volatile
  2662                           
  2663                           ;uart.c: 40: SPBRGH1 = 155;
  2664  0016D0  0E9B               	movlw	155
  2665  0016D2  6E7F               	movwf	3967,c	;volatile
  2666                           
  2667                           ;uart.c: 41: TRISC7 = 1;
  2668  0016D4  8E94               	bsf	3988,7,c	;volatile
  2669                           
  2670                           ;uart.c: 42: TRISC6 = 0;
  2671  0016D6  9C94               	bcf	3988,6,c	;volatile
  2672                           
  2673                           ;uart.c: 46: RCSTA2 = 0b10010000;
  2674  0016D8  0E90               	movlw	144
  2675  0016DA  6E9C               	movwf	3996,c	;volatile
  2676                           
  2677                           ;uart.c: 47: TXSTA2 = 0b00100100;
  2678  0016DC  0E24               	movlw	36
  2679  0016DE  6EA8               	movwf	4008,c	;volatile
  2680                           
  2681                           ;uart.c: 48: RC2IE = 1;
  2682  0016E0  8AA3               	bsf	4003,5,c	;volatile
  2683                           
  2684                           ;uart.c: 49: BAUDCON2bits.BRG16 = 0;
  2685  0016E2  967C               	bcf	3964,3,c	;volatile
  2686                           
  2687                           ;uart.c: 50: SPBRG2 = 25;
  2688  0016E4  0E19               	movlw	25
  2689  0016E6  6EAB               	movwf	4011,c	;volatile
  2690                           
  2691                           ;uart.c: 51: SPBRGH2 = 25;
  2692  0016E8  0E19               	movlw	25
  2693  0016EA  6E7D               	movwf	3965,c	;volatile
  2694                           
  2695                           ;uart.c: 52: TRISB4 = 1;
  2696  0016EC  8893               	bsf	3987,4,c	;volatile
  2697                           
  2698                           ;uart.c: 53: TRISB5 = 0;
  2699  0016EE  9A93               	bcf	3987,5,c	;volatile
  2700  0016F0  0012               	return	
  2701  0016F2                     __end_of_UART_Init:
  2702                           	opt stack 0
  2703                           tblptru	equ	0xFF8
  2704                           tblptrh	equ	0xFF7
  2705                           tblptrl	equ	0xFF6
  2706                           tablat	equ	0xFF5
  2707                           prodh	equ	0xFF4
  2708                           prodl	equ	0xFF3
  2709                           indf0	equ	0xFEF
  2710                           postinc0	equ	0xFEE
  2711                           fsr0h	equ	0xFEA
  2712                           fsr0l	equ	0xFE9
  2713                           wreg	equ	0xFE8
  2714                           indf1	equ	0xFE7
  2715                           fsr1h	equ	0xFE2
  2716                           fsr1l	equ	0xFE1
  2717                           indf2	equ	0xFDF
  2718                           postinc2	equ	0xFDE
  2719                           fsr2h	equ	0xFDA
  2720                           fsr2l	equ	0xFD9
  2721                           status	equ	0xFD8
  2722                           
  2723 ;; *************** function _InitApp *****************
  2724 ;; Defined at:
  2725 ;;		line 29 in file "user.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;		None
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;		None
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  1    wreg      void 
  2732 ;; Registers used:
  2733 ;;		wreg, status,2
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2743 ;;Total ram usage:        0 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    3
  2746 ;; This function calls:
  2747 ;;		Nothing
  2748 ;; This function is called by:
  2749 ;;		_main
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           	psect	text18
  2754  00178E                     __ptext18:
  2755                           	opt stack 0
  2756  00178E                     _InitApp:
  2757                           	opt stack 27
  2758                           
  2759                           ;user.c: 33: PPSCON = 0b00000000;
  2760                           
  2761                           ;incstack = 0
  2762  00178E  0E00               	movlw	0
  2763  001790  010E               	movlb	14	; () banked
  2764  001792  6FBF               	movwf	191,b	;volatile
  2765                           
  2766                           ;user.c: 34: RPOR8 = 0b00000110;
  2767  001794  0E06               	movlw	6
  2768  001796  010E               	movlb	14	; () banked
  2769  001798  6FC8               	movwf	200,b	;volatile
  2770                           
  2771                           ;user.c: 35: RPINR16 = 0b00000111;
  2772  00179A  0E07               	movlw	7
  2773  00179C  010E               	movlb	14	; () banked
  2774  00179E  6FF7               	movwf	247,b	;volatile
  2775                           
  2776                           ;user.c: 36: PPSCON = 0b00000001;
  2777  0017A0  0E01               	movlw	1
  2778  0017A2  010E               	movlb	14	; () banked
  2779  0017A4  6FBF               	movwf	191,b	;volatile
  2780                           
  2781                           ;user.c: 39: INTCON = 0xC0;
  2782  0017A6  0EC0               	movlw	192
  2783  0017A8  6EF2               	movwf	intcon,c	;volatile
  2784                           
  2785                           ; BSR set to: 14
  2786  0017AA  0012               	return		;funcret
  2787  0017AC                     __end_of_InitApp:
  2788                           	opt stack 0
  2789                           tblptru	equ	0xFF8
  2790                           tblptrh	equ	0xFF7
  2791                           tblptrl	equ	0xFF6
  2792                           tablat	equ	0xFF5
  2793                           prodh	equ	0xFF4
  2794                           prodl	equ	0xFF3
  2795                           intcon	equ	0xFF2
  2796                           indf0	equ	0xFEF
  2797                           postinc0	equ	0xFEE
  2798                           fsr0h	equ	0xFEA
  2799                           fsr0l	equ	0xFE9
  2800                           wreg	equ	0xFE8
  2801                           indf1	equ	0xFE7
  2802                           fsr1h	equ	0xFE2
  2803                           fsr1l	equ	0xFE1
  2804                           indf2	equ	0xFDF
  2805                           postinc2	equ	0xFDE
  2806                           fsr2h	equ	0xFDA
  2807                           fsr2l	equ	0xFD9
  2808                           status	equ	0xFD8
  2809                           
  2810 ;; *************** function _ConfigureOscillator *****************
  2811 ;; Defined at:
  2812 ;;		line 24 in file "system.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;		None
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;		None
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  1    wreg      void 
  2819 ;; Registers used:
  2820 ;;		wreg, status,2
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2830 ;;Total ram usage:        0 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    3
  2833 ;; This function calls:
  2834 ;;		Nothing
  2835 ;; This function is called by:
  2836 ;;		_main
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           	psect	text19
  2841  0017F2                     __ptext19:
  2842                           	opt stack 0
  2843  0017F2                     _ConfigureOscillator:
  2844                           	opt stack 27
  2845                           
  2846                           ;system.c: 26: OSCCONbits.IRCF = 0b110;
  2847                           
  2848                           ; BSR set to: 14
  2849                           ;incstack = 0
  2850  0017F2  50D3               	movf	4051,w,c	;volatile
  2851  0017F4  0B8F               	andlw	-113
  2852  0017F6  0960               	iorlw	96
  2853  0017F8  6ED3               	movwf	4051,c	;volatile
  2854                           
  2855                           ;system.c: 27: OSCTUNEbits.PLLEN = 0b1;
  2856  0017FA  8C9B               	bsf	3995,6,c	;volatile
  2857  0017FC  0012               	return		;funcret
  2858  0017FE                     __end_of_ConfigureOscillator:
  2859                           	opt stack 0
  2860                           tblptru	equ	0xFF8
  2861                           tblptrh	equ	0xFF7
  2862                           tblptrl	equ	0xFF6
  2863                           tablat	equ	0xFF5
  2864                           prodh	equ	0xFF4
  2865                           prodl	equ	0xFF3
  2866                           intcon	equ	0xFF2
  2867                           indf0	equ	0xFEF
  2868                           postinc0	equ	0xFEE
  2869                           fsr0h	equ	0xFEA
  2870                           fsr0l	equ	0xFE9
  2871                           wreg	equ	0xFE8
  2872                           indf1	equ	0xFE7
  2873                           fsr1h	equ	0xFE2
  2874                           fsr1l	equ	0xFE1
  2875                           indf2	equ	0xFDF
  2876                           postinc2	equ	0xFDE
  2877                           fsr2h	equ	0xFDA
  2878                           fsr2l	equ	0xFD9
  2879                           status	equ	0xFD8
  2880                           
  2881 ;; *************** function _low_isr *****************
  2882 ;; Defined at:
  2883 ;;		line 66 in file "interrupts.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;		None
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;		None
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  1    wreg      void 
  2890 ;; Registers used:
  2891 ;;		None
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2899 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2900 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2901 ;;Total ram usage:       17 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    2
  2904 ;; This function calls:
  2905 ;;		Nothing
  2906 ;; This function is called by:
  2907 ;;		Interrupt level 1
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	intcodelo
  2912  000018                     __pintcodelo:
  2913                           	opt stack 0
  2914  000018                     _low_isr:
  2915                           	opt stack 25
  2916                           
  2917                           ;incstack = 0
  2918  000018  803E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2919  00001A  CFD8 F011          	movff	status,??_low_isr
  2920  00001E  CFE8 F012          	movff	wreg,??_low_isr+1
  2921  000022  CFE0 F013          	movff	bsr,??_low_isr+2
  2922  000026  CFFA F014          	movff	pclath,??_low_isr+3
  2923  00002A  CFFB F015          	movff	pclatu,??_low_isr+4
  2924  00002E  CFE9 F016          	movff	fsr0l,??_low_isr+5
  2925  000032  CFEA F017          	movff	fsr0h,??_low_isr+6
  2926  000036  CFE1 F018          	movff	fsr1l,??_low_isr+7
  2927  00003A  CFE2 F019          	movff	fsr1h,??_low_isr+8
  2928  00003E  CFD9 F01A          	movff	fsr2l,??_low_isr+9
  2929  000042  CFDA F01B          	movff	fsr2h,??_low_isr+10
  2930  000046  CFF3 F01C          	movff	prodl,??_low_isr+11
  2931  00004A  CFF4 F01D          	movff	prodh,??_low_isr+12
  2932  00004E  CFF6 F01E          	movff	tblptrl,??_low_isr+13
  2933  000052  CFF7 F01F          	movff	tblptrh,??_low_isr+14
  2934  000056  CFF8 F020          	movff	tblptru,??_low_isr+15
  2935  00005A  CFF5 F021          	movff	tablat,??_low_isr+16
  2936  00005E  C021  FFF5         	movff	??_low_isr+16,tablat
  2937  000062  C020  FFF8         	movff	??_low_isr+15,tblptru
  2938  000066  C01F  FFF7         	movff	??_low_isr+14,tblptrh
  2939  00006A  C01E  FFF6         	movff	??_low_isr+13,tblptrl
  2940  00006E  C01D  FFF4         	movff	??_low_isr+12,prodh
  2941  000072  C01C  FFF3         	movff	??_low_isr+11,prodl
  2942  000076  C01B  FFDA         	movff	??_low_isr+10,fsr2h
  2943  00007A  C01A  FFD9         	movff	??_low_isr+9,fsr2l
  2944  00007E  C019  FFE2         	movff	??_low_isr+8,fsr1h
  2945  000082  C018  FFE1         	movff	??_low_isr+7,fsr1l
  2946  000086  C017  FFEA         	movff	??_low_isr+6,fsr0h
  2947  00008A  C016  FFE9         	movff	??_low_isr+5,fsr0l
  2948  00008E  C015  FFFB         	movff	??_low_isr+4,pclatu
  2949  000092  C014  FFFA         	movff	??_low_isr+3,pclath
  2950  000096  C013  FFE0         	movff	??_low_isr+2,bsr
  2951  00009A  C012  FFE8         	movff	??_low_isr+1,wreg
  2952  00009E  C011  FFD8         	movff	??_low_isr,status
  2953  0000A2  903E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2954  0000A4  0010               	retfie	
  2955  0000A6                     __end_of_low_isr:
  2956                           	opt stack 0
  2957                           pclatu	equ	0xFFB
  2958                           pclath	equ	0xFFA
  2959                           tblptru	equ	0xFF8
  2960                           tblptrh	equ	0xFF7
  2961                           tblptrl	equ	0xFF6
  2962                           tablat	equ	0xFF5
  2963                           prodh	equ	0xFF4
  2964                           prodl	equ	0xFF3
  2965                           intcon	equ	0xFF2
  2966                           indf0	equ	0xFEF
  2967                           postinc0	equ	0xFEE
  2968                           fsr0h	equ	0xFEA
  2969                           fsr0l	equ	0xFE9
  2970                           wreg	equ	0xFE8
  2971                           indf1	equ	0xFE7
  2972                           fsr1h	equ	0xFE2
  2973                           fsr1l	equ	0xFE1
  2974                           bsr	equ	0xFE0
  2975                           indf2	equ	0xFDF
  2976                           postinc2	equ	0xFDE
  2977                           fsr2h	equ	0xFDA
  2978                           fsr2l	equ	0xFD9
  2979                           status	equ	0xFD8
  2980                           
  2981 ;; *************** function _high_isr *****************
  2982 ;; Defined at:
  2983 ;;		line 30 in file "interrupts.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;		None
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;		None
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2999 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3000 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3001 ;;Total ram usage:       15 bytes
  3002 ;; Hardware stack levels used:    1
  3003 ;; Hardware stack levels required when called:    1
  3004 ;; This function calls:
  3005 ;;		_appendChar
  3006 ;; This function is called by:
  3007 ;;		Interrupt level 2
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	intcode
  3012  000008                     __pintcode:
  3013                           	opt stack 0
  3014  000008                     _high_isr:
  3015                           	opt stack 25
  3016                           
  3017                           ;incstack = 0
  3018  000008  823E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3019  00000A  EF69  F009         	goto	int_func
  3020                           pclatu	equ	0xFFB
  3021                           pclath	equ	0xFFA
  3022                           tblptru	equ	0xFF8
  3023                           tblptrh	equ	0xFF7
  3024                           tblptrl	equ	0xFF6
  3025                           tablat	equ	0xFF5
  3026                           prodh	equ	0xFF4
  3027                           prodl	equ	0xFF3
  3028                           intcon	equ	0xFF2
  3029                           indf0	equ	0xFEF
  3030                           postinc0	equ	0xFEE
  3031                           fsr0h	equ	0xFEA
  3032                           fsr0l	equ	0xFE9
  3033                           wreg	equ	0xFE8
  3034                           indf1	equ	0xFE7
  3035                           fsr1h	equ	0xFE2
  3036                           fsr1l	equ	0xFE1
  3037                           bsr	equ	0xFE0
  3038                           indf2	equ	0xFDF
  3039                           postinc2	equ	0xFDE
  3040                           fsr2h	equ	0xFDA
  3041                           fsr2l	equ	0xFD9
  3042                           status	equ	0xFD8
  3043                           
  3044                           	psect	intcode_body
  3045  0012D2                     __pintcode_body:
  3046                           	opt stack 25
  3047  0012D2                     int_func:
  3048                           	opt stack 25
  3049  0012D2  CFFA F003          	movff	pclath,??_high_isr+1
  3050  0012D6  CFFB F004          	movff	pclatu,??_high_isr+2
  3051  0012DA  CFE9 F005          	movff	fsr0l,??_high_isr+3
  3052  0012DE  CFEA F006          	movff	fsr0h,??_high_isr+4
  3053  0012E2  CFE1 F007          	movff	fsr1l,??_high_isr+5
  3054  0012E6  CFE2 F008          	movff	fsr1h,??_high_isr+6
  3055  0012EA  CFD9 F009          	movff	fsr2l,??_high_isr+7
  3056  0012EE  CFDA F00A          	movff	fsr2h,??_high_isr+8
  3057  0012F2  CFF3 F00B          	movff	prodl,??_high_isr+9
  3058  0012F6  CFF4 F00C          	movff	prodh,??_high_isr+10
  3059  0012FA  CFF6 F00D          	movff	tblptrl,??_high_isr+11
  3060  0012FE  CFF7 F00E          	movff	tblptrh,??_high_isr+12
  3061  001302  CFF8 F00F          	movff	tblptru,??_high_isr+13
  3062  001306  CFF5 F010          	movff	tablat,??_high_isr+14
  3063                           
  3064                           ;interrupts.c: 45: if(RC1IF){
  3065  00130A  AA9E               	btfss	3998,5,c	;volatile
  3066  00130C  D00F               	goto	i2l1512
  3067                           
  3068                           ;interrupts.c: 46: LATAbits.LATA0 = !LATAbits.LATA0;
  3069  00130E  B089               	btfsc	3977,0,c	;volatile
  3070  001310  D003               	goto	i2u89_40
  3071  001312  6A02               	clrf	??_high_isr& (0+255),c
  3072  001314  2A02               	incf	??_high_isr& (0+255),f,c
  3073  001316  D001               	goto	i2u90_48
  3074  001318                     i2u89_40:
  3075  001318  6A02               	clrf	??_high_isr& (0+255),c
  3076  00131A                     i2u90_48:
  3077  00131A  5089               	movf	3977,w,c	;volatile
  3078  00131C  1802               	xorwf	??_high_isr,w,c
  3079  00131E  0BFE               	andlw	-2
  3080  001320  1802               	xorwf	??_high_isr,w,c
  3081  001322  6E89               	movwf	3977,c	;volatile
  3082                           
  3083                           ;interrupts.c: 47: appendChar(RCREG1);
  3084  001324  50AF               	movf	4015,w,c	;volatile
  3085  001326  ECE4  F00B         	call	_appendChar
  3086                           
  3087                           ;interrupts.c: 49: RC1IF = 0;
  3088  00132A  9A9E               	bcf	3998,5,c	;volatile
  3089  00132C                     i2l1512:
  3090                           
  3091                           ;interrupts.c: 50: }
  3092                           ;interrupts.c: 52: if(RC2IF){
  3093  00132C  BAA4               	btfsc	4004,5,c	;volatile
  3094                           
  3095                           ;interrupts.c: 57: RC2IF = 0;
  3096  00132E  9AA4               	bcf	4004,5,c	;volatile
  3097  001330  C010  FFF5         	movff	??_high_isr+14,tablat
  3098  001334  C00F  FFF8         	movff	??_high_isr+13,tblptru
  3099  001338  C00E  FFF7         	movff	??_high_isr+12,tblptrh
  3100  00133C  C00D  FFF6         	movff	??_high_isr+11,tblptrl
  3101  001340  C00C  FFF4         	movff	??_high_isr+10,prodh
  3102  001344  C00B  FFF3         	movff	??_high_isr+9,prodl
  3103  001348  C00A  FFDA         	movff	??_high_isr+8,fsr2h
  3104  00134C  C009  FFD9         	movff	??_high_isr+7,fsr2l
  3105  001350  C008  FFE2         	movff	??_high_isr+6,fsr1h
  3106  001354  C007  FFE1         	movff	??_high_isr+5,fsr1l
  3107  001358  C006  FFEA         	movff	??_high_isr+4,fsr0h
  3108  00135C  C005  FFE9         	movff	??_high_isr+3,fsr0l
  3109  001360  C004  FFFB         	movff	??_high_isr+2,pclatu
  3110  001364  C003  FFFA         	movff	??_high_isr+1,pclath
  3111  001368  923E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3112  00136A  0011               	retfie		f
  3113  00136C                     __end_of_high_isr:
  3114                           	opt stack 0
  3115                           pclatu	equ	0xFFB
  3116                           pclath	equ	0xFFA
  3117                           tblptru	equ	0xFF8
  3118                           tblptrh	equ	0xFF7
  3119                           tblptrl	equ	0xFF6
  3120                           tablat	equ	0xFF5
  3121                           prodh	equ	0xFF4
  3122                           prodl	equ	0xFF3
  3123                           intcon	equ	0xFF2
  3124                           indf0	equ	0xFEF
  3125                           postinc0	equ	0xFEE
  3126                           fsr0h	equ	0xFEA
  3127                           fsr0l	equ	0xFE9
  3128                           wreg	equ	0xFE8
  3129                           indf1	equ	0xFE7
  3130                           fsr1h	equ	0xFE2
  3131                           fsr1l	equ	0xFE1
  3132                           bsr	equ	0xFE0
  3133                           indf2	equ	0xFDF
  3134                           postinc2	equ	0xFDE
  3135                           fsr2h	equ	0xFDA
  3136                           fsr2l	equ	0xFD9
  3137                           status	equ	0xFD8
  3138                           
  3139 ;; *************** function _appendChar *****************
  3140 ;; Defined at:
  3141 ;;		line 27 in file "bufferhandler.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;  data            1    wreg     unsigned char 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  data            1    0[COMRAM] unsigned char 
  3146 ;; Return value:  Size  Location     Type
  3147 ;;                  1    wreg      void 
  3148 ;; Registers used:
  3149 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3158 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3159 ;;Total ram usage:        1 bytes
  3160 ;; Hardware stack levels used:    1
  3161 ;; This function calls:
  3162 ;;		Nothing
  3163 ;; This function is called by:
  3164 ;;		_high_isr
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           	psect	text22
  3169  0017C8                     __ptext22:
  3170                           	opt stack 0
  3171  0017C8                     _appendChar:
  3172                           	opt stack 25
  3173                           
  3174                           ;incstack = 0
  3175                           ;appendChar@data stored from wreg
  3176  0017C8  6E01               	movwf	appendChar@data,c
  3177                           
  3178                           ;bufferhandler.c: 28: tmpString[index] = data;
  3179  0017CA  0E63               	movlw	low _tmpString
  3180  0017CC  242B               	addwf	_index,w,c
  3181  0017CE  6ED9               	movwf	fsr2l,c
  3182  0017D0  0E00               	movlw	high _tmpString
  3183  0017D2  202C               	addwfc	_index+1,w,c
  3184  0017D4  6EDA               	movwf	fsr2h,c
  3185  0017D6  C001  FFDF         	movff	appendChar@data,indf2
  3186                           
  3187                           ;bufferhandler.c: 29: index++;
  3188  0017DA  4A2B               	infsnz	_index,f,c
  3189  0017DC  2A2C               	incf	_index+1,f,c
  3190  0017DE  0012               	return		;funcret
  3191  0017E0                     __end_of_appendChar:
  3192                           	opt stack 0
  3193                           pclatu	equ	0xFFB
  3194                           pclath	equ	0xFFA
  3195                           tblptru	equ	0xFF8
  3196                           tblptrh	equ	0xFF7
  3197                           tblptrl	equ	0xFF6
  3198                           tablat	equ	0xFF5
  3199                           prodh	equ	0xFF4
  3200                           prodl	equ	0xFF3
  3201                           intcon	equ	0xFF2
  3202                           indf0	equ	0xFEF
  3203                           postinc0	equ	0xFEE
  3204                           fsr0h	equ	0xFEA
  3205                           fsr0l	equ	0xFE9
  3206                           wreg	equ	0xFE8
  3207                           indf1	equ	0xFE7
  3208                           fsr1h	equ	0xFE2
  3209                           fsr1l	equ	0xFE1
  3210                           bsr	equ	0xFE0
  3211                           indf2	equ	0xFDF
  3212                           postinc2	equ	0xFDE
  3213                           fsr2h	equ	0xFDA
  3214                           fsr2l	equ	0xFD9
  3215                           status	equ	0xFD8
  3216                           pclatu	equ	0xFFB
  3217                           pclath	equ	0xFFA
  3218                           tblptru	equ	0xFF8
  3219                           tblptrh	equ	0xFF7
  3220                           tblptrl	equ	0xFF6
  3221                           tablat	equ	0xFF5
  3222                           prodh	equ	0xFF4
  3223                           prodl	equ	0xFF3
  3224                           intcon	equ	0xFF2
  3225                           indf0	equ	0xFEF
  3226                           postinc0	equ	0xFEE
  3227                           fsr0h	equ	0xFEA
  3228                           fsr0l	equ	0xFE9
  3229                           wreg	equ	0xFE8
  3230                           indf1	equ	0xFE7
  3231                           fsr1h	equ	0xFE2
  3232                           fsr1l	equ	0xFE1
  3233                           bsr	equ	0xFE0
  3234                           indf2	equ	0xFDF
  3235                           postinc2	equ	0xFDE
  3236                           fsr2h	equ	0xFDA
  3237                           fsr2l	equ	0xFD9
  3238                           status	equ	0xFD8
  3239                           
  3240                           	psect	rparam
  3241  0000                     pclatu	equ	0xFFB
  3242                           pclath	equ	0xFFA
  3243                           tblptru	equ	0xFF8
  3244                           tblptrh	equ	0xFF7
  3245                           tblptrl	equ	0xFF6
  3246                           tablat	equ	0xFF5
  3247                           prodh	equ	0xFF4
  3248                           prodl	equ	0xFF3
  3249                           intcon	equ	0xFF2
  3250                           indf0	equ	0xFEF
  3251                           postinc0	equ	0xFEE
  3252                           fsr0h	equ	0xFEA
  3253                           fsr0l	equ	0xFE9
  3254                           wreg	equ	0xFE8
  3255                           indf1	equ	0xFE7
  3256                           fsr1h	equ	0xFE2
  3257                           fsr1l	equ	0xFE1
  3258                           bsr	equ	0xFE0
  3259                           indf2	equ	0xFDF
  3260                           postinc2	equ	0xFDE
  3261                           fsr2h	equ	0xFDA
  3262                           fsr2l	equ	0xFD9
  3263                           status	equ	0xFD8
  3264                           
  3265                           	psect	temp
  3266  00003E                     btemp:
  3267                           	opt stack 0
  3268  00003E                     	ds	1
  3269  0000                     int$flags	set	btemp
  3270                           pclatu	equ	0xFFB
  3271                           pclath	equ	0xFFA
  3272                           tblptru	equ	0xFF8
  3273                           tblptrh	equ	0xFF7
  3274                           tblptrl	equ	0xFF6
  3275                           tablat	equ	0xFF5
  3276                           prodh	equ	0xFF4
  3277                           prodl	equ	0xFF3
  3278                           intcon	equ	0xFF2
  3279                           indf0	equ	0xFEF
  3280                           postinc0	equ	0xFEE
  3281                           fsr0h	equ	0xFEA
  3282                           fsr0l	equ	0xFE9
  3283                           wreg	equ	0xFE8
  3284                           indf1	equ	0xFE7
  3285                           fsr1h	equ	0xFE2
  3286                           fsr1l	equ	0xFE1
  3287                           bsr	equ	0xFE0
  3288                           indf2	equ	0xFDF
  3289                           postinc2	equ	0xFDE
  3290                           fsr2h	equ	0xFDA
  3291                           fsr2l	equ	0xFD9
  3292                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         166
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      61
    BANK0           160     32     105
    BANK1           256      0      70
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    strncpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 17
		 -> parsedString(COMRAM[17]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 17
		 -> parsedString(COMRAM[17]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 70
		 -> parsedString(COMRAM[17]), tmpString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 70
		 -> parsedString(COMRAM[17]), tmpString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_5(CODE[1]), parseString@tmpsoc(BANK0[3]), 

    createCHG@tmp	PTR unsigned char  size(2) Largest target is 1
		 -> STR_5(CODE[1]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 17
		 -> parsedString(COMRAM[17]), 

    sp__createCHG	PTR unsigned char  size(2) Largest target is 1
		 -> STR_5(CODE[1]), 

    parseString@chg	PTR unsigned char  size(2) Largest target is 1
		 -> STR_5(CODE[1]), 

    writeString@str	PTR unsigned char  size(2) Largest target is 17
		 -> parsedString(COMRAM[17]), STR_2(CODE[4]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_writeResult
    _writeString->_strlen
    _wait_ms->___lmul
    _parseString->_createCHG
    _atoi->___wmul
    _clearBuffer->_strlen

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_appendChar

Critical Paths under _main in BANK0

    _main->_parseString
    _writeResult->_wait_ms
    _writeString->_strlen
    _wait_ms->___lmul
    _parseString->_atoi
    _atoi->___wmul
    _clearBuffer->_strlen

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6642
                                             31 BANK0      1     1      0
                _ConfigureOscillator
                            _InitApp
                          _UART_Init
                         _UART_Write
                        _clearBuffer
                      _copyTmpBuffer
                     _isItLongEnough
                            _isValid
                        _parseString
                            _wait_ms
                        _writeResult
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeResult                                          1     1      0    1851
                                             37 COMRAM     1     1      0
                            _wait_ms
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeString                                          7     4      3    1231
                                              2 BANK0      7     4      3
                         _UART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           2     1      1     324
                                             33 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _wait_ms                                              2     0      2     589
                                              8 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     404
                                             33 COMRAM     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (1) _parseString                                         22    22      0    2116
                                              9 BANK0     22    22      0
                               _atoi
                          _createCHG
                            _strncpy
 ---------------------------------------------------------------------------------
 (2) _strncpy                                              8     2      6     433
                                             33 COMRAM     2     2      0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _createCHG                                            6     4      2     235
                                             33 COMRAM     4     2      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     973
                                              2 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             33 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     386
                                             33 COMRAM     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _isValid                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _isItLongEnough                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _copyTmpBuffer                                        3     3      0      99
                                             33 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _clearBuffer                                          2     2      0     352
                                              2 BANK0      2     2      0
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     284
                                             33 COMRAM     4     2      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4      77
                                             33 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                             16 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            15    15      0      22
                                              1 COMRAM    15    15      0
                         _appendChar
 ---------------------------------------------------------------------------------
 (6) _appendChar                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _UART_Init
   _UART_Write
   _clearBuffer
     _strlen
   _copyTmpBuffer
   _isItLongEnough
   _isValid
   _parseString
     _atoi
       ___wmul
       _isdigit
     _createCHG
     _strncpy
   _wait_ms
     ___lmul
   _writeResult
     _wait_ms
       ___lmul
     _writeString
       _UART_Write
       _strlen
   _writeString
     _UART_Write
     _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)
   _appendChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      46       8       27.3%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      69       5       65.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     26      3D       1       64.9%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EC       6        0.0%
DATA                 0      0      EC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Apr 21 18:12:20 2017

                          l54 12C4                            l73 158C                            l57 12C6  
              writeResult@dev 0026                            bsr 000FE0           ___wmul@multiplicand 0024  
                __CFG_CP0$OFF 000000                           l150 17BE                           l146 17B4  
                         l236 0FDC                           l425 1212                           u980 15CC  
                         u987 15C2                           wreg 000FE8                    _TXSTA1bits 000FAD  
                __CFG_IESO$ON 000000                    _TXSTA2bits 000FA8                          l1610 15A4  
                        l1612 15AA                          l1700 11BC                          l1702 11C2  
                        l1710 146C                          l1630 1502                          l1800 0F24  
                        l1642 1786                          l1722 14BC                          l1626 14E4  
                        l1660 137A                          l1716 149E                          l1820 0F94  
                        l1804 0F3A                          l1652 1444                          l1662 138C  
                        l1670 13E6                          l1718 14AC                          l1822 0F9E  
                        l1814 0F60                          l1752 1600                          l1664 13A6  
                        l1840 102C                          l1824 0FA8                          l1656 157C  
                        l1648 13FC                          l1682 10A2                          l1834 0FFC  
                        l1756 161A                          l1684 10A8                          l1668 13C2  
                        l1828 0FB4                          l1694 1136                          l1792 1650  
                        l1768 17EE                          l1880 128C                          l1786 16BC  
                        l1698 1160                          l1796 1670                          l1894 12BE  
          __CFG_WPFP$PAGE_127 000000                 _copyTmpBuffer 1646                          STR_1 0F01  
                        STR_2 0F0A                          STR_3 0F05                          STR_4 0F06  
                        STR_5 0F05                          u1110 112A                          u1040 143A  
                        u1130 1158                          u1117 1120                          u1150 1196  
                        u1070 10CA                          u1047 1430                          u1160 11E4  
                        u1137 114E                          u1090 10F2                          u1157 118C  
                        u1077 10C0                          u1167 11DA                          u1097 10E8  
                        _RCIF 007CF5                 __CFG_FCMEN$ON 000000                          _atoi 10A0  
                        _main 121C                          fsr0h 000FEA                          fsr1h 000FE2  
                        indf0 000FEF                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf1 000FE7                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                          btemp 003E                          prodh 000FF4  
                        prodl 000FF3                          start 00A6                writeString@dev 00AD  
                ___param_bank 000000                writeString@str 00AB               __end_of_InitApp 17AC  
               __CFG_PLLDIV$1 000000                  _BAUDCON1bits 000F7E                  _BAUDCON2bits 000F7C  
                       ?_atoi 00AB                         ?_main 0001                         _RC1IE 007CED  
                       _RC1IF 007CF5                         _RC2IE 007D1D                         _RC2IF 007D25  
                 _writeResult 174A                         _RPOR8 000EC8           _ConfigureOscillator 17F2  
                 _writeString 13F0           ___lmul@multiplicand 00AD              ??_isItLongEnough 0022  
                 ?_UART_Write 0022            __size_of_UART_Init 0032               __end_of_isValid 16C0  
                       _index 002B                ?_copyTmpBuffer 0001               __end_of_isdigit 178E  
              __CFG_CLKOEC$ON 000000                         atoi@a 00B0                         atoi@s 00AB  
             __end_of_low_isr 00A6                         pclath 000FFA                         tablat 000FF5  
             __end_of_wait_ms 159A                         status 000FD8               __end_of_strncpy 14D4  
        ?_ConfigureOscillator 0001          __size_of_clearBuffer 0052       __CFG_DSWDTOSC$INTOSCREF 000000  
             __initialization 16F2                  ?_parseString 0001                  __end_of_atoi 121C  
                __end_of_main 12D2                        ??_atoi 00AD                        ??_main 0027  
               __activetblptr 000003                        i2l1512 132C                __CFG_WDTEN$OFF 000000  
                      _INTCON 000FF2                        _RCREG1 000FAF                        _RCREG2 000FAA  
                      _RCSTA1 000FAC                        _RCSTA2 000F9C                        _SPBRG1 000FB0  
                      _SPBRG2 000FAB                        _PPSCON 000EBF                        _TRISB4 007C9C  
                      _TRISB5 007C9D                __CFG_WPCFG$OFF 000000                        _TRISC6 007CA6  
                      _TRISC7 007CA7                        _TXREG1 000FAE                        _TXREG2 000FA9  
                      _TXSTA1 000FAD                        _TXSTA2 000FA8                     ??_InitApp 0022  
       ??_ConfigureOscillator 0022                __CFG_WPDIS$OFF 000000                __CFG_XINST$OFF 000000  
           __end_of_UART_Init 16F2              __end_of_high_isr 136C                        ___lmul 14D4  
         __size_of_UART_Write 001C                        ___wmul 1720                __CFG_STVREN$ON 000000  
                      clear_0 16F8                        clear_1 1704                        clear_2 1710  
                      _strlen 159A                     ??_isValid 0022                     ??_isdigit 0022  
                __mediumconst 0000                     ??_low_isr 0011                        tblptrh 000FF7  
             ??_copyTmpBuffer 0022                        tblptrl 000FF6                        tblptru 000FF8  
                   ??_wait_ms 0026                     ??_strncpy 0022               __CFG_DSBOREN$ON 000000  
        __CFG_LS48MHZ$SYS48X8 000000                    __accesstop 0060       __end_of__initialization 1716  
               ___rparam_used 000001               __CFG_IOL1WAY$ON 000000          __CFG_WPEND$PAGE_WPFP 000000  
              __pcstackCOMRAM 0001               __CFG_DSWDTEN$ON 000000               __CFG_DSWDTPS$G2 000000  
         parseString@startPos 00C4            __size_of_createCHG 0084               __CFG_OSC$INTOSC 000000  
                  __pbssBANK0 0060                    __pbssBANK1 0100                       ?___lmul 00A9  
                     ?___wmul 0022          __size_of_parseString 0190                ___lmul@product 0022  
                  _appendChar 17C8                       ?_strlen 0022                 _allDataString 0100  
                ?_writeResult 0001                  ?_writeString 00AB                  ??_UART_Write 0023  
                     i2u90_48 131A                       _SPBRGH1 000F7F                       _SPBRGH2 000F7D  
                     _RPINR16 000EF7                       i2u89_40 1318                     ?_high_isr 0001  
                     _InitApp 178E                       __Hparam 0000             __end_of_createCHG 13F0  
                     __Lparam 0000               __size_of___lmul 006C               __size_of___wmul 002A  
          __end_of_UART_Write 17C8                  __psmallconst 0F00                       __pcinit 16F2  
                     __ramtop 0F00                       __ptext0 121C                       __ptext1 174A  
                     __ptext2 13F0                       __ptext3 17AC                       __ptext4 1540  
                     __ptext5 14D4                       __ptext6 0F10                       __ptext7 1462  
                     __ptext8 136C                       __ptext9 10A0                       _isValid 1686  
             __size_of_strlen 005A                       _isdigit 1770                       _low_isr 0018  
                     _wait_ms 1540                       main@var 00C8                    ??_high_isr 0002  
              parseString@SOC 00B7                __pintcode_body 12D2                       _strncpy 1462  
        end_of_initialization 1716                parseString@chg 00B9                parseString@pos 00C0  
               ??_clearBuffer 0026                       int_func 12D2                       postinc0 000FEE  
                     postinc2 000FDE                   wait_ms@time 00B1                       strlen@s 0022  
                   _UART_Init 16C0                     _PORTDbits 000F83                   ?_appendChar 0001  
              UART_Write@data 0023              __CFG_CPUDIV$OSC1 000000                     _TRISAbits 000F92  
                   _TRISDbits 000F95             __CFG_SOSCSEL$HIGH 000000   __end_of_ConfigureOscillator 17FE  
                writeString@i 00B0       __size_of_isItLongEnough 0012           __CFG_MSSP7B_EN$MSK7 000000  
         __end_of_clearBuffer 1646                __end_of___lmul 1540                __end_of___wmul 174A  
                  ?_UART_Init 0022                __end_of_strlen 15F4           start_initialization 16F2  
        __size_of_writeResult 0026          __size_of_writeString 0072             parseString@tmpsoc 00BB  
       __end_of_copyTmpBuffer 1686           __size_of_appendChar 0018                      ??___lmul 0022  
                    ??___wmul 0026             __CFG_ADCSEL$BIT10 000000                  parseString@i 00C6  
                parseString@k 00BE                      ??_strlen 0024                   __pbssCOMRAM 0027  
               __pcstackBANK0 00A9             __size_of_high_isr 1364                   _clearBuffer 15F4  
                    ?_InitApp 0001                 ??_parseString 00B2                     __pintcode 0008  
                   _createCHG 136C                   __pintcodelo 0018                   ??_UART_Init 0026  
                    ?_isValid 0001                   __smallconst 0F00                      ?_isdigit 0001  
        __CFG_RTCOSC$T1OSCREF 000000                      ?_low_isr 0001                      ?_wait_ms 00B1  
                    ?_strncpy 00A9                copyTmpBuffer@i 0023                ___wmul@product 00A9  
              _isItLongEnough 17E0                      _LATAbits 000F89                   strncpy@from 00AB  
                 strncpy@size 00AD              __CFG_WDTPS$32768 000000                  _parsedString 002D  
                  ?_createCHG 0022                  clearBuffer@i 00AB                 UART_Write@dev 0022  
                   _tmpString 0063             UART_Init@baudrate 0022           __end_of_parseString 10A0  
                ??_appendChar 0001             ___wmul@multiplier 0022              parseString@F8386 0060  
           __CFG_CFGPLLEN$OFF 000000              parseString@i_730 00C2             ___lmul@multiplier 00A9  
      __end_of_isItLongEnough 17F2            __end_of_appendChar 17E0              __size_of_InitApp 001E  
                    __Hrparam 0000                      __Lrparam 0000                   _isdigit$959 0023  
            __size_of_isValid 003A              __size_of_isdigit 001E              __size_of_low_isr 008E  
                    __ptext10 1770                      __ptext11 1720                      __ptext12 1686  
                    __ptext13 17E0                      __ptext22 17C8                      __ptext14 1646  
                    __ptext15 15F4                      __ptext16 159A                      __ptext17 16C0  
                    __ptext18 178E                      __ptext19 17F2              __size_of_wait_ms 005A  
                    _high_isr 0008               ?_isItLongEnough 0001              __size_of_strncpy 0072  
               __size_of_atoi 017C                 __size_of_main 00B6                appendChar@data 0001  
__size_of_ConfigureOscillator 000C                   _parseString 0F10                      int$flags 003E  
                    atoi@sign 00AF                   ??_createCHG 0024                 ??_writeResult 0026  
             parseString@ichg 00B5                 ??_writeString 00AE                   _OSCTUNEbits 000F9B  
                    isdigit@c 0024                      intlevel1 0000                      intlevel2 0000  
                ?_clearBuffer 0001                    _OSCCONbits 000FD3                     strncpy@cp 0022  
                   strncpy@to 00A9        __size_of_copyTmpBuffer 0040                  wait_ms@timel 0027  
                createCHG@pos 0022                  createCHG@tmp 00A9                      strlen@cp 00A9  
                  _UART_Write 17AC           __end_of_writeResult 1770           __end_of_writeString 1462  
