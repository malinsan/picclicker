

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Apr 24 21:07:58 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F47J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 1.41
    44                           ; Generated 25/01/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F47J53 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataCOMRAM
    79  00199E                     __pidataCOMRAM:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _parsedString
    83  00199E  53                 	db	83
    84  00199F  4F                 	db	79
    85  0019A0  43                 	db	67
    86  0019A1  78                 	db	120
    87  0019A2  78                 	db	120
    88  0019A3  3B                 	db	59
    89  0019A4  43                 	db	67
    90  0019A5  48                 	db	72
    91  0019A6  47                 	db	71
    92  0019A7  78                 	db	120
    93  0019A8  3B                 	db	59
    94  0019A9  41                 	db	65
    95  0019AA  43                 	db	67
    96  0019AB  4B                 	db	75
    97  0019AC  3B                 	db	59
    98  0019AD  00                 	db	0
    99  0019AE  00                 	db	0
   100  0000                     _RPINR16	set	3831
   101  0000                     _RPOR8	set	3784
   102  0000                     _PPSCON	set	3775
   103  0000                     _RCREG2	set	4010
   104  0000                     _TXREG2	set	4009
   105  0000                     _TXSTA2bits	set	4008
   106  0000                     _TXREG1	set	4014
   107  0000                     _TXSTA1bits	set	4013
   108  0000                     _SPBRGH2	set	3965
   109  0000                     _SPBRG2	set	4011
   110  0000                     _BAUDCON2bits	set	3964
   111  0000                     _TXSTA2	set	4008
   112  0000                     _RCSTA2	set	3996
   113  0000                     _SPBRGH1	set	3967
   114  0000                     _SPBRG1	set	4016
   115  0000                     _BAUDCON1bits	set	3966
   116  0000                     _RCSTA1	set	4012
   117  0000                     _TXSTA1	set	4013
   118  0000                     _INTCON	set	4082
   119  0000                     _OSCTUNEbits	set	3995
   120  0000                     _OSCCONbits	set	4051
   121  0000                     _PORTDbits	set	3971
   122  0000                     _TRISDbits	set	3989
   123  0000                     _TRISAbits	set	3986
   124  0000                     _RCREG1	set	4015
   125  0000                     _LATAbits	set	3977
   126  0000                     _RCIF	set	31989
   127  0000                     _TRISB5	set	31901
   128  0000                     _TRISB4	set	31900
   129  0000                     _RC2IE	set	32029
   130  0000                     _TRISC6	set	31910
   131  0000                     _TRISC7	set	31911
   132  0000                     _RC1IE	set	31981
   133  0000                     _RC2IF	set	32037
   134  0000                     _RC1IF	set	31989
   135                           
   136                           	psect	smallconst
   137  000F00                     __psmallconst:
   138                           	opt stack 0
   139  000F00  00                 	db	0
   140  000F01                     STR_1:
   141  000F01  4C                 	db	76	;'L'
   142  000F02  20                 	db	32
   143  000F03  35                 	db	53	;'5'
   144  000F04  30                 	db	48	;'0'
   145  000F05  00                 	db	0
   146  000F06                     STR_2:
   147  000F06  44                 	db	68	;'D'
   148  000F07  20                 	db	32
   149  000F08  38                 	db	56	;'8'
   150  000F09  00                 	db	0
   151  0000                     
   152                           ; #config settings
   153  000F0A  00                 	db	0	; dummy byte at the end
   154  0000                     
   155                           	psect	cinit
   156  001804                     __pcinit:
   157                           	opt stack 0
   158  001804                     start_initialization:
   159                           	opt stack 0
   160  001804                     __initialization:
   161                           	opt stack 0
   162                           
   163                           ; Initialize objects allocated to COMRAM (17 bytes)
   164                           ; load TBLPTR registers with __pidataCOMRAM
   165  001804  0E9E               	movlw	low __pidataCOMRAM
   166  001806  6EF6               	movwf	tblptrl,c
   167  001808  0E19               	movlw	high __pidataCOMRAM
   168  00180A  6EF7               	movwf	tblptrh,c
   169  00180C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   170  00180E  6EF8               	movwf	tblptru,c
   171  001810  EE00  F022         	lfsr	0,__pdataCOMRAM
   172  001814  EE10 F011          	lfsr	1,17
   173  001818                     copy_data0:
   174  001818  0009               	tblrd		*+
   175  00181A  CFF5 FFEE          	movff	tablat,postinc0
   176  00181E  50E5               	movf	postdec1,w,c
   177  001820  50E1               	movf	fsr1l,w,c
   178  001822  E1FA               	bnz	copy_data0
   179                           
   180                           ; Clear objects allocated to BANK1 (70 bytes)
   181  001824  EE01  F000         	lfsr	0,__pbssBANK1
   182  001828  0E46               	movlw	70
   183  00182A                     clear_0:
   184  00182A  6AEE               	clrf	postinc0,c
   185  00182C  06E8               	decf	wreg,f,c
   186  00182E  E1FD               	bnz	clear_0
   187                           
   188                           ; Clear objects allocated to BANK0 (101 bytes)
   189  001830  EE00  F060         	lfsr	0,__pbssBANK0
   190  001834  0E65               	movlw	101
   191  001836                     clear_1:
   192  001836  6AEE               	clrf	postinc0,c
   193  001838  06E8               	decf	wreg,f,c
   194  00183A  E1FD               	bnz	clear_1
   195                           
   196                           ; Clear objects allocated to COMRAM (12 bytes)
   197  00183C  EE00  F033         	lfsr	0,__pbssCOMRAM
   198  001840  0E0C               	movlw	12
   199  001842                     clear_2:
   200  001842  6AEE               	clrf	postinc0,c
   201  001844  06E8               	decf	wreg,f,c
   202  001846  E1FD               	bnz	clear_2
   203  001848                     end_of_initialization:
   204                           	opt stack 0
   205  001848                     __end_of__initialization:
   206                           	opt stack 0
   207  001848  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   208  00184A  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   209  00184C  0100               	movlb	0
   210  00184E  EFC0  F009         	goto	_main	;jump to C main() function
   211                           tblptru	equ	0xFF8
   212                           tblptrh	equ	0xFF7
   213                           tblptrl	equ	0xFF6
   214                           tablat	equ	0xFF5
   215                           postinc0	equ	0xFEE
   216                           wreg	equ	0xFE8
   217                           postdec1	equ	0xFE5
   218                           fsr1l	equ	0xFE1
   219                           
   220                           	psect	bssCOMRAM
   221  000033                     __pbssCOMRAM:
   222                           	opt stack 0
   223  000033                     _toCharArray:
   224                           	opt stack 0
   225  000033                     	ds	6
   226  000039                     wait_ms@timel:
   227                           	opt stack 0
   228  000039                     	ds	4
   229  00003D                     _index:
   230                           	opt stack 0
   231  00003D                     	ds	2
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           postdec1	equ	0xFE5
   239                           fsr1l	equ	0xFE1
   240                           
   241                           	psect	dataCOMRAM
   242  000022                     __pdataCOMRAM:
   243                           	opt stack 0
   244  000022                     _parsedString:
   245                           	opt stack 0
   246  000022                     	ds	17
   247                           tblptru	equ	0xFF8
   248                           tblptrh	equ	0xFF7
   249                           tblptrl	equ	0xFF6
   250                           tablat	equ	0xFF5
   251                           postinc0	equ	0xFEE
   252                           wreg	equ	0xFE8
   253                           postdec1	equ	0xFE5
   254                           fsr1l	equ	0xFE1
   255                           
   256                           	psect	bssBANK0
   257  000060                     __pbssBANK0:
   258                           	opt stack 0
   259  000060                     _positions:
   260                           	opt stack 0
   261  000060                     	ds	22
   262  000076                     _charSOC:
   263                           	opt stack 0
   264  000076                     	ds	3
   265  000079                     _tmpString:
   266                           	opt stack 0
   267  000079                     	ds	70
   268  0000BF                     _SOC:
   269                           	opt stack 0
   270  0000BF                     	ds	6
   271                           tblptru	equ	0xFF8
   272                           tblptrh	equ	0xFF7
   273                           tblptrl	equ	0xFF6
   274                           tablat	equ	0xFF5
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           postdec1	equ	0xFE5
   278                           fsr1l	equ	0xFE1
   279                           
   280                           	psect	bssBANK1
   281  000100                     __pbssBANK1:
   282                           	opt stack 0
   283  000100                     _allDataString:
   284                           	opt stack 0
   285  000100                     	ds	70
   286                           tblptru	equ	0xFF8
   287                           tblptrh	equ	0xFF7
   288                           tblptrl	equ	0xFF6
   289                           tablat	equ	0xFF5
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           postdec1	equ	0xFE5
   293                           fsr1l	equ	0xFE1
   294                           
   295                           	psect	cstackBANK0
   296  0000C5                     __pcstackBANK0:
   297                           	opt stack 0
   298  0000C5                     ??_copyTmpBuffer:
   299  0000C5                     ?_strlen:
   300                           	opt stack 0
   301  0000C5                     ?_lenHelper:
   302                           	opt stack 0
   303  0000C5                     ?___wmul:
   304                           	opt stack 0
   305  0000C5                     ?___awdiv:
   306                           	opt stack 0
   307  0000C5                     ?___lmul:
   308                           	opt stack 0
   309  0000C5                     UART_Write@dev:
   310                           	opt stack 0
   311  0000C5                     lenHelper@x:
   312                           	opt stack 0
   313  0000C5                     ___wmul@multiplier:
   314                           	opt stack 0
   315  0000C5                     ___awdiv@dividend:
   316                           	opt stack 0
   317  0000C5                     strlen@s:
   318                           	opt stack 0
   319  0000C5                     UART_Init@baudrate:
   320                           	opt stack 0
   321  0000C5                     ___lmul@multiplier:
   322                           	opt stack 0
   323                           
   324                           ; 4 bytes @ 0x0
   325  0000C5                     	ds	1
   326  0000C6                     UART_Write@data:
   327                           	opt stack 0
   328  0000C6                     copyTmpBuffer@i:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x1
   332  0000C6                     	ds	1
   333  0000C7                     ??_strlen:
   334  0000C7                     ___wmul@multiplicand:
   335                           	opt stack 0
   336  0000C7                     ___awdiv@divisor:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x2
   340  0000C7                     	ds	2
   341  0000C9                     ___awdiv@counter:
   342                           	opt stack 0
   343  0000C9                     ___wmul@product:
   344                           	opt stack 0
   345  0000C9                     strlen@cp:
   346                           	opt stack 0
   347  0000C9                     ___lmul@multiplicand:
   348                           	opt stack 0
   349                           
   350                           ; 4 bytes @ 0x4
   351  0000C9                     	ds	1
   352  0000CA                     ___awdiv@sign:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0x5
   356  0000CA                     	ds	1
   357  0000CB                     ?_transformToTwoDigitNumber:
   358                           	opt stack 0
   359  0000CB                     ?_checkPos:
   360                           	opt stack 0
   361  0000CB                     writeString@str:
   362                           	opt stack 0
   363  0000CB                     clearBuffer@i:
   364                           	opt stack 0
   365  0000CB                     transformToTwoDigitNumber@number:
   366                           	opt stack 0
   367  0000CB                     checkPos@pos:
   368                           	opt stack 0
   369  0000CB                     ___awdiv@quotient:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x6
   373  0000CB                     	ds	2
   374  0000CD                     writeString@dev:
   375                           	opt stack 0
   376  0000CD                     transformToTwoDigitNumber@size:
   377                           	opt stack 0
   378  0000CD                     ___lmul@product:
   379                           	opt stack 0
   380                           
   381                           ; 4 bytes @ 0x8
   382  0000CD                     	ds	1
   383  0000CE                     ??_writeString:
   384  0000CE                     checkPos@i:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x9
   388  0000CE                     	ds	1
   389  0000CF                     ??_transformToTwoDigitNumber:
   390                           
   391                           ; 1 bytes @ 0xA
   392  0000CF                     	ds	1
   393  0000D0                     ??_checkString:
   394  0000D0                     writeString@i:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0xB
   398  0000D0                     	ds	1
   399  0000D1                     wait_ms@time:
   400                           	opt stack 0
   401  0000D1                     transformToTwoDigitNumber@result:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0xC
   405  0000D1                     	ds	2
   406  0000D3                     writeResult@dev:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0xE
   410  0000D3                     	ds	1
   411  0000D4                     checkString@i:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0xF
   415  0000D4                     	ds	2
   416  0000D6                     ??_parseString:
   417                           
   418                           ; 1 bytes @ 0x11
   419  0000D6                     	ds	2
   420  0000D8                     parseString@chgStop:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x13
   424  0000D8                     	ds	2
   425  0000DA                     parseString@tmpSOC:
   426                           	opt stack 0
   427                           
   428                           ; 1 bytes @ 0x15
   429  0000DA                     	ds	1
   430  0000DB                     parseString@socSize:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x16
   434  0000DB                     	ds	2
   435  0000DD                     parseString@chgStart:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x18
   439  0000DD                     	ds	2
   440  0000DF                     parseString@k:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x1A
   444  0000DF                     	ds	2
   445  0000E1                     parseString@CHG:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x1C
   449  0000E1                     	ds	1
   450  0000E2                     parseString@socStartPos:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x1D
   454  0000E2                     	ds	2
   455  0000E4                     parseString@socEndPos:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x1F
   459  0000E4                     	ds	2
   460  0000E6                     parseString@i:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x21
   464  0000E6                     	ds	2
   465  0000E8                     parseString@tmp:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x23
   469  0000E8                     	ds	2
   470  0000EA                     main@var:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x25
   474  0000EA                     	ds	1
   475                           tblptru	equ	0xFF8
   476                           tblptrh	equ	0xFF7
   477                           tblptrl	equ	0xFF6
   478                           tablat	equ	0xFF5
   479                           postinc0	equ	0xFEE
   480                           wreg	equ	0xFE8
   481                           postdec1	equ	0xFE5
   482                           fsr1l	equ	0xFE1
   483                           
   484                           	psect	cstackCOMRAM
   485  000001                     __pcstackCOMRAM:
   486                           	opt stack 0
   487  000001                     appendChar@data:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x0
   491  000001                     	ds	1
   492  000002                     ??_high_isr:
   493                           
   494                           ; 1 bytes @ 0x1
   495  000002                     	ds	15
   496  000011                     ??_low_isr:
   497                           
   498                           ; 1 bytes @ 0x10
   499  000011                     	ds	17
   500                           tblptru	equ	0xFF8
   501                           tblptrh	equ	0xFF7
   502                           tblptrl	equ	0xFF6
   503                           tablat	equ	0xFF5
   504                           postinc0	equ	0xFEE
   505                           wreg	equ	0xFE8
   506                           postdec1	equ	0xFE5
   507                           fsr1l	equ	0xFE1
   508                           
   509 ;;
   510 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   511 ;;
   512 ;; *************** function _main *****************
   513 ;; Defined at:
   514 ;;		line 39 in file "main.c"
   515 ;; Parameters:    Size  Location     Type
   516 ;;		None
   517 ;; Auto vars:     Size  Location     Type
   518 ;;  var             1   37[BANK0 ] unsigned char 
   519 ;;  result          1    0        unsigned char 
   520 ;; Return value:  Size  Location     Type
   521 ;;                  1    wreg      void 
   522 ;; Registers used:
   523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   532 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   533 ;;Total ram usage:        1 bytes
   534 ;; Hardware stack levels required when called:    7
   535 ;; This function calls:
   536 ;;		_ConfigureOscillator
   537 ;;		_InitApp
   538 ;;		_UART_Init
   539 ;;		_UART_Write
   540 ;;		_clearBuffer
   541 ;;		_copyTmpBuffer
   542 ;;		_isItLongEnough
   543 ;;		_isValid
   544 ;;		_parseString
   545 ;;		_wait_ms
   546 ;;		_writeResult
   547 ;;		_writeString
   548 ;; This function is called by:
   549 ;;		Startup code after reset
   550 ;; This function uses a non-reentrant model
   551 ;;
   552                           
   553                           	psect	text0
   554  001380                     __ptext0:
   555                           	opt stack 0
   556  001380                     _main:
   557                           	opt stack 24
   558                           
   559                           ;main.c: 45: ConfigureOscillator();
   560                           
   561                           ;incstack = 0
   562  001380  ECD8  F00C         	call	_ConfigureOscillator	;wreg free
   563                           
   564                           ;main.c: 48: InitApp();
   565  001384  ECA8  F00C         	call	_InitApp	;wreg free
   566                           
   567                           ;main.c: 50: UART_Init(19200);
   568  001388  0E00               	movlw	0
   569  00138A  0100               	movlb	0	; () banked
   570  00138C  6FC5               	movwf	UART_Init@baudrate& (0+255),b
   571  00138E  0E4B               	movlw	75
   572  001390  6FC6               	movwf	(UART_Init@baudrate+1)& (0+255),b
   573  001392  0E00               	movlw	0
   574  001394  6FC7               	movwf	(UART_Init@baudrate+2)& (0+255),b
   575  001396  0E00               	movlw	0
   576  001398  6FC8               	movwf	(UART_Init@baudrate+3)& (0+255),b
   577  00139A  EC7F  F00C         	call	_UART_Init	;wreg free
   578                           
   579                           ;main.c: 51: writeString("L 50", 1);
   580  00139E  0E01               	movlw	low STR_1
   581  0013A0  0100               	movlb	0	; () banked
   582  0013A2  6FCB               	movwf	writeString@str& (0+255),b
   583  0013A4  0E0F               	movlw	high STR_1
   584  0013A6  0100               	movlb	0	; () banked
   585  0013A8  6FCC               	movwf	(writeString@str+1)& (0+255),b
   586  0013AA  0E01               	movlw	1
   587  0013AC  0100               	movlb	0	; () banked
   588  0013AE  6FCD               	movwf	writeString@dev& (0+255),b
   589  0013B0  EC6B  F00A         	call	_writeString	;wreg free
   590                           
   591                           ;main.c: 52: UART_Write(0x0D,1);
   592  0013B4  0E01               	movlw	1
   593  0013B6  0100               	movlb	0	; () banked
   594  0013B8  6FC5               	movwf	UART_Write@dev& (0+255),b
   595  0013BA  0E0D               	movlw	13
   596  0013BC  EC98  F00C         	call	_UART_Write
   597                           
   598                           ;main.c: 53: writeString("D 8", 1);
   599  0013C0  0E06               	movlw	low STR_2
   600  0013C2  0100               	movlb	0	; () banked
   601  0013C4  6FCB               	movwf	writeString@str& (0+255),b
   602  0013C6  0E0F               	movlw	high STR_2
   603  0013C8  0100               	movlb	0	; () banked
   604  0013CA  6FCC               	movwf	(writeString@str+1)& (0+255),b
   605  0013CC  0E01               	movlw	1
   606  0013CE  0100               	movlb	0	; () banked
   607  0013D0  6FCD               	movwf	writeString@dev& (0+255),b
   608  0013D2  EC6B  F00A         	call	_writeString	;wreg free
   609                           
   610                           ;main.c: 54: UART_Write(0x0D,1);
   611  0013D6  0E01               	movlw	1
   612  0013D8  0100               	movlb	0	; () banked
   613  0013DA  6FC5               	movwf	UART_Write@dev& (0+255),b
   614  0013DC  0E0D               	movlw	13
   615  0013DE  EC98  F00C         	call	_UART_Write
   616                           
   617                           ;main.c: 56: uint8_t var = 0;
   618  0013E2  0E00               	movlw	0
   619  0013E4  0100               	movlb	0	; () banked
   620  0013E6  6FEA               	movwf	main@var& (0+255),b
   621                           
   622                           ; BSR set to: 0
   623                           ;main.c: 57: char result;
   624                           ;main.c: 60: TRISAbits.TRISA0 = 0;
   625  0013E8  9092               	bcf	3986,0,c	;volatile
   626                           
   627                           ; BSR set to: 0
   628                           ;main.c: 61: TRISAbits.TRISA1 = 0;
   629  0013EA  9292               	bcf	3986,1,c	;volatile
   630                           
   631                           ; BSR set to: 0
   632                           ;main.c: 62: LATAbits.LATA0 = 0;
   633  0013EC  9089               	bcf	3977,0,c	;volatile
   634                           
   635                           ; BSR set to: 0
   636                           ;main.c: 63: LATAbits.LATA1 = 0;
   637  0013EE  9289               	bcf	3977,1,c	;volatile
   638                           
   639                           ; BSR set to: 0
   640                           ;main.c: 64: TRISDbits.TRISD3 = 1;
   641  0013F0  8695               	bsf	3989,3,c	;volatile
   642                           
   643                           ; BSR set to: 0
   644                           ;main.c: 66: clearBuffer();
   645  0013F2  ECAB  F00B         	call	_clearBuffer	;wreg free
   646  0013F6                     l2005:
   647                           
   648                           ;main.c: 71: if(isItLongEnough()){
   649  0013F6  ECB7  F00C         	call	_isItLongEnough	;wreg free
   650  0013FA  0900               	iorlw	0
   651  0013FC  B4D8               	btfsc	status,2,c
   652  0013FE  D017               	goto	l54
   653                           
   654                           ;main.c: 72: if(isValid()){
   655  001400  EC47  F00C         	call	_isValid	;wreg free
   656  001404  0900               	iorlw	0
   657  001406  B4D8               	btfsc	status,2,c
   658  001408  D00F               	goto	l2019
   659                           
   660                           ;main.c: 73: LATAbits.LATA1 = 1;
   661  00140A  8289               	bsf	3977,1,c	;volatile
   662                           
   663                           ;main.c: 74: wait_ms(1000);
   664  00140C  0E03               	movlw	3
   665  00140E  0100               	movlb	0	; () banked
   666  001410  6FD2               	movwf	(wait_ms@time+1)& (0+255),b
   667  001412  0EE8               	movlw	232
   668  001414  6FD1               	movwf	wait_ms@time& (0+255),b
   669  001416  EC7E  F00B         	call	_wait_ms	;wreg free
   670                           
   671                           ;main.c: 75: copyTmpBuffer();
   672  00141A  ECD8  F00B         	call	_copyTmpBuffer	;wreg free
   673                           
   674                           ;main.c: 76: parseString();
   675  00141E  EC86  F007         	call	_parseString	;wreg free
   676                           
   677                           ;main.c: 77: clearBuffer();
   678  001422  ECAB  F00B         	call	_clearBuffer	;wreg free
   679                           
   680                           ;main.c: 78: }else{
   681  001426  D004               	goto	l57
   682  001428                     l2019:
   683                           
   684                           ;main.c: 79: clearBuffer();
   685  001428  ECAB  F00B         	call	_clearBuffer	;wreg free
   686                           
   687                           ;main.c: 80: }
   688                           ;main.c: 81: }else{
   689  00142C  D001               	goto	l57
   690  00142E                     l54:
   691                           
   692                           ;main.c: 82: LATAbits.LATA1 = 0;
   693  00142E  9289               	bcf	3977,1,c	;volatile
   694  001430                     l57:
   695                           
   696                           ;main.c: 83: }
   697                           ;main.c: 85: if(!PORTDbits.RD3){
   698  001430  B683               	btfsc	3971,3,c	;volatile
   699  001432  D7E1               	goto	l2005
   700                           
   701                           ;main.c: 86: writeResult(2);
   702  001434  0E02               	movlw	2
   703  001436  EC29  F00C         	call	_writeResult
   704  00143A  D7DD               	goto	l2005
   705  00143C                     __end_of_main:
   706                           	opt stack 0
   707                           tblptru	equ	0xFF8
   708                           tblptrh	equ	0xFF7
   709                           tblptrl	equ	0xFF6
   710                           tablat	equ	0xFF5
   711                           postinc0	equ	0xFEE
   712                           wreg	equ	0xFE8
   713                           postdec1	equ	0xFE5
   714                           fsr1l	equ	0xFE1
   715                           status	equ	0xFD8
   716                           
   717 ;; *************** function _writeResult *****************
   718 ;; Defined at:
   719 ;;		line 59 in file "bufferhandler.c"
   720 ;; Parameters:    Size  Location     Type
   721 ;;  dev             1    wreg     unsigned char 
   722 ;; Auto vars:     Size  Location     Type
   723 ;;  dev             1   14[BANK0 ] unsigned char 
   724 ;; Return value:  Size  Location     Type
   725 ;;                  1    wreg      void 
   726 ;; Registers used:
   727 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   736 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   737 ;;Total ram usage:        1 bytes
   738 ;; Hardware stack levels used:    1
   739 ;; Hardware stack levels required when called:    5
   740 ;; This function calls:
   741 ;;		_wait_ms
   742 ;;		_writeString
   743 ;; This function is called by:
   744 ;;		_main
   745 ;; This function uses a non-reentrant model
   746 ;;
   747                           
   748                           	psect	text1
   749  001852                     __ptext1:
   750                           	opt stack 0
   751  001852                     _writeResult:
   752                           	opt stack 25
   753                           
   754                           ;incstack = 0
   755                           ;writeResult@dev stored from wreg
   756  001852  0100               	movlb	0	; () banked
   757  001854  6FD3               	movwf	writeResult@dev& (0+255),b
   758                           
   759                           ;bufferhandler.c: 61: writeString(parsedString, dev);
   760  001856  0E22               	movlw	low _parsedString
   761  001858  0100               	movlb	0	; () banked
   762  00185A  6FCB               	movwf	writeString@str& (0+255),b
   763  00185C  0E00               	movlw	high _parsedString
   764  00185E  0100               	movlb	0	; () banked
   765  001860  6FCC               	movwf	(writeString@str+1)& (0+255),b
   766  001862  C0D3  F0CD         	movff	writeResult@dev,writeString@dev
   767  001866  EC6B  F00A         	call	_writeString	;wreg free
   768                           
   769                           ;bufferhandler.c: 62: writeString(allDataString, dev);
   770  00186A  0E00               	movlw	low _allDataString
   771  00186C  0100               	movlb	0	; () banked
   772  00186E  6FCB               	movwf	writeString@str& (0+255),b
   773  001870  0E01               	movlw	high _allDataString
   774  001872  0100               	movlb	0	; () banked
   775  001874  6FCC               	movwf	(writeString@str+1)& (0+255),b
   776  001876  C0D3  F0CD         	movff	writeResult@dev,writeString@dev
   777  00187A  EC6B  F00A         	call	_writeString	;wreg free
   778                           
   779                           ;bufferhandler.c: 63: wait_ms(1000);
   780  00187E  0E03               	movlw	3
   781  001880  0100               	movlb	0	; () banked
   782  001882  6FD2               	movwf	(wait_ms@time+1)& (0+255),b
   783  001884  0EE8               	movlw	232
   784  001886  6FD1               	movwf	wait_ms@time& (0+255),b
   785  001888  EC7E  F00B         	call	_wait_ms	;wreg free
   786  00188C  0012               	return		;funcret
   787  00188E                     __end_of_writeResult:
   788                           	opt stack 0
   789                           tblptru	equ	0xFF8
   790                           tblptrh	equ	0xFF7
   791                           tblptrl	equ	0xFF6
   792                           tablat	equ	0xFF5
   793                           postinc0	equ	0xFEE
   794                           wreg	equ	0xFE8
   795                           postdec1	equ	0xFE5
   796                           fsr1l	equ	0xFE1
   797                           status	equ	0xFD8
   798                           
   799 ;; *************** function _writeString *****************
   800 ;; Defined at:
   801 ;;		line 97 in file "uart.c"
   802 ;; Parameters:    Size  Location     Type
   803 ;;  str             2    6[BANK0 ] PTR unsigned char 
   804 ;;		 -> parsedString(17), allDataString(70), STR_2(4), STR_1(5), 
   805 ;;  dev             1    8[BANK0 ] unsigned char 
   806 ;; Auto vars:     Size  Location     Type
   807 ;;  i               2   11[BANK0 ] int 
   808 ;; Return value:  Size  Location     Type
   809 ;;                  1    wreg      void 
   810 ;; Registers used:
   811 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   817 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   818 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   819 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   820 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   821 ;;Total ram usage:        7 bytes
   822 ;; Hardware stack levels used:    1
   823 ;; Hardware stack levels required when called:    4
   824 ;; This function calls:
   825 ;;		_UART_Write
   826 ;;		_strlen
   827 ;; This function is called by:
   828 ;;		_main
   829 ;;		_writeResult
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text2
   834  0014D6                     __ptext2:
   835                           	opt stack 0
   836  0014D6                     _writeString:
   837                           	opt stack 26
   838                           
   839                           ;uart.c: 99: for(int i = 0; i<strlen(str); i++)
   840                           
   841                           ;incstack = 0
   842  0014D6  0E00               	movlw	0
   843  0014D8  0100               	movlb	0	; () banked
   844  0014DA  6FD1               	movwf	(writeString@i+1)& (0+255),b
   845  0014DC  0E00               	movlw	0
   846  0014DE  6FD0               	movwf	writeString@i& (0+255),b
   847  0014E0  D024               	goto	l1719
   848  0014E2                     l1715:
   849                           
   850                           ; BSR set to: 0
   851                           ;uart.c: 100: {
   852                           ;uart.c: 101: UART_Write(str[i], dev);
   853  0014E2  C0CD  F0C5         	movff	writeString@dev,UART_Write@dev
   854  0014E6  0100               	movlb	0	; () banked
   855  0014E8  51D0               	movf	writeString@i& (0+255),w,b
   856  0014EA  0100               	movlb	0	; () banked
   857  0014EC  25CB               	addwf	writeString@str& (0+255),w,b
   858  0014EE  0100               	movlb	0	; () banked
   859  0014F0  6FCE               	movwf	??_writeString& (0+255),b
   860  0014F2  0100               	movlb	0	; () banked
   861  0014F4  51D1               	movf	(writeString@i+1)& (0+255),w,b
   862  0014F6  0100               	movlb	0	; () banked
   863  0014F8  21CC               	addwfc	(writeString@str+1)& (0+255),w,b
   864  0014FA  0100               	movlb	0	; () banked
   865  0014FC  6FCF               	movwf	(??_writeString+1)& (0+255),b
   866  0014FE  C0CE  FFF6         	movff	??_writeString,tblptrl
   867  001502  C0CF  FFF7         	movff	??_writeString+1,tblptrh
   868  001506  0E00               	movlw	low (__smallconst shr (0+16))
   869  001508  6EF8               	movwf	tblptru,c
   870  00150A  0E0E               	movlw	(high __ramtop+-1)
   871  00150C  64F7               	cpfsgt	tblptrh,c
   872  00150E  D003               	bra	u1007
   873  001510  0008               	tblrd		*
   874  001512  50F5               	movf	tablat,w,c
   875  001514  D005               	bra	u1000
   876  001516                     u1007:
   877  001516  CFF6 FFE9          	movff	tblptrl,fsr0l
   878  00151A  CFF7 FFEA          	movff	tblptrh,fsr0h
   879  00151E  50EF               	movf	indf0,w,c
   880  001520                     u1000:
   881  001520  EC98  F00C         	call	_UART_Write
   882  001524  0100               	movlb	0	; () banked
   883  001526  4BD0               	infsnz	writeString@i& (0+255),f,b
   884  001528  2BD1               	incf	(writeString@i+1)& (0+255),f,b
   885  00152A                     l1719:
   886                           
   887                           ; BSR set to: 0
   888  00152A  C0CB  F0C5         	movff	writeString@str,strlen@s
   889  00152E  C0CC  F0C6         	movff	writeString@str+1,strlen@s+1
   890  001532  EC4C  F00B         	call	_strlen	;wreg free
   891  001536  0100               	movlb	0	; () banked
   892  001538  51C5               	movf	?_strlen& (0+255),w,b
   893  00153A  0100               	movlb	0	; () banked
   894  00153C  5DD0               	subwf	writeString@i& (0+255),w,b
   895  00153E  0100               	movlb	0	; () banked
   896  001540  51C6               	movf	(?_strlen+1)& (0+255),w,b
   897  001542  0100               	movlb	0	; () banked
   898  001544  59D1               	subwfb	(writeString@i+1)& (0+255),w,b
   899  001546  B0D8               	btfsc	status,0,c
   900  001548  0012               	return	
   901  00154A  D7CB               	goto	l1715
   902  00154C                     __end_of_writeString:
   903                           	opt stack 0
   904                           tblptru	equ	0xFF8
   905                           tblptrh	equ	0xFF7
   906                           tblptrl	equ	0xFF6
   907                           tablat	equ	0xFF5
   908                           indf0	equ	0xFEF
   909                           postinc0	equ	0xFEE
   910                           fsr0h	equ	0xFEA
   911                           fsr0l	equ	0xFE9
   912                           wreg	equ	0xFE8
   913                           postdec1	equ	0xFE5
   914                           fsr1l	equ	0xFE1
   915                           status	equ	0xFD8
   916                           
   917 ;; *************** function _UART_Write *****************
   918 ;; Defined at:
   919 ;;		line 61 in file "uart.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;  data            1    wreg     unsigned char 
   922 ;;  dev             1    0[BANK0 ] unsigned char 
   923 ;; Auto vars:     Size  Location     Type
   924 ;;  data            1    1[BANK0 ] unsigned char 
   925 ;; Return value:  Size  Location     Type
   926 ;;                  1    wreg      void 
   927 ;; Registers used:
   928 ;;		wreg, status,2, status,0
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   934 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   935 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   937 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   938 ;;Total ram usage:        2 bytes
   939 ;; Hardware stack levels used:    1
   940 ;; Hardware stack levels required when called:    3
   941 ;; This function calls:
   942 ;;		Nothing
   943 ;; This function is called by:
   944 ;;		_main
   945 ;;		_writeString
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949                           	psect	text3
   950  001930                     __ptext3:
   951                           	opt stack 0
   952  001930                     _UART_Write:
   953                           	opt stack 26
   954                           
   955                           ; BSR set to: 0
   956                           ;incstack = 0
   957                           ;UART_Write@data stored from wreg
   958  001930  0100               	movlb	0	; () banked
   959  001932  6FC6               	movwf	UART_Write@data& (0+255),b
   960                           
   961                           ;uart.c: 63: if (dev == 1)
   962  001934  0100               	movlb	0	; () banked
   963  001936  05C5               	decf	UART_Write@dev& (0+255),w,b
   964  001938  A4D8               	btfss	status,2,c
   965  00193A  D005               	goto	l150
   966  00193C                     l146:
   967  00193C  A2AD               	btfss	4013,1,c	;volatile
   968  00193E  D7FE               	goto	l146
   969                           
   970                           ;uart.c: 66: TXREG1 = data;
   971  001940  C0C6  FFAE         	movff	UART_Write@data,4014	;volatile
   972                           
   973                           ;uart.c: 67: }
   974  001944  0012               	return	
   975  001946                     l150:
   976  001946  A2A8               	btfss	4008,1,c	;volatile
   977  001948  D7FE               	goto	l150
   978                           
   979                           ;uart.c: 71: TXREG2 = data;
   980  00194A  C0C6  FFA9         	movff	UART_Write@data,4009	;volatile
   981  00194E  0012               	return	
   982  001950                     __end_of_UART_Write:
   983                           	opt stack 0
   984                           tblptru	equ	0xFF8
   985                           tblptrh	equ	0xFF7
   986                           tblptrl	equ	0xFF6
   987                           tablat	equ	0xFF5
   988                           indf0	equ	0xFEF
   989                           postinc0	equ	0xFEE
   990                           fsr0h	equ	0xFEA
   991                           fsr0l	equ	0xFE9
   992                           wreg	equ	0xFE8
   993                           postdec1	equ	0xFE5
   994                           fsr1l	equ	0xFE1
   995                           status	equ	0xFD8
   996                           
   997 ;; *************** function _wait_ms *****************
   998 ;; Defined at:
   999 ;;		line 35 in file "system.c"
  1000 ;; Parameters:    Size  Location     Type
  1001 ;;  time            2   12[BANK0 ] int 
  1002 ;; Auto vars:     Size  Location     Type
  1003 ;;		None
  1004 ;; Return value:  Size  Location     Type
  1005 ;;                  1    wreg      void 
  1006 ;; Registers used:
  1007 ;;		wreg, status,2, status,0, cstack
  1008 ;; Tracked objects:
  1009 ;;		On entry : 0/0
  1010 ;;		On exit  : 0/0
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1013 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1016 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1017 ;;Total ram usage:        2 bytes
  1018 ;; Hardware stack levels used:    1
  1019 ;; Hardware stack levels required when called:    4
  1020 ;; This function calls:
  1021 ;;		___lmul
  1022 ;; This function is called by:
  1023 ;;		_main
  1024 ;;		_writeResult
  1025 ;; This function uses a non-reentrant model
  1026 ;;
  1027                           
  1028                           	psect	text4
  1029  0016FC                     __ptext4:
  1030                           	opt stack 0
  1031  0016FC                     _wait_ms:
  1032                           	opt stack 25
  1033                           
  1034                           ;system.c: 37: static long timel = 0;
  1035                           ;system.c: 38: timel = time * 1000l;
  1036                           
  1037                           ;incstack = 0
  1038  0016FC  C0D1  F0C5         	movff	wait_ms@time,___lmul@multiplier
  1039  001700  C0D2  F0C6         	movff	wait_ms@time+1,___lmul@multiplier+1
  1040  001704  0100               	movlb	0	; () banked
  1041  001706  0E00               	movlw	0
  1042  001708  BFC6               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  1043  00170A  0EFF               	movlw	-1
  1044  00170C  6FC7               	movwf	(___lmul@multiplier+2)& (0+255),b
  1045  00170E  6FC8               	movwf	(___lmul@multiplier+3)& (0+255),b
  1046  001710  0EE8               	movlw	232
  1047  001712  0100               	movlb	0	; () banked
  1048  001714  6FC9               	movwf	___lmul@multiplicand& (0+255),b
  1049  001716  0E03               	movlw	3
  1050  001718  6FCA               	movwf	(___lmul@multiplicand+1)& (0+255),b
  1051  00171A  0E00               	movlw	0
  1052  00171C  6FCB               	movwf	(___lmul@multiplicand+2)& (0+255),b
  1053  00171E  0E00               	movlw	0
  1054  001720  6FCC               	movwf	(___lmul@multiplicand+3)& (0+255),b
  1055  001722  ECA6  F00A         	call	___lmul	;wreg free
  1056  001726  C0C5  F039         	movff	?___lmul,wait_ms@timel
  1057  00172A  C0C6  F03A         	movff	?___lmul+1,wait_ms@timel+1
  1058  00172E  C0C7  F03B         	movff	?___lmul+2,wait_ms@timel+2
  1059  001732  C0C8  F03C         	movff	?___lmul+3,wait_ms@timel+3
  1060                           
  1061                           ;system.c: 39: for( ; timel; timel--);
  1062  001736  D008               	goto	l73
  1063  001738                     l1723:
  1064  001738  0EFF               	movlw	255
  1065  00173A  2639               	addwf	wait_ms@timel,f,c
  1066  00173C  0EFF               	movlw	255
  1067  00173E  223A               	addwfc	wait_ms@timel+1,f,c
  1068  001740  0EFF               	movlw	255
  1069  001742  223B               	addwfc	wait_ms@timel+2,f,c
  1070  001744  0EFF               	movlw	255
  1071  001746  223C               	addwfc	wait_ms@timel+3,f,c
  1072  001748                     l73:
  1073  001748  5039               	movf	wait_ms@timel,w,c
  1074  00174A  103A               	iorwf	wait_ms@timel+1,w,c
  1075  00174C  103B               	iorwf	wait_ms@timel+2,w,c
  1076  00174E  103C               	iorwf	wait_ms@timel+3,w,c
  1077  001750  B4D8               	btfsc	status,2,c
  1078  001752  0012               	return	
  1079  001754  D7F1               	goto	l1723
  1080  001756                     __end_of_wait_ms:
  1081                           	opt stack 0
  1082                           tblptru	equ	0xFF8
  1083                           tblptrh	equ	0xFF7
  1084                           tblptrl	equ	0xFF6
  1085                           tablat	equ	0xFF5
  1086                           indf0	equ	0xFEF
  1087                           postinc0	equ	0xFEE
  1088                           fsr0h	equ	0xFEA
  1089                           fsr0l	equ	0xFE9
  1090                           wreg	equ	0xFE8
  1091                           postdec1	equ	0xFE5
  1092                           fsr1l	equ	0xFE1
  1093                           status	equ	0xFD8
  1094                           
  1095 ;; *************** function ___lmul *****************
  1096 ;; Defined at:
  1097 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  1098 ;; Parameters:    Size  Location     Type
  1099 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1100 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;  product         4    8[BANK0 ] unsigned long 
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  4    0[BANK0 ] unsigned long 
  1105 ;; Registers used:
  1106 ;;		wreg, status,2, status,0
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1112 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1113 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1115 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1116 ;;Total ram usage:       12 bytes
  1117 ;; Hardware stack levels used:    1
  1118 ;; Hardware stack levels required when called:    3
  1119 ;; This function calls:
  1120 ;;		Nothing
  1121 ;; This function is called by:
  1122 ;;		_wait_ms
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text5
  1127  00154C                     __ptext5:
  1128                           	opt stack 0
  1129  00154C                     ___lmul:
  1130                           	opt stack 25
  1131                           
  1132                           ;incstack = 0
  1133  00154C  0E00               	movlw	0
  1134  00154E  0100               	movlb	0	; () banked
  1135  001550  6FCD               	movwf	___lmul@product& (0+255),b
  1136  001552  0E00               	movlw	0
  1137  001554  6FCE               	movwf	(___lmul@product+1)& (0+255),b
  1138  001556  0E00               	movlw	0
  1139  001558  6FCF               	movwf	(___lmul@product+2)& (0+255),b
  1140  00155A  0E00               	movlw	0
  1141  00155C  6FD0               	movwf	(___lmul@product+3)& (0+255),b
  1142  00155E                     l1705:
  1143                           
  1144                           ; BSR set to: 0
  1145  00155E  0100               	movlb	0	; () banked
  1146  001560  A1C5               	btfss	___lmul@multiplier& (0+255),0,b
  1147  001562  D010               	goto	l1709
  1148                           
  1149                           ; BSR set to: 0
  1150  001564  0100               	movlb	0	; () banked
  1151  001566  51C9               	movf	___lmul@multiplicand& (0+255),w,b
  1152  001568  0100               	movlb	0	; () banked
  1153  00156A  27CD               	addwf	___lmul@product& (0+255),f,b
  1154  00156C  0100               	movlb	0	; () banked
  1155  00156E  51CA               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  1156  001570  0100               	movlb	0	; () banked
  1157  001572  23CE               	addwfc	(___lmul@product+1)& (0+255),f,b
  1158  001574  0100               	movlb	0	; () banked
  1159  001576  51CB               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  1160  001578  0100               	movlb	0	; () banked
  1161  00157A  23CF               	addwfc	(___lmul@product+2)& (0+255),f,b
  1162  00157C  0100               	movlb	0	; () banked
  1163  00157E  51CC               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  1164  001580  0100               	movlb	0	; () banked
  1165  001582  23D0               	addwfc	(___lmul@product+3)& (0+255),f,b
  1166  001584                     l1709:
  1167                           
  1168                           ; BSR set to: 0
  1169  001584  0100               	movlb	0	; () banked
  1170  001586  90D8               	bcf	status,0,c
  1171  001588  37C9               	rlcf	___lmul@multiplicand& (0+255),f,b
  1172  00158A  37CA               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  1173  00158C  37CB               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  1174  00158E  37CC               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  1175                           
  1176                           ; BSR set to: 0
  1177  001590  0100               	movlb	0	; () banked
  1178  001592  90D8               	bcf	status,0,c
  1179  001594  33C8               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  1180  001596  33C7               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  1181  001598  33C6               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  1182  00159A  33C5               	rrcf	___lmul@multiplier& (0+255),f,b
  1183  00159C  0100               	movlb	0	; () banked
  1184  00159E  51C5               	movf	___lmul@multiplier& (0+255),w,b
  1185  0015A0  0100               	movlb	0	; () banked
  1186  0015A2  11C6               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  1187  0015A4  0100               	movlb	0	; () banked
  1188  0015A6  11C7               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  1189  0015A8  0100               	movlb	0	; () banked
  1190  0015AA  11C8               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  1191  0015AC  A4D8               	btfss	status,2,c
  1192  0015AE  D7D7               	goto	l1705
  1193                           
  1194                           ; BSR set to: 0
  1195  0015B0  C0CD  F0C5         	movff	___lmul@product,?___lmul
  1196  0015B4  C0CE  F0C6         	movff	___lmul@product+1,?___lmul+1
  1197  0015B8  C0CF  F0C7         	movff	___lmul@product+2,?___lmul+2
  1198  0015BC  C0D0  F0C8         	movff	___lmul@product+3,?___lmul+3
  1199                           
  1200                           ; BSR set to: 0
  1201  0015C0  0012               	return		;funcret
  1202  0015C2                     __end_of___lmul:
  1203                           	opt stack 0
  1204                           tblptru	equ	0xFF8
  1205                           tblptrh	equ	0xFF7
  1206                           tblptrl	equ	0xFF6
  1207                           tablat	equ	0xFF5
  1208                           indf0	equ	0xFEF
  1209                           postinc0	equ	0xFEE
  1210                           fsr0h	equ	0xFEA
  1211                           fsr0l	equ	0xFE9
  1212                           wreg	equ	0xFE8
  1213                           postdec1	equ	0xFE5
  1214                           fsr1l	equ	0xFE1
  1215                           status	equ	0xFD8
  1216                           
  1217 ;; *************** function _parseString *****************
  1218 ;; Defined at:
  1219 ;;		line 96 in file "bufferhandler.c"
  1220 ;; Parameters:    Size  Location     Type
  1221 ;;		None
  1222 ;; Auto vars:     Size  Location     Type
  1223 ;;  i               2   33[BANK0 ] int 
  1224 ;;  tmp             2   35[BANK0 ] int 
  1225 ;;  socEndPos       2   31[BANK0 ] int 
  1226 ;;  socStartPos     2   29[BANK0 ] int 
  1227 ;;  k               2   26[BANK0 ] int 
  1228 ;;  chgStart        2   24[BANK0 ] int 
  1229 ;;  socSize         2   22[BANK0 ] int 
  1230 ;;  chgStop         2   19[BANK0 ] int 
  1231 ;;  CHG             1   28[BANK0 ] unsigned char 
  1232 ;;  tmpSOC          1   21[BANK0 ] unsigned char 
  1233 ;; Return value:  Size  Location     Type
  1234 ;;                  1    wreg      unsigned char 
  1235 ;; Registers used:
  1236 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1237 ;; Tracked objects:
  1238 ;;		On entry : 0/0
  1239 ;;		On exit  : 0/0
  1240 ;;		Unchanged: 0/0
  1241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1243 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1244 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1245 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1246 ;;Total ram usage:       20 bytes
  1247 ;; Hardware stack levels used:    1
  1248 ;; Hardware stack levels required when called:    6
  1249 ;; This function calls:
  1250 ;;		___awdiv
  1251 ;;		_checkString
  1252 ;;		_lenHelper
  1253 ;;		_transformToTwoDigitNumber
  1254 ;; This function is called by:
  1255 ;;		_main
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259                           	psect	text6
  1260  000F0C                     __ptext6:
  1261                           	opt stack 0
  1262  000F0C                     _parseString:
  1263                           	opt stack 24
  1264                           
  1265                           ;bufferhandler.c: 98: checkString();
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;incstack = 0
  1269  000F0C  ECF3  F008         	call	_checkString	;wreg free
  1270                           
  1271                           ;bufferhandler.c: 104: int socStartPos = positions[8]+1;
  1272  000F10  0E01               	movlw	1
  1273  000F12  0100               	movlb	0	; () banked
  1274  000F14  2570               	addwf	(_positions+16)& (0+255),w,b
  1275  000F16  0100               	movlb	0	; () banked
  1276  000F18  6FE2               	movwf	parseString@socStartPos& (0+255),b
  1277  000F1A  0E00               	movlw	0
  1278  000F1C  0100               	movlb	0	; () banked
  1279  000F1E  2171               	addwfc	(_positions+17)& (0+255),w,b
  1280  000F20  0100               	movlb	0	; () banked
  1281  000F22  6FE3               	movwf	(parseString@socStartPos+1)& (0+255),b
  1282                           
  1283                           ; BSR set to: 0
  1284                           ;bufferhandler.c: 105: int socEndPos = positions[9]-1;
  1285  000F24  0EFF               	movlw	255
  1286  000F26  0100               	movlb	0	; () banked
  1287  000F28  2572               	addwf	(_positions+18)& (0+255),w,b
  1288  000F2A  0100               	movlb	0	; () banked
  1289  000F2C  6FE4               	movwf	parseString@socEndPos& (0+255),b
  1290  000F2E  0EFF               	movlw	255
  1291  000F30  0100               	movlb	0	; () banked
  1292  000F32  2173               	addwfc	(_positions+19)& (0+255),w,b
  1293  000F34  0100               	movlb	0	; () banked
  1294  000F36  6FE5               	movwf	(parseString@socEndPos+1)& (0+255),b
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;bufferhandler.c: 106: int socSize = (socEndPos - socStartPos)+1;
  1298  000F38  C0E2  F0D6         	movff	parseString@socStartPos,??_parseString
  1299  000F3C  C0E3  F0D7         	movff	parseString@socStartPos+1,??_parseString+1
  1300  000F40  0100               	movlb	0	; () banked
  1301  000F42  1FD6               	comf	??_parseString& (0+255),f,b
  1302  000F44  1FD7               	comf	(??_parseString+1)& (0+255),f,b
  1303  000F46  4BD6               	infsnz	??_parseString& (0+255),f,b
  1304  000F48  2BD7               	incf	(??_parseString+1)& (0+255),f,b
  1305  000F4A  0100               	movlb	0	; () banked
  1306  000F4C  51E4               	movf	parseString@socEndPos& (0+255),w,b
  1307  000F4E  0100               	movlb	0	; () banked
  1308  000F50  27D6               	addwf	??_parseString& (0+255),f,b
  1309  000F52  0100               	movlb	0	; () banked
  1310  000F54  51E5               	movf	(parseString@socEndPos+1)& (0+255),w,b
  1311  000F56  0100               	movlb	0	; () banked
  1312  000F58  23D7               	addwfc	(??_parseString+1)& (0+255),f,b
  1313  000F5A  0E01               	movlw	1
  1314  000F5C  0100               	movlb	0	; () banked
  1315  000F5E  25D6               	addwf	??_parseString& (0+255),w,b
  1316  000F60  0100               	movlb	0	; () banked
  1317  000F62  6FDB               	movwf	parseString@socSize& (0+255),b
  1318  000F64  0E00               	movlw	0
  1319  000F66  0100               	movlb	0	; () banked
  1320  000F68  21D7               	addwfc	(??_parseString+1)& (0+255),w,b
  1321  000F6A  0100               	movlb	0	; () banked
  1322  000F6C  6FDC               	movwf	(parseString@socSize+1)& (0+255),b
  1323                           
  1324                           ; BSR set to: 0
  1325                           ;bufferhandler.c: 109: int k = 0;
  1326  000F6E  0E00               	movlw	0
  1327  000F70  0100               	movlb	0	; () banked
  1328  000F72  6FE0               	movwf	(parseString@k+1)& (0+255),b
  1329  000F74  0E00               	movlw	0
  1330  000F76  6FDF               	movwf	parseString@k& (0+255),b
  1331                           
  1332                           ; BSR set to: 0
  1333                           ;bufferhandler.c: 110: for(int i = socStartPos; i<=socEndPos; i++){
  1334  000F78  C0E2  F0E6         	movff	parseString@socStartPos,parseString@i
  1335  000F7C  C0E3  F0E7         	movff	parseString@socStartPos+1,parseString@i+1
  1336  000F80  D021               	goto	l1947
  1337  000F82                     l1941:
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;bufferhandler.c: 111: SOC[k] = allDataString[i];
  1341  000F82  0E00               	movlw	low _allDataString
  1342  000F84  0100               	movlb	0	; () banked
  1343  000F86  25E6               	addwf	parseString@i& (0+255),w,b
  1344  000F88  6ED9               	movwf	fsr2l,c
  1345  000F8A  0E01               	movlw	high _allDataString
  1346  000F8C  0100               	movlb	0	; () banked
  1347  000F8E  21E7               	addwfc	(parseString@i+1)& (0+255),w,b
  1348  000F90  6EDA               	movwf	fsr2h,c
  1349  000F92  50DF               	movf	indf2,w,c
  1350  000F94  0100               	movlb	0	; () banked
  1351  000F96  6FD6               	movwf	??_parseString& (0+255),b
  1352  000F98  6BD7               	clrf	(??_parseString+1)& (0+255),b
  1353  000F9A  90D8               	bcf	status,0,c
  1354  000F9C  0100               	movlb	0	; () banked
  1355  000F9E  35DF               	rlcf	parseString@k& (0+255),w,b
  1356  000FA0  6ED9               	movwf	fsr2l,c
  1357  000FA2  0100               	movlb	0	; () banked
  1358  000FA4  35E0               	rlcf	(parseString@k+1)& (0+255),w,b
  1359  000FA6  6EDA               	movwf	fsr2h,c
  1360  000FA8  0EBF               	movlw	low _SOC
  1361  000FAA  26D9               	addwf	fsr2l,f,c
  1362  000FAC  0E00               	movlw	high _SOC
  1363  000FAE  22DA               	addwfc	fsr2h,f,c
  1364  000FB0  C0D6  FFDE         	movff	??_parseString,postinc2
  1365  000FB4  C0D7  FFDD         	movff	??_parseString+1,postdec2
  1366                           
  1367                           ; BSR set to: 0
  1368                           ;bufferhandler.c: 112: k++;
  1369  000FB8  0100               	movlb	0	; () banked
  1370  000FBA  4BDF               	infsnz	parseString@k& (0+255),f,b
  1371  000FBC  2BE0               	incf	(parseString@k+1)& (0+255),f,b
  1372                           
  1373                           ; BSR set to: 0
  1374  000FBE  0100               	movlb	0	; () banked
  1375  000FC0  4BE6               	infsnz	parseString@i& (0+255),f,b
  1376  000FC2  2BE7               	incf	(parseString@i+1)& (0+255),f,b
  1377  000FC4                     l1947:
  1378                           
  1379                           ; BSR set to: 0
  1380  000FC4  0100               	movlb	0	; () banked
  1381  000FC6  51E6               	movf	parseString@i& (0+255),w,b
  1382  000FC8  0100               	movlb	0	; () banked
  1383  000FCA  5DE4               	subwf	parseString@socEndPos& (0+255),w,b
  1384  000FCC  0100               	movlb	0	; () banked
  1385  000FCE  51E5               	movf	(parseString@socEndPos+1)& (0+255),w,b
  1386  000FD0  0A80               	xorlw	128
  1387  000FD2  0100               	movlb	0	; () banked
  1388  000FD4  6FD6               	movwf	??_parseString& (0+255),b
  1389  000FD6  0100               	movlb	0	; () banked
  1390  000FD8  51E7               	movf	(parseString@i+1)& (0+255),w,b
  1391  000FDA  0A80               	xorlw	128
  1392  000FDC  0100               	movlb	0	; () banked
  1393  000FDE  59D6               	subwfb	??_parseString& (0+255),w,b
  1394  000FE0  B0D8               	btfsc	status,0,c
  1395  000FE2  D7CF               	goto	l1941
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;bufferhandler.c: 113: }
  1399                           ;bufferhandler.c: 115: int tmp = transformToTwoDigitNumber(SOC, socSize);
  1400                           
  1401                           ; BSR set to: 0
  1402  000FE4  0EBF               	movlw	low _SOC
  1403  000FE6  0100               	movlb	0	; () banked
  1404  000FE8  6FCB               	movwf	transformToTwoDigitNumber@number& (0+255),b
  1405  000FEA  0E00               	movlw	high _SOC
  1406  000FEC  0100               	movlb	0	; () banked
  1407  000FEE  6FCC               	movwf	(transformToTwoDigitNumber@number+1)& (0+255),b
  1408  000FF0  C0DB  F0CD         	movff	parseString@socSize,transformToTwoDigitNumber@size
  1409  000FF4  C0DC  F0CE         	movff	parseString@socSize+1,transformToTwoDigitNumber@size+1
  1410  000FF8  EC51  F008         	call	_transformToTwoDigitNumber	;wreg free
  1411  000FFC  C0CB  F0E8         	movff	?_transformToTwoDigitNumber,parseString@tmp
  1412  001000  C0CC  F0E9         	movff	?_transformToTwoDigitNumber+1,parseString@tmp+1
  1413                           
  1414                           ;bufferhandler.c: 116: char tmpSOC = 'a';
  1415  001004  0E61               	movlw	97
  1416  001006  0100               	movlb	0	; () banked
  1417  001008  6FDA               	movwf	parseString@tmpSOC& (0+255),b
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;bufferhandler.c: 118: if(lenHelper(tmp) == 1){
  1421  00100A  C0E8  F0C5         	movff	parseString@tmp,lenHelper@x
  1422  00100E  C0E9  F0C6         	movff	parseString@tmp+1,lenHelper@x+1
  1423  001012  ECE1  F00A         	call	_lenHelper	;wreg free
  1424  001016  0100               	movlb	0	; () banked
  1425  001018  05C5               	decf	?_lenHelper& (0+255),w,b
  1426  00101A  0100               	movlb	0	; () banked
  1427  00101C  11C6               	iorwf	(?_lenHelper+1)& (0+255),w,b
  1428  00101E  A4D8               	btfss	status,2,c
  1429  001020  D003               	goto	l1957
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;bufferhandler.c: 119: charSOC[0] = (tmp) + 48;
  1433  001022  0100               	movlb	0	; () banked
  1434  001024  51E8               	movf	parseString@tmp& (0+255),w,b
  1435  001026  D00D               	goto	L1
  1436  001028                     l1957:
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;bufferhandler.c: 122: charSOC[0] = (tmp/10) + 48;
  1440  001028  C0E8  F0C5         	movff	parseString@tmp,___awdiv@dividend
  1441  00102C  C0E9  F0C6         	movff	parseString@tmp+1,___awdiv@dividend+1
  1442  001030  0E00               	movlw	0
  1443  001032  0100               	movlb	0	; () banked
  1444  001034  6FC8               	movwf	(___awdiv@divisor+1)& (0+255),b
  1445  001036  0E0A               	movlw	10
  1446  001038  6FC7               	movwf	___awdiv@divisor& (0+255),b
  1447  00103A  EC61  F009         	call	___awdiv	;wreg free
  1448  00103E  0100               	movlb	0	; () banked
  1449  001040  51C5               	movf	?___awdiv& (0+255),w,b
  1450  001042                     L1:
  1451  001042  0F30               	addlw	48
  1452  001044  0100               	movlb	0	; () banked
  1453  001046  6F76               	movwf	_charSOC& (0+255),b
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;bufferhandler.c: 123: }
  1457                           ;bufferhandler.c: 127: int chgStart = positions[6] + 1;
  1458                           
  1459                           ; BSR set to: 0
  1460  001048  0E01               	movlw	1
  1461  00104A  0100               	movlb	0	; () banked
  1462  00104C  256C               	addwf	(_positions+12)& (0+255),w,b
  1463  00104E  0100               	movlb	0	; () banked
  1464  001050  6FDD               	movwf	parseString@chgStart& (0+255),b
  1465  001052  0E00               	movlw	0
  1466  001054  0100               	movlb	0	; () banked
  1467  001056  216D               	addwfc	(_positions+13)& (0+255),w,b
  1468  001058  0100               	movlb	0	; () banked
  1469  00105A  6FDE               	movwf	(parseString@chgStart+1)& (0+255),b
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;bufferhandler.c: 128: int chgStop = positions[7] - 1;
  1473  00105C  0EFF               	movlw	255
  1474  00105E  0100               	movlb	0	; () banked
  1475  001060  256E               	addwf	(_positions+14)& (0+255),w,b
  1476  001062  0100               	movlb	0	; () banked
  1477  001064  6FD8               	movwf	parseString@chgStop& (0+255),b
  1478  001066  0EFF               	movlw	255
  1479  001068  0100               	movlb	0	; () banked
  1480  00106A  216F               	addwfc	(_positions+15)& (0+255),w,b
  1481  00106C  0100               	movlb	0	; () banked
  1482  00106E  6FD9               	movwf	(parseString@chgStop+1)& (0+255),b
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;bufferhandler.c: 131: char CHG = '0';
  1486  001070  0E30               	movlw	48
  1487  001072  0100               	movlb	0	; () banked
  1488  001074  6FE1               	movwf	parseString@CHG& (0+255),b
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;bufferhandler.c: 133: if(allDataString[chgStart] == 0x2D){
  1492  001076  0E00               	movlw	low _allDataString
  1493  001078  0100               	movlb	0	; () banked
  1494  00107A  25DD               	addwf	parseString@chgStart& (0+255),w,b
  1495  00107C  6ED9               	movwf	fsr2l,c
  1496  00107E  0E01               	movlw	high _allDataString
  1497  001080  0100               	movlb	0	; () banked
  1498  001082  21DE               	addwfc	(parseString@chgStart+1)& (0+255),w,b
  1499  001084  6EDA               	movwf	fsr2h,c
  1500  001086  0E2D               	movlw	45
  1501  001088  18DE               	xorwf	postinc2,w,c
  1502  00108A  A4D8               	btfss	status,2,c
  1503  00108C  D003               	goto	l1969
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;bufferhandler.c: 134: CHG = '1';
  1507  00108E  0E31               	movlw	49
  1508  001090  0100               	movlb	0	; () banked
  1509  001092  6FE1               	movwf	parseString@CHG& (0+255),b
  1510  001094                     l1969:
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;bufferhandler.c: 135: }
  1514                           ;bufferhandler.c: 138: parsedString[3] = charSOC[0];
  1515  001094  C076  F025         	movff	_charSOC,_parsedString+3
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;bufferhandler.c: 139: parsedString[4] = charSOC[0];
  1519  001098  C076  F026         	movff	_charSOC,_parsedString+4
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;bufferhandler.c: 143: parsedString[9] = CHG;
  1523  00109C  C0E1  F02B         	movff	parseString@CHG,_parsedString+9
  1524  0010A0  0012               	return	
  1525  0010A2                     __end_of_parseString:
  1526                           	opt stack 0
  1527                           tblptru	equ	0xFF8
  1528                           tblptrh	equ	0xFF7
  1529                           tblptrl	equ	0xFF6
  1530                           tablat	equ	0xFF5
  1531                           indf0	equ	0xFEF
  1532                           postinc0	equ	0xFEE
  1533                           fsr0h	equ	0xFEA
  1534                           fsr0l	equ	0xFE9
  1535                           wreg	equ	0xFE8
  1536                           postdec1	equ	0xFE5
  1537                           fsr1l	equ	0xFE1
  1538                           indf2	equ	0xFDF
  1539                           postinc2	equ	0xFDE
  1540                           postdec2	equ	0xFDD
  1541                           fsr2h	equ	0xFDA
  1542                           fsr2l	equ	0xFD9
  1543                           status	equ	0xFD8
  1544                           
  1545 ;; *************** function _transformToTwoDigitNumber *****************
  1546 ;; Defined at:
  1547 ;;		line 163 in file "bufferhandler.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;  number          2    6[BANK0 ] PTR int 
  1550 ;;		 -> SOC(6), 
  1551 ;;  size            2    8[BANK0 ] int 
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;  result          2   12[BANK0 ] int 
  1554 ;; Return value:  Size  Location     Type
  1555 ;;                  2    6[BANK0 ] int 
  1556 ;; Registers used:
  1557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1558 ;; Tracked objects:
  1559 ;;		On entry : 0/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1563 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1564 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1565 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1566 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1567 ;;Total ram usage:        8 bytes
  1568 ;; Hardware stack levels used:    1
  1569 ;; Hardware stack levels required when called:    4
  1570 ;; This function calls:
  1571 ;;		___wmul
  1572 ;; This function is called by:
  1573 ;;		_parseString
  1574 ;; This function uses a non-reentrant model
  1575 ;;
  1576                           
  1577                           	psect	text7
  1578  0010A2                     __ptext7:
  1579                           	opt stack 0
  1580  0010A2                     _transformToTwoDigitNumber:
  1581                           	opt stack 25
  1582                           
  1583                           ;bufferhandler.c: 165: int result = 0;
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;incstack = 0
  1587  0010A2  0E00               	movlw	0
  1588  0010A4  0100               	movlb	0	; () banked
  1589  0010A6  6FD2               	movwf	(transformToTwoDigitNumber@result+1)& (0+255),b
  1590  0010A8  0E00               	movlw	0
  1591  0010AA  6FD1               	movwf	transformToTwoDigitNumber@result& (0+255),b
  1592                           
  1593                           ;bufferhandler.c: 166: switch(size){
  1594  0010AC  D082               	goto	l1777
  1595  0010AE                     l1743:
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;bufferhandler.c: 168: if(number[0] >= 5){
  1599  0010AE  C0CB  FFD9         	movff	transformToTwoDigitNumber@number,fsr2l
  1600  0010B2  C0CC  FFDA         	movff	transformToTwoDigitNumber@number+1,fsr2h
  1601  0010B6  0E01               	movlw	1
  1602  0010B8  BEDB               	btfsc	plusw2,7,c
  1603  0010BA  D00D               	goto	l1751
  1604  0010BC  0E01               	movlw	1
  1605  0010BE  50DB               	movf	plusw2,w,c
  1606  0010C0  E104               	bnz	u1050
  1607  0010C2  0E05               	movlw	5
  1608  0010C4  5CDE               	subwf	postinc2,w,c
  1609  0010C6  A0D8               	btfss	status,0,c
  1610  0010C8  D006               	goto	l1751
  1611  0010CA                     u1050:
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;bufferhandler.c: 169: return 1;
  1615  0010CA  0E00               	movlw	0
  1616  0010CC  0100               	movlb	0	; () banked
  1617  0010CE  6FCC               	movwf	(?_transformToTwoDigitNumber+1)& (0+255),b
  1618  0010D0  0E01               	movlw	1
  1619  0010D2  6FCB               	movwf	?_transformToTwoDigitNumber& (0+255),b
  1620                           
  1621                           ; BSR set to: 0
  1622  0010D4  0012               	return	
  1623  0010D6                     l1751:
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;bufferhandler.c: 171: return 0;
  1627  0010D6  0E00               	movlw	0
  1628  0010D8  0100               	movlb	0	; () banked
  1629  0010DA  6FCC               	movwf	(?_transformToTwoDigitNumber+1)& (0+255),b
  1630  0010DC  0E00               	movlw	0
  1631  0010DE  D7F9               	goto	L2
  1632  0010E0                     l1755:
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;bufferhandler.c: 174: result = number[0];
  1636  0010E0  C0CB  FFD9         	movff	transformToTwoDigitNumber@number,fsr2l
  1637  0010E4  C0CC  FFDA         	movff	transformToTwoDigitNumber@number+1,fsr2h
  1638  0010E8  CFDE F0D1          	movff	postinc2,transformToTwoDigitNumber@result
  1639  0010EC  CFDD F0D2          	movff	postdec2,transformToTwoDigitNumber@result+1
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;bufferhandler.c: 175: if(number[1] >= 5){
  1643  0010F0  0100               	movlb	0	; () banked
  1644  0010F2  EE20 F002          	lfsr	2,2
  1645  0010F6  51CB               	movf	transformToTwoDigitNumber@number& (0+255),w,b
  1646  0010F8  26D9               	addwf	fsr2l,f,c
  1647  0010FA  51CC               	movf	(transformToTwoDigitNumber@number+1)& (0+255),w,b
  1648  0010FC  22DA               	addwfc	fsr2h,f,c
  1649  0010FE  0E01               	movlw	1
  1650  001100  BEDB               	btfsc	plusw2,7,c
  1651  001102  D013               	goto	l262
  1652  001104  0E01               	movlw	1
  1653  001106  50DB               	movf	plusw2,w,c
  1654  001108  E104               	bnz	u1060
  1655  00110A  0E05               	movlw	5
  1656  00110C  5CDE               	subwf	postinc2,w,c
  1657  00110E  A0D8               	btfss	status,0,c
  1658  001110  D00C               	goto	l262
  1659  001112                     u1060:
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;bufferhandler.c: 176: return result++;
  1663  001112  0100               	movlb	0	; () banked
  1664  001114  51D1               	movf	transformToTwoDigitNumber@result& (0+255),w,b
  1665  001116  0100               	movlb	0	; () banked
  1666  001118  6FCB               	movwf	?_transformToTwoDigitNumber& (0+255),b
  1667  00111A  0100               	movlb	0	; () banked
  1668  00111C  51D2               	movf	(transformToTwoDigitNumber@result+1)& (0+255),w,b
  1669  00111E  0100               	movlb	0	; () banked
  1670  001120  6FCC               	movwf	(?_transformToTwoDigitNumber+1)& (0+255),b
  1671  001122  0100               	movlb	0	; () banked
  1672  001124  4BD1               	infsnz	transformToTwoDigitNumber@result& (0+255),f,b
  1673  001126  2BD2               	incf	(transformToTwoDigitNumber@result+1)& (0+255),f,b
  1674                           
  1675                           ; BSR set to: 0
  1676  001128  0012               	return	
  1677  00112A                     l262:
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;bufferhandler.c: 178: return result;
  1681  00112A  C0D1  F0CB         	movff	transformToTwoDigitNumber@result,?_transformToTwoDigitNumber
  1682  00112E  C0D2  F0CC         	movff	transformToTwoDigitNumber@result+1,?_transformToTwoDigitNumber+1
  1683  001132  0012               	return	
  1684  001134                     l1765:
  1685                           
  1686                           ; BSR set to: 0
  1687                           ;bufferhandler.c: 181: result = (number[0]*10)+(number[1]);
  1688  001134  0100               	movlb	0	; () banked
  1689  001136  EE20 F002          	lfsr	2,2
  1690  00113A  51CB               	movf	transformToTwoDigitNumber@number& (0+255),w,b
  1691  00113C  26D9               	addwf	fsr2l,f,c
  1692  00113E  51CC               	movf	(transformToTwoDigitNumber@number+1)& (0+255),w,b
  1693  001140  22DA               	addwfc	fsr2h,f,c
  1694  001142  CFDE F0CF          	movff	postinc2,??_transformToTwoDigitNumber
  1695  001146  CFDD F0D0          	movff	postdec2,??_transformToTwoDigitNumber+1
  1696  00114A  C0CB  FFD9         	movff	transformToTwoDigitNumber@number,fsr2l
  1697  00114E  C0CC  FFDA         	movff	transformToTwoDigitNumber@number+1,fsr2h
  1698  001152  CFDE F0C5          	movff	postinc2,___wmul@multiplier
  1699  001156  CFDD F0C6          	movff	postdec2,___wmul@multiplier+1
  1700  00115A  0E00               	movlw	0
  1701  00115C  0100               	movlb	0	; () banked
  1702  00115E  6FC8               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1703  001160  0E0A               	movlw	10
  1704  001162  6FC7               	movwf	___wmul@multiplicand& (0+255),b
  1705  001164  EC64  F00C         	call	___wmul	;wreg free
  1706  001168  0100               	movlb	0	; () banked
  1707  00116A  51CF               	movf	??_transformToTwoDigitNumber& (0+255),w,b
  1708  00116C  0100               	movlb	0	; () banked
  1709  00116E  25C5               	addwf	?___wmul& (0+255),w,b
  1710  001170  0100               	movlb	0	; () banked
  1711  001172  6FD1               	movwf	transformToTwoDigitNumber@result& (0+255),b
  1712  001174  0100               	movlb	0	; () banked
  1713  001176  51D0               	movf	(??_transformToTwoDigitNumber+1)& (0+255),w,b
  1714  001178  0100               	movlb	0	; () banked
  1715  00117A  21C6               	addwfc	(?___wmul+1)& (0+255),w,b
  1716  00117C  0100               	movlb	0	; () banked
  1717  00117E  6FD2               	movwf	(transformToTwoDigitNumber@result+1)& (0+255),b
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;bufferhandler.c: 182: if(number[2] >= 5){
  1721  001180  0100               	movlb	0	; () banked
  1722  001182  EE20 F004          	lfsr	2,4
  1723  001186  51CB               	movf	transformToTwoDigitNumber@number& (0+255),w,b
  1724  001188  26D9               	addwf	fsr2l,f,c
  1725  00118A  51CC               	movf	(transformToTwoDigitNumber@number+1)& (0+255),w,b
  1726  00118C  22DA               	addwfc	fsr2h,f,c
  1727  00118E  0E01               	movlw	1
  1728  001190  BEDB               	btfsc	plusw2,7,c
  1729  001192  D00A               	goto	l1771
  1730  001194  0E01               	movlw	1
  1731  001196  50DB               	movf	plusw2,w,c
  1732  001198  E104               	bnz	u1070
  1733  00119A  0E05               	movlw	5
  1734  00119C  5CDE               	subwf	postinc2,w,c
  1735  00119E  A0D8               	btfss	status,0,c
  1736  0011A0  D003               	goto	l1771
  1737  0011A2                     u1070:
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;bufferhandler.c: 183: result++;
  1741  0011A2  0100               	movlb	0	; () banked
  1742  0011A4  4BD1               	infsnz	transformToTwoDigitNumber@result& (0+255),f,b
  1743  0011A6  2BD2               	incf	(transformToTwoDigitNumber@result+1)& (0+255),f,b
  1744  0011A8                     l1771:
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;bufferhandler.c: 184: return result;
  1748  0011A8  C0D1  F0CB         	movff	transformToTwoDigitNumber@result,?_transformToTwoDigitNumber
  1749  0011AC  C0D2  F0CC         	movff	transformToTwoDigitNumber@result+1,?_transformToTwoDigitNumber+1
  1750                           
  1751                           ; BSR set to: 0
  1752  0011B0  0012               	return	
  1753  0011B2                     l1777:
  1754                           
  1755                           ; BSR set to: 0
  1756  0011B2  C0CD  F0CF         	movff	transformToTwoDigitNumber@size,??_transformToTwoDigitNumber
  1757  0011B6  C0CE  F0D0         	movff	transformToTwoDigitNumber@size+1,??_transformToTwoDigitNumber+1
  1758                           
  1759                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1760                           ; Switch size 1, requested type "space"
  1761                           ; Number of cases is 1, Range of values is 0 to 0
  1762                           ; switch strategies available:
  1763                           ; Name         Instructions Cycles
  1764                           ; simple_byte            4     3 (average)
  1765                           ;	Chosen strategy is simple_byte
  1766  0011BA  0100               	movlb	0	; () banked
  1767  0011BC  51D0               	movf	(??_transformToTwoDigitNumber+1)& (0+255),w,b
  1768  0011BE  0A00               	xorlw	0	; case 0
  1769  0011C0  A4D8               	btfss	status,2,c
  1770  0011C2  D00B               	goto	l1779
  1771                           
  1772                           ; BSR set to: 0
  1773                           ; Switch size 1, requested type "space"
  1774                           ; Number of cases is 3, Range of values is 1 to 3
  1775                           ; switch strategies available:
  1776                           ; Name         Instructions Cycles
  1777                           ; simple_byte           10     6 (average)
  1778                           ;	Chosen strategy is simple_byte
  1779  0011C4  0100               	movlb	0	; () banked
  1780  0011C6  51CF               	movf	??_transformToTwoDigitNumber& (0+255),w,b
  1781  0011C8  0A01               	xorlw	1	; case 1
  1782  0011CA  B4D8               	btfsc	status,2,c
  1783  0011CC  D770               	goto	l1743
  1784  0011CE  0A03               	xorlw	3	; case 2
  1785  0011D0  B4D8               	btfsc	status,2,c
  1786  0011D2  D786               	goto	l1755
  1787  0011D4  0A01               	xorlw	1	; case 3
  1788  0011D6  B4D8               	btfsc	status,2,c
  1789  0011D8  D7AD               	goto	l1765
  1790  0011DA                     l1779:
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;bufferhandler.c: 190: return 1;
  1794  0011DA  0E00               	movlw	0
  1795  0011DC  0100               	movlb	0	; () banked
  1796  0011DE  6FCC               	movwf	(?_transformToTwoDigitNumber+1)& (0+255),b
  1797  0011E0  0E01               	movlw	1
  1798  0011E2  6FCB               	movwf	?_transformToTwoDigitNumber& (0+255),b
  1799  0011E4  0012               	return	
  1800  0011E6                     __end_of_transformToTwoDigitNumber:
  1801                           	opt stack 0
  1802                           tblptru	equ	0xFF8
  1803                           tblptrh	equ	0xFF7
  1804                           tblptrl	equ	0xFF6
  1805                           tablat	equ	0xFF5
  1806                           indf0	equ	0xFEF
  1807                           postinc0	equ	0xFEE
  1808                           fsr0h	equ	0xFEA
  1809                           fsr0l	equ	0xFE9
  1810                           wreg	equ	0xFE8
  1811                           postdec1	equ	0xFE5
  1812                           fsr1l	equ	0xFE1
  1813                           indf2	equ	0xFDF
  1814                           postinc2	equ	0xFDE
  1815                           postdec2	equ	0xFDD
  1816                           plusw2	equ	0xFDB
  1817                           fsr2h	equ	0xFDA
  1818                           fsr2l	equ	0xFD9
  1819                           status	equ	0xFD8
  1820                           
  1821 ;; *************** function ___wmul *****************
  1822 ;; Defined at:
  1823 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1826 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;  product         2    4[BANK0 ] unsigned int 
  1829 ;; Return value:  Size  Location     Type
  1830 ;;                  2    0[BANK0 ] unsigned int 
  1831 ;; Registers used:
  1832 ;;		wreg, status,2, status,0, prodl, prodh
  1833 ;; Tracked objects:
  1834 ;;		On entry : 0/0
  1835 ;;		On exit  : 0/0
  1836 ;;		Unchanged: 0/0
  1837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1838 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1839 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1841 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1842 ;;Total ram usage:        6 bytes
  1843 ;; Hardware stack levels used:    1
  1844 ;; Hardware stack levels required when called:    3
  1845 ;; This function calls:
  1846 ;;		Nothing
  1847 ;; This function is called by:
  1848 ;;		_transformToTwoDigitNumber
  1849 ;; This function uses a non-reentrant model
  1850 ;;
  1851                           
  1852                           	psect	text8
  1853  0018C8                     __ptext8:
  1854                           	opt stack 0
  1855  0018C8                     ___wmul:
  1856                           	opt stack 25
  1857                           
  1858                           ; BSR set to: 0
  1859                           ;incstack = 0
  1860  0018C8  0100               	movlb	0	; () banked
  1861  0018CA  51C5               	movf	___wmul@multiplier& (0+255),w,b
  1862  0018CC  0100               	movlb	0	; () banked
  1863  0018CE  03C7               	mulwf	___wmul@multiplicand& (0+255),b
  1864  0018D0  CFF3 F0C9          	movff	prodl,___wmul@product
  1865  0018D4  CFF4 F0CA          	movff	prodh,___wmul@product+1
  1866  0018D8  0100               	movlb	0	; () banked
  1867  0018DA  51C5               	movf	___wmul@multiplier& (0+255),w,b
  1868  0018DC  0100               	movlb	0	; () banked
  1869  0018DE  03C8               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1870  0018E0  50F3               	movf	prodl,w,c
  1871  0018E2  0100               	movlb	0	; () banked
  1872  0018E4  27CA               	addwf	(___wmul@product+1)& (0+255),f,b
  1873  0018E6  0100               	movlb	0	; () banked
  1874  0018E8  51C6               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1875  0018EA  0100               	movlb	0	; () banked
  1876  0018EC  03C7               	mulwf	___wmul@multiplicand& (0+255),b
  1877  0018EE  50F3               	movf	prodl,w,c
  1878  0018F0  0100               	movlb	0	; () banked
  1879  0018F2  27CA               	addwf	(___wmul@product+1)& (0+255),f,b
  1880                           
  1881                           ; BSR set to: 0
  1882  0018F4  C0C9  F0C5         	movff	___wmul@product,?___wmul
  1883  0018F8  C0CA  F0C6         	movff	___wmul@product+1,?___wmul+1
  1884  0018FC  0012               	return	
  1885  0018FE                     __end_of___wmul:
  1886                           	opt stack 0
  1887                           tblptru	equ	0xFF8
  1888                           tblptrh	equ	0xFF7
  1889                           tblptrl	equ	0xFF6
  1890                           tablat	equ	0xFF5
  1891                           prodh	equ	0xFF4
  1892                           prodl	equ	0xFF3
  1893                           indf0	equ	0xFEF
  1894                           postinc0	equ	0xFEE
  1895                           fsr0h	equ	0xFEA
  1896                           fsr0l	equ	0xFE9
  1897                           wreg	equ	0xFE8
  1898                           postdec1	equ	0xFE5
  1899                           fsr1l	equ	0xFE1
  1900                           indf2	equ	0xFDF
  1901                           postinc2	equ	0xFDE
  1902                           postdec2	equ	0xFDD
  1903                           plusw2	equ	0xFDB
  1904                           fsr2h	equ	0xFDA
  1905                           fsr2l	equ	0xFD9
  1906                           status	equ	0xFD8
  1907                           
  1908 ;; *************** function _lenHelper *****************
  1909 ;; Defined at:
  1910 ;;		line 152 in file "bufferhandler.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;  x               2    0[BANK0 ] int 
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;		None
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  2    0[BANK0 ] int 
  1917 ;; Registers used:
  1918 ;;		wreg, status,2, status,0
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1924 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1927 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1928 ;;Total ram usage:        2 bytes
  1929 ;; Hardware stack levels used:    1
  1930 ;; Hardware stack levels required when called:    3
  1931 ;; This function calls:
  1932 ;;		Nothing
  1933 ;; This function is called by:
  1934 ;;		_parseString
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           	psect	text9
  1939  0015C2                     __ptext9:
  1940                           	opt stack 0
  1941  0015C2                     _lenHelper:
  1942                           	opt stack 26
  1943                           
  1944                           ;bufferhandler.c: 153: if(x>=1000) return 4;
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;incstack = 0
  1948  0015C2  0100               	movlb	0	; () banked
  1949  0015C4  BFC6               	btfsc	(lenHelper@x+1)& (0+255),7,b
  1950  0015C6  D00E               	goto	l1795
  1951  0015C8  0EE8               	movlw	232
  1952  0015CA  0100               	movlb	0	; () banked
  1953  0015CC  5DC5               	subwf	lenHelper@x& (0+255),w,b
  1954  0015CE  0E03               	movlw	3
  1955  0015D0  0100               	movlb	0	; () banked
  1956  0015D2  59C6               	subwfb	(lenHelper@x+1)& (0+255),w,b
  1957  0015D4  A0D8               	btfss	status,0,c
  1958  0015D6  D006               	goto	l1795
  1959                           
  1960                           ; BSR set to: 0
  1961  0015D8  0E00               	movlw	0
  1962  0015DA  0100               	movlb	0	; () banked
  1963  0015DC  6FC6               	movwf	(?_lenHelper+1)& (0+255),b
  1964  0015DE  0E04               	movlw	4
  1965  0015E0  6FC5               	movwf	?_lenHelper& (0+255),b
  1966                           
  1967                           ; BSR set to: 0
  1968  0015E2  0012               	return	
  1969  0015E4                     l1795:
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;bufferhandler.c: 154: if(x>=100) return 3;
  1973  0015E4  0100               	movlb	0	; () banked
  1974  0015E6  BFC6               	btfsc	(lenHelper@x+1)& (0+255),7,b
  1975  0015E8  D00E               	goto	l1801
  1976  0015EA  0100               	movlb	0	; () banked
  1977  0015EC  51C6               	movf	(lenHelper@x+1)& (0+255),w,b
  1978  0015EE  E105               	bnz	u1090
  1979  0015F0  0E64               	movlw	100
  1980  0015F2  0100               	movlb	0	; () banked
  1981  0015F4  5DC5               	subwf	lenHelper@x& (0+255),w,b
  1982  0015F6  A0D8               	btfss	status,0,c
  1983  0015F8  D006               	goto	l1801
  1984  0015FA                     u1090:
  1985                           
  1986                           ; BSR set to: 0
  1987  0015FA  0E00               	movlw	0
  1988  0015FC  0100               	movlb	0	; () banked
  1989  0015FE  6FC6               	movwf	(?_lenHelper+1)& (0+255),b
  1990  001600  0E03               	movlw	3
  1991  001602  6FC5               	movwf	?_lenHelper& (0+255),b
  1992                           
  1993                           ; BSR set to: 0
  1994  001604  0012               	return	
  1995  001606                     l1801:
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;bufferhandler.c: 155: if(x>=10) return 2;
  1999  001606  0100               	movlb	0	; () banked
  2000  001608  BFC6               	btfsc	(lenHelper@x+1)& (0+255),7,b
  2001  00160A  D00E               	goto	l1807
  2002  00160C  0100               	movlb	0	; () banked
  2003  00160E  51C6               	movf	(lenHelper@x+1)& (0+255),w,b
  2004  001610  E105               	bnz	u1100
  2005  001612  0E0A               	movlw	10
  2006  001614  0100               	movlb	0	; () banked
  2007  001616  5DC5               	subwf	lenHelper@x& (0+255),w,b
  2008  001618  A0D8               	btfss	status,0,c
  2009  00161A  D006               	goto	l1807
  2010  00161C                     u1100:
  2011                           
  2012                           ; BSR set to: 0
  2013  00161C  0E00               	movlw	0
  2014  00161E  0100               	movlb	0	; () banked
  2015  001620  6FC6               	movwf	(?_lenHelper+1)& (0+255),b
  2016  001622  0E02               	movlw	2
  2017  001624  6FC5               	movwf	?_lenHelper& (0+255),b
  2018                           
  2019                           ; BSR set to: 0
  2020  001626  0012               	return	
  2021  001628                     l1807:
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;bufferhandler.c: 156: return 1;
  2025  001628  0E00               	movlw	0
  2026  00162A  0100               	movlb	0	; () banked
  2027  00162C  6FC6               	movwf	(?_lenHelper+1)& (0+255),b
  2028  00162E  0E01               	movlw	1
  2029  001630  6FC5               	movwf	?_lenHelper& (0+255),b
  2030  001632  0012               	return	
  2031  001634                     __end_of_lenHelper:
  2032                           	opt stack 0
  2033                           tblptru	equ	0xFF8
  2034                           tblptrh	equ	0xFF7
  2035                           tblptrl	equ	0xFF6
  2036                           tablat	equ	0xFF5
  2037                           prodh	equ	0xFF4
  2038                           prodl	equ	0xFF3
  2039                           indf0	equ	0xFEF
  2040                           postinc0	equ	0xFEE
  2041                           fsr0h	equ	0xFEA
  2042                           fsr0l	equ	0xFE9
  2043                           wreg	equ	0xFE8
  2044                           postdec1	equ	0xFE5
  2045                           fsr1l	equ	0xFE1
  2046                           indf2	equ	0xFDF
  2047                           postinc2	equ	0xFDE
  2048                           postdec2	equ	0xFDD
  2049                           plusw2	equ	0xFDB
  2050                           fsr2h	equ	0xFDA
  2051                           fsr2l	equ	0xFD9
  2052                           status	equ	0xFD8
  2053                           
  2054 ;; *************** function _checkString *****************
  2055 ;; Defined at:
  2056 ;;		line 196 in file "bufferhandler.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;		None
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  i               2   15[BANK0 ] int 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      void 
  2063 ;; Registers used:
  2064 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2071 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2072 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2073 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2074 ;;Total ram usage:        6 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    5
  2077 ;; This function calls:
  2078 ;;		_checkPos
  2079 ;; This function is called by:
  2080 ;;		_parseString
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text10
  2085  0011E6                     __ptext10:
  2086                           	opt stack 0
  2087  0011E6                     _checkString:
  2088                           	opt stack 24
  2089                           
  2090                           ;bufferhandler.c: 201: positions[0] = 8;
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;incstack = 0
  2094  0011E6  0E00               	movlw	0
  2095  0011E8  0100               	movlb	0	; () banked
  2096  0011EA  6F61               	movwf	(_positions+1)& (0+255),b
  2097  0011EC  0E08               	movlw	8
  2098  0011EE  6F60               	movwf	_positions& (0+255),b
  2099                           
  2100                           ;bufferhandler.c: 203: for(int i = 0; i<10;i++){
  2101  0011F0  0E00               	movlw	0
  2102  0011F2  0100               	movlb	0	; () banked
  2103  0011F4  6FD5               	movwf	(checkString@i+1)& (0+255),b
  2104  0011F6  0E00               	movlw	0
  2105  0011F8  6FD4               	movwf	checkString@i& (0+255),b
  2106  0011FA                     l1727:
  2107                           
  2108                           ; BSR set to: 0
  2109  0011FA  0100               	movlb	0	; () banked
  2110  0011FC  BFD5               	btfsc	(checkString@i+1)& (0+255),7,b
  2111  0011FE  D008               	goto	l1731
  2112  001200  0100               	movlb	0	; () banked
  2113  001202  51D5               	movf	(checkString@i+1)& (0+255),w,b
  2114  001204  E158               	bnz	l1739
  2115  001206  0E0A               	movlw	10
  2116  001208  0100               	movlb	0	; () banked
  2117  00120A  5DD4               	subwf	checkString@i& (0+255),w,b
  2118  00120C  B0D8               	btfsc	status,0,c
  2119  00120E  D053               	goto	l1739
  2120  001210                     l1731:
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;bufferhandler.c: 204: positions[i] = checkPos(positions[i]);
  2124  001210  90D8               	bcf	status,0,c
  2125  001212  0100               	movlb	0	; () banked
  2126  001214  35D4               	rlcf	checkString@i& (0+255),w,b
  2127  001216  6ED9               	movwf	fsr2l,c
  2128  001218  0100               	movlb	0	; () banked
  2129  00121A  35D5               	rlcf	(checkString@i+1)& (0+255),w,b
  2130  00121C  6EDA               	movwf	fsr2h,c
  2131  00121E  0E60               	movlw	low _positions
  2132  001220  26D9               	addwf	fsr2l,f,c
  2133  001222  0E00               	movlw	high _positions
  2134  001224  22DA               	addwfc	fsr2h,f,c
  2135  001226  CFDE F0CB          	movff	postinc2,checkPos@pos
  2136  00122A  CFDD F0CC          	movff	postdec2,checkPos@pos+1
  2137  00122E  EC1A  F00B         	call	_checkPos	;wreg free
  2138  001232  90D8               	bcf	status,0,c
  2139  001234  0100               	movlb	0	; () banked
  2140  001236  35D4               	rlcf	checkString@i& (0+255),w,b
  2141  001238  6ED9               	movwf	fsr2l,c
  2142  00123A  0100               	movlb	0	; () banked
  2143  00123C  35D5               	rlcf	(checkString@i+1)& (0+255),w,b
  2144  00123E  6EDA               	movwf	fsr2h,c
  2145  001240  0E60               	movlw	low _positions
  2146  001242  26D9               	addwf	fsr2l,f,c
  2147  001244  0E00               	movlw	high _positions
  2148  001246  22DA               	addwfc	fsr2h,f,c
  2149  001248  0100               	movlb	0	; () banked
  2150  00124A  C0CB  FFDE         	movff	?_checkPos,postinc2
  2151  00124E  0100               	movlb	0	; () banked
  2152  001250  C0CC  FFDD         	movff	?_checkPos+1,postdec2
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;bufferhandler.c: 205: positions[i+1] = positions[i] + 1;
  2156  001254  90D8               	bcf	status,0,c
  2157  001256  0100               	movlb	0	; () banked
  2158  001258  35D4               	rlcf	checkString@i& (0+255),w,b
  2159  00125A  6ED9               	movwf	fsr2l,c
  2160  00125C  0100               	movlb	0	; () banked
  2161  00125E  35D5               	rlcf	(checkString@i+1)& (0+255),w,b
  2162  001260  6EDA               	movwf	fsr2h,c
  2163  001262  0E60               	movlw	low _positions
  2164  001264  26D9               	addwf	fsr2l,f,c
  2165  001266  0E00               	movlw	high _positions
  2166  001268  22DA               	addwfc	fsr2h,f,c
  2167  00126A  CFDE F0D0          	movff	postinc2,??_checkString
  2168  00126E  CFDD F0D1          	movff	postdec2,??_checkString+1
  2169  001272  0E01               	movlw	1
  2170  001274  0100               	movlb	0	; () banked
  2171  001276  27D0               	addwf	??_checkString& (0+255),f,b
  2172  001278  0E00               	movlw	0
  2173  00127A  23D1               	addwfc	(??_checkString+1)& (0+255),f,b
  2174  00127C  C0D4  F0D2         	movff	checkString@i,??_checkString+2
  2175  001280  C0D5  F0D3         	movff	checkString@i+1,??_checkString+3
  2176  001284  90D8               	bcf	status,0,c
  2177  001286  0100               	movlb	0	; () banked
  2178  001288  37D2               	rlcf	(??_checkString+2)& (0+255),f,b
  2179  00128A  37D3               	rlcf	(??_checkString+3)& (0+255),f,b
  2180  00128C  0E02               	movlw	2
  2181  00128E  0100               	movlb	0	; () banked
  2182  001290  27D2               	addwf	(??_checkString+2)& (0+255),f,b
  2183  001292  0E00               	movlw	0
  2184  001294  23D3               	addwfc	(??_checkString+3)& (0+255),f,b
  2185  001296  0E60               	movlw	low _positions
  2186  001298  0100               	movlb	0	; () banked
  2187  00129A  25D2               	addwf	(??_checkString+2)& (0+255),w,b
  2188  00129C  6ED9               	movwf	fsr2l,c
  2189  00129E  0E00               	movlw	high _positions
  2190  0012A0  0100               	movlb	0	; () banked
  2191  0012A2  21D3               	addwfc	(??_checkString+3)& (0+255),w,b
  2192  0012A4  6EDA               	movwf	fsr2h,c
  2193  0012A6  C0D0  FFDE         	movff	??_checkString,postinc2
  2194  0012AA  C0D1  FFDD         	movff	??_checkString+1,postdec2
  2195                           
  2196                           ; BSR set to: 0
  2197  0012AE  0100               	movlb	0	; () banked
  2198  0012B0  4BD4               	infsnz	checkString@i& (0+255),f,b
  2199  0012B2  2BD5               	incf	(checkString@i+1)& (0+255),f,b
  2200  0012B4  D7A2               	goto	l1727
  2201  0012B6                     l1739:
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;bufferhandler.c: 206: }
  2205                           ;bufferhandler.c: 208: positions[10] = '\0';
  2206  0012B6  0E00               	movlw	0
  2207  0012B8  0100               	movlb	0	; () banked
  2208  0012BA  6F75               	movwf	(_positions+21)& (0+255),b
  2209  0012BC  0E00               	movlw	0
  2210  0012BE  6F74               	movwf	(_positions+20)& (0+255),b
  2211                           
  2212                           ; BSR set to: 0
  2213  0012C0  0012               	return		;funcret
  2214  0012C2                     __end_of_checkString:
  2215                           	opt stack 0
  2216                           tblptru	equ	0xFF8
  2217                           tblptrh	equ	0xFF7
  2218                           tblptrl	equ	0xFF6
  2219                           tablat	equ	0xFF5
  2220                           prodh	equ	0xFF4
  2221                           prodl	equ	0xFF3
  2222                           indf0	equ	0xFEF
  2223                           postinc0	equ	0xFEE
  2224                           fsr0h	equ	0xFEA
  2225                           fsr0l	equ	0xFE9
  2226                           wreg	equ	0xFE8
  2227                           postdec1	equ	0xFE5
  2228                           fsr1l	equ	0xFE1
  2229                           indf2	equ	0xFDF
  2230                           postinc2	equ	0xFDE
  2231                           postdec2	equ	0xFDD
  2232                           plusw2	equ	0xFDB
  2233                           fsr2h	equ	0xFDA
  2234                           fsr2l	equ	0xFD9
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function _checkPos *****************
  2238 ;; Defined at:
  2239 ;;		line 212 in file "bufferhandler.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  pos             2    6[BANK0 ] int 
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;  i               2    9[BANK0 ] int 
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  2    6[BANK0 ] int 
  2246 ;; Registers used:
  2247 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2253 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2254 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2255 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2256 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2257 ;;Total ram usage:        5 bytes
  2258 ;; Hardware stack levels used:    1
  2259 ;; Hardware stack levels required when called:    4
  2260 ;; This function calls:
  2261 ;;		_strlen
  2262 ;; This function is called by:
  2263 ;;		_checkString
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           	psect	text11
  2268  001634                     __ptext11:
  2269                           	opt stack 0
  2270  001634                     _checkPos:
  2271                           	opt stack 24
  2272                           
  2273                           ;bufferhandler.c: 213: for(int i = pos+1; i < strlen(allDataString); i++){
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;incstack = 0
  2277  001634  0E01               	movlw	1
  2278  001636  0100               	movlb	0	; () banked
  2279  001638  25CB               	addwf	checkPos@pos& (0+255),w,b
  2280  00163A  0100               	movlb	0	; () banked
  2281  00163C  6FCE               	movwf	checkPos@i& (0+255),b
  2282  00163E  0E00               	movlw	0
  2283  001640  0100               	movlb	0	; () banked
  2284  001642  21CC               	addwfc	(checkPos@pos+1)& (0+255),w,b
  2285  001644  0100               	movlb	0	; () banked
  2286  001646  6FCF               	movwf	(checkPos@i+1)& (0+255),b
  2287  001648  D014               	goto	l1695
  2288  00164A                     l1689:
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;bufferhandler.c: 214: if(allDataString[i] == 0x3B){
  2292  00164A  0E00               	movlw	low _allDataString
  2293  00164C  0100               	movlb	0	; () banked
  2294  00164E  25CE               	addwf	checkPos@i& (0+255),w,b
  2295  001650  6ED9               	movwf	fsr2l,c
  2296  001652  0E01               	movlw	high _allDataString
  2297  001654  0100               	movlb	0	; () banked
  2298  001656  21CF               	addwfc	(checkPos@i+1)& (0+255),w,b
  2299  001658  6EDA               	movwf	fsr2h,c
  2300  00165A  0E3B               	movlw	59
  2301  00165C  18DE               	xorwf	postinc2,w,c
  2302  00165E  A4D8               	btfss	status,2,c
  2303  001660  D005               	goto	l1693
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;bufferhandler.c: 215: return i;
  2307  001662  C0CE  F0CB         	movff	checkPos@i,?_checkPos
  2308  001666  C0CF  F0CC         	movff	checkPos@i+1,?_checkPos+1
  2309  00166A  0012               	return	
  2310  00166C                     l1693:
  2311                           
  2312                           ; BSR set to: 0
  2313  00166C  0100               	movlb	0	; () banked
  2314  00166E  4BCE               	infsnz	checkPos@i& (0+255),f,b
  2315  001670  2BCF               	incf	(checkPos@i+1)& (0+255),f,b
  2316  001672                     l1695:
  2317                           
  2318                           ; BSR set to: 0
  2319  001672  0E00               	movlw	low _allDataString
  2320  001674  0100               	movlb	0	; () banked
  2321  001676  6FC5               	movwf	strlen@s& (0+255),b
  2322  001678  0E01               	movlw	high _allDataString
  2323  00167A  0100               	movlb	0	; () banked
  2324  00167C  6FC6               	movwf	(strlen@s+1)& (0+255),b
  2325  00167E  EC4C  F00B         	call	_strlen	;wreg free
  2326  001682  0100               	movlb	0	; () banked
  2327  001684  51C5               	movf	?_strlen& (0+255),w,b
  2328  001686  0100               	movlb	0	; () banked
  2329  001688  5DCE               	subwf	checkPos@i& (0+255),w,b
  2330  00168A  0100               	movlb	0	; () banked
  2331  00168C  51C6               	movf	(?_strlen+1)& (0+255),w,b
  2332  00168E  0100               	movlb	0	; () banked
  2333  001690  59CF               	subwfb	(checkPos@i+1)& (0+255),w,b
  2334  001692  B0D8               	btfsc	status,0,c
  2335  001694  0012               	return	
  2336  001696  D7D9               	goto	l1689
  2337  001698                     __end_of_checkPos:
  2338                           	opt stack 0
  2339                           tblptru	equ	0xFF8
  2340                           tblptrh	equ	0xFF7
  2341                           tblptrl	equ	0xFF6
  2342                           tablat	equ	0xFF5
  2343                           prodh	equ	0xFF4
  2344                           prodl	equ	0xFF3
  2345                           indf0	equ	0xFEF
  2346                           postinc0	equ	0xFEE
  2347                           fsr0h	equ	0xFEA
  2348                           fsr0l	equ	0xFE9
  2349                           wreg	equ	0xFE8
  2350                           postdec1	equ	0xFE5
  2351                           fsr1l	equ	0xFE1
  2352                           indf2	equ	0xFDF
  2353                           postinc2	equ	0xFDE
  2354                           postdec2	equ	0xFDD
  2355                           plusw2	equ	0xFDB
  2356                           fsr2h	equ	0xFDA
  2357                           fsr2l	equ	0xFD9
  2358                           status	equ	0xFD8
  2359                           
  2360 ;; *************** function ___awdiv *****************
  2361 ;; Defined at:
  2362 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;  dividend        2    0[BANK0 ] int 
  2365 ;;  divisor         2    2[BANK0 ] int 
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  quotient        2    6[BANK0 ] int 
  2368 ;;  sign            1    5[BANK0 ] unsigned char 
  2369 ;;  counter         1    4[BANK0 ] unsigned char 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  2    0[BANK0 ] int 
  2372 ;; Registers used:
  2373 ;;		wreg, status,2, status,0
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2379 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2380 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2382 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2383 ;;Total ram usage:        8 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    3
  2386 ;; This function calls:
  2387 ;;		Nothing
  2388 ;; This function is called by:
  2389 ;;		_parseString
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           	psect	text12
  2394  0012C2                     __ptext12:
  2395                           	opt stack 0
  2396  0012C2                     ___awdiv:
  2397                           	opt stack 26
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;incstack = 0
  2401  0012C2  0E00               	movlw	0
  2402  0012C4  0100               	movlb	0	; () banked
  2403  0012C6  6FCA               	movwf	___awdiv@sign& (0+255),b
  2404                           
  2405                           ; BSR set to: 0
  2406  0012C8  0100               	movlb	0	; () banked
  2407  0012CA  AFC8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2408  0012CC  D008               	goto	l1819
  2409                           
  2410                           ; BSR set to: 0
  2411  0012CE  0100               	movlb	0	; () banked
  2412  0012D0  6DC7               	negf	___awdiv@divisor& (0+255),b
  2413  0012D2  1FC8               	comf	(___awdiv@divisor+1)& (0+255),f,b
  2414  0012D4  B0D8               	btfsc	status,0,c
  2415  0012D6  2BC8               	incf	(___awdiv@divisor+1)& (0+255),f,b
  2416                           
  2417                           ; BSR set to: 0
  2418  0012D8  0E01               	movlw	1
  2419  0012DA  0100               	movlb	0	; () banked
  2420  0012DC  6FCA               	movwf	___awdiv@sign& (0+255),b
  2421  0012DE                     l1819:
  2422                           
  2423                           ; BSR set to: 0
  2424  0012DE  0100               	movlb	0	; () banked
  2425  0012E0  AFC6               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  2426  0012E2  D008               	goto	l1825
  2427                           
  2428                           ; BSR set to: 0
  2429  0012E4  0100               	movlb	0	; () banked
  2430  0012E6  6DC5               	negf	___awdiv@dividend& (0+255),b
  2431  0012E8  1FC6               	comf	(___awdiv@dividend+1)& (0+255),f,b
  2432  0012EA  B0D8               	btfsc	status,0,c
  2433  0012EC  2BC6               	incf	(___awdiv@dividend+1)& (0+255),f,b
  2434                           
  2435                           ; BSR set to: 0
  2436  0012EE  0E01               	movlw	1
  2437  0012F0  0100               	movlb	0	; () banked
  2438  0012F2  1BCA               	xorwf	___awdiv@sign& (0+255),f,b
  2439  0012F4                     l1825:
  2440                           
  2441                           ; BSR set to: 0
  2442  0012F4  0E00               	movlw	0
  2443  0012F6  0100               	movlb	0	; () banked
  2444  0012F8  6FCC               	movwf	(___awdiv@quotient+1)& (0+255),b
  2445  0012FA  0E00               	movlw	0
  2446  0012FC  6FCB               	movwf	___awdiv@quotient& (0+255),b
  2447                           
  2448                           ; BSR set to: 0
  2449  0012FE  0100               	movlb	0	; () banked
  2450  001300  51C7               	movf	___awdiv@divisor& (0+255),w,b
  2451  001302  0100               	movlb	0	; () banked
  2452  001304  11C8               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  2453  001306  B4D8               	btfsc	status,2,c
  2454  001308  D02C               	goto	l1847
  2455                           
  2456                           ; BSR set to: 0
  2457  00130A  0E01               	movlw	1
  2458  00130C  0100               	movlb	0	; () banked
  2459  00130E  6FC9               	movwf	___awdiv@counter& (0+255),b
  2460  001310  D006               	goto	l1833
  2461  001312                     l1831:
  2462                           
  2463                           ; BSR set to: 0
  2464  001312  0100               	movlb	0	; () banked
  2465  001314  90D8               	bcf	status,0,c
  2466  001316  37C7               	rlcf	___awdiv@divisor& (0+255),f,b
  2467  001318  37C8               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  2468  00131A  0100               	movlb	0	; () banked
  2469  00131C  2BC9               	incf	___awdiv@counter& (0+255),f,b
  2470  00131E                     l1833:
  2471                           
  2472                           ; BSR set to: 0
  2473  00131E  0100               	movlb	0	; () banked
  2474  001320  AFC8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2475  001322  D7F7               	goto	l1831
  2476  001324                     l1835:
  2477                           
  2478                           ; BSR set to: 0
  2479  001324  0100               	movlb	0	; () banked
  2480  001326  90D8               	bcf	status,0,c
  2481  001328  37CB               	rlcf	___awdiv@quotient& (0+255),f,b
  2482  00132A  37CC               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  2483                           
  2484                           ; BSR set to: 0
  2485  00132C  0100               	movlb	0	; () banked
  2486  00132E  51C7               	movf	___awdiv@divisor& (0+255),w,b
  2487  001330  0100               	movlb	0	; () banked
  2488  001332  5DC5               	subwf	___awdiv@dividend& (0+255),w,b
  2489  001334  0100               	movlb	0	; () banked
  2490  001336  51C8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2491  001338  0100               	movlb	0	; () banked
  2492  00133A  59C6               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  2493  00133C  A0D8               	btfss	status,0,c
  2494  00133E  D00A               	goto	l1843
  2495                           
  2496                           ; BSR set to: 0
  2497  001340  0100               	movlb	0	; () banked
  2498  001342  51C7               	movf	___awdiv@divisor& (0+255),w,b
  2499  001344  0100               	movlb	0	; () banked
  2500  001346  5FC5               	subwf	___awdiv@dividend& (0+255),f,b
  2501  001348  0100               	movlb	0	; () banked
  2502  00134A  51C8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2503  00134C  0100               	movlb	0	; () banked
  2504  00134E  5BC6               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  2505                           
  2506                           ; BSR set to: 0
  2507  001350  0100               	movlb	0	; () banked
  2508  001352  81CB               	bsf	___awdiv@quotient& (0+255),0,b
  2509  001354                     l1843:
  2510                           
  2511                           ; BSR set to: 0
  2512  001354  0100               	movlb	0	; () banked
  2513  001356  90D8               	bcf	status,0,c
  2514  001358  33C8               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  2515  00135A  33C7               	rrcf	___awdiv@divisor& (0+255),f,b
  2516                           
  2517                           ; BSR set to: 0
  2518  00135C  0100               	movlb	0	; () banked
  2519  00135E  2FC9               	decfsz	___awdiv@counter& (0+255),f,b
  2520  001360  D7E1               	goto	l1835
  2521  001362                     l1847:
  2522                           
  2523                           ; BSR set to: 0
  2524  001362  0100               	movlb	0	; () banked
  2525  001364  51CA               	movf	___awdiv@sign& (0+255),w,b
  2526  001366  0100               	movlb	0	; () banked
  2527  001368  B4D8               	btfsc	status,2,c
  2528  00136A  D005               	goto	l1851
  2529                           
  2530                           ; BSR set to: 0
  2531  00136C  0100               	movlb	0	; () banked
  2532  00136E  6DCB               	negf	___awdiv@quotient& (0+255),b
  2533  001370  1FCC               	comf	(___awdiv@quotient+1)& (0+255),f,b
  2534  001372  B0D8               	btfsc	status,0,c
  2535  001374  2BCC               	incf	(___awdiv@quotient+1)& (0+255),f,b
  2536  001376                     l1851:
  2537                           
  2538                           ; BSR set to: 0
  2539  001376  C0CB  F0C5         	movff	___awdiv@quotient,?___awdiv
  2540  00137A  C0CC  F0C6         	movff	___awdiv@quotient+1,?___awdiv+1
  2541  00137E  0012               	return	
  2542  001380                     __end_of___awdiv:
  2543                           	opt stack 0
  2544                           tblptru	equ	0xFF8
  2545                           tblptrh	equ	0xFF7
  2546                           tblptrl	equ	0xFF6
  2547                           tablat	equ	0xFF5
  2548                           prodh	equ	0xFF4
  2549                           prodl	equ	0xFF3
  2550                           indf0	equ	0xFEF
  2551                           postinc0	equ	0xFEE
  2552                           fsr0h	equ	0xFEA
  2553                           fsr0l	equ	0xFE9
  2554                           wreg	equ	0xFE8
  2555                           postdec1	equ	0xFE5
  2556                           fsr1l	equ	0xFE1
  2557                           indf2	equ	0xFDF
  2558                           postinc2	equ	0xFDE
  2559                           postdec2	equ	0xFDD
  2560                           plusw2	equ	0xFDB
  2561                           fsr2h	equ	0xFDA
  2562                           fsr2l	equ	0xFD9
  2563                           status	equ	0xFD8
  2564                           
  2565 ;; *************** function _isValid *****************
  2566 ;; Defined at:
  2567 ;;		line 74 in file "bufferhandler.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;		None
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;		None
  2572 ;; Return value:  Size  Location     Type
  2573 ;;                  1    wreg      unsigned char 
  2574 ;; Registers used:
  2575 ;;		wreg, status,2, status,0
  2576 ;; Tracked objects:
  2577 ;;		On entry : 0/0
  2578 ;;		On exit  : 0/0
  2579 ;;		Unchanged: 0/0
  2580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2585 ;;Total ram usage:        0 bytes
  2586 ;; Hardware stack levels used:    1
  2587 ;; Hardware stack levels required when called:    3
  2588 ;; This function calls:
  2589 ;;		Nothing
  2590 ;; This function is called by:
  2591 ;;		_main
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           	psect	text13
  2596  00188E                     __ptext13:
  2597                           	opt stack 0
  2598  00188E                     _isValid:
  2599                           	opt stack 27
  2600                           
  2601                           ;bufferhandler.c: 75: if(tmpString[0] == 0x54 &&
  2602                           ;bufferhandler.c: 76: tmpString[1] == 0x59 &&
  2603                           ;bufferhandler.c: 77: tmpString[2] == 0x52 &&
  2604                           ;bufferhandler.c: 78: tmpString[3] == 0x49 &&
  2605                           ;bufferhandler.c: 79: tmpString[4] == 0x5F){
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;incstack = 0
  2609  00188E  0E54               	movlw	84
  2610  001890  0100               	movlb	0	; () banked
  2611  001892  1979               	xorwf	_tmpString& (0+255),w,b
  2612  001894  A4D8               	btfss	status,2,c
  2613  001896  D016               	goto	l1917
  2614                           
  2615                           ; BSR set to: 0
  2616  001898  0E59               	movlw	89
  2617  00189A  0100               	movlb	0	; () banked
  2618  00189C  197A               	xorwf	(_tmpString+1)& (0+255),w,b
  2619  00189E  A4D8               	btfss	status,2,c
  2620  0018A0  D011               	goto	l1917
  2621                           
  2622                           ; BSR set to: 0
  2623  0018A2  0E52               	movlw	82
  2624  0018A4  0100               	movlb	0	; () banked
  2625  0018A6  197B               	xorwf	(_tmpString+2)& (0+255),w,b
  2626  0018A8  A4D8               	btfss	status,2,c
  2627  0018AA  D00C               	goto	l1917
  2628                           
  2629                           ; BSR set to: 0
  2630  0018AC  0E49               	movlw	73
  2631  0018AE  0100               	movlb	0	; () banked
  2632  0018B0  197C               	xorwf	(_tmpString+3)& (0+255),w,b
  2633  0018B2  A4D8               	btfss	status,2,c
  2634  0018B4  D007               	goto	l1917
  2635                           
  2636                           ; BSR set to: 0
  2637  0018B6  0E5F               	movlw	95
  2638  0018B8  0100               	movlb	0	; () banked
  2639  0018BA  197D               	xorwf	(_tmpString+4)& (0+255),w,b
  2640  0018BC  A4D8               	btfss	status,2,c
  2641  0018BE  D002               	goto	l1917
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;bufferhandler.c: 80: return 1;
  2645  0018C0  0E01               	movlw	1
  2646                           
  2647                           ; BSR set to: 0
  2648  0018C2  0012               	return	
  2649  0018C4                     l1917:
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;bufferhandler.c: 81: }
  2653                           ;bufferhandler.c: 82: return 0;
  2654  0018C4  0E00               	movlw	0
  2655  0018C6  0012               	return	
  2656  0018C8                     __end_of_isValid:
  2657                           	opt stack 0
  2658                           tblptru	equ	0xFF8
  2659                           tblptrh	equ	0xFF7
  2660                           tblptrl	equ	0xFF6
  2661                           tablat	equ	0xFF5
  2662                           prodh	equ	0xFF4
  2663                           prodl	equ	0xFF3
  2664                           indf0	equ	0xFEF
  2665                           postinc0	equ	0xFEE
  2666                           fsr0h	equ	0xFEA
  2667                           fsr0l	equ	0xFE9
  2668                           wreg	equ	0xFE8
  2669                           postdec1	equ	0xFE5
  2670                           fsr1l	equ	0xFE1
  2671                           indf2	equ	0xFDF
  2672                           postinc2	equ	0xFDE
  2673                           postdec2	equ	0xFDD
  2674                           plusw2	equ	0xFDB
  2675                           fsr2h	equ	0xFDA
  2676                           fsr2l	equ	0xFD9
  2677                           status	equ	0xFD8
  2678                           
  2679 ;; *************** function _isItLongEnough *****************
  2680 ;; Defined at:
  2681 ;;		line 36 in file "bufferhandler.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;		None
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;		None
  2686 ;; Return value:  Size  Location     Type
  2687 ;;                  1    wreg      unsigned char 
  2688 ;; Registers used:
  2689 ;;		wreg, status,2, status,0
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 0/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2699 ;;Total ram usage:        0 bytes
  2700 ;; Hardware stack levels used:    1
  2701 ;; Hardware stack levels required when called:    3
  2702 ;; This function calls:
  2703 ;;		Nothing
  2704 ;; This function is called by:
  2705 ;;		_main
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           	psect	text14
  2710  00196E                     __ptext14:
  2711                           	opt stack 0
  2712  00196E                     _isItLongEnough:
  2713                           	opt stack 27
  2714                           
  2715                           ;bufferhandler.c: 38: if(index >= 64){
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;incstack = 0
  2719  00196E  BE3E               	btfsc	_index+1,7,c
  2720  001970  D008               	goto	l1899
  2721  001972  503E               	movf	_index+1,w,c
  2722  001974  E104               	bnz	u1180
  2723  001976  0E40               	movlw	64
  2724  001978  5C3D               	subwf	_index,w,c
  2725  00197A  A0D8               	btfss	status,0,c
  2726  00197C  D002               	goto	l1899
  2727  00197E                     u1180:
  2728                           
  2729                           ;bufferhandler.c: 39: return 1;
  2730  00197E  0E01               	movlw	1
  2731                           
  2732                           ;bufferhandler.c: 40: }else{
  2733  001980  0012               	return	
  2734  001982                     l1899:
  2735                           
  2736                           ;bufferhandler.c: 41: return 0;
  2737  001982  0E00               	movlw	0
  2738  001984  0012               	return	
  2739  001986                     __end_of_isItLongEnough:
  2740                           	opt stack 0
  2741                           tblptru	equ	0xFF8
  2742                           tblptrh	equ	0xFF7
  2743                           tblptrl	equ	0xFF6
  2744                           tablat	equ	0xFF5
  2745                           prodh	equ	0xFF4
  2746                           prodl	equ	0xFF3
  2747                           indf0	equ	0xFEF
  2748                           postinc0	equ	0xFEE
  2749                           fsr0h	equ	0xFEA
  2750                           fsr0l	equ	0xFE9
  2751                           wreg	equ	0xFE8
  2752                           postdec1	equ	0xFE5
  2753                           fsr1l	equ	0xFE1
  2754                           indf2	equ	0xFDF
  2755                           postinc2	equ	0xFDE
  2756                           postdec2	equ	0xFDD
  2757                           plusw2	equ	0xFDB
  2758                           fsr2h	equ	0xFDA
  2759                           fsr2l	equ	0xFD9
  2760                           status	equ	0xFD8
  2761                           
  2762 ;; *************** function _copyTmpBuffer *****************
  2763 ;; Defined at:
  2764 ;;		line 53 in file "bufferhandler.c"
  2765 ;; Parameters:    Size  Location     Type
  2766 ;;		None
  2767 ;; Auto vars:     Size  Location     Type
  2768 ;;  i               2    1[BANK0 ] int 
  2769 ;; Return value:  Size  Location     Type
  2770 ;;                  1    wreg      void 
  2771 ;; Registers used:
  2772 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2773 ;; Tracked objects:
  2774 ;;		On entry : 0/0
  2775 ;;		On exit  : 0/0
  2776 ;;		Unchanged: 0/0
  2777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2779 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2780 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2781 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2782 ;;Total ram usage:        3 bytes
  2783 ;; Hardware stack levels used:    1
  2784 ;; Hardware stack levels required when called:    3
  2785 ;; This function calls:
  2786 ;;		Nothing
  2787 ;; This function is called by:
  2788 ;;		_main
  2789 ;; This function uses a non-reentrant model
  2790 ;;
  2791                           
  2792                           	psect	text15
  2793  0017B0                     __ptext15:
  2794                           	opt stack 0
  2795  0017B0                     _copyTmpBuffer:
  2796                           	opt stack 27
  2797                           
  2798                           ;bufferhandler.c: 54: for(int i = 0; i<index; i++){
  2799                           
  2800                           ;incstack = 0
  2801  0017B0  0E00               	movlw	0
  2802  0017B2  0100               	movlb	0	; () banked
  2803  0017B4  6FC7               	movwf	(copyTmpBuffer@i+1)& (0+255),b
  2804  0017B6  0E00               	movlw	0
  2805  0017B8  6FC6               	movwf	copyTmpBuffer@i& (0+255),b
  2806  0017BA  D015               	goto	l1927
  2807  0017BC                     l1923:
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;bufferhandler.c: 55: allDataString[i] = tmpString[i];
  2811  0017BC  0E79               	movlw	low _tmpString
  2812  0017BE  0100               	movlb	0	; () banked
  2813  0017C0  25C6               	addwf	copyTmpBuffer@i& (0+255),w,b
  2814  0017C2  6ED9               	movwf	fsr2l,c
  2815  0017C4  0E00               	movlw	high _tmpString
  2816  0017C6  0100               	movlb	0	; () banked
  2817  0017C8  21C7               	addwfc	(copyTmpBuffer@i+1)& (0+255),w,b
  2818  0017CA  6EDA               	movwf	fsr2h,c
  2819  0017CC  0E00               	movlw	low _allDataString
  2820  0017CE  0100               	movlb	0	; () banked
  2821  0017D0  25C6               	addwf	copyTmpBuffer@i& (0+255),w,b
  2822  0017D2  6EE1               	movwf	fsr1l,c
  2823  0017D4  0E01               	movlw	high _allDataString
  2824  0017D6  0100               	movlb	0	; () banked
  2825  0017D8  21C7               	addwfc	(copyTmpBuffer@i+1)& (0+255),w,b
  2826  0017DA  6EE2               	movwf	fsr1h,c
  2827  0017DC  CFDF FFE7          	movff	indf2,indf1
  2828                           
  2829                           ; BSR set to: 0
  2830  0017E0  0100               	movlb	0	; () banked
  2831  0017E2  4BC6               	infsnz	copyTmpBuffer@i& (0+255),f,b
  2832  0017E4  2BC7               	incf	(copyTmpBuffer@i+1)& (0+255),f,b
  2833  0017E6                     l1927:
  2834                           
  2835                           ; BSR set to: 0
  2836  0017E6  503D               	movf	_index,w,c
  2837  0017E8  0100               	movlb	0	; () banked
  2838  0017EA  5DC6               	subwf	copyTmpBuffer@i& (0+255),w,b
  2839  0017EC  0100               	movlb	0	; () banked
  2840  0017EE  51C7               	movf	(copyTmpBuffer@i+1)& (0+255),w,b
  2841  0017F0  0A80               	xorlw	128
  2842  0017F2  0100               	movlb	0	; () banked
  2843  0017F4  6FC5               	movwf	??_copyTmpBuffer& (0+255),b
  2844  0017F6  503E               	movf	_index+1,w,c
  2845  0017F8  0A80               	xorlw	128
  2846  0017FA  0100               	movlb	0	; () banked
  2847  0017FC  59C5               	subwfb	??_copyTmpBuffer& (0+255),w,b
  2848  0017FE  B0D8               	btfsc	status,0,c
  2849  001800  0012               	return	
  2850  001802  D7DC               	goto	l1923
  2851  001804                     __end_of_copyTmpBuffer:
  2852                           	opt stack 0
  2853                           tblptru	equ	0xFF8
  2854                           tblptrh	equ	0xFF7
  2855                           tblptrl	equ	0xFF6
  2856                           tablat	equ	0xFF5
  2857                           prodh	equ	0xFF4
  2858                           prodl	equ	0xFF3
  2859                           indf0	equ	0xFEF
  2860                           postinc0	equ	0xFEE
  2861                           fsr0h	equ	0xFEA
  2862                           fsr0l	equ	0xFE9
  2863                           wreg	equ	0xFE8
  2864                           indf1	equ	0xFE7
  2865                           postdec1	equ	0xFE5
  2866                           fsr1h	equ	0xFE2
  2867                           fsr1l	equ	0xFE1
  2868                           indf2	equ	0xFDF
  2869                           postinc2	equ	0xFDE
  2870                           postdec2	equ	0xFDD
  2871                           plusw2	equ	0xFDB
  2872                           fsr2h	equ	0xFDA
  2873                           fsr2l	equ	0xFD9
  2874                           status	equ	0xFD8
  2875                           
  2876 ;; *************** function _clearBuffer *****************
  2877 ;; Defined at:
  2878 ;;		line 45 in file "bufferhandler.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;		None
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  i               2    6[BANK0 ] int 
  2883 ;; Return value:  Size  Location     Type
  2884 ;;                  1    wreg      void 
  2885 ;; Registers used:
  2886 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2893 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2895 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2896 ;;Total ram usage:        2 bytes
  2897 ;; Hardware stack levels used:    1
  2898 ;; Hardware stack levels required when called:    4
  2899 ;; This function calls:
  2900 ;;		_strlen
  2901 ;; This function is called by:
  2902 ;;		_main
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text16
  2907  001756                     __ptext16:
  2908                           	opt stack 0
  2909  001756                     _clearBuffer:
  2910                           	opt stack 26
  2911                           
  2912                           ;bufferhandler.c: 46: for(int i = 0; i<strlen(tmpString); i++){
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;incstack = 0
  2916  001756  0E00               	movlw	0
  2917  001758  0100               	movlb	0	; () banked
  2918  00175A  6FCC               	movwf	(clearBuffer@i+1)& (0+255),b
  2919  00175C  0E00               	movlw	0
  2920  00175E  6FCB               	movwf	clearBuffer@i& (0+255),b
  2921  001760  D00D               	goto	l1887
  2922  001762                     l1883:
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;bufferhandler.c: 47: tmpString[i] = "";
  2926  001762  0E79               	movlw	low _tmpString
  2927  001764  0100               	movlb	0	; () banked
  2928  001766  25CB               	addwf	clearBuffer@i& (0+255),w,b
  2929  001768  6ED9               	movwf	fsr2l,c
  2930  00176A  0E00               	movlw	high _tmpString
  2931  00176C  0100               	movlb	0	; () banked
  2932  00176E  21CC               	addwfc	(clearBuffer@i+1)& (0+255),w,b
  2933  001770  6EDA               	movwf	fsr2h,c
  2934  001772  0E05               	movlw	low (STR_1+4)
  2935  001774  6EDF               	movwf	indf2,c
  2936                           
  2937                           ; BSR set to: 0
  2938  001776  0100               	movlb	0	; () banked
  2939  001778  4BCB               	infsnz	clearBuffer@i& (0+255),f,b
  2940  00177A  2BCC               	incf	(clearBuffer@i+1)& (0+255),f,b
  2941  00177C                     l1887:
  2942                           
  2943                           ; BSR set to: 0
  2944  00177C  0E79               	movlw	low _tmpString
  2945  00177E  0100               	movlb	0	; () banked
  2946  001780  6FC5               	movwf	strlen@s& (0+255),b
  2947  001782  0E00               	movlw	high _tmpString
  2948  001784  0100               	movlb	0	; () banked
  2949  001786  6FC6               	movwf	(strlen@s+1)& (0+255),b
  2950  001788  EC4C  F00B         	call	_strlen	;wreg free
  2951  00178C  0100               	movlb	0	; () banked
  2952  00178E  51C5               	movf	?_strlen& (0+255),w,b
  2953  001790  0100               	movlb	0	; () banked
  2954  001792  5DCB               	subwf	clearBuffer@i& (0+255),w,b
  2955  001794  0100               	movlb	0	; () banked
  2956  001796  51C6               	movf	(?_strlen+1)& (0+255),w,b
  2957  001798  0100               	movlb	0	; () banked
  2958  00179A  59CC               	subwfb	(clearBuffer@i+1)& (0+255),w,b
  2959  00179C  A0D8               	btfss	status,0,c
  2960  00179E  D7E1               	goto	l1883
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;bufferhandler.c: 48: }
  2964                           ;bufferhandler.c: 49: tmpString[0] = '\0';
  2965                           
  2966                           ; BSR set to: 0
  2967  0017A0  0E00               	movlw	0
  2968  0017A2  0100               	movlb	0	; () banked
  2969  0017A4  6F79               	movwf	_tmpString& (0+255),b
  2970                           
  2971                           ;bufferhandler.c: 50: index = 0;
  2972  0017A6  0E00               	movlw	0
  2973  0017A8  6E3E               	movwf	_index+1,c
  2974  0017AA  0E00               	movlw	0
  2975  0017AC  6E3D               	movwf	_index,c
  2976                           
  2977                           ; BSR set to: 0
  2978  0017AE  0012               	return		;funcret
  2979  0017B0                     __end_of_clearBuffer:
  2980                           	opt stack 0
  2981                           tblptru	equ	0xFF8
  2982                           tblptrh	equ	0xFF7
  2983                           tblptrl	equ	0xFF6
  2984                           tablat	equ	0xFF5
  2985                           prodh	equ	0xFF4
  2986                           prodl	equ	0xFF3
  2987                           indf0	equ	0xFEF
  2988                           postinc0	equ	0xFEE
  2989                           fsr0h	equ	0xFEA
  2990                           fsr0l	equ	0xFE9
  2991                           wreg	equ	0xFE8
  2992                           indf1	equ	0xFE7
  2993                           postdec1	equ	0xFE5
  2994                           fsr1h	equ	0xFE2
  2995                           fsr1l	equ	0xFE1
  2996                           indf2	equ	0xFDF
  2997                           postinc2	equ	0xFDE
  2998                           postdec2	equ	0xFDD
  2999                           plusw2	equ	0xFDB
  3000                           fsr2h	equ	0xFDA
  3001                           fsr2l	equ	0xFD9
  3002                           status	equ	0xFD8
  3003                           
  3004 ;; *************** function _strlen *****************
  3005 ;; Defined at:
  3006 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  3009 ;;		 -> parsedString(17), allDataString(70), tmpString(70), STR_2(4), 
  3010 ;;		 -> STR_1(5), 
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  3013 ;;		 -> parsedString(17), allDataString(70), tmpString(70), STR_2(4), 
  3014 ;;		 -> STR_1(5), 
  3015 ;; Return value:  Size  Location     Type
  3016 ;;                  2    0[BANK0 ] unsigned int 
  3017 ;; Registers used:
  3018 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  3019 ;; Tracked objects:
  3020 ;;		On entry : 0/0
  3021 ;;		On exit  : 0/0
  3022 ;;		Unchanged: 0/0
  3023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3024 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3025 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3026 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3027 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3028 ;;Total ram usage:        6 bytes
  3029 ;; Hardware stack levels used:    1
  3030 ;; Hardware stack levels required when called:    3
  3031 ;; This function calls:
  3032 ;;		Nothing
  3033 ;; This function is called by:
  3034 ;;		_writeString
  3035 ;;		_clearBuffer
  3036 ;;		_checkPos
  3037 ;; This function uses a non-reentrant model
  3038 ;;
  3039                           
  3040                           	psect	text17
  3041  001698                     __ptext17:
  3042                           	opt stack 0
  3043  001698                     _strlen:
  3044                           	opt stack 26
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;incstack = 0
  3048  001698  C0C5  F0C9         	movff	strlen@s,strlen@cp
  3049  00169C  C0C6  F0CA         	movff	strlen@s+1,strlen@cp+1
  3050  0016A0  D003               	goto	l1677
  3051  0016A2                     l1675:
  3052  0016A2  0100               	movlb	0	; () banked
  3053  0016A4  4BC9               	infsnz	strlen@cp& (0+255),f,b
  3054  0016A6  2BCA               	incf	(strlen@cp+1)& (0+255),f,b
  3055  0016A8                     l1677:
  3056  0016A8  C0C9  FFF6         	movff	strlen@cp,tblptrl
  3057  0016AC  C0CA  FFF7         	movff	strlen@cp+1,tblptrh
  3058  0016B0  0E00               	movlw	low (__smallconst shr (0+16))
  3059  0016B2  6EF8               	movwf	tblptru,c
  3060  0016B4  0E0E               	movlw	(high __ramtop+-1)
  3061  0016B6  64F7               	cpfsgt	tblptrh,c
  3062  0016B8  D003               	bra	u917
  3063  0016BA  0008               	tblrd		*
  3064  0016BC  50F5               	movf	tablat,w,c
  3065  0016BE  D005               	bra	u910
  3066  0016C0                     u917:
  3067  0016C0  CFF6 FFE9          	movff	tblptrl,fsr0l
  3068  0016C4  CFF7 FFEA          	movff	tblptrh,fsr0h
  3069  0016C8  50EF               	movf	indf0,w,c
  3070  0016CA                     u910:
  3071  0016CA  0900               	iorlw	0
  3072  0016CC  A4D8               	btfss	status,2,c
  3073  0016CE  D7E9               	goto	l1675
  3074  0016D0  C0C5  F0C7         	movff	strlen@s,??_strlen
  3075  0016D4  C0C6  F0C8         	movff	strlen@s+1,??_strlen+1
  3076  0016D8  0100               	movlb	0	; () banked
  3077  0016DA  1FC7               	comf	??_strlen& (0+255),f,b
  3078  0016DC  1FC8               	comf	(??_strlen+1)& (0+255),f,b
  3079  0016DE  4BC7               	infsnz	??_strlen& (0+255),f,b
  3080  0016E0  2BC8               	incf	(??_strlen+1)& (0+255),f,b
  3081  0016E2  0100               	movlb	0	; () banked
  3082  0016E4  51C9               	movf	strlen@cp& (0+255),w,b
  3083  0016E6  0100               	movlb	0	; () banked
  3084  0016E8  25C7               	addwf	??_strlen& (0+255),w,b
  3085  0016EA  0100               	movlb	0	; () banked
  3086  0016EC  6FC5               	movwf	?_strlen& (0+255),b
  3087  0016EE  0100               	movlb	0	; () banked
  3088  0016F0  51CA               	movf	(strlen@cp+1)& (0+255),w,b
  3089  0016F2  0100               	movlb	0	; () banked
  3090  0016F4  21C8               	addwfc	(??_strlen+1)& (0+255),w,b
  3091  0016F6  0100               	movlb	0	; () banked
  3092  0016F8  6FC6               	movwf	(?_strlen+1)& (0+255),b
  3093  0016FA  0012               	return	
  3094  0016FC                     __end_of_strlen:
  3095                           	opt stack 0
  3096                           tblptru	equ	0xFF8
  3097                           tblptrh	equ	0xFF7
  3098                           tblptrl	equ	0xFF6
  3099                           tablat	equ	0xFF5
  3100                           prodh	equ	0xFF4
  3101                           prodl	equ	0xFF3
  3102                           indf0	equ	0xFEF
  3103                           postinc0	equ	0xFEE
  3104                           fsr0h	equ	0xFEA
  3105                           fsr0l	equ	0xFE9
  3106                           wreg	equ	0xFE8
  3107                           indf1	equ	0xFE7
  3108                           postdec1	equ	0xFE5
  3109                           fsr1h	equ	0xFE2
  3110                           fsr1l	equ	0xFE1
  3111                           indf2	equ	0xFDF
  3112                           postinc2	equ	0xFDE
  3113                           postdec2	equ	0xFDD
  3114                           plusw2	equ	0xFDB
  3115                           fsr2h	equ	0xFDA
  3116                           fsr2l	equ	0xFD9
  3117                           status	equ	0xFD8
  3118                           
  3119 ;; *************** function _UART_Init *****************
  3120 ;; Defined at:
  3121 ;;		line 31 in file "uart.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  baudrate        4    0[BANK0 ] const long 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;		None
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      unsigned char 
  3128 ;; Registers used:
  3129 ;;		wreg, status,2
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3135 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3138 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3139 ;;Total ram usage:        4 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    3
  3142 ;; This function calls:
  3143 ;;		Nothing
  3144 ;; This function is called by:
  3145 ;;		_main
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           	psect	text18
  3150  0018FE                     __ptext18:
  3151                           	opt stack 0
  3152  0018FE                     _UART_Init:
  3153                           	opt stack 27
  3154                           
  3155                           ;uart.c: 35: TXSTA1 = 0x24;
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;incstack = 0
  3159  0018FE  0E24               	movlw	36
  3160  001900  6EAD               	movwf	4013,c	;volatile
  3161                           
  3162                           ;uart.c: 36: RCSTA1 = 0x90;
  3163  001902  0E90               	movlw	144
  3164  001904  6EAC               	movwf	4012,c	;volatile
  3165                           
  3166                           ;uart.c: 37: RC1IE = 1;
  3167  001906  8A9D               	bsf	3997,5,c	;volatile
  3168                           
  3169                           ;uart.c: 38: BAUDCON1bits.BRG16 = 0;
  3170  001908  967E               	bcf	3966,3,c	;volatile
  3171                           
  3172                           ;uart.c: 39: SPBRG1 = 155;
  3173  00190A  0E9B               	movlw	155
  3174  00190C  6EB0               	movwf	4016,c	;volatile
  3175                           
  3176                           ;uart.c: 40: SPBRGH1 = 155;
  3177  00190E  0E9B               	movlw	155
  3178  001910  6E7F               	movwf	3967,c	;volatile
  3179                           
  3180                           ;uart.c: 41: TRISC7 = 1;
  3181  001912  8E94               	bsf	3988,7,c	;volatile
  3182                           
  3183                           ;uart.c: 42: TRISC6 = 0;
  3184  001914  9C94               	bcf	3988,6,c	;volatile
  3185                           
  3186                           ;uart.c: 46: RCSTA2 = 0b10010000;
  3187  001916  0E90               	movlw	144
  3188  001918  6E9C               	movwf	3996,c	;volatile
  3189                           
  3190                           ;uart.c: 47: TXSTA2 = 0b00100100;
  3191  00191A  0E24               	movlw	36
  3192  00191C  6EA8               	movwf	4008,c	;volatile
  3193                           
  3194                           ;uart.c: 48: RC2IE = 1;
  3195  00191E  8AA3               	bsf	4003,5,c	;volatile
  3196                           
  3197                           ;uart.c: 49: BAUDCON2bits.BRG16 = 0;
  3198  001920  967C               	bcf	3964,3,c	;volatile
  3199                           
  3200                           ;uart.c: 50: SPBRG2 = 25;
  3201  001922  0E19               	movlw	25
  3202  001924  6EAB               	movwf	4011,c	;volatile
  3203                           
  3204                           ;uart.c: 51: SPBRGH2 = 25;
  3205  001926  0E19               	movlw	25
  3206  001928  6E7D               	movwf	3965,c	;volatile
  3207                           
  3208                           ;uart.c: 52: TRISB4 = 1;
  3209  00192A  8893               	bsf	3987,4,c	;volatile
  3210                           
  3211                           ;uart.c: 53: TRISB5 = 0;
  3212  00192C  9A93               	bcf	3987,5,c	;volatile
  3213  00192E  0012               	return	
  3214  001930                     __end_of_UART_Init:
  3215                           	opt stack 0
  3216                           tblptru	equ	0xFF8
  3217                           tblptrh	equ	0xFF7
  3218                           tblptrl	equ	0xFF6
  3219                           tablat	equ	0xFF5
  3220                           prodh	equ	0xFF4
  3221                           prodl	equ	0xFF3
  3222                           indf0	equ	0xFEF
  3223                           postinc0	equ	0xFEE
  3224                           fsr0h	equ	0xFEA
  3225                           fsr0l	equ	0xFE9
  3226                           wreg	equ	0xFE8
  3227                           indf1	equ	0xFE7
  3228                           postdec1	equ	0xFE5
  3229                           fsr1h	equ	0xFE2
  3230                           fsr1l	equ	0xFE1
  3231                           indf2	equ	0xFDF
  3232                           postinc2	equ	0xFDE
  3233                           postdec2	equ	0xFDD
  3234                           plusw2	equ	0xFDB
  3235                           fsr2h	equ	0xFDA
  3236                           fsr2l	equ	0xFD9
  3237                           status	equ	0xFD8
  3238                           
  3239 ;; *************** function _InitApp *****************
  3240 ;; Defined at:
  3241 ;;		line 29 in file "user.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;		None
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;		None
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      void 
  3248 ;; Registers used:
  3249 ;;		wreg, status,2
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3259 ;;Total ram usage:        0 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    3
  3262 ;; This function calls:
  3263 ;;		Nothing
  3264 ;; This function is called by:
  3265 ;;		_main
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           	psect	text19
  3270  001950                     __ptext19:
  3271                           	opt stack 0
  3272  001950                     _InitApp:
  3273                           	opt stack 27
  3274                           
  3275                           ;user.c: 33: PPSCON = 0b00000000;
  3276                           
  3277                           ;incstack = 0
  3278  001950  0E00               	movlw	0
  3279  001952  010E               	movlb	14	; () banked
  3280  001954  6FBF               	movwf	191,b	;volatile
  3281                           
  3282                           ;user.c: 34: RPOR8 = 0b00000110;
  3283  001956  0E06               	movlw	6
  3284  001958  010E               	movlb	14	; () banked
  3285  00195A  6FC8               	movwf	200,b	;volatile
  3286                           
  3287                           ;user.c: 35: RPINR16 = 0b00000111;
  3288  00195C  0E07               	movlw	7
  3289  00195E  010E               	movlb	14	; () banked
  3290  001960  6FF7               	movwf	247,b	;volatile
  3291                           
  3292                           ;user.c: 36: PPSCON = 0b00000001;
  3293  001962  0E01               	movlw	1
  3294  001964  010E               	movlb	14	; () banked
  3295  001966  6FBF               	movwf	191,b	;volatile
  3296                           
  3297                           ;user.c: 39: INTCON = 0xC0;
  3298  001968  0EC0               	movlw	192
  3299  00196A  6EF2               	movwf	intcon,c	;volatile
  3300                           
  3301                           ; BSR set to: 14
  3302  00196C  0012               	return		;funcret
  3303  00196E                     __end_of_InitApp:
  3304                           	opt stack 0
  3305                           tblptru	equ	0xFF8
  3306                           tblptrh	equ	0xFF7
  3307                           tblptrl	equ	0xFF6
  3308                           tablat	equ	0xFF5
  3309                           prodh	equ	0xFF4
  3310                           prodl	equ	0xFF3
  3311                           intcon	equ	0xFF2
  3312                           indf0	equ	0xFEF
  3313                           postinc0	equ	0xFEE
  3314                           fsr0h	equ	0xFEA
  3315                           fsr0l	equ	0xFE9
  3316                           wreg	equ	0xFE8
  3317                           indf1	equ	0xFE7
  3318                           postdec1	equ	0xFE5
  3319                           fsr1h	equ	0xFE2
  3320                           fsr1l	equ	0xFE1
  3321                           indf2	equ	0xFDF
  3322                           postinc2	equ	0xFDE
  3323                           postdec2	equ	0xFDD
  3324                           plusw2	equ	0xFDB
  3325                           fsr2h	equ	0xFDA
  3326                           fsr2l	equ	0xFD9
  3327                           status	equ	0xFD8
  3328                           
  3329 ;; *************** function _ConfigureOscillator *****************
  3330 ;; Defined at:
  3331 ;;		line 24 in file "system.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;		None
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;		None
  3336 ;; Return value:  Size  Location     Type
  3337 ;;                  1    wreg      void 
  3338 ;; Registers used:
  3339 ;;		wreg, status,2
  3340 ;; Tracked objects:
  3341 ;;		On entry : 0/0
  3342 ;;		On exit  : 0/0
  3343 ;;		Unchanged: 0/0
  3344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3349 ;;Total ram usage:        0 bytes
  3350 ;; Hardware stack levels used:    1
  3351 ;; Hardware stack levels required when called:    3
  3352 ;; This function calls:
  3353 ;;		Nothing
  3354 ;; This function is called by:
  3355 ;;		_main
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359                           	psect	text20
  3360  0019B0                     __ptext20:
  3361                           	opt stack 0
  3362  0019B0                     _ConfigureOscillator:
  3363                           	opt stack 27
  3364                           
  3365                           ;system.c: 26: OSCCONbits.IRCF = 0b110;
  3366                           
  3367                           ; BSR set to: 14
  3368                           ;incstack = 0
  3369  0019B0  50D3               	movf	4051,w,c	;volatile
  3370  0019B2  0B8F               	andlw	-113
  3371  0019B4  0960               	iorlw	96
  3372  0019B6  6ED3               	movwf	4051,c	;volatile
  3373                           
  3374                           ;system.c: 27: OSCTUNEbits.PLLEN = 0b1;
  3375  0019B8  8C9B               	bsf	3995,6,c	;volatile
  3376  0019BA  0012               	return		;funcret
  3377  0019BC                     __end_of_ConfigureOscillator:
  3378                           	opt stack 0
  3379                           tblptru	equ	0xFF8
  3380                           tblptrh	equ	0xFF7
  3381                           tblptrl	equ	0xFF6
  3382                           tablat	equ	0xFF5
  3383                           prodh	equ	0xFF4
  3384                           prodl	equ	0xFF3
  3385                           intcon	equ	0xFF2
  3386                           indf0	equ	0xFEF
  3387                           postinc0	equ	0xFEE
  3388                           fsr0h	equ	0xFEA
  3389                           fsr0l	equ	0xFE9
  3390                           wreg	equ	0xFE8
  3391                           indf1	equ	0xFE7
  3392                           postdec1	equ	0xFE5
  3393                           fsr1h	equ	0xFE2
  3394                           fsr1l	equ	0xFE1
  3395                           indf2	equ	0xFDF
  3396                           postinc2	equ	0xFDE
  3397                           postdec2	equ	0xFDD
  3398                           plusw2	equ	0xFDB
  3399                           fsr2h	equ	0xFDA
  3400                           fsr2l	equ	0xFD9
  3401                           status	equ	0xFD8
  3402                           
  3403 ;; *************** function _low_isr *****************
  3404 ;; Defined at:
  3405 ;;		line 66 in file "interrupts.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;		None
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;		None
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  1    wreg      void 
  3412 ;; Registers used:
  3413 ;;		None
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3421 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3422 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3423 ;;Total ram usage:       17 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:    2
  3426 ;; This function calls:
  3427 ;;		Nothing
  3428 ;; This function is called by:
  3429 ;;		Interrupt level 1
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	intcodelo
  3434  000018                     __pintcodelo:
  3435                           	opt stack 0
  3436  000018                     _low_isr:
  3437                           	opt stack 24
  3438                           
  3439                           ;incstack = 0
  3440  000018  803F               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3441  00001A  CFD8 F011          	movff	status,??_low_isr
  3442  00001E  CFE8 F012          	movff	wreg,??_low_isr+1
  3443  000022  CFE0 F013          	movff	bsr,??_low_isr+2
  3444  000026  CFFA F014          	movff	pclath,??_low_isr+3
  3445  00002A  CFFB F015          	movff	pclatu,??_low_isr+4
  3446  00002E  CFE9 F016          	movff	fsr0l,??_low_isr+5
  3447  000032  CFEA F017          	movff	fsr0h,??_low_isr+6
  3448  000036  CFE1 F018          	movff	fsr1l,??_low_isr+7
  3449  00003A  CFE2 F019          	movff	fsr1h,??_low_isr+8
  3450  00003E  CFD9 F01A          	movff	fsr2l,??_low_isr+9
  3451  000042  CFDA F01B          	movff	fsr2h,??_low_isr+10
  3452  000046  CFF3 F01C          	movff	prodl,??_low_isr+11
  3453  00004A  CFF4 F01D          	movff	prodh,??_low_isr+12
  3454  00004E  CFF6 F01E          	movff	tblptrl,??_low_isr+13
  3455  000052  CFF7 F01F          	movff	tblptrh,??_low_isr+14
  3456  000056  CFF8 F020          	movff	tblptru,??_low_isr+15
  3457  00005A  CFF5 F021          	movff	tablat,??_low_isr+16
  3458  00005E  C021  FFF5         	movff	??_low_isr+16,tablat
  3459  000062  C020  FFF8         	movff	??_low_isr+15,tblptru
  3460  000066  C01F  FFF7         	movff	??_low_isr+14,tblptrh
  3461  00006A  C01E  FFF6         	movff	??_low_isr+13,tblptrl
  3462  00006E  C01D  FFF4         	movff	??_low_isr+12,prodh
  3463  000072  C01C  FFF3         	movff	??_low_isr+11,prodl
  3464  000076  C01B  FFDA         	movff	??_low_isr+10,fsr2h
  3465  00007A  C01A  FFD9         	movff	??_low_isr+9,fsr2l
  3466  00007E  C019  FFE2         	movff	??_low_isr+8,fsr1h
  3467  000082  C018  FFE1         	movff	??_low_isr+7,fsr1l
  3468  000086  C017  FFEA         	movff	??_low_isr+6,fsr0h
  3469  00008A  C016  FFE9         	movff	??_low_isr+5,fsr0l
  3470  00008E  C015  FFFB         	movff	??_low_isr+4,pclatu
  3471  000092  C014  FFFA         	movff	??_low_isr+3,pclath
  3472  000096  C013  FFE0         	movff	??_low_isr+2,bsr
  3473  00009A  C012  FFE8         	movff	??_low_isr+1,wreg
  3474  00009E  C011  FFD8         	movff	??_low_isr,status
  3475  0000A2  903F               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3476  0000A4  0010               	retfie	
  3477  0000A6                     __end_of_low_isr:
  3478                           	opt stack 0
  3479                           pclatu	equ	0xFFB
  3480                           pclath	equ	0xFFA
  3481                           tblptru	equ	0xFF8
  3482                           tblptrh	equ	0xFF7
  3483                           tblptrl	equ	0xFF6
  3484                           tablat	equ	0xFF5
  3485                           prodh	equ	0xFF4
  3486                           prodl	equ	0xFF3
  3487                           intcon	equ	0xFF2
  3488                           indf0	equ	0xFEF
  3489                           postinc0	equ	0xFEE
  3490                           fsr0h	equ	0xFEA
  3491                           fsr0l	equ	0xFE9
  3492                           wreg	equ	0xFE8
  3493                           indf1	equ	0xFE7
  3494                           postdec1	equ	0xFE5
  3495                           fsr1h	equ	0xFE2
  3496                           fsr1l	equ	0xFE1
  3497                           bsr	equ	0xFE0
  3498                           indf2	equ	0xFDF
  3499                           postinc2	equ	0xFDE
  3500                           postdec2	equ	0xFDD
  3501                           plusw2	equ	0xFDB
  3502                           fsr2h	equ	0xFDA
  3503                           fsr2l	equ	0xFD9
  3504                           status	equ	0xFD8
  3505                           
  3506 ;; *************** function _high_isr *****************
  3507 ;; Defined at:
  3508 ;;		line 30 in file "interrupts.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;		None
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;		None
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  1    wreg      void 
  3515 ;; Registers used:
  3516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3524 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3525 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3526 ;;Total ram usage:       15 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    1
  3529 ;; This function calls:
  3530 ;;		_appendChar
  3531 ;; This function is called by:
  3532 ;;		Interrupt level 2
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           	psect	intcode
  3537  000008                     __pintcode:
  3538                           	opt stack 0
  3539  000008                     _high_isr:
  3540                           	opt stack 24
  3541                           
  3542                           ;incstack = 0
  3543  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3544  00000A  EF1E  F00A         	goto	int_func
  3545                           pclatu	equ	0xFFB
  3546                           pclath	equ	0xFFA
  3547                           tblptru	equ	0xFF8
  3548                           tblptrh	equ	0xFF7
  3549                           tblptrl	equ	0xFF6
  3550                           tablat	equ	0xFF5
  3551                           prodh	equ	0xFF4
  3552                           prodl	equ	0xFF3
  3553                           intcon	equ	0xFF2
  3554                           indf0	equ	0xFEF
  3555                           postinc0	equ	0xFEE
  3556                           fsr0h	equ	0xFEA
  3557                           fsr0l	equ	0xFE9
  3558                           wreg	equ	0xFE8
  3559                           indf1	equ	0xFE7
  3560                           postdec1	equ	0xFE5
  3561                           fsr1h	equ	0xFE2
  3562                           fsr1l	equ	0xFE1
  3563                           bsr	equ	0xFE0
  3564                           indf2	equ	0xFDF
  3565                           postinc2	equ	0xFDE
  3566                           postdec2	equ	0xFDD
  3567                           plusw2	equ	0xFDB
  3568                           fsr2h	equ	0xFDA
  3569                           fsr2l	equ	0xFD9
  3570                           status	equ	0xFD8
  3571                           
  3572                           	psect	intcode_body
  3573  00143C                     __pintcode_body:
  3574                           	opt stack 24
  3575  00143C                     int_func:
  3576                           	opt stack 24
  3577  00143C  CFFA F003          	movff	pclath,??_high_isr+1
  3578  001440  CFFB F004          	movff	pclatu,??_high_isr+2
  3579  001444  CFE9 F005          	movff	fsr0l,??_high_isr+3
  3580  001448  CFEA F006          	movff	fsr0h,??_high_isr+4
  3581  00144C  CFE1 F007          	movff	fsr1l,??_high_isr+5
  3582  001450  CFE2 F008          	movff	fsr1h,??_high_isr+6
  3583  001454  CFD9 F009          	movff	fsr2l,??_high_isr+7
  3584  001458  CFDA F00A          	movff	fsr2h,??_high_isr+8
  3585  00145C  CFF3 F00B          	movff	prodl,??_high_isr+9
  3586  001460  CFF4 F00C          	movff	prodh,??_high_isr+10
  3587  001464  CFF6 F00D          	movff	tblptrl,??_high_isr+11
  3588  001468  CFF7 F00E          	movff	tblptrh,??_high_isr+12
  3589  00146C  CFF8 F00F          	movff	tblptru,??_high_isr+13
  3590  001470  CFF5 F010          	movff	tablat,??_high_isr+14
  3591                           
  3592                           ;interrupts.c: 45: if(RC1IF){
  3593  001474  AA9E               	btfss	3998,5,c	;volatile
  3594  001476  D00F               	goto	i2l1601
  3595                           
  3596                           ;interrupts.c: 46: LATAbits.LATA0 = !LATAbits.LATA0;
  3597  001478  B089               	btfsc	3977,0,c	;volatile
  3598  00147A  D003               	goto	i2u85_40
  3599  00147C  6A02               	clrf	??_high_isr& (0+255),c
  3600  00147E  2A02               	incf	??_high_isr& (0+255),f,c
  3601  001480  D001               	goto	i2u86_48
  3602  001482                     i2u85_40:
  3603  001482  6A02               	clrf	??_high_isr& (0+255),c
  3604  001484                     i2u86_48:
  3605  001484  5089               	movf	3977,w,c	;volatile
  3606  001486  1802               	xorwf	??_high_isr,w,c
  3607  001488  0BFE               	andlw	-2
  3608  00148A  1802               	xorwf	??_high_isr,w,c
  3609  00148C  6E89               	movwf	3977,c	;volatile
  3610                           
  3611                           ;interrupts.c: 47: appendChar(RCREG1);
  3612  00148E  50AF               	movf	4015,w,c	;volatile
  3613  001490  ECC3  F00C         	call	_appendChar
  3614                           
  3615                           ;interrupts.c: 49: RC1IF = 0;
  3616  001494  9A9E               	bcf	3998,5,c	;volatile
  3617  001496                     i2l1601:
  3618                           
  3619                           ;interrupts.c: 50: }
  3620                           ;interrupts.c: 52: if(RC2IF){
  3621  001496  BAA4               	btfsc	4004,5,c	;volatile
  3622                           
  3623                           ;interrupts.c: 57: RC2IF = 0;
  3624  001498  9AA4               	bcf	4004,5,c	;volatile
  3625  00149A  C010  FFF5         	movff	??_high_isr+14,tablat
  3626  00149E  C00F  FFF8         	movff	??_high_isr+13,tblptru
  3627  0014A2  C00E  FFF7         	movff	??_high_isr+12,tblptrh
  3628  0014A6  C00D  FFF6         	movff	??_high_isr+11,tblptrl
  3629  0014AA  C00C  FFF4         	movff	??_high_isr+10,prodh
  3630  0014AE  C00B  FFF3         	movff	??_high_isr+9,prodl
  3631  0014B2  C00A  FFDA         	movff	??_high_isr+8,fsr2h
  3632  0014B6  C009  FFD9         	movff	??_high_isr+7,fsr2l
  3633  0014BA  C008  FFE2         	movff	??_high_isr+6,fsr1h
  3634  0014BE  C007  FFE1         	movff	??_high_isr+5,fsr1l
  3635  0014C2  C006  FFEA         	movff	??_high_isr+4,fsr0h
  3636  0014C6  C005  FFE9         	movff	??_high_isr+3,fsr0l
  3637  0014CA  C004  FFFB         	movff	??_high_isr+2,pclatu
  3638  0014CE  C003  FFFA         	movff	??_high_isr+1,pclath
  3639  0014D2  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3640  0014D4  0011               	retfie		f
  3641  0014D6                     __end_of_high_isr:
  3642                           	opt stack 0
  3643                           pclatu	equ	0xFFB
  3644                           pclath	equ	0xFFA
  3645                           tblptru	equ	0xFF8
  3646                           tblptrh	equ	0xFF7
  3647                           tblptrl	equ	0xFF6
  3648                           tablat	equ	0xFF5
  3649                           prodh	equ	0xFF4
  3650                           prodl	equ	0xFF3
  3651                           intcon	equ	0xFF2
  3652                           indf0	equ	0xFEF
  3653                           postinc0	equ	0xFEE
  3654                           fsr0h	equ	0xFEA
  3655                           fsr0l	equ	0xFE9
  3656                           wreg	equ	0xFE8
  3657                           indf1	equ	0xFE7
  3658                           postdec1	equ	0xFE5
  3659                           fsr1h	equ	0xFE2
  3660                           fsr1l	equ	0xFE1
  3661                           bsr	equ	0xFE0
  3662                           indf2	equ	0xFDF
  3663                           postinc2	equ	0xFDE
  3664                           postdec2	equ	0xFDD
  3665                           plusw2	equ	0xFDB
  3666                           fsr2h	equ	0xFDA
  3667                           fsr2l	equ	0xFD9
  3668                           status	equ	0xFD8
  3669                           
  3670 ;; *************** function _appendChar *****************
  3671 ;; Defined at:
  3672 ;;		line 30 in file "bufferhandler.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;  data            1    wreg     unsigned char 
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;  data            1    0[COMRAM] unsigned char 
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  1    wreg      void 
  3679 ;; Registers used:
  3680 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3687 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3689 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3690 ;;Total ram usage:        1 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; This function calls:
  3693 ;;		Nothing
  3694 ;; This function is called by:
  3695 ;;		_high_isr
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           	psect	text23
  3700  001986                     __ptext23:
  3701                           	opt stack 0
  3702  001986                     _appendChar:
  3703                           	opt stack 24
  3704                           
  3705                           ;incstack = 0
  3706                           ;appendChar@data stored from wreg
  3707  001986  6E01               	movwf	appendChar@data,c
  3708                           
  3709                           ;bufferhandler.c: 31: tmpString[index] = data;
  3710  001988  0E79               	movlw	low _tmpString
  3711  00198A  243D               	addwf	_index,w,c
  3712  00198C  6ED9               	movwf	fsr2l,c
  3713  00198E  0E00               	movlw	high _tmpString
  3714  001990  203E               	addwfc	_index+1,w,c
  3715  001992  6EDA               	movwf	fsr2h,c
  3716  001994  C001  FFDF         	movff	appendChar@data,indf2
  3717                           
  3718                           ;bufferhandler.c: 32: index++;
  3719  001998  4A3D               	infsnz	_index,f,c
  3720  00199A  2A3E               	incf	_index+1,f,c
  3721  00199C  0012               	return		;funcret
  3722  00199E                     __end_of_appendChar:
  3723                           	opt stack 0
  3724                           pclatu	equ	0xFFB
  3725                           pclath	equ	0xFFA
  3726                           tblptru	equ	0xFF8
  3727                           tblptrh	equ	0xFF7
  3728                           tblptrl	equ	0xFF6
  3729                           tablat	equ	0xFF5
  3730                           prodh	equ	0xFF4
  3731                           prodl	equ	0xFF3
  3732                           intcon	equ	0xFF2
  3733                           indf0	equ	0xFEF
  3734                           postinc0	equ	0xFEE
  3735                           fsr0h	equ	0xFEA
  3736                           fsr0l	equ	0xFE9
  3737                           wreg	equ	0xFE8
  3738                           indf1	equ	0xFE7
  3739                           postdec1	equ	0xFE5
  3740                           fsr1h	equ	0xFE2
  3741                           fsr1l	equ	0xFE1
  3742                           bsr	equ	0xFE0
  3743                           indf2	equ	0xFDF
  3744                           postinc2	equ	0xFDE
  3745                           postdec2	equ	0xFDD
  3746                           plusw2	equ	0xFDB
  3747                           fsr2h	equ	0xFDA
  3748                           fsr2l	equ	0xFD9
  3749                           status	equ	0xFD8
  3750                           pclatu	equ	0xFFB
  3751                           pclath	equ	0xFFA
  3752                           tblptru	equ	0xFF8
  3753                           tblptrh	equ	0xFF7
  3754                           tblptrl	equ	0xFF6
  3755                           tablat	equ	0xFF5
  3756                           prodh	equ	0xFF4
  3757                           prodl	equ	0xFF3
  3758                           intcon	equ	0xFF2
  3759                           indf0	equ	0xFEF
  3760                           postinc0	equ	0xFEE
  3761                           fsr0h	equ	0xFEA
  3762                           fsr0l	equ	0xFE9
  3763                           wreg	equ	0xFE8
  3764                           indf1	equ	0xFE7
  3765                           postdec1	equ	0xFE5
  3766                           fsr1h	equ	0xFE2
  3767                           fsr1l	equ	0xFE1
  3768                           bsr	equ	0xFE0
  3769                           indf2	equ	0xFDF
  3770                           postinc2	equ	0xFDE
  3771                           postdec2	equ	0xFDD
  3772                           plusw2	equ	0xFDB
  3773                           fsr2h	equ	0xFDA
  3774                           fsr2l	equ	0xFD9
  3775                           status	equ	0xFD8
  3776                           
  3777                           	psect	rparam
  3778  0000                     pclatu	equ	0xFFB
  3779                           pclath	equ	0xFFA
  3780                           tblptru	equ	0xFF8
  3781                           tblptrh	equ	0xFF7
  3782                           tblptrl	equ	0xFF6
  3783                           tablat	equ	0xFF5
  3784                           prodh	equ	0xFF4
  3785                           prodl	equ	0xFF3
  3786                           intcon	equ	0xFF2
  3787                           indf0	equ	0xFEF
  3788                           postinc0	equ	0xFEE
  3789                           fsr0h	equ	0xFEA
  3790                           fsr0l	equ	0xFE9
  3791                           wreg	equ	0xFE8
  3792                           indf1	equ	0xFE7
  3793                           postdec1	equ	0xFE5
  3794                           fsr1h	equ	0xFE2
  3795                           fsr1l	equ	0xFE1
  3796                           bsr	equ	0xFE0
  3797                           indf2	equ	0xFDF
  3798                           postinc2	equ	0xFDE
  3799                           postdec2	equ	0xFDD
  3800                           plusw2	equ	0xFDB
  3801                           fsr2h	equ	0xFDA
  3802                           fsr2l	equ	0xFD9
  3803                           status	equ	0xFD8
  3804                           
  3805                           	psect	temp
  3806  00003F                     btemp:
  3807                           	opt stack 0
  3808  00003F                     	ds	1
  3809  0000                     int$flags	set	btemp
  3810                           pclatu	equ	0xFFB
  3811                           pclath	equ	0xFFA
  3812                           tblptru	equ	0xFF8
  3813                           tblptrh	equ	0xFF7
  3814                           tblptrl	equ	0xFF6
  3815                           tablat	equ	0xFF5
  3816                           prodh	equ	0xFF4
  3817                           prodl	equ	0xFF3
  3818                           intcon	equ	0xFF2
  3819                           indf0	equ	0xFEF
  3820                           postinc0	equ	0xFEE
  3821                           fsr0h	equ	0xFEA
  3822                           fsr0l	equ	0xFE9
  3823                           wreg	equ	0xFE8
  3824                           indf1	equ	0xFE7
  3825                           postdec1	equ	0xFE5
  3826                           fsr1h	equ	0xFE2
  3827                           fsr1l	equ	0xFE1
  3828                           bsr	equ	0xFE0
  3829                           indf2	equ	0xFDF
  3830                           postinc2	equ	0xFDE
  3831                           postdec2	equ	0xFDD
  3832                           plusw2	equ	0xFDB
  3833                           fsr2h	equ	0xFDA
  3834                           fsr2l	equ	0xFD9
  3835                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    0
    Data        17
    BSS         183
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      62
    BANK0           160     38     139
    BANK1           256      0      70
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 70
		 -> parsedString(COMRAM[17]), allDataString(BANK1[70]), tmpString(BANK0[70]), STR_2(CODE[4]), 
		 -> STR_1(CODE[5]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 70
		 -> parsedString(COMRAM[17]), allDataString(BANK1[70]), tmpString(BANK0[70]), STR_2(CODE[4]), 
		 -> STR_1(CODE[5]), 

    transformToTwoDigitNumber@number	PTR int  size(2) Largest target is 6
		 -> SOC(BANK0[6]), 

    writeString@str	PTR unsigned char  size(2) Largest target is 70
		 -> parsedString(COMRAM[17]), allDataString(BANK1[70]), STR_2(CODE[4]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_appendChar

Critical Paths under _main in BANK0

    _main->_parseString
    _writeResult->_wait_ms
    _writeString->_strlen
    _wait_ms->___lmul
    _parseString->_checkString
    _transformToTwoDigitNumber->___wmul
    _checkString->_checkPos
    _checkPos->_strlen
    _clearBuffer->_strlen

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    7960
                                             37 BANK0      1     1      0
                _ConfigureOscillator
                            _InitApp
                          _UART_Init
                         _UART_Write
                        _clearBuffer
                      _copyTmpBuffer
                     _isItLongEnough
                            _isValid
                        _parseString
                            _wait_ms
                        _writeResult
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeResult                                          1     1      0    2113
                                             14 BANK0      1     1      0
                            _wait_ms
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeString                                          7     4      3    1462
                                              6 BANK0      7     4      3
                         _UART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           2     1      1     324
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _wait_ms                                              2     0      2     589
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     404
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _parseString                                         20    20      0    2864
                                             17 BANK0     20    20      0
                            ___awdiv
                        _checkString
                          _lenHelper
          _transformToTwoDigitNumber
 ---------------------------------------------------------------------------------
 (2) _transformToTwoDigitNumber                            8     4      4     893
                                              6 BANK0      8     4      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     386
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _lenHelper                                            2     0      2     170
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _checkString                                          6     6      0     760
                                             11 BANK0      6     6      0
                           _checkPos
 ---------------------------------------------------------------------------------
 (3) _checkPos                                             5     3      2     568
                                              6 BANK0      5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     599
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _isValid                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _isItLongEnough                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _copyTmpBuffer                                        3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _clearBuffer                                          2     2      0     429
                                              6 BANK0      2     2      0
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     361
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4      77
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             17    17      0       0
                                             16 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            15    15      0      22
                                              1 COMRAM    15    15      0
                         _appendChar
 ---------------------------------------------------------------------------------
 (7) _appendChar                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _UART_Init
   _UART_Write
   _clearBuffer
     _strlen
   _copyTmpBuffer
   _isItLongEnough
   _isValid
   _parseString
     ___awdiv
     _checkString
       _checkPos
         _strlen
     _lenHelper
     _transformToTwoDigitNumber
       ___wmul
   _wait_ms
     ___lmul
   _writeResult
     _wait_ms
       ___lmul
     _writeString
       _UART_Write
       _strlen
   _writeString
     _UART_Write
     _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)
   _appendChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      46       8       27.3%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     26      8B       5       86.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      3E       1       66.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10F       6        0.0%
DATA                 0      0     10F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Apr 24 21:07:58 2017

 __end_of_transformToTwoDigitNumber 11E6                                  l54 142E  
                                l73 1748                                  l57 1430  
                      ___awdiv@sign 00CA                      writeResult@dev 00D3  
                                bsr 000FE0                 ___wmul@multiplicand 00C7  
                      __CFG_CP0$OFF 000000                                 l150 1946  
                               l146 193C                                 l262 112A  
                               u910 16CA                                 u917 16C0  
                               _SOC 00BF                                 wreg 000FE8  
                        _TXSTA1bits 000FAD                        __CFG_IESO$ON 000000  
                        _TXSTA2bits 000FA8                                l2005 13F6  
                              l2019 1428                                l1801 1606  
                              l1705 155E                                l1731 1210  
                              l1723 1738                                l1715 14E2  
                              l1709 1584                                l1831 1312  
                              l1727 11FA                                l1807 1628  
                              l1751 10D6                                l1743 10AE  
                              l1719 152A                                l1833 131E  
                              l1825 12F4                                l1675 16A2  
                              l1923 17BC                                l1851 1376  
                              l1843 1354                                l1835 1324  
                              l1819 12DE                                l1739 12B6  
                              l1771 11A8                                l1755 10E0  
                              l1677 16A8                                l1917 18C4  
                              l1693 166C                                l1765 1134  
                              l1941 0F82                                l1927 17E6  
                              l1847 1362                                l1695 1672  
                              l1689 164A                                l1777 11B2  
                              l1883 1762                                l1795 15E4  
                              l1779 11DA                                l1947 0FC4  
                              l1957 1028                                l1887 177C  
                              l1969 1094                                l1899 1982  
                __CFG_WPFP$PAGE_127 000000                       _copyTmpBuffer 17B0  
                              STR_1 0F01                                STR_2 0F06  
                              STR_3 0F05                                u1000 1520  
                              u1100 161C                                u1007 1516  
                              u1050 10CA                                u1060 1112  
                              u1070 11A2                                u1090 15FA  
                              u1180 197E                                _RCIF 007CF5  
                     __CFG_FCMEN$ON 000000                                _main 1380  
                              fsr0h 000FEA                                fsr1h 000FE2  
                              indf0 000FEF                                fsr2h 000FDA  
                              fsr0l 000FE9                                indf1 000FE7  
                              indf2 000FDF                                fsr1l 000FE1  
                              fsr2l 000FD9                                btemp 003F  
                              prodh 000FF4                                prodl 000FF3  
                              start 00A6                      writeString@dev 00CD  
                      ___param_bank 000000                      writeString@str 00CB  
                   __end_of_InitApp 196E                       __CFG_PLLDIV$1 000000  
                      _BAUDCON1bits 000F7E                        _BAUDCON2bits 000F7C  
                             ?_main 0001                     __end_of___awdiv 1380  
                   ___awdiv@divisor 00C7                               _RC1IE 007CED  
                             _RC1IF 007CF5                               _RC2IE 007D1D  
                             _RC2IF 007D25                     ___awdiv@counter 00C9  
                       _writeResult 1852                               _RPOR8 000EC8  
               _ConfigureOscillator 19B0                         _writeString 14D6  
               ___lmul@multiplicand 00C9                    ??_isItLongEnough 00C5  
                       ?_UART_Write 00C5                  __size_of_UART_Init 0032  
              __size_of_checkString 00DC                     __end_of_isValid 18C8  
                             _index 003D                      ?_copyTmpBuffer 0001  
                    __CFG_CLKOEC$ON 000000                     __end_of_low_isr 00A6  
                             pclath 000FFA                               tablat 000FF5  
                   __end_of_wait_ms 1756                               plusw2 000FDB  
                parseString@chgStop 00D8                               status 000FD8  
              ?_ConfigureOscillator 0001                __size_of_clearBuffer 005A  
           __CFG_DSWDTOSC$INTOSCREF 000000                     __initialization 1804  
                      ?_parseString 0001                  parseString@socSize 00DB  
                      __end_of_main 143C                              ??_main 00EA  
                     __activetblptr 000003                    ___awdiv@dividend 00C5  
                            i2l1601 1496                      __CFG_WDTEN$OFF 000000  
                            _INTCON 000FF2                              _RCREG1 000FAF  
                            _RCREG2 000FAA                              _RCSTA1 000FAC  
                            _RCSTA2 000F9C                              _SPBRG1 000FB0  
                            _SPBRG2 000FAB                              _PPSCON 000EBF  
                            _TRISB4 007C9C                              _TRISB5 007C9D  
                    __CFG_WPCFG$OFF 000000                              _TRISC6 007CA6  
                            _TRISC7 007CA7                    __end_of_checkPos 1698  
                            _TXREG1 000FAE                              _TXREG2 000FA9  
                            _TXSTA1 000FAD                              _TXSTA2 000FA8  
                         ??_InitApp 00C5               ??_ConfigureOscillator 00C5  
                    __CFG_WPDIS$OFF 000000                      __CFG_XINST$OFF 000000  
                 __end_of_UART_Init 1930                    __end_of_high_isr 14D6  
                            ___lmul 154C                 __size_of_UART_Write 0020  
                            ___wmul 18C8                           ??___awdiv 00C9  
                    __CFG_STVREN$ON 000000              parseString@socStartPos 00E2  
                            clear_0 182A                              clear_1 1836  
                            clear_2 1842                    ___awdiv@quotient 00CB  
                            _strlen 1698                           ??_isValid 00C5  
                      __pdataCOMRAM 0022                        __mediumconst 0000  
                         ??_low_isr 0011                              tblptrh 000FF7  
                   ??_copyTmpBuffer 00C5                              tblptrl 000FF6  
                            tblptru 000FF8                           ??_wait_ms 00D3  
               parseString@chgStart 00DD                     __CFG_DSBOREN$ON 000000  
              __CFG_LS48MHZ$SYS48X8 000000                          __accesstop 0060  
           __end_of__initialization 1848                       ___rparam_used 000001  
                   __CFG_IOL1WAY$ON 000000                __CFG_WPEND$PAGE_WPFP 000000  
                    __pcstackCOMRAM 0001                     __CFG_DSWDTEN$ON 000000  
                   __CFG_DSWDTPS$G2 000000                     __CFG_OSC$INTOSC 000000  
                __size_of_lenHelper 0072                          __pbssBANK0 0060  
                        __pbssBANK1 0100                             ?___lmul 00C5  
                           ?___wmul 00C5                __size_of_parseString 0196  
        ?_transformToTwoDigitNumber 00CB                      ___lmul@product 00CD  
                        _appendChar 1986                             ?_strlen 00C5  
                     _allDataString 0100                        ?_writeResult 0001  
                         ?_checkPos 00CB                        ?_writeString 00CB  
                      ??_UART_Write 00C6                             _SPBRGH1 000F7F  
                           _SPBRGH2 000F7D                             i2u85_40 1482  
                           _RPINR16 000EF7                             i2u86_48 1484  
                         ?_high_isr 0001                             _InitApp 1950  
                           __Hparam 0000                             __Lparam 0000  
     transformToTwoDigitNumber@size 00CD                   __end_of_lenHelper 1634  
                           ___awdiv 12C2                     __size_of___lmul 0076  
                   __size_of___wmul 0036                  __end_of_UART_Write 1950  
                      __psmallconst 0F00                             _charSOC 0076  
                           __pcinit 1804                             __ramtop 0F00  
                           __ptext0 1380                             __ptext1 1852  
                           __ptext2 14D6                             __ptext3 1930  
                           __ptext4 16FC                             __ptext5 154C  
                           __ptext6 0F0C                             __ptext7 10A2  
                           __ptext8 18C8                             __ptext9 15C2  
                           _isValid 188E                       ??_checkString 00D0  
                   __size_of_strlen 0064                          ??_checkPos 00CD  
                           _low_isr 0018                             _wait_ms 16FC  
                           main@var 00EA                      parseString@CHG 00E1  
                        ??_high_isr 0002                      __pintcode_body 143C  
              end_of_initialization 1848                      parseString@tmp 00E8  
                     ??_clearBuffer 00CB                             int_func 143C  
                           postdec1 000FE5                             postdec2 000FDD  
                           postinc0 000FEE                             postinc2 000FDE  
                       wait_ms@time 00D1                             strlen@s 00C5  
                         _UART_Init 18FE                           _PORTDbits 000F83  
                       ?_appendChar 0001                      UART_Write@data 00C6  
                  __CFG_CPUDIV$OSC1 000000                           _TRISAbits 000F92  
                         _TRISDbits 000F95                 __end_of_checkString 12C2  
                 __CFG_SOSCSEL$HIGH 000000         __end_of_ConfigureOscillator 19BC  
                      writeString@i 00D0                          lenHelper@x 00C5  
           __size_of_isItLongEnough 0018                 __CFG_MSSP7B_EN$MSK7 000000  
               __end_of_clearBuffer 17B0                parseString@socEndPos 00E4  
                    __end_of___lmul 15C2                      __end_of___wmul 18FE  
                        ?_UART_Init 00C5                       __pidataCOMRAM 199E  
                    __end_of_strlen 16FC                 start_initialization 1804  
              __size_of_writeResult 003C                   parseString@tmpSOC 00DA  
              __size_of_writeString 0076               __end_of_copyTmpBuffer 1804  
               __size_of_appendChar 0018                            ??___lmul 00CD  
                          ??___wmul 00C9                   __CFG_ADCSEL$BIT10 000000  
                      parseString@i 00E6                        parseString@k 00DF  
   transformToTwoDigitNumber@number 00CB     transformToTwoDigitNumber@result 00D1  
       ??_transformToTwoDigitNumber 00CF                            ??_strlen 00C7  
                       _checkString 11E6                         __pbssCOMRAM 0033  
                     __pcstackBANK0 00C5                   __size_of_checkPos 0064  
                      checkString@i 00D4                   __size_of_high_isr 14CE  
                       _clearBuffer 1756                            ?_InitApp 0001  
                     ??_parseString 00D6                           __pintcode 0008  
                          ?___awdiv 00C5                         __pintcodelo 0018  
                       ??_UART_Init 00C9                           _lenHelper 15C2  
                          ?_isValid 0001                         __smallconst 0F00  
              __CFG_RTCOSC$T1OSCREF 000000                            ?_low_isr 0001  
                          ?_wait_ms 00D1                           checkPos@i 00CE  
         _transformToTwoDigitNumber 10A2                      copyTmpBuffer@i 00C6  
                    ___wmul@product 00C9                      _isItLongEnough 196E  
                          _LATAbits 000F89                    __CFG_WDTPS$32768 000000  
                      _parsedString 0022                        clearBuffer@i 00CB  
                     UART_Write@dev 00C5                           _tmpString 0079  
                 UART_Init@baudrate 00C5                           _positions 0060  
                        ?_lenHelper 00C5                 __end_of_parseString 10A2  
                      ??_appendChar 0001                   ___wmul@multiplier 00C5  
                 __CFG_CFGPLLEN$OFF 000000                   ___lmul@multiplier 00C5  
                         copy_data0 1818              __end_of_isItLongEnough 1986  
                __end_of_appendChar 199E                    __size_of_InitApp 001E  
                          __Hrparam 0000                            __Lrparam 0000  
                       checkPos@pos 00CB                    __size_of___awdiv 00BE  
                  __size_of_isValid 003A                            _checkPos 1634  
                       _toCharArray 0033                    __size_of_low_isr 008E  
                          __ptext10 11E6                            __ptext11 1634  
                          __ptext20 19B0                            __ptext12 12C2  
                          __ptext13 188E                            __ptext14 196E  
                          __ptext23 1986                            __ptext15 17B0  
                          __ptext16 1756                            __ptext17 1698  
                          __ptext18 18FE                            __ptext19 1950  
                  __size_of_wait_ms 005A                            _high_isr 0008  
                   ?_isItLongEnough 0001                       __size_of_main 00BC  
                    appendChar@data 0001        __size_of_ConfigureOscillator 000C  
                       _parseString 0F0C                            int$flags 003F  
                       ??_lenHelper 00C7                       ??_writeResult 00D3  
                      ?_checkString 0001                       ??_writeString 00CE  
                       _OSCTUNEbits 000F9B                            intlevel1 0000  
                          intlevel2 0000                        ?_clearBuffer 0001  
                        _OSCCONbits 000FD3  __size_of_transformToTwoDigitNumber 0144  
            __size_of_copyTmpBuffer 0054                        wait_ms@timel 0039  
                          strlen@cp 00C9                          _UART_Write 1930  
               __end_of_writeResult 188E                 __end_of_writeString 154C  
