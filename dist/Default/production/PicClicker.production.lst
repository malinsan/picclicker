

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Apr 01 21:31:21 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F47J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           ; Version 1.41
    32                           ; Generated 25/01/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F47J53 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     _RPINR16	set	3831
    66  0000                     _RPOR8	set	3784
    67  0000                     _PPSCON	set	3775
    68  0000                     _RCREG2	set	4010
    69  0000                     _TXREG2	set	4009
    70  0000                     _TXSTA2bits	set	4008
    71  0000                     _TXREG1	set	4014
    72  0000                     _TXSTA1bits	set	4013
    73  0000                     _SPBRGH2	set	3965
    74  0000                     _SPBRG2	set	4011
    75  0000                     _BAUDCON2bits	set	3964
    76  0000                     _TXSTA2	set	4008
    77  0000                     _RCSTA2	set	3996
    78  0000                     _SPBRGH1	set	3967
    79  0000                     _SPBRG1	set	4016
    80  0000                     _BAUDCON1bits	set	3966
    81  0000                     _RCSTA1	set	4012
    82  0000                     _TXSTA1	set	4013
    83  0000                     _INTCON	set	4082
    84  0000                     _OSCTUNEbits	set	3995
    85  0000                     _OSCCONbits	set	4051
    86  0000                     _PORTDbits	set	3971
    87  0000                     _TRISDbits	set	3989
    88  0000                     _TRISAbits	set	3986
    89  0000                     _RCREG1	set	4015
    90  0000                     _LATAbits	set	3977
    91  0000                     _RCIF	set	31989
    92  0000                     _TRISB5	set	31901
    93  0000                     _TRISB4	set	31900
    94  0000                     _RC2IE	set	32029
    95  0000                     _TRISC6	set	31910
    96  0000                     _TRISC7	set	31911
    97  0000                     _RC1IE	set	31981
    98  0000                     _RC2IF	set	32037
    99  0000                     _RC1IF	set	31989
   100                           
   101                           	psect	smallconst
   102  000F00                     __psmallconst:
   103                           	opt stack 0
   104  000F00  00                 	db	0
   105  000F01                     STR_1:
   106  000F01  4C                 	db	76	;'L'
   107  000F02  20                 	db	32
   108  000F03  35                 	db	53	;'5'
   109  000F04  30                 	db	48	;'0'
   110  000F05  00                 	db	0
   111  000F06                     STR_2:
   112  000F06  44                 	db	68	;'D'
   113  000F07  20                 	db	32
   114  000F08  38                 	db	56	;'8'
   115  000F09  00                 	db	0
   116  0000                     
   117                           ; #config settings
   118  000F0A  00                 	db	0	; dummy byte at the end
   119  0000                     
   120                           	psect	cinit
   121  00123A                     __pcinit:
   122                           	opt stack 0
   123  00123A                     start_initialization:
   124                           	opt stack 0
   125  00123A                     __initialization:
   126                           	opt stack 0
   127                           
   128                           ; Clear objects allocated to BANK0 (140 bytes)
   129  00123A  EE00  F060         	lfsr	0,__pbssBANK0
   130  00123E  0E8C               	movlw	140
   131  001240                     clear_0:
   132  001240  6AEE               	clrf	postinc0,c
   133  001242  06E8               	decf	wreg,f,c
   134  001244  E1FD               	bnz	clear_0
   135                           
   136                           ; Clear objects allocated to COMRAM (6 bytes)
   137  001246  6A37               	clrf	(__pbssCOMRAM+5)& (0+255),c
   138  001248  6A36               	clrf	(__pbssCOMRAM+4)& (0+255),c
   139  00124A  6A35               	clrf	(__pbssCOMRAM+3)& (0+255),c
   140  00124C  6A34               	clrf	(__pbssCOMRAM+2)& (0+255),c
   141  00124E  6A33               	clrf	(__pbssCOMRAM+1)& (0+255),c
   142  001250  6A32               	clrf	__pbssCOMRAM& (0+255),c
   143  001252                     end_of_initialization:
   144                           	opt stack 0
   145  001252                     __end_of__initialization:
   146                           	opt stack 0
   147  001252  9038               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   148  001254  9238               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   149  001256  0E00               	movlw	low (__Lmediumconst shr (0+16))
   150  001258  6EF8               	movwf	tblptru,c
   151  00125A  0100               	movlb	0
   152  00125C  EFD3  F007         	goto	_main	;jump to C main() function
   153                           tblptru	equ	0xFF8
   154                           postinc0	equ	0xFEE
   155                           wreg	equ	0xFE8
   156                           
   157                           	psect	bssCOMRAM
   158  000032                     __pbssCOMRAM:
   159                           	opt stack 0
   160  000032                     wait_ms@timel:
   161                           	opt stack 0
   162  000032                     	ds	4
   163  000036                     _index:
   164                           	opt stack 0
   165  000036                     	ds	2
   166                           tblptru	equ	0xFF8
   167                           postinc0	equ	0xFEE
   168                           wreg	equ	0xFE8
   169                           
   170                           	psect	bssBANK0
   171  000060                     __pbssBANK0:
   172                           	opt stack 0
   173  000060                     _realString:
   174                           	opt stack 0
   175  000060                     	ds	70
   176  0000A6                     _tmpString:
   177                           	opt stack 0
   178  0000A6                     	ds	70
   179                           tblptru	equ	0xFF8
   180                           postinc0	equ	0xFEE
   181                           wreg	equ	0xFE8
   182                           
   183                           	psect	cstackCOMRAM
   184  000001                     __pcstackCOMRAM:
   185                           	opt stack 0
   186  000001                     appendChar@data:
   187                           	opt stack 0
   188                           
   189                           ; 1 bytes @ 0x0
   190  000001                     	ds	1
   191  000002                     ??_high_isr:
   192                           
   193                           ; 1 bytes @ 0x1
   194  000002                     	ds	15
   195  000011                     ??_low_isr:
   196                           
   197                           ; 1 bytes @ 0x10
   198  000011                     	ds	17
   199  000022                     ??_copyTmpBuffer:
   200  000022                     ?_strlen:
   201                           	opt stack 0
   202  000022                     ?___lmul:
   203                           	opt stack 0
   204  000022                     UART_Write@dev:
   205                           	opt stack 0
   206  000022                     strlen@s:
   207                           	opt stack 0
   208  000022                     UART_Init@baudrate:
   209                           	opt stack 0
   210  000022                     ___lmul@multiplier:
   211                           	opt stack 0
   212                           
   213                           ; 4 bytes @ 0x21
   214  000022                     	ds	1
   215  000023                     UART_Write@data:
   216                           	opt stack 0
   217  000023                     copyTmpBuffer@i:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0x22
   221  000023                     	ds	1
   222  000024                     ??_strlen:
   223                           
   224                           ; 1 bytes @ 0x23
   225  000024                     	ds	2
   226  000026                     strlen@cp:
   227                           	opt stack 0
   228  000026                     ___lmul@multiplicand:
   229                           	opt stack 0
   230                           
   231                           ; 4 bytes @ 0x25
   232  000026                     	ds	2
   233  000028                     writeString@str:
   234                           	opt stack 0
   235  000028                     clearBuffer@i:
   236                           	opt stack 0
   237                           
   238                           ; 2 bytes @ 0x27
   239  000028                     	ds	2
   240  00002A                     writeString@dev:
   241                           	opt stack 0
   242  00002A                     ___lmul@product:
   243                           	opt stack 0
   244                           
   245                           ; 4 bytes @ 0x29
   246  00002A                     	ds	1
   247  00002B                     ??_writeString:
   248                           
   249                           ; 1 bytes @ 0x2A
   250  00002B                     	ds	2
   251  00002D                     writeString@i:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0x2C
   255  00002D                     	ds	1
   256  00002E                     wait_ms@time:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x2D
   260  00002E                     	ds	2
   261  000030                     writeResult@dev:
   262                           	opt stack 0
   263                           
   264                           ; 1 bytes @ 0x2F
   265  000030                     	ds	1
   266  000031                     main@var:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x30
   270  000031                     	ds	1
   271                           tblptru	equ	0xFF8
   272                           postinc0	equ	0xFEE
   273                           wreg	equ	0xFE8
   274                           
   275 ;;
   276 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   277 ;;
   278 ;; *************** function _main *****************
   279 ;; Defined at:
   280 ;;		line 38 in file "main.c"
   281 ;; Parameters:    Size  Location     Type
   282 ;;		None
   283 ;; Auto vars:     Size  Location     Type
   284 ;;  var             1   48[COMRAM] unsigned char 
   285 ;;  result          1    0        unsigned char 
   286 ;; Return value:  Size  Location     Type
   287 ;;                  1    wreg      void 
   288 ;; Registers used:
   289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   290 ;; Tracked objects:
   291 ;;		On entry : 0/0
   292 ;;		On exit  : 0/0
   293 ;;		Unchanged: 0/0
   294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   296 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   298 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   299 ;;Total ram usage:        1 bytes
   300 ;; Hardware stack levels required when called:    6
   301 ;; This function calls:
   302 ;;		_ConfigureOscillator
   303 ;;		_InitApp
   304 ;;		_UART_Init
   305 ;;		_clearBuffer
   306 ;;		_copyTmpBuffer
   307 ;;		_isItLongEnough
   308 ;;		_wait_ms
   309 ;;		_writeResult
   310 ;;		_writeString
   311 ;; This function is called by:
   312 ;;		Startup code after reset
   313 ;; This function uses a non-reentrant model
   314 ;;
   315                           
   316                           	psect	text0
   317  000FA6                     __ptext0:
   318                           	opt stack 0
   319  000FA6                     _main:
   320                           	opt stack 25
   321                           
   322                           ;main.c: 44: ConfigureOscillator();
   323                           
   324                           ;incstack = 0
   325  000FA6  EC72  F009         	call	_ConfigureOscillator	;wreg free
   326                           
   327                           ;main.c: 47: InitApp();
   328  000FAA  EC40  F009         	call	_InitApp	;wreg free
   329                           
   330                           ;main.c: 49: UART_Init(19200);
   331  000FAE  0E00               	movlw	0
   332  000FB0  6E22               	movwf	UART_Init@baudrate,c
   333  000FB2  0E4B               	movlw	75
   334  000FB4  6E23               	movwf	UART_Init@baudrate+1,c
   335  000FB6  0E00               	movlw	0
   336  000FB8  6E24               	movwf	UART_Init@baudrate+2,c
   337  000FBA  0E00               	movlw	0
   338  000FBC  6E25               	movwf	UART_Init@baudrate+3,c
   339  000FBE  EC04  F009         	call	_UART_Init	;wreg free
   340                           
   341                           ;main.c: 50: writeString("L 50", 1);
   342  000FC2  0E01               	movlw	low STR_1
   343  000FC4  6E28               	movwf	writeString@str,c
   344  000FC6  0E0F               	movlw	high STR_1
   345  000FC8  6E29               	movwf	writeString@str+1,c
   346  000FCA  0E01               	movlw	1
   347  000FCC  6E2A               	movwf	writeString@dev,c
   348  000FCE  EC12  F008         	call	_writeString	;wreg free
   349                           
   350                           ;main.c: 51: writeString("D 8", 1);
   351  000FD2  0E06               	movlw	low STR_2
   352  000FD4  6E28               	movwf	writeString@str,c
   353  000FD6  0E0F               	movlw	high STR_2
   354  000FD8  6E29               	movwf	writeString@str+1,c
   355  000FDA  0E01               	movlw	1
   356  000FDC  6E2A               	movwf	writeString@dev,c
   357  000FDE  EC12  F008         	call	_writeString	;wreg free
   358                           
   359                           ;main.c: 54: uint8_t var = 0;
   360  000FE2  0E00               	movlw	0
   361  000FE4  6E31               	movwf	main@var,c
   362                           
   363                           ;main.c: 55: char result;
   364                           ;main.c: 58: TRISAbits.TRISA0 = 0;
   365  000FE6  9092               	bcf	3986,0,c	;volatile
   366                           
   367                           ;main.c: 59: TRISAbits.TRISA1 = 0;
   368  000FE8  9292               	bcf	3986,1,c	;volatile
   369                           
   370                           ;main.c: 60: LATAbits.LATA0 = 0;
   371  000FEA  9089               	bcf	3977,0,c	;volatile
   372                           
   373                           ;main.c: 61: LATAbits.LATA1 = 0;
   374  000FEC  9289               	bcf	3977,1,c	;volatile
   375                           
   376                           ;main.c: 62: TRISDbits.TRISD3 = 1;
   377  000FEE  8695               	bsf	3989,3,c	;volatile
   378                           
   379                           ;main.c: 64: clearBuffer();
   380  000FF0  ECC1  F008         	call	_clearBuffer	;wreg free
   381  000FF4                     l1104:
   382                           
   383                           ;main.c: 69: if(isItLongEnough()){
   384  000FF4  EC69  F009         	call	_isItLongEnough	;wreg free
   385  000FF8  0900               	iorlw	0
   386  000FFA  B4D8               	btfsc	status,2,c
   387  000FFC  D00C               	goto	l48
   388                           
   389                           ;main.c: 70: LATAbits.LATA1 = 1;
   390  000FFE  8289               	bsf	3977,1,c	;volatile
   391                           
   392                           ;main.c: 71: wait_ms(1000);
   393  001000  0E03               	movlw	3
   394  001002  6E2F               	movwf	wait_ms@time+1,c
   395  001004  0EE8               	movlw	232
   396  001006  6E2E               	movwf	wait_ms@time,c
   397  001008  EC41  F008         	call	_wait_ms	;wreg free
   398                           
   399                           ;main.c: 72: copyTmpBuffer();
   400  00100C  ECE4  F008         	call	_copyTmpBuffer	;wreg free
   401                           
   402                           ;main.c: 73: clearBuffer();
   403  001010  ECC1  F008         	call	_clearBuffer	;wreg free
   404                           
   405                           ;main.c: 74: }else{
   406  001014  D001               	goto	l49
   407  001016                     l48:
   408                           
   409                           ;main.c: 75: LATAbits.LATA1 = 0;
   410  001016  9289               	bcf	3977,1,c	;volatile
   411  001018                     l49:
   412                           
   413                           ;main.c: 76: }
   414                           ;main.c: 78: if(!PORTDbits.RD3){
   415  001018  B683               	btfsc	3971,3,c	;volatile
   416  00101A  D7EC               	goto	l1104
   417                           
   418                           ;main.c: 79: writeResult(2);
   419  00101C  0E02               	movlw	2
   420  00101E  EC30  F009         	call	_writeResult
   421  001022  D7E8               	goto	l1104
   422  001024                     __end_of_main:
   423                           	opt stack 0
   424                           tblptru	equ	0xFF8
   425                           postinc0	equ	0xFEE
   426                           wreg	equ	0xFE8
   427                           status	equ	0xFD8
   428                           
   429 ;; *************** function _writeResult *****************
   430 ;; Defined at:
   431 ;;		line 53 in file "bufferhandler.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;  dev             1    wreg     unsigned char 
   434 ;; Auto vars:     Size  Location     Type
   435 ;;  dev             1   47[COMRAM] unsigned char 
   436 ;; Return value:  Size  Location     Type
   437 ;;                  1    wreg      void 
   438 ;; Registers used:
   439 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   440 ;; Tracked objects:
   441 ;;		On entry : 0/0
   442 ;;		On exit  : 0/0
   443 ;;		Unchanged: 0/0
   444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   446 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   448 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   449 ;;Total ram usage:        1 bytes
   450 ;; Hardware stack levels used:    1
   451 ;; Hardware stack levels required when called:    5
   452 ;; This function calls:
   453 ;;		_wait_ms
   454 ;;		_writeString
   455 ;; This function is called by:
   456 ;;		_main
   457 ;; This function uses a non-reentrant model
   458 ;;
   459                           
   460                           	psect	text1
   461  001260                     __ptext1:
   462                           	opt stack 0
   463  001260                     _writeResult:
   464                           	opt stack 25
   465                           
   466                           ;incstack = 0
   467                           ;writeResult@dev stored from wreg
   468  001260  6E30               	movwf	writeResult@dev,c
   469                           
   470                           ;bufferhandler.c: 55: writeString(realString, dev);
   471  001262  0E60               	movlw	low _realString
   472  001264  6E28               	movwf	writeString@str,c
   473  001266  0E00               	movlw	high _realString
   474  001268  6E29               	movwf	writeString@str+1,c
   475  00126A  C030  F02A         	movff	writeResult@dev,writeString@dev
   476  00126E  EC12  F008         	call	_writeString	;wreg free
   477                           
   478                           ;bufferhandler.c: 56: wait_ms(1000);
   479  001272  0E03               	movlw	3
   480  001274  6E2F               	movwf	wait_ms@time+1,c
   481  001276  0EE8               	movlw	232
   482  001278  6E2E               	movwf	wait_ms@time,c
   483  00127A  EC41  F008         	call	_wait_ms	;wreg free
   484  00127E  0012               	return		;funcret
   485  001280                     __end_of_writeResult:
   486                           	opt stack 0
   487                           tblptru	equ	0xFF8
   488                           postinc0	equ	0xFEE
   489                           wreg	equ	0xFE8
   490                           status	equ	0xFD8
   491                           
   492 ;; *************** function _writeString *****************
   493 ;; Defined at:
   494 ;;		line 97 in file "uart.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;  str             2   39[COMRAM] PTR unsigned char 
   497 ;;		 -> realString(70), STR_2(4), STR_1(5), 
   498 ;;  dev             1   41[COMRAM] unsigned char 
   499 ;; Auto vars:     Size  Location     Type
   500 ;;  i               2   44[COMRAM] int 
   501 ;; Return value:  Size  Location     Type
   502 ;;                  1    wreg      void 
   503 ;; Registers used:
   504 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   505 ;; Tracked objects:
   506 ;;		On entry : 0/0
   507 ;;		On exit  : 0/0
   508 ;;		Unchanged: 0/0
   509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   510 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   511 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   512 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   513 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   514 ;;Total ram usage:        7 bytes
   515 ;; Hardware stack levels used:    1
   516 ;; Hardware stack levels required when called:    4
   517 ;; This function calls:
   518 ;;		_UART_Write
   519 ;;		_strlen
   520 ;; This function is called by:
   521 ;;		_main
   522 ;;		_writeResult
   523 ;; This function uses a non-reentrant model
   524 ;;
   525                           
   526                           	psect	text2
   527  001024                     __ptext2:
   528                           	opt stack 0
   529  001024                     _writeString:
   530                           	opt stack 26
   531                           
   532                           ;uart.c: 99: for(int i = 0; i<strlen(str); i++)
   533                           
   534                           ;incstack = 0
   535  001024  0E00               	movlw	0
   536  001026  6E2E               	movwf	writeString@i+1,c
   537  001028  0E00               	movlw	0
   538  00102A  6E2D               	movwf	writeString@i,c
   539  00102C  D01D               	goto	l1020
   540  00102E                     l1016:
   541                           
   542                           ;uart.c: 100: {
   543                           ;uart.c: 101: UART_Write(str[i], dev);
   544  00102E  C02A  F022         	movff	writeString@dev,UART_Write@dev
   545  001032  502D               	movf	writeString@i,w,c
   546  001034  2428               	addwf	writeString@str,w,c
   547  001036  6E2B               	movwf	??_writeString& (0+255),c
   548  001038  502E               	movf	writeString@i+1,w,c
   549  00103A  2029               	addwfc	writeString@str+1,w,c
   550  00103C  6E2C               	movwf	(??_writeString+1)& (0+255),c
   551  00103E  C02B  FFF6         	movff	??_writeString,tblptrl
   552  001042  C02C  FFF7         	movff	??_writeString+1,tblptrh
   553  001046  0E00               	movlw	low (__smallconst shr (0+16))
   554  001048  6EF8               	movwf	tblptru,c
   555  00104A  0E0E               	movlw	(high __ramtop+-1)
   556  00104C  64F7               	cpfsgt	tblptrh,c
   557  00104E  D003               	bra	u307
   558  001050  0008               	tblrd		*
   559  001052  50F5               	movf	tablat,w,c
   560  001054  D005               	bra	u300
   561  001056                     u307:
   562  001056  CFF6 FFE9          	movff	tblptrl,fsr0l
   563  00105A  CFF7 FFEA          	movff	tblptrh,fsr0h
   564  00105E  50EF               	movf	indf0,w,c
   565  001060                     u300:
   566  001060  EC4F  F009         	call	_UART_Write
   567  001064  4A2D               	infsnz	writeString@i,f,c
   568  001066  2A2E               	incf	writeString@i+1,f,c
   569  001068                     l1020:
   570  001068  C028  F022         	movff	writeString@str,strlen@s
   571  00106C  C029  F023         	movff	writeString@str+1,strlen@s+1
   572  001070  EC97  F008         	call	_strlen	;wreg free
   573  001074  5022               	movf	?_strlen,w,c
   574  001076  5C2D               	subwf	writeString@i,w,c
   575  001078  5023               	movf	?_strlen+1,w,c
   576  00107A  582E               	subwfb	writeString@i+1,w,c
   577  00107C  B0D8               	btfsc	status,0,c
   578  00107E  0012               	return	
   579  001080  D7D6               	goto	l1016
   580  001082                     __end_of_writeString:
   581                           	opt stack 0
   582                           tblptru	equ	0xFF8
   583                           tblptrh	equ	0xFF7
   584                           tblptrl	equ	0xFF6
   585                           tablat	equ	0xFF5
   586                           indf0	equ	0xFEF
   587                           postinc0	equ	0xFEE
   588                           fsr0h	equ	0xFEA
   589                           fsr0l	equ	0xFE9
   590                           wreg	equ	0xFE8
   591                           status	equ	0xFD8
   592                           
   593 ;; *************** function _UART_Write *****************
   594 ;; Defined at:
   595 ;;		line 61 in file "uart.c"
   596 ;; Parameters:    Size  Location     Type
   597 ;;  data            1    wreg     unsigned char 
   598 ;;  dev             1   33[COMRAM] unsigned char 
   599 ;; Auto vars:     Size  Location     Type
   600 ;;  data            1   34[COMRAM] unsigned char 
   601 ;; Return value:  Size  Location     Type
   602 ;;                  1    wreg      void 
   603 ;; Registers used:
   604 ;;		wreg, status,2, status,0
   605 ;; Tracked objects:
   606 ;;		On entry : 0/0
   607 ;;		On exit  : 0/0
   608 ;;		Unchanged: 0/0
   609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   610 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   611 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   613 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   614 ;;Total ram usage:        2 bytes
   615 ;; Hardware stack levels used:    1
   616 ;; Hardware stack levels required when called:    3
   617 ;; This function calls:
   618 ;;		Nothing
   619 ;; This function is called by:
   620 ;;		_writeString
   621 ;; This function uses a non-reentrant model
   622 ;;
   623                           
   624                           	psect	text3
   625  00129E                     __ptext3:
   626                           	opt stack 0
   627  00129E                     _UART_Write:
   628                           	opt stack 26
   629                           
   630                           ;incstack = 0
   631                           ;UART_Write@data stored from wreg
   632  00129E  6E23               	movwf	UART_Write@data,c
   633                           
   634                           ;uart.c: 63: if (dev == 1)
   635  0012A0  0422               	decf	UART_Write@dev,w,c
   636  0012A2  A4D8               	btfss	status,2,c
   637  0012A4  D005               	goto	l142
   638  0012A6                     l138:
   639  0012A6  A2AD               	btfss	4013,1,c	;volatile
   640  0012A8  D7FE               	goto	l138
   641                           
   642                           ;uart.c: 66: TXREG1 = data;
   643  0012AA  C023  FFAE         	movff	UART_Write@data,4014	;volatile
   644                           
   645                           ;uart.c: 67: }
   646  0012AE  0012               	return	
   647  0012B0                     l142:
   648  0012B0  A2A8               	btfss	4008,1,c	;volatile
   649  0012B2  D7FE               	goto	l142
   650                           
   651                           ;uart.c: 71: TXREG2 = data;
   652  0012B4  C023  FFA9         	movff	UART_Write@data,4009	;volatile
   653  0012B8  0012               	return	
   654  0012BA                     __end_of_UART_Write:
   655                           	opt stack 0
   656                           tblptru	equ	0xFF8
   657                           tblptrh	equ	0xFF7
   658                           tblptrl	equ	0xFF6
   659                           tablat	equ	0xFF5
   660                           indf0	equ	0xFEF
   661                           postinc0	equ	0xFEE
   662                           fsr0h	equ	0xFEA
   663                           fsr0l	equ	0xFE9
   664                           wreg	equ	0xFE8
   665                           status	equ	0xFD8
   666                           
   667 ;; *************** function _wait_ms *****************
   668 ;; Defined at:
   669 ;;		line 35 in file "system.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;  time            2   45[COMRAM] int 
   672 ;; Auto vars:     Size  Location     Type
   673 ;;		None
   674 ;; Return value:  Size  Location     Type
   675 ;;                  1    wreg      void 
   676 ;; Registers used:
   677 ;;		wreg, status,2, status,0, cstack
   678 ;; Tracked objects:
   679 ;;		On entry : 0/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   683 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   686 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   687 ;;Total ram usage:        2 bytes
   688 ;; Hardware stack levels used:    1
   689 ;; Hardware stack levels required when called:    4
   690 ;; This function calls:
   691 ;;		___lmul
   692 ;; This function is called by:
   693 ;;		_main
   694 ;;		_writeResult
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           	psect	text4
   699  001082                     __ptext4:
   700                           	opt stack 0
   701  001082                     _wait_ms:
   702                           	opt stack 25
   703                           
   704                           ;system.c: 37: static long timel = 0;
   705                           ;system.c: 38: timel = time * 1000l;
   706                           
   707                           ;incstack = 0
   708  001082  C02E  F022         	movff	wait_ms@time,___lmul@multiplier
   709  001086  C02F  F023         	movff	wait_ms@time+1,___lmul@multiplier+1
   710  00108A  0E00               	movlw	0
   711  00108C  BE23               	btfsc	___lmul@multiplier+1,7,c
   712  00108E  0EFF               	movlw	-1
   713  001090  6E24               	movwf	___lmul@multiplier+2,c
   714  001092  6E25               	movwf	___lmul@multiplier+3,c
   715  001094  0EE8               	movlw	232
   716  001096  6E26               	movwf	___lmul@multiplicand,c
   717  001098  0E03               	movlw	3
   718  00109A  6E27               	movwf	___lmul@multiplicand+1,c
   719  00109C  0E00               	movlw	0
   720  00109E  6E28               	movwf	___lmul@multiplicand+2,c
   721  0010A0  0E00               	movlw	0
   722  0010A2  6E29               	movwf	___lmul@multiplicand+3,c
   723  0010A4  EC6C  F008         	call	___lmul	;wreg free
   724  0010A8  C022  F032         	movff	?___lmul,wait_ms@timel
   725  0010AC  C023  F033         	movff	?___lmul+1,wait_ms@timel+1
   726  0010B0  C024  F034         	movff	?___lmul+2,wait_ms@timel+2
   727  0010B4  C025  F035         	movff	?___lmul+3,wait_ms@timel+3
   728                           
   729                           ;system.c: 39: for( ; timel; timel--);
   730  0010B8  D008               	goto	l65
   731  0010BA                     l1024:
   732  0010BA  0EFF               	movlw	255
   733  0010BC  2632               	addwf	wait_ms@timel,f,c
   734  0010BE  0EFF               	movlw	255
   735  0010C0  2233               	addwfc	wait_ms@timel+1,f,c
   736  0010C2  0EFF               	movlw	255
   737  0010C4  2234               	addwfc	wait_ms@timel+2,f,c
   738  0010C6  0EFF               	movlw	255
   739  0010C8  2235               	addwfc	wait_ms@timel+3,f,c
   740  0010CA                     l65:
   741  0010CA  5032               	movf	wait_ms@timel,w,c
   742  0010CC  1033               	iorwf	wait_ms@timel+1,w,c
   743  0010CE  1034               	iorwf	wait_ms@timel+2,w,c
   744  0010D0  1035               	iorwf	wait_ms@timel+3,w,c
   745  0010D2  B4D8               	btfsc	status,2,c
   746  0010D4  0012               	return	
   747  0010D6  D7F1               	goto	l1024
   748  0010D8                     __end_of_wait_ms:
   749                           	opt stack 0
   750                           tblptru	equ	0xFF8
   751                           tblptrh	equ	0xFF7
   752                           tblptrl	equ	0xFF6
   753                           tablat	equ	0xFF5
   754                           indf0	equ	0xFEF
   755                           postinc0	equ	0xFEE
   756                           fsr0h	equ	0xFEA
   757                           fsr0l	equ	0xFE9
   758                           wreg	equ	0xFE8
   759                           status	equ	0xFD8
   760                           
   761 ;; *************** function ___lmul *****************
   762 ;; Defined at:
   763 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
   764 ;; Parameters:    Size  Location     Type
   765 ;;  multiplier      4   33[COMRAM] unsigned long 
   766 ;;  multiplicand    4   37[COMRAM] unsigned long 
   767 ;; Auto vars:     Size  Location     Type
   768 ;;  product         4   41[COMRAM] unsigned long 
   769 ;; Return value:  Size  Location     Type
   770 ;;                  4   33[COMRAM] unsigned long 
   771 ;; Registers used:
   772 ;;		wreg, status,2, status,0
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   778 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   779 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   781 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   782 ;;Total ram usage:       12 bytes
   783 ;; Hardware stack levels used:    1
   784 ;; Hardware stack levels required when called:    3
   785 ;; This function calls:
   786 ;;		Nothing
   787 ;; This function is called by:
   788 ;;		_wait_ms
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792                           	psect	text5
   793  0010D8                     __ptext5:
   794                           	opt stack 0
   795  0010D8                     ___lmul:
   796                           	opt stack 25
   797                           
   798                           ;incstack = 0
   799  0010D8  0E00               	movlw	0
   800  0010DA  6E2A               	movwf	___lmul@product,c
   801  0010DC  0E00               	movlw	0
   802  0010DE  6E2B               	movwf	___lmul@product+1,c
   803  0010E0  0E00               	movlw	0
   804  0010E2  6E2C               	movwf	___lmul@product+2,c
   805  0010E4  0E00               	movlw	0
   806  0010E6  6E2D               	movwf	___lmul@product+3,c
   807  0010E8                     l1006:
   808  0010E8  A022               	btfss	___lmul@multiplier,0,c
   809  0010EA  D008               	goto	l1010
   810  0010EC  5026               	movf	___lmul@multiplicand,w,c
   811  0010EE  262A               	addwf	___lmul@product,f,c
   812  0010F0  5027               	movf	___lmul@multiplicand+1,w,c
   813  0010F2  222B               	addwfc	___lmul@product+1,f,c
   814  0010F4  5028               	movf	___lmul@multiplicand+2,w,c
   815  0010F6  222C               	addwfc	___lmul@product+2,f,c
   816  0010F8  5029               	movf	___lmul@multiplicand+3,w,c
   817  0010FA  222D               	addwfc	___lmul@product+3,f,c
   818  0010FC                     l1010:
   819  0010FC  90D8               	bcf	status,0,c
   820  0010FE  3626               	rlcf	___lmul@multiplicand,f,c
   821  001100  3627               	rlcf	___lmul@multiplicand+1,f,c
   822  001102  3628               	rlcf	___lmul@multiplicand+2,f,c
   823  001104  3629               	rlcf	___lmul@multiplicand+3,f,c
   824  001106  90D8               	bcf	status,0,c
   825  001108  3225               	rrcf	___lmul@multiplier+3,f,c
   826  00110A  3224               	rrcf	___lmul@multiplier+2,f,c
   827  00110C  3223               	rrcf	___lmul@multiplier+1,f,c
   828  00110E  3222               	rrcf	___lmul@multiplier,f,c
   829  001110  5022               	movf	___lmul@multiplier,w,c
   830  001112  1023               	iorwf	___lmul@multiplier+1,w,c
   831  001114  1024               	iorwf	___lmul@multiplier+2,w,c
   832  001116  1025               	iorwf	___lmul@multiplier+3,w,c
   833  001118  A4D8               	btfss	status,2,c
   834  00111A  D7E6               	goto	l1006
   835  00111C  C02A  F022         	movff	___lmul@product,?___lmul
   836  001120  C02B  F023         	movff	___lmul@product+1,?___lmul+1
   837  001124  C02C  F024         	movff	___lmul@product+2,?___lmul+2
   838  001128  C02D  F025         	movff	___lmul@product+3,?___lmul+3
   839  00112C  0012               	return		;funcret
   840  00112E                     __end_of___lmul:
   841                           	opt stack 0
   842                           tblptru	equ	0xFF8
   843                           tblptrh	equ	0xFF7
   844                           tblptrl	equ	0xFF6
   845                           tablat	equ	0xFF5
   846                           indf0	equ	0xFEF
   847                           postinc0	equ	0xFEE
   848                           fsr0h	equ	0xFEA
   849                           fsr0l	equ	0xFE9
   850                           wreg	equ	0xFE8
   851                           status	equ	0xFD8
   852                           
   853 ;; *************** function _isItLongEnough *****************
   854 ;; Defined at:
   855 ;;		line 30 in file "bufferhandler.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      unsigned char 
   862 ;; Registers used:
   863 ;;		wreg, status,2, status,0
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   873 ;;Total ram usage:        0 bytes
   874 ;; Hardware stack levels used:    1
   875 ;; Hardware stack levels required when called:    3
   876 ;; This function calls:
   877 ;;		Nothing
   878 ;; This function is called by:
   879 ;;		_main
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           	psect	text6
   884  0012D2                     __ptext6:
   885                           	opt stack 0
   886  0012D2                     _isItLongEnough:
   887                           	opt stack 27
   888                           
   889                           ;bufferhandler.c: 31: if(index == 64)
   890                           
   891                           ;incstack = 0
   892  0012D2  0E40               	movlw	64
   893  0012D4  1836               	xorwf	_index,w,c
   894  0012D6  1037               	iorwf	_index+1,w,c
   895  0012D8  A4D8               	btfss	status,2,c
   896  0012DA  D002               	goto	l912
   897                           
   898                           ;bufferhandler.c: 32: {
   899                           ;bufferhandler.c: 33: return 1;
   900  0012DC  0E01               	movlw	1
   901                           
   902                           ;bufferhandler.c: 34: }else{
   903  0012DE  0012               	return	
   904  0012E0                     l912:
   905                           
   906                           ;bufferhandler.c: 35: return 0;
   907  0012E0  0E00               	movlw	0
   908  0012E2  0012               	return	
   909  0012E4                     __end_of_isItLongEnough:
   910                           	opt stack 0
   911                           tblptru	equ	0xFF8
   912                           tblptrh	equ	0xFF7
   913                           tblptrl	equ	0xFF6
   914                           tablat	equ	0xFF5
   915                           indf0	equ	0xFEF
   916                           postinc0	equ	0xFEE
   917                           fsr0h	equ	0xFEA
   918                           fsr0l	equ	0xFE9
   919                           wreg	equ	0xFE8
   920                           status	equ	0xFD8
   921                           
   922 ;; *************** function _copyTmpBuffer *****************
   923 ;; Defined at:
   924 ;;		line 47 in file "bufferhandler.c"
   925 ;; Parameters:    Size  Location     Type
   926 ;;		None
   927 ;; Auto vars:     Size  Location     Type
   928 ;;  i               2   34[COMRAM] int 
   929 ;; Return value:  Size  Location     Type
   930 ;;                  1    wreg      void 
   931 ;; Registers used:
   932 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   939 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   940 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   941 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   942 ;;Total ram usage:        3 bytes
   943 ;; Hardware stack levels used:    1
   944 ;; Hardware stack levels required when called:    3
   945 ;; This function calls:
   946 ;;		Nothing
   947 ;; This function is called by:
   948 ;;		_main
   949 ;; This function uses a non-reentrant model
   950 ;;
   951                           
   952                           	psect	text7
   953  0011C8                     __ptext7:
   954                           	opt stack 0
   955  0011C8                     _copyTmpBuffer:
   956                           	opt stack 27
   957                           
   958                           ;bufferhandler.c: 48: for(int i = 0; i<index; i++){
   959                           
   960                           ;incstack = 0
   961  0011C8  0E00               	movlw	0
   962  0011CA  6E24               	movwf	copyTmpBuffer@i+1,c
   963  0011CC  0E00               	movlw	0
   964  0011CE  6E23               	movwf	copyTmpBuffer@i,c
   965  0011D0  D010               	goto	l1066
   966  0011D2                     l1062:
   967                           
   968                           ;bufferhandler.c: 49: realString[i] = tmpString[i];
   969  0011D2  0EA6               	movlw	low _tmpString
   970  0011D4  2423               	addwf	copyTmpBuffer@i,w,c
   971  0011D6  6ED9               	movwf	fsr2l,c
   972  0011D8  0E00               	movlw	high _tmpString
   973  0011DA  2024               	addwfc	copyTmpBuffer@i+1,w,c
   974  0011DC  6EDA               	movwf	fsr2h,c
   975  0011DE  0E60               	movlw	low _realString
   976  0011E0  2423               	addwf	copyTmpBuffer@i,w,c
   977  0011E2  6EE1               	movwf	fsr1l,c
   978  0011E4  0E00               	movlw	high _realString
   979  0011E6  2024               	addwfc	copyTmpBuffer@i+1,w,c
   980  0011E8  6EE2               	movwf	fsr1h,c
   981  0011EA  CFDF FFE7          	movff	indf2,indf1
   982  0011EE  4A23               	infsnz	copyTmpBuffer@i,f,c
   983  0011F0  2A24               	incf	copyTmpBuffer@i+1,f,c
   984  0011F2                     l1066:
   985  0011F2  5036               	movf	_index,w,c
   986  0011F4  5C23               	subwf	copyTmpBuffer@i,w,c
   987  0011F6  5024               	movf	copyTmpBuffer@i+1,w,c
   988  0011F8  0A80               	xorlw	128
   989  0011FA  6E22               	movwf	??_copyTmpBuffer& (0+255),c
   990  0011FC  5037               	movf	_index+1,w,c
   991  0011FE  0A80               	xorlw	128
   992  001200  5822               	subwfb	??_copyTmpBuffer& (0+255),w,c
   993  001202  B0D8               	btfsc	status,0,c
   994  001204  0012               	return	
   995  001206  D7E5               	goto	l1062
   996  001208                     __end_of_copyTmpBuffer:
   997                           	opt stack 0
   998                           tblptru	equ	0xFF8
   999                           tblptrh	equ	0xFF7
  1000                           tblptrl	equ	0xFF6
  1001                           tablat	equ	0xFF5
  1002                           indf0	equ	0xFEF
  1003                           postinc0	equ	0xFEE
  1004                           fsr0h	equ	0xFEA
  1005                           fsr0l	equ	0xFE9
  1006                           wreg	equ	0xFE8
  1007                           indf1	equ	0xFE7
  1008                           fsr1h	equ	0xFE2
  1009                           fsr1l	equ	0xFE1
  1010                           indf2	equ	0xFDF
  1011                           fsr2h	equ	0xFDA
  1012                           fsr2l	equ	0xFD9
  1013                           status	equ	0xFD8
  1014                           
  1015 ;; *************** function _clearBuffer *****************
  1016 ;; Defined at:
  1017 ;;		line 39 in file "bufferhandler.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;		None
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;  i               2   39[COMRAM] int 
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  1    wreg      void 
  1024 ;; Registers used:
  1025 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1032 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1034 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1035 ;;Total ram usage:        2 bytes
  1036 ;; Hardware stack levels used:    1
  1037 ;; Hardware stack levels required when called:    4
  1038 ;; This function calls:
  1039 ;;		_strlen
  1040 ;; This function is called by:
  1041 ;;		_main
  1042 ;; This function uses a non-reentrant model
  1043 ;;
  1044                           
  1045                           	psect	text8
  1046  001182                     __ptext8:
  1047                           	opt stack 0
  1048  001182                     _clearBuffer:
  1049                           	opt stack 26
  1050                           
  1051                           ;bufferhandler.c: 40: for(int i = 0; i<strlen(tmpString); i++){
  1052                           
  1053                           ;incstack = 0
  1054  001182  0E00               	movlw	0
  1055  001184  6E29               	movwf	clearBuffer@i+1,c
  1056  001186  0E00               	movlw	0
  1057  001188  6E28               	movwf	clearBuffer@i,c
  1058  00118A  D00A               	goto	l1056
  1059  00118C                     l1052:
  1060                           
  1061                           ;bufferhandler.c: 41: tmpString[i] = "";
  1062  00118C  0EA6               	movlw	low _tmpString
  1063  00118E  2428               	addwf	clearBuffer@i,w,c
  1064  001190  6ED9               	movwf	fsr2l,c
  1065  001192  0E00               	movlw	high _tmpString
  1066  001194  2029               	addwfc	clearBuffer@i+1,w,c
  1067  001196  6EDA               	movwf	fsr2h,c
  1068  001198  0E05               	movlw	low (STR_1+4)
  1069  00119A  6EDF               	movwf	indf2,c
  1070  00119C  4A28               	infsnz	clearBuffer@i,f,c
  1071  00119E  2A29               	incf	clearBuffer@i+1,f,c
  1072  0011A0                     l1056:
  1073  0011A0  0EA6               	movlw	low _tmpString
  1074  0011A2  6E22               	movwf	strlen@s,c
  1075  0011A4  0E00               	movlw	high _tmpString
  1076  0011A6  6E23               	movwf	strlen@s+1,c
  1077  0011A8  EC97  F008         	call	_strlen	;wreg free
  1078  0011AC  5022               	movf	?_strlen,w,c
  1079  0011AE  5C28               	subwf	clearBuffer@i,w,c
  1080  0011B0  5023               	movf	?_strlen+1,w,c
  1081  0011B2  5829               	subwfb	clearBuffer@i+1,w,c
  1082  0011B4  A0D8               	btfss	status,0,c
  1083  0011B6  D7EA               	goto	l1052
  1084                           
  1085                           ;bufferhandler.c: 42: }
  1086                           ;bufferhandler.c: 43: tmpString[0] = '\0';
  1087  0011B8  0E00               	movlw	0
  1088  0011BA  0100               	movlb	0	; () banked
  1089  0011BC  6FA6               	movwf	_tmpString& (0+255),b
  1090                           
  1091                           ;bufferhandler.c: 44: index = 0;
  1092  0011BE  0E00               	movlw	0
  1093  0011C0  6E37               	movwf	_index+1,c
  1094  0011C2  0E00               	movlw	0
  1095  0011C4  6E36               	movwf	_index,c
  1096                           
  1097                           ; BSR set to: 0
  1098  0011C6  0012               	return		;funcret
  1099  0011C8                     __end_of_clearBuffer:
  1100                           	opt stack 0
  1101                           tblptru	equ	0xFF8
  1102                           tblptrh	equ	0xFF7
  1103                           tblptrl	equ	0xFF6
  1104                           tablat	equ	0xFF5
  1105                           indf0	equ	0xFEF
  1106                           postinc0	equ	0xFEE
  1107                           fsr0h	equ	0xFEA
  1108                           fsr0l	equ	0xFE9
  1109                           wreg	equ	0xFE8
  1110                           indf1	equ	0xFE7
  1111                           fsr1h	equ	0xFE2
  1112                           fsr1l	equ	0xFE1
  1113                           indf2	equ	0xFDF
  1114                           fsr2h	equ	0xFDA
  1115                           fsr2l	equ	0xFD9
  1116                           status	equ	0xFD8
  1117                           
  1118 ;; *************** function _strlen *****************
  1119 ;; Defined at:
  1120 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;  s               2   33[COMRAM] PTR const unsigned char 
  1123 ;;		 -> realString(70), tmpString(70), STR_2(4), STR_1(5), 
  1124 ;; Auto vars:     Size  Location     Type
  1125 ;;  cp              2   37[COMRAM] PTR const unsigned char 
  1126 ;;		 -> realString(70), tmpString(70), STR_2(4), STR_1(5), 
  1127 ;; Return value:  Size  Location     Type
  1128 ;;                  2   33[COMRAM] unsigned int 
  1129 ;; Registers used:
  1130 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  1131 ;; Tracked objects:
  1132 ;;		On entry : 0/0
  1133 ;;		On exit  : 0/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1136 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1137 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1138 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1139 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1140 ;;Total ram usage:        6 bytes
  1141 ;; Hardware stack levels used:    1
  1142 ;; Hardware stack levels required when called:    3
  1143 ;; This function calls:
  1144 ;;		Nothing
  1145 ;; This function is called by:
  1146 ;;		_writeString
  1147 ;;		_clearBuffer
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151                           	psect	text9
  1152  00112E                     __ptext9:
  1153                           	opt stack 0
  1154  00112E                     _strlen:
  1155                           	opt stack 26
  1156                           
  1157                           ; BSR set to: 0
  1158                           ;incstack = 0
  1159  00112E  C022  F026         	movff	strlen@s,strlen@cp
  1160  001132  C023  F027         	movff	strlen@s+1,strlen@cp+1
  1161  001136  D002               	goto	l998
  1162  001138                     l996:
  1163  001138  4A26               	infsnz	strlen@cp,f,c
  1164  00113A  2A27               	incf	strlen@cp+1,f,c
  1165  00113C                     l998:
  1166  00113C  C026  FFF6         	movff	strlen@cp,tblptrl
  1167  001140  C027  FFF7         	movff	strlen@cp+1,tblptrh
  1168  001144  0E00               	movlw	low (__smallconst shr (0+16))
  1169  001146  6EF8               	movwf	tblptru,c
  1170  001148  0E0E               	movlw	(high __ramtop+-1)
  1171  00114A  64F7               	cpfsgt	tblptrh,c
  1172  00114C  D003               	bra	u267
  1173  00114E  0008               	tblrd		*
  1174  001150  50F5               	movf	tablat,w,c
  1175  001152  D005               	bra	u260
  1176  001154                     u267:
  1177  001154  CFF6 FFE9          	movff	tblptrl,fsr0l
  1178  001158  CFF7 FFEA          	movff	tblptrh,fsr0h
  1179  00115C  50EF               	movf	indf0,w,c
  1180  00115E                     u260:
  1181  00115E  0900               	iorlw	0
  1182  001160  A4D8               	btfss	status,2,c
  1183  001162  D7EA               	goto	l996
  1184  001164  C022  F024         	movff	strlen@s,??_strlen
  1185  001168  C023  F025         	movff	strlen@s+1,??_strlen+1
  1186  00116C  1E24               	comf	??_strlen,f,c
  1187  00116E  1E25               	comf	??_strlen+1,f,c
  1188  001170  4A24               	infsnz	??_strlen,f,c
  1189  001172  2A25               	incf	??_strlen+1,f,c
  1190  001174  5026               	movf	strlen@cp,w,c
  1191  001176  2424               	addwf	??_strlen,w,c
  1192  001178  6E22               	movwf	?_strlen,c
  1193  00117A  5027               	movf	strlen@cp+1,w,c
  1194  00117C  2025               	addwfc	??_strlen+1,w,c
  1195  00117E  6E23               	movwf	?_strlen+1,c
  1196  001180  0012               	return	
  1197  001182                     __end_of_strlen:
  1198                           	opt stack 0
  1199                           tblptru	equ	0xFF8
  1200                           tblptrh	equ	0xFF7
  1201                           tblptrl	equ	0xFF6
  1202                           tablat	equ	0xFF5
  1203                           indf0	equ	0xFEF
  1204                           postinc0	equ	0xFEE
  1205                           fsr0h	equ	0xFEA
  1206                           fsr0l	equ	0xFE9
  1207                           wreg	equ	0xFE8
  1208                           indf1	equ	0xFE7
  1209                           fsr1h	equ	0xFE2
  1210                           fsr1l	equ	0xFE1
  1211                           indf2	equ	0xFDF
  1212                           fsr2h	equ	0xFDA
  1213                           fsr2l	equ	0xFD9
  1214                           status	equ	0xFD8
  1215                           
  1216 ;; *************** function _UART_Init *****************
  1217 ;; Defined at:
  1218 ;;		line 31 in file "uart.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;  baudrate        4   33[COMRAM] const long 
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;		None
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      unsigned char 
  1225 ;; Registers used:
  1226 ;;		wreg, status,2
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1232 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1235 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1236 ;;Total ram usage:        4 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; Hardware stack levels required when called:    3
  1239 ;; This function calls:
  1240 ;;		Nothing
  1241 ;; This function is called by:
  1242 ;;		_main
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           	psect	text10
  1247  001208                     __ptext10:
  1248                           	opt stack 0
  1249  001208                     _UART_Init:
  1250                           	opt stack 27
  1251                           
  1252                           ;uart.c: 35: TXSTA1 = 0x24;
  1253                           
  1254                           ;incstack = 0
  1255  001208  0E24               	movlw	36
  1256  00120A  6EAD               	movwf	4013,c	;volatile
  1257                           
  1258                           ;uart.c: 36: RCSTA1 = 0x90;
  1259  00120C  0E90               	movlw	144
  1260  00120E  6EAC               	movwf	4012,c	;volatile
  1261                           
  1262                           ;uart.c: 37: RC1IE = 1;
  1263  001210  8A9D               	bsf	3997,5,c	;volatile
  1264                           
  1265                           ;uart.c: 38: BAUDCON1bits.BRG16 = 0;
  1266  001212  967E               	bcf	3966,3,c	;volatile
  1267                           
  1268                           ;uart.c: 39: SPBRG1 = 155;
  1269  001214  0E9B               	movlw	155
  1270  001216  6EB0               	movwf	4016,c	;volatile
  1271                           
  1272                           ;uart.c: 40: SPBRGH1 = 155;
  1273  001218  0E9B               	movlw	155
  1274  00121A  6E7F               	movwf	3967,c	;volatile
  1275                           
  1276                           ;uart.c: 41: TRISC7 = 1;
  1277  00121C  8E94               	bsf	3988,7,c	;volatile
  1278                           
  1279                           ;uart.c: 42: TRISC6 = 0;
  1280  00121E  9C94               	bcf	3988,6,c	;volatile
  1281                           
  1282                           ;uart.c: 46: RCSTA2 = 0b10010000;
  1283  001220  0E90               	movlw	144
  1284  001222  6E9C               	movwf	3996,c	;volatile
  1285                           
  1286                           ;uart.c: 47: TXSTA2 = 0b00100100;
  1287  001224  0E24               	movlw	36
  1288  001226  6EA8               	movwf	4008,c	;volatile
  1289                           
  1290                           ;uart.c: 48: RC2IE = 1;
  1291  001228  8AA3               	bsf	4003,5,c	;volatile
  1292                           
  1293                           ;uart.c: 49: BAUDCON2bits.BRG16 = 0;
  1294  00122A  967C               	bcf	3964,3,c	;volatile
  1295                           
  1296                           ;uart.c: 50: SPBRG2 = 25;
  1297  00122C  0E19               	movlw	25
  1298  00122E  6EAB               	movwf	4011,c	;volatile
  1299                           
  1300                           ;uart.c: 51: SPBRGH2 = 25;
  1301  001230  0E19               	movlw	25
  1302  001232  6E7D               	movwf	3965,c	;volatile
  1303                           
  1304                           ;uart.c: 52: TRISB4 = 1;
  1305  001234  8893               	bsf	3987,4,c	;volatile
  1306                           
  1307                           ;uart.c: 53: TRISB5 = 0;
  1308  001236  9A93               	bcf	3987,5,c	;volatile
  1309  001238  0012               	return	
  1310  00123A                     __end_of_UART_Init:
  1311                           	opt stack 0
  1312                           tblptru	equ	0xFF8
  1313                           tblptrh	equ	0xFF7
  1314                           tblptrl	equ	0xFF6
  1315                           tablat	equ	0xFF5
  1316                           indf0	equ	0xFEF
  1317                           postinc0	equ	0xFEE
  1318                           fsr0h	equ	0xFEA
  1319                           fsr0l	equ	0xFE9
  1320                           wreg	equ	0xFE8
  1321                           indf1	equ	0xFE7
  1322                           fsr1h	equ	0xFE2
  1323                           fsr1l	equ	0xFE1
  1324                           indf2	equ	0xFDF
  1325                           fsr2h	equ	0xFDA
  1326                           fsr2l	equ	0xFD9
  1327                           status	equ	0xFD8
  1328                           
  1329 ;; *************** function _InitApp *****************
  1330 ;; Defined at:
  1331 ;;		line 29 in file "user.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;		None
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;		None
  1336 ;; Return value:  Size  Location     Type
  1337 ;;                  1    wreg      void 
  1338 ;; Registers used:
  1339 ;;		wreg, status,2
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1349 ;;Total ram usage:        0 bytes
  1350 ;; Hardware stack levels used:    1
  1351 ;; Hardware stack levels required when called:    3
  1352 ;; This function calls:
  1353 ;;		Nothing
  1354 ;; This function is called by:
  1355 ;;		_main
  1356 ;; This function uses a non-reentrant model
  1357 ;;
  1358                           
  1359                           	psect	text11
  1360  001280                     __ptext11:
  1361                           	opt stack 0
  1362  001280                     _InitApp:
  1363                           	opt stack 27
  1364                           
  1365                           ;user.c: 33: PPSCON = 0b00000000;
  1366                           
  1367                           ;incstack = 0
  1368  001280  0E00               	movlw	0
  1369  001282  010E               	movlb	14	; () banked
  1370  001284  6FBF               	movwf	191,b	;volatile
  1371                           
  1372                           ;user.c: 34: RPOR8 = 0b00000110;
  1373  001286  0E06               	movlw	6
  1374  001288  010E               	movlb	14	; () banked
  1375  00128A  6FC8               	movwf	200,b	;volatile
  1376                           
  1377                           ;user.c: 35: RPINR16 = 0b00000111;
  1378  00128C  0E07               	movlw	7
  1379  00128E  010E               	movlb	14	; () banked
  1380  001290  6FF7               	movwf	247,b	;volatile
  1381                           
  1382                           ;user.c: 36: PPSCON = 0b00000001;
  1383  001292  0E01               	movlw	1
  1384  001294  010E               	movlb	14	; () banked
  1385  001296  6FBF               	movwf	191,b	;volatile
  1386                           
  1387                           ;user.c: 39: INTCON = 0xC0;
  1388  001298  0EC0               	movlw	192
  1389  00129A  6EF2               	movwf	intcon,c	;volatile
  1390                           
  1391                           ; BSR set to: 14
  1392  00129C  0012               	return		;funcret
  1393  00129E                     __end_of_InitApp:
  1394                           	opt stack 0
  1395                           tblptru	equ	0xFF8
  1396                           tblptrh	equ	0xFF7
  1397                           tblptrl	equ	0xFF6
  1398                           tablat	equ	0xFF5
  1399                           intcon	equ	0xFF2
  1400                           indf0	equ	0xFEF
  1401                           postinc0	equ	0xFEE
  1402                           fsr0h	equ	0xFEA
  1403                           fsr0l	equ	0xFE9
  1404                           wreg	equ	0xFE8
  1405                           indf1	equ	0xFE7
  1406                           fsr1h	equ	0xFE2
  1407                           fsr1l	equ	0xFE1
  1408                           indf2	equ	0xFDF
  1409                           fsr2h	equ	0xFDA
  1410                           fsr2l	equ	0xFD9
  1411                           status	equ	0xFD8
  1412                           
  1413 ;; *************** function _ConfigureOscillator *****************
  1414 ;; Defined at:
  1415 ;;		line 24 in file "system.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;		None
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;		None
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  1    wreg      void 
  1422 ;; Registers used:
  1423 ;;		wreg, status,2
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1433 ;;Total ram usage:        0 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:    3
  1436 ;; This function calls:
  1437 ;;		Nothing
  1438 ;; This function is called by:
  1439 ;;		_main
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text12
  1444  0012E4                     __ptext12:
  1445                           	opt stack 0
  1446  0012E4                     _ConfigureOscillator:
  1447                           	opt stack 27
  1448                           
  1449                           ;system.c: 26: OSCCONbits.IRCF = 0b110;
  1450                           
  1451                           ; BSR set to: 14
  1452                           ;incstack = 0
  1453  0012E4  50D3               	movf	4051,w,c	;volatile
  1454  0012E6  0B8F               	andlw	-113
  1455  0012E8  0960               	iorlw	96
  1456  0012EA  6ED3               	movwf	4051,c	;volatile
  1457                           
  1458                           ;system.c: 27: OSCTUNEbits.PLLEN = 0b1;
  1459  0012EC  8C9B               	bsf	3995,6,c	;volatile
  1460  0012EE  0012               	return		;funcret
  1461  0012F0                     __end_of_ConfigureOscillator:
  1462                           	opt stack 0
  1463                           tblptru	equ	0xFF8
  1464                           tblptrh	equ	0xFF7
  1465                           tblptrl	equ	0xFF6
  1466                           tablat	equ	0xFF5
  1467                           intcon	equ	0xFF2
  1468                           indf0	equ	0xFEF
  1469                           postinc0	equ	0xFEE
  1470                           fsr0h	equ	0xFEA
  1471                           fsr0l	equ	0xFE9
  1472                           wreg	equ	0xFE8
  1473                           indf1	equ	0xFE7
  1474                           fsr1h	equ	0xFE2
  1475                           fsr1l	equ	0xFE1
  1476                           indf2	equ	0xFDF
  1477                           fsr2h	equ	0xFDA
  1478                           fsr2l	equ	0xFD9
  1479                           status	equ	0xFD8
  1480                           
  1481 ;; *************** function _low_isr *****************
  1482 ;; Defined at:
  1483 ;;		line 66 in file "interrupts.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;		None
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;		None
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  1    wreg      void 
  1490 ;; Registers used:
  1491 ;;		None
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1499 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1500 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1501 ;;Total ram usage:       17 bytes
  1502 ;; Hardware stack levels used:    1
  1503 ;; Hardware stack levels required when called:    2
  1504 ;; This function calls:
  1505 ;;		Nothing
  1506 ;; This function is called by:
  1507 ;;		Interrupt level 1
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511                           	psect	intcodelo
  1512  000018                     __pintcodelo:
  1513                           	opt stack 0
  1514  000018                     _low_isr:
  1515                           	opt stack 25
  1516                           
  1517                           ;incstack = 0
  1518  000018  8038               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1519  00001A  CFD8 F011          	movff	status,??_low_isr
  1520  00001E  CFE8 F012          	movff	wreg,??_low_isr+1
  1521  000022  CFE0 F013          	movff	bsr,??_low_isr+2
  1522  000026  CFFA F014          	movff	pclath,??_low_isr+3
  1523  00002A  CFFB F015          	movff	pclatu,??_low_isr+4
  1524  00002E  CFE9 F016          	movff	fsr0l,??_low_isr+5
  1525  000032  CFEA F017          	movff	fsr0h,??_low_isr+6
  1526  000036  CFE1 F018          	movff	fsr1l,??_low_isr+7
  1527  00003A  CFE2 F019          	movff	fsr1h,??_low_isr+8
  1528  00003E  CFD9 F01A          	movff	fsr2l,??_low_isr+9
  1529  000042  CFDA F01B          	movff	fsr2h,??_low_isr+10
  1530  000046  CFF3 F01C          	movff	prodl,??_low_isr+11
  1531  00004A  CFF4 F01D          	movff	prodh,??_low_isr+12
  1532  00004E  CFF6 F01E          	movff	tblptrl,??_low_isr+13
  1533  000052  CFF7 F01F          	movff	tblptrh,??_low_isr+14
  1534  000056  CFF8 F020          	movff	tblptru,??_low_isr+15
  1535  00005A  CFF5 F021          	movff	tablat,??_low_isr+16
  1536  00005E  C021  FFF5         	movff	??_low_isr+16,tablat
  1537  000062  C020  FFF8         	movff	??_low_isr+15,tblptru
  1538  000066  C01F  FFF7         	movff	??_low_isr+14,tblptrh
  1539  00006A  C01E  FFF6         	movff	??_low_isr+13,tblptrl
  1540  00006E  C01D  FFF4         	movff	??_low_isr+12,prodh
  1541  000072  C01C  FFF3         	movff	??_low_isr+11,prodl
  1542  000076  C01B  FFDA         	movff	??_low_isr+10,fsr2h
  1543  00007A  C01A  FFD9         	movff	??_low_isr+9,fsr2l
  1544  00007E  C019  FFE2         	movff	??_low_isr+8,fsr1h
  1545  000082  C018  FFE1         	movff	??_low_isr+7,fsr1l
  1546  000086  C017  FFEA         	movff	??_low_isr+6,fsr0h
  1547  00008A  C016  FFE9         	movff	??_low_isr+5,fsr0l
  1548  00008E  C015  FFFB         	movff	??_low_isr+4,pclatu
  1549  000092  C014  FFFA         	movff	??_low_isr+3,pclath
  1550  000096  C013  FFE0         	movff	??_low_isr+2,bsr
  1551  00009A  C012  FFE8         	movff	??_low_isr+1,wreg
  1552  00009E  C011  FFD8         	movff	??_low_isr,status
  1553  0000A2  9038               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1554  0000A4  0010               	retfie	
  1555  0000A6                     __end_of_low_isr:
  1556                           	opt stack 0
  1557                           pclatu	equ	0xFFB
  1558                           pclath	equ	0xFFA
  1559                           tblptru	equ	0xFF8
  1560                           tblptrh	equ	0xFF7
  1561                           tblptrl	equ	0xFF6
  1562                           tablat	equ	0xFF5
  1563                           prodh	equ	0xFF4
  1564                           prodl	equ	0xFF3
  1565                           intcon	equ	0xFF2
  1566                           indf0	equ	0xFEF
  1567                           postinc0	equ	0xFEE
  1568                           fsr0h	equ	0xFEA
  1569                           fsr0l	equ	0xFE9
  1570                           wreg	equ	0xFE8
  1571                           indf1	equ	0xFE7
  1572                           fsr1h	equ	0xFE2
  1573                           fsr1l	equ	0xFE1
  1574                           bsr	equ	0xFE0
  1575                           indf2	equ	0xFDF
  1576                           fsr2h	equ	0xFDA
  1577                           fsr2l	equ	0xFD9
  1578                           status	equ	0xFD8
  1579                           
  1580 ;; *************** function _high_isr *****************
  1581 ;; Defined at:
  1582 ;;		line 30 in file "interrupts.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;		None
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;		None
  1587 ;; Return value:  Size  Location     Type
  1588 ;;                  1    wreg      void 
  1589 ;; Registers used:
  1590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1598 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1599 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1600 ;;Total ram usage:       15 bytes
  1601 ;; Hardware stack levels used:    1
  1602 ;; Hardware stack levels required when called:    1
  1603 ;; This function calls:
  1604 ;;		_appendChar
  1605 ;; This function is called by:
  1606 ;;		Interrupt level 2
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610                           	psect	intcode
  1611  000008                     __pintcode:
  1612                           	opt stack 0
  1613  000008                     _high_isr:
  1614                           	opt stack 25
  1615                           
  1616                           ;incstack = 0
  1617  000008  8238               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1618  00000A  EF86  F007         	goto	int_func
  1619                           pclatu	equ	0xFFB
  1620                           pclath	equ	0xFFA
  1621                           tblptru	equ	0xFF8
  1622                           tblptrh	equ	0xFF7
  1623                           tblptrl	equ	0xFF6
  1624                           tablat	equ	0xFF5
  1625                           prodh	equ	0xFF4
  1626                           prodl	equ	0xFF3
  1627                           intcon	equ	0xFF2
  1628                           indf0	equ	0xFEF
  1629                           postinc0	equ	0xFEE
  1630                           fsr0h	equ	0xFEA
  1631                           fsr0l	equ	0xFE9
  1632                           wreg	equ	0xFE8
  1633                           indf1	equ	0xFE7
  1634                           fsr1h	equ	0xFE2
  1635                           fsr1l	equ	0xFE1
  1636                           bsr	equ	0xFE0
  1637                           indf2	equ	0xFDF
  1638                           fsr2h	equ	0xFDA
  1639                           fsr2l	equ	0xFD9
  1640                           status	equ	0xFD8
  1641                           
  1642                           	psect	intcode_body
  1643  000F0C                     __pintcode_body:
  1644                           	opt stack 25
  1645  000F0C                     int_func:
  1646                           	opt stack 25
  1647  000F0C  CFFA F003          	movff	pclath,??_high_isr+1
  1648  000F10  CFFB F004          	movff	pclatu,??_high_isr+2
  1649  000F14  CFE9 F005          	movff	fsr0l,??_high_isr+3
  1650  000F18  CFEA F006          	movff	fsr0h,??_high_isr+4
  1651  000F1C  CFE1 F007          	movff	fsr1l,??_high_isr+5
  1652  000F20  CFE2 F008          	movff	fsr1h,??_high_isr+6
  1653  000F24  CFD9 F009          	movff	fsr2l,??_high_isr+7
  1654  000F28  CFDA F00A          	movff	fsr2h,??_high_isr+8
  1655  000F2C  CFF3 F00B          	movff	prodl,??_high_isr+9
  1656  000F30  CFF4 F00C          	movff	prodh,??_high_isr+10
  1657  000F34  CFF6 F00D          	movff	tblptrl,??_high_isr+11
  1658  000F38  CFF7 F00E          	movff	tblptrh,??_high_isr+12
  1659  000F3C  CFF8 F00F          	movff	tblptru,??_high_isr+13
  1660  000F40  CFF5 F010          	movff	tablat,??_high_isr+14
  1661                           
  1662                           ;interrupts.c: 45: if(RC1IF){
  1663  000F44  AA9E               	btfss	3998,5,c	;volatile
  1664  000F46  D00F               	goto	i2l1080
  1665                           
  1666                           ;interrupts.c: 46: LATAbits.LATA0 = !LATAbits.LATA0;
  1667  000F48  B089               	btfsc	3977,0,c	;volatile
  1668  000F4A  D003               	goto	i2u36_40
  1669  000F4C  6A02               	clrf	??_high_isr& (0+255),c
  1670  000F4E  2A02               	incf	??_high_isr& (0+255),f,c
  1671  000F50  D001               	goto	i2u37_48
  1672  000F52                     i2u36_40:
  1673  000F52  6A02               	clrf	??_high_isr& (0+255),c
  1674  000F54                     i2u37_48:
  1675  000F54  5089               	movf	3977,w,c	;volatile
  1676  000F56  1802               	xorwf	??_high_isr,w,c
  1677  000F58  0BFE               	andlw	-2
  1678  000F5A  1802               	xorwf	??_high_isr,w,c
  1679  000F5C  6E89               	movwf	3977,c	;volatile
  1680                           
  1681                           ;interrupts.c: 47: appendChar(RCREG1);
  1682  000F5E  50AF               	movf	4015,w,c	;volatile
  1683  000F60  EC5D  F009         	call	_appendChar
  1684                           
  1685                           ;interrupts.c: 49: RC1IF = 0;
  1686  000F64  9A9E               	bcf	3998,5,c	;volatile
  1687  000F66                     i2l1080:
  1688                           
  1689                           ;interrupts.c: 50: }
  1690                           ;interrupts.c: 52: if(RC2IF){
  1691  000F66  BAA4               	btfsc	4004,5,c	;volatile
  1692                           
  1693                           ;interrupts.c: 57: RC2IF = 0;
  1694  000F68  9AA4               	bcf	4004,5,c	;volatile
  1695  000F6A  C010  FFF5         	movff	??_high_isr+14,tablat
  1696  000F6E  C00F  FFF8         	movff	??_high_isr+13,tblptru
  1697  000F72  C00E  FFF7         	movff	??_high_isr+12,tblptrh
  1698  000F76  C00D  FFF6         	movff	??_high_isr+11,tblptrl
  1699  000F7A  C00C  FFF4         	movff	??_high_isr+10,prodh
  1700  000F7E  C00B  FFF3         	movff	??_high_isr+9,prodl
  1701  000F82  C00A  FFDA         	movff	??_high_isr+8,fsr2h
  1702  000F86  C009  FFD9         	movff	??_high_isr+7,fsr2l
  1703  000F8A  C008  FFE2         	movff	??_high_isr+6,fsr1h
  1704  000F8E  C007  FFE1         	movff	??_high_isr+5,fsr1l
  1705  000F92  C006  FFEA         	movff	??_high_isr+4,fsr0h
  1706  000F96  C005  FFE9         	movff	??_high_isr+3,fsr0l
  1707  000F9A  C004  FFFB         	movff	??_high_isr+2,pclatu
  1708  000F9E  C003  FFFA         	movff	??_high_isr+1,pclath
  1709  000FA2  9238               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1710  000FA4  0011               	retfie		f
  1711  000FA6                     __end_of_high_isr:
  1712                           	opt stack 0
  1713                           pclatu	equ	0xFFB
  1714                           pclath	equ	0xFFA
  1715                           tblptru	equ	0xFF8
  1716                           tblptrh	equ	0xFF7
  1717                           tblptrl	equ	0xFF6
  1718                           tablat	equ	0xFF5
  1719                           prodh	equ	0xFF4
  1720                           prodl	equ	0xFF3
  1721                           intcon	equ	0xFF2
  1722                           indf0	equ	0xFEF
  1723                           postinc0	equ	0xFEE
  1724                           fsr0h	equ	0xFEA
  1725                           fsr0l	equ	0xFE9
  1726                           wreg	equ	0xFE8
  1727                           indf1	equ	0xFE7
  1728                           fsr1h	equ	0xFE2
  1729                           fsr1l	equ	0xFE1
  1730                           bsr	equ	0xFE0
  1731                           indf2	equ	0xFDF
  1732                           fsr2h	equ	0xFDA
  1733                           fsr2l	equ	0xFD9
  1734                           status	equ	0xFD8
  1735                           
  1736 ;; *************** function _appendChar *****************
  1737 ;; Defined at:
  1738 ;;		line 23 in file "bufferhandler.c"
  1739 ;; Parameters:    Size  Location     Type
  1740 ;;  data            1    wreg     unsigned char 
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;  data            1    0[COMRAM] unsigned char 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      void 
  1745 ;; Registers used:
  1746 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1753 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1755 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1756 ;;Total ram usage:        1 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_high_isr
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           	psect	text15
  1766  0012BA                     __ptext15:
  1767                           	opt stack 0
  1768  0012BA                     _appendChar:
  1769                           	opt stack 25
  1770                           
  1771                           ;incstack = 0
  1772                           ;appendChar@data stored from wreg
  1773  0012BA  6E01               	movwf	appendChar@data,c
  1774                           
  1775                           ;bufferhandler.c: 24: tmpString[index] = data;
  1776  0012BC  0EA6               	movlw	low _tmpString
  1777  0012BE  2436               	addwf	_index,w,c
  1778  0012C0  6ED9               	movwf	fsr2l,c
  1779  0012C2  0E00               	movlw	high _tmpString
  1780  0012C4  2037               	addwfc	_index+1,w,c
  1781  0012C6  6EDA               	movwf	fsr2h,c
  1782  0012C8  C001  FFDF         	movff	appendChar@data,indf2
  1783                           
  1784                           ;bufferhandler.c: 25: index++;
  1785  0012CC  4A36               	infsnz	_index,f,c
  1786  0012CE  2A37               	incf	_index+1,f,c
  1787  0012D0  0012               	return		;funcret
  1788  0012D2                     __end_of_appendChar:
  1789                           	opt stack 0
  1790                           pclatu	equ	0xFFB
  1791                           pclath	equ	0xFFA
  1792                           tblptru	equ	0xFF8
  1793                           tblptrh	equ	0xFF7
  1794                           tblptrl	equ	0xFF6
  1795                           tablat	equ	0xFF5
  1796                           prodh	equ	0xFF4
  1797                           prodl	equ	0xFF3
  1798                           intcon	equ	0xFF2
  1799                           indf0	equ	0xFEF
  1800                           postinc0	equ	0xFEE
  1801                           fsr0h	equ	0xFEA
  1802                           fsr0l	equ	0xFE9
  1803                           wreg	equ	0xFE8
  1804                           indf1	equ	0xFE7
  1805                           fsr1h	equ	0xFE2
  1806                           fsr1l	equ	0xFE1
  1807                           bsr	equ	0xFE0
  1808                           indf2	equ	0xFDF
  1809                           fsr2h	equ	0xFDA
  1810                           fsr2l	equ	0xFD9
  1811                           status	equ	0xFD8
  1812                           pclatu	equ	0xFFB
  1813                           pclath	equ	0xFFA
  1814                           tblptru	equ	0xFF8
  1815                           tblptrh	equ	0xFF7
  1816                           tblptrl	equ	0xFF6
  1817                           tablat	equ	0xFF5
  1818                           prodh	equ	0xFF4
  1819                           prodl	equ	0xFF3
  1820                           intcon	equ	0xFF2
  1821                           indf0	equ	0xFEF
  1822                           postinc0	equ	0xFEE
  1823                           fsr0h	equ	0xFEA
  1824                           fsr0l	equ	0xFE9
  1825                           wreg	equ	0xFE8
  1826                           indf1	equ	0xFE7
  1827                           fsr1h	equ	0xFE2
  1828                           fsr1l	equ	0xFE1
  1829                           bsr	equ	0xFE0
  1830                           indf2	equ	0xFDF
  1831                           fsr2h	equ	0xFDA
  1832                           fsr2l	equ	0xFD9
  1833                           status	equ	0xFD8
  1834                           
  1835                           	psect	rparam
  1836  0000                     pclatu	equ	0xFFB
  1837                           pclath	equ	0xFFA
  1838                           tblptru	equ	0xFF8
  1839                           tblptrh	equ	0xFF7
  1840                           tblptrl	equ	0xFF6
  1841                           tablat	equ	0xFF5
  1842                           prodh	equ	0xFF4
  1843                           prodl	equ	0xFF3
  1844                           intcon	equ	0xFF2
  1845                           indf0	equ	0xFEF
  1846                           postinc0	equ	0xFEE
  1847                           fsr0h	equ	0xFEA
  1848                           fsr0l	equ	0xFE9
  1849                           wreg	equ	0xFE8
  1850                           indf1	equ	0xFE7
  1851                           fsr1h	equ	0xFE2
  1852                           fsr1l	equ	0xFE1
  1853                           bsr	equ	0xFE0
  1854                           indf2	equ	0xFDF
  1855                           fsr2h	equ	0xFDA
  1856                           fsr2l	equ	0xFD9
  1857                           status	equ	0xFD8
  1858                           
  1859                           	psect	temp
  1860  000038                     btemp:
  1861                           	opt stack 0
  1862  000038                     	ds	1
  1863  0000                     int$flags	set	btemp
  1864                           pclatu	equ	0xFFB
  1865                           pclath	equ	0xFFA
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           prodh	equ	0xFF4
  1871                           prodl	equ	0xFF3
  1872                           intcon	equ	0xFF2
  1873                           indf0	equ	0xFEF
  1874                           postinc0	equ	0xFEE
  1875                           fsr0h	equ	0xFEA
  1876                           fsr0l	equ	0xFE9
  1877                           wreg	equ	0xFE8
  1878                           indf1	equ	0xFE7
  1879                           fsr1h	equ	0xFE2
  1880                           fsr1l	equ	0xFE1
  1881                           bsr	equ	0xFE0
  1882                           indf2	equ	0xFDF
  1883                           fsr2h	equ	0xFDA
  1884                           fsr2l	equ	0xFD9
  1885                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    0
    Data        0
    BSS         146
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      55
    BANK0           160      0     140
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 70
		 -> realString(BANK0[70]), tmpString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 70
		 -> realString(BANK0[70]), tmpString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 

    writeString@str	PTR unsigned char  size(2) Largest target is 70
		 -> realString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_writeResult
    _writeResult->_wait_ms
    _writeString->_strlen
    _wait_ms->___lmul
    _clearBuffer->_strlen

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_appendChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3051
                                             48 COMRAM     1     1      0
                _ConfigureOscillator
                            _InitApp
                          _UART_Init
                        _clearBuffer
                      _copyTmpBuffer
                     _isItLongEnough
                            _wait_ms
                        _writeResult
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeResult                                          1     1      0    1338
                                             47 COMRAM     1     1      0
                            _wait_ms
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeString                                          7     4      3     844
                                             39 COMRAM     7     4      3
                         _UART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           2     1      1     130
                                             33 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _wait_ms                                              2     0      2     472
                                             45 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     322
                                             33 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _isItLongEnough                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _copyTmpBuffer                                        3     3      0      68
                                             33 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _clearBuffer                                          2     2      0     264
                                             39 COMRAM     2     2      0
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     218
                                             33 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4      64
                                             33 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                             16 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            15    15      0      22
                                              1 COMRAM    15    15      0
                         _appendChar
 ---------------------------------------------------------------------------------
 (6) _appendChar                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _UART_Init
   _clearBuffer
     _strlen
   _copyTmpBuffer
   _isItLongEnough
   _wait_ms
     ___lmul
   _writeResult
     _wait_ms
       ___lmul
     _writeString
       _UART_Write
       _strlen
   _writeString
     _UART_Write
     _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)
   _appendChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      8C       5       87.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      37       1       58.5%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C3       6        0.0%
DATA                 0      0      C3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Apr 01 21:31:21 2017

                          l48 1016                            l65 10CA                            l49 1018  
              writeResult@dev 0030                            bsr 000FE0                  __CFG_CP0$OFF 000000  
                         l142 12B0                           l138 12A6                           l912 12E0  
                         l996 1138                           l998 113C                           u300 1060  
                         u307 1056                           u260 115E                           u267 1154  
                         wreg 000FE8                    _TXSTA1bits 000FAD                  __CFG_IESO$ON 000000  
                  _TXSTA2bits 000FA8                          l1010 10FC                          l1020 1068  
                        l1006 10E8                          l1024 10BA                          l1016 102E  
                        l1104 0FF4                          l1052 118C                          l1062 11D2  
                        l1056 11A0                          l1066 11F2            __CFG_WPFP$PAGE_127 000000  
               _copyTmpBuffer 11C8                          STR_1 0F01                          STR_2 0F06  
                        STR_3 0F05                          _RCIF 007CF5                 __CFG_FCMEN$ON 000000  
                        _main 0FA6                          fsr0h 000FEA                          fsr1h 000FE2  
                        indf0 000FEF                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf1 000FE7                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                          btemp 0038                          prodh 000FF4  
                        prodl 000FF3                          start 00A6                writeString@dev 002A  
                ___param_bank 000000                writeString@str 0028               __end_of_InitApp 129E  
               __CFG_PLLDIV$1 000000                  _BAUDCON1bits 000F7E                  _BAUDCON2bits 000F7C  
                       ?_main 0001                         _RC1IE 007CED                         _RC1IF 007CF5  
                       _RC2IE 007D1D                         _RC2IF 007D25                   _writeResult 1260  
                       _RPOR8 000EC8           _ConfigureOscillator 12E4                   _writeString 1024  
         ___lmul@multiplicand 0026              ??_isItLongEnough 0022                   ?_UART_Write 0022  
          __size_of_UART_Init 0032                         _index 0036                ?_copyTmpBuffer 0001  
              __CFG_CLKOEC$ON 000000               __end_of_low_isr 00A6                         pclath 000FFA  
                       tablat 000FF5               __end_of_wait_ms 10D8                         status 000FD8  
        ?_ConfigureOscillator 0001          __size_of_clearBuffer 0046       __CFG_DSWDTOSC$INTOSCREF 000000  
             __initialization 123A                  __end_of_main 1024                        ??_main 0031  
               __activetblptr 000002                        i2l1080 0F66                __CFG_WDTEN$OFF 000000  
                      _INTCON 000FF2                        _RCREG1 000FAF                        _RCREG2 000FAA  
                      _RCSTA1 000FAC                        _RCSTA2 000F9C                        _SPBRG1 000FB0  
                      _SPBRG2 000FAB                        _PPSCON 000EBF                        _TRISB4 007C9C  
                      _TRISB5 007C9D                __CFG_WPCFG$OFF 000000                        _TRISC6 007CA6  
                      _TRISC7 007CA7                        _TXREG1 000FAE                        _TXREG2 000FA9  
                      _TXSTA1 000FAD                        _TXSTA2 000FA8                     ??_InitApp 0022  
       ??_ConfigureOscillator 0022                __CFG_WPDIS$OFF 000000                __CFG_XINST$OFF 000000  
           __end_of_UART_Init 123A              __end_of_high_isr 0FA6                        ___lmul 10D8  
         __size_of_UART_Write 001C                __CFG_STVREN$ON 000000                        clear_0 1240  
                      _strlen 112E                  __mediumconst 0000                     ??_low_isr 0011  
                      tblptrh 000FF7               ??_copyTmpBuffer 0022                        tblptrl 000FF6  
                      tblptru 000FF8                     ??_wait_ms 0030               __CFG_DSBOREN$ON 000000  
        __CFG_LS48MHZ$SYS48X8 000000                    __accesstop 0060       __end_of__initialization 1252  
               ___rparam_used 000001               __CFG_IOL1WAY$ON 000000          __CFG_WPEND$PAGE_WPFP 000000  
              __pcstackCOMRAM 0001               __CFG_DSWDTEN$ON 000000               __CFG_DSWDTPS$G2 000000  
             __CFG_OSC$INTOSC 000000                    __pbssBANK0 0060                       ?___lmul 0022  
              ___lmul@product 002A                    _appendChar 12BA                       ?_strlen 0022  
                ?_writeResult 0001                  ?_writeString 0028                  ??_UART_Write 0023  
                     i2u36_40 0F52                       i2u37_48 0F54                       _SPBRGH1 000F7F  
                     _SPBRGH2 000F7D                       _RPINR16 000EF7                     ?_high_isr 0001  
                     _InitApp 1280                       __Hparam 0000                       __Lparam 0000  
             __size_of___lmul 0056            __end_of_UART_Write 12BA                  __psmallconst 0F00  
                     __pcinit 123A                       __ramtop 0F00                       __ptext0 0FA6  
                     __ptext1 1260                       __ptext2 1024                       __ptext3 129E  
                     __ptext4 1082                       __ptext5 10D8                       __ptext6 12D2  
                     __ptext7 11C8                       __ptext8 1182                       __ptext9 112E  
             __size_of_strlen 0054                    _realString 0060                       _low_isr 0018  
                     _wait_ms 1082                       main@var 0031                    ??_high_isr 0002  
              __pintcode_body 0F0C          end_of_initialization 1252                 ??_clearBuffer 0028  
               __Lmediumconst 0000                       int_func 0F0C                       postinc0 000FEE  
                 wait_ms@time 002E                       strlen@s 0022                     _UART_Init 1208  
                   _PORTDbits 000F83                   ?_appendChar 0001                UART_Write@data 0023  
            __CFG_CPUDIV$OSC1 000000                     _TRISAbits 000F92                     _TRISDbits 000F95  
           __CFG_SOSCSEL$HIGH 000000   __end_of_ConfigureOscillator 12F0                  writeString@i 002D  
     __size_of_isItLongEnough 0012           __CFG_MSSP7B_EN$MSK7 000000           __end_of_clearBuffer 11C8  
              __end_of___lmul 112E                    ?_UART_Init 0022                __end_of_strlen 1182  
         start_initialization 123A          __size_of_writeResult 0020          __size_of_writeString 005E  
       __end_of_copyTmpBuffer 1208           __size_of_appendChar 0018                      ??___lmul 002A  
           __CFG_ADCSEL$BIT10 000000                      ??_strlen 0024                   __pbssCOMRAM 0032  
           __size_of_high_isr 0F9E                   _clearBuffer 1182                      ?_InitApp 0001  
                   __pintcode 0008                   __pintcodelo 0018                   ??_UART_Init 0026  
                 __smallconst 0F00          __CFG_RTCOSC$T1OSCREF 000000                      ?_low_isr 0001  
                    ?_wait_ms 002E                copyTmpBuffer@i 0023                _isItLongEnough 12D2  
                    _LATAbits 000F89              __CFG_WDTPS$32768 000000                  clearBuffer@i 0028  
               UART_Write@dev 0022                     _tmpString 00A6             UART_Init@baudrate 0022  
                ??_appendChar 0001             __CFG_CFGPLLEN$OFF 000000             ___lmul@multiplier 0022  
      __end_of_isItLongEnough 12E4            __end_of_appendChar 12D2              __size_of_InitApp 001E  
                    __Hrparam 0000                      __Lrparam 0000              __size_of_low_isr 008E  
                    __ptext10 1208                      __ptext11 1280                      __ptext12 12E4  
                    __ptext15 12BA              __size_of_wait_ms 0056                      _high_isr 0008  
             ?_isItLongEnough 0001                 __size_of_main 007E                appendChar@data 0001  
__size_of_ConfigureOscillator 000C                      int$flags 0038                 ??_writeResult 0030  
               ??_writeString 002B                   _OSCTUNEbits 000F9B                      intlevel1 0000  
                    intlevel2 0000                  ?_clearBuffer 0001                    _OSCCONbits 000FD3  
      __size_of_copyTmpBuffer 0040                  wait_ms@timel 0032                      strlen@cp 0026  
                  _UART_Write 129E           __end_of_writeResult 1280           __end_of_writeString 1082  
