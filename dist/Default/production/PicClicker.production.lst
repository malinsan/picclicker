

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Apr 02 13:49:03 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F47J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           ; Version 1.41
    33                           ; Generated 25/01/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F47J53 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     _RPINR16	set	3831
    67  0000                     _RPOR8	set	3784
    68  0000                     _PPSCON	set	3775
    69  0000                     _RCREG2	set	4010
    70  0000                     _TXREG2	set	4009
    71  0000                     _TXSTA2bits	set	4008
    72  0000                     _TXREG1	set	4014
    73  0000                     _TXSTA1bits	set	4013
    74  0000                     _SPBRGH2	set	3965
    75  0000                     _SPBRG2	set	4011
    76  0000                     _BAUDCON2bits	set	3964
    77  0000                     _TXSTA2	set	4008
    78  0000                     _RCSTA2	set	3996
    79  0000                     _SPBRGH1	set	3967
    80  0000                     _SPBRG1	set	4016
    81  0000                     _BAUDCON1bits	set	3966
    82  0000                     _RCSTA1	set	4012
    83  0000                     _TXSTA1	set	4013
    84  0000                     _INTCON	set	4082
    85  0000                     _OSCTUNEbits	set	3995
    86  0000                     _OSCCONbits	set	4051
    87  0000                     _PORTDbits	set	3971
    88  0000                     _TRISDbits	set	3989
    89  0000                     _TRISAbits	set	3986
    90  0000                     _RCREG1	set	4015
    91  0000                     _LATAbits	set	3977
    92  0000                     _RCIF	set	31989
    93  0000                     _TRISB5	set	31901
    94  0000                     _TRISB4	set	31900
    95  0000                     _RC2IE	set	32029
    96  0000                     _TRISC6	set	31910
    97  0000                     _TRISC7	set	31911
    98  0000                     _RC1IE	set	31981
    99  0000                     _RC2IF	set	32037
   100  0000                     _RC1IF	set	31989
   101                           
   102                           	psect	smallconst
   103  000F00                     __psmallconst:
   104                           	opt stack 0
   105  000F00  00                 	db	0
   106  000F01                     STR_1:
   107  000F01  4C                 	db	76	;'L'
   108  000F02  20                 	db	32
   109  000F03  35                 	db	53	;'5'
   110  000F04  30                 	db	48	;'0'
   111  000F05  00                 	db	0
   112  000F06                     STR_2:
   113  000F06  44                 	db	68	;'D'
   114  000F07  20                 	db	32
   115  000F08  38                 	db	56	;'8'
   116  000F09  00                 	db	0
   117  0000                     
   118                           ; #config settings
   119  000F0A  00                 	db	0	; dummy byte at the end
   120  0000                     
   121                           	psect	cinit
   122  00129C                     __pcinit:
   123                           	opt stack 0
   124  00129C                     start_initialization:
   125                           	opt stack 0
   126  00129C                     __initialization:
   127                           	opt stack 0
   128                           
   129                           ; Clear objects allocated to BANK0 (140 bytes)
   130  00129C  EE00  F060         	lfsr	0,__pbssBANK0
   131  0012A0  0E8C               	movlw	140
   132  0012A2                     clear_0:
   133  0012A2  6AEE               	clrf	postinc0,c
   134  0012A4  06E8               	decf	wreg,f,c
   135  0012A6  E1FD               	bnz	clear_0
   136                           
   137                           ; Clear objects allocated to COMRAM (6 bytes)
   138  0012A8  6A37               	clrf	(__pbssCOMRAM+5)& (0+255),c
   139  0012AA  6A36               	clrf	(__pbssCOMRAM+4)& (0+255),c
   140  0012AC  6A35               	clrf	(__pbssCOMRAM+3)& (0+255),c
   141  0012AE  6A34               	clrf	(__pbssCOMRAM+2)& (0+255),c
   142  0012B0  6A33               	clrf	(__pbssCOMRAM+1)& (0+255),c
   143  0012B2  6A32               	clrf	__pbssCOMRAM& (0+255),c
   144  0012B4                     end_of_initialization:
   145                           	opt stack 0
   146  0012B4                     __end_of__initialization:
   147                           	opt stack 0
   148  0012B4  9038               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   149  0012B6  9238               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   150  0012B8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   151  0012BA  6EF8               	movwf	tblptru,c
   152  0012BC  0100               	movlb	0
   153  0012BE  EF86  F007         	goto	_main	;jump to C main() function
   154                           tblptru	equ	0xFF8
   155                           postinc0	equ	0xFEE
   156                           wreg	equ	0xFE8
   157                           
   158                           	psect	bssCOMRAM
   159  000032                     __pbssCOMRAM:
   160                           	opt stack 0
   161  000032                     wait_ms@timel:
   162                           	opt stack 0
   163  000032                     	ds	4
   164  000036                     _index:
   165                           	opt stack 0
   166  000036                     	ds	2
   167                           tblptru	equ	0xFF8
   168                           postinc0	equ	0xFEE
   169                           wreg	equ	0xFE8
   170                           
   171                           	psect	bssBANK0
   172  000060                     __pbssBANK0:
   173                           	opt stack 0
   174  000060                     _realString:
   175                           	opt stack 0
   176  000060                     	ds	70
   177  0000A6                     _tmpString:
   178                           	opt stack 0
   179  0000A6                     	ds	70
   180                           tblptru	equ	0xFF8
   181                           postinc0	equ	0xFEE
   182                           wreg	equ	0xFE8
   183                           
   184                           	psect	cstackCOMRAM
   185  000001                     __pcstackCOMRAM:
   186                           	opt stack 0
   187  000001                     appendChar@data:
   188                           	opt stack 0
   189                           
   190                           ; 1 bytes @ 0x0
   191  000001                     	ds	1
   192  000002                     ??_high_isr:
   193                           
   194                           ; 1 bytes @ 0x1
   195  000002                     	ds	15
   196  000011                     ??_low_isr:
   197                           
   198                           ; 1 bytes @ 0x10
   199  000011                     	ds	17
   200  000022                     ??_copyTmpBuffer:
   201  000022                     ?_strlen:
   202                           	opt stack 0
   203  000022                     ?___lmul:
   204                           	opt stack 0
   205  000022                     UART_Write@dev:
   206                           	opt stack 0
   207  000022                     _isValid$699:
   208                           	opt stack 0
   209  000022                     strlen@s:
   210                           	opt stack 0
   211  000022                     UART_Init@baudrate:
   212                           	opt stack 0
   213  000022                     ___lmul@multiplier:
   214                           	opt stack 0
   215                           
   216                           ; 4 bytes @ 0x21
   217  000022                     	ds	1
   218  000023                     UART_Write@data:
   219                           	opt stack 0
   220  000023                     copyTmpBuffer@i:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x22
   224  000023                     	ds	1
   225  000024                     ??_strlen:
   226                           
   227                           ; 1 bytes @ 0x23
   228  000024                     	ds	2
   229  000026                     strlen@cp:
   230                           	opt stack 0
   231  000026                     ___lmul@multiplicand:
   232                           	opt stack 0
   233                           
   234                           ; 4 bytes @ 0x25
   235  000026                     	ds	2
   236  000028                     writeString@str:
   237                           	opt stack 0
   238  000028                     clearBuffer@i:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x27
   242  000028                     	ds	2
   243  00002A                     writeString@dev:
   244                           	opt stack 0
   245  00002A                     ___lmul@product:
   246                           	opt stack 0
   247                           
   248                           ; 4 bytes @ 0x29
   249  00002A                     	ds	1
   250  00002B                     ??_writeString:
   251                           
   252                           ; 1 bytes @ 0x2A
   253  00002B                     	ds	2
   254  00002D                     writeString@i:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x2C
   258  00002D                     	ds	1
   259  00002E                     wait_ms@time:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0x2D
   263  00002E                     	ds	2
   264  000030                     writeResult@dev:
   265                           	opt stack 0
   266                           
   267                           ; 1 bytes @ 0x2F
   268  000030                     	ds	1
   269  000031                     main@var:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0x30
   273  000031                     	ds	1
   274                           tblptru	equ	0xFF8
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           
   278 ;;
   279 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   280 ;;
   281 ;; *************** function _main *****************
   282 ;; Defined at:
   283 ;;		line 39 in file "main.c"
   284 ;; Parameters:    Size  Location     Type
   285 ;;		None
   286 ;; Auto vars:     Size  Location     Type
   287 ;;  var             1   48[COMRAM] unsigned char 
   288 ;;  result          1    0        unsigned char 
   289 ;; Return value:  Size  Location     Type
   290 ;;                  1    wreg      void 
   291 ;; Registers used:
   292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   293 ;; Tracked objects:
   294 ;;		On entry : 0/0
   295 ;;		On exit  : 0/0
   296 ;;		Unchanged: 0/0
   297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   299 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   301 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   302 ;;Total ram usage:        1 bytes
   303 ;; Hardware stack levels required when called:    6
   304 ;; This function calls:
   305 ;;		_ConfigureOscillator
   306 ;;		_InitApp
   307 ;;		_UART_Init
   308 ;;		_UART_Write
   309 ;;		_clearBuffer
   310 ;;		_copyTmpBuffer
   311 ;;		_isItLongEnough
   312 ;;		_isValid
   313 ;;		_wait_ms
   314 ;;		_writeResult
   315 ;;		_writeString
   316 ;; This function is called by:
   317 ;;		Startup code after reset
   318 ;; This function uses a non-reentrant model
   319 ;;
   320                           
   321                           	psect	text0
   322  000F0C                     __ptext0:
   323                           	opt stack 0
   324  000F0C                     _main:
   325                           	opt stack 25
   326                           
   327                           ;main.c: 45: ConfigureOscillator();
   328                           
   329                           ;incstack = 0
   330  000F0C  ECA3  F009         	call	_ConfigureOscillator	;wreg free
   331                           
   332                           ;main.c: 48: InitApp();
   333  000F10  EC71  F009         	call	_InitApp	;wreg free
   334                           
   335                           ;main.c: 50: UART_Init(19200);
   336  000F14  0E00               	movlw	0
   337  000F16  6E22               	movwf	UART_Init@baudrate,c
   338  000F18  0E4B               	movlw	75
   339  000F1A  6E23               	movwf	UART_Init@baudrate+1,c
   340  000F1C  0E00               	movlw	0
   341  000F1E  6E24               	movwf	UART_Init@baudrate+2,c
   342  000F20  0E00               	movlw	0
   343  000F22  6E25               	movwf	UART_Init@baudrate+3,c
   344  000F24  EC35  F009         	call	_UART_Init	;wreg free
   345                           
   346                           ;main.c: 51: writeString("L 50", 1);
   347  000F28  0E01               	movlw	low STR_1
   348  000F2A  6E28               	movwf	writeString@str,c
   349  000F2C  0E0F               	movlw	high STR_1
   350  000F2E  6E29               	movwf	writeString@str+1,c
   351  000F30  0E01               	movlw	1
   352  000F32  6E2A               	movwf	writeString@dev,c
   353  000F34  EC24  F008         	call	_writeString	;wreg free
   354                           
   355                           ;main.c: 52: UART_Write(0x0D,1);
   356  000F38  0E01               	movlw	1
   357  000F3A  6E22               	movwf	UART_Write@dev,c
   358  000F3C  0E0D               	movlw	13
   359  000F3E  EC80  F009         	call	_UART_Write
   360                           
   361                           ;main.c: 53: writeString("D 8", 1);
   362  000F42  0E06               	movlw	low STR_2
   363  000F44  6E28               	movwf	writeString@str,c
   364  000F46  0E0F               	movlw	high STR_2
   365  000F48  6E29               	movwf	writeString@str+1,c
   366  000F4A  0E01               	movlw	1
   367  000F4C  6E2A               	movwf	writeString@dev,c
   368  000F4E  EC24  F008         	call	_writeString	;wreg free
   369                           
   370                           ;main.c: 54: UART_Write(0x0D,1);
   371  000F52  0E01               	movlw	1
   372  000F54  6E22               	movwf	UART_Write@dev,c
   373  000F56  0E0D               	movlw	13
   374  000F58  EC80  F009         	call	_UART_Write
   375                           
   376                           ;main.c: 56: uint8_t var = 0;
   377  000F5C  0E00               	movlw	0
   378  000F5E  6E31               	movwf	main@var,c
   379                           
   380                           ;main.c: 57: char result;
   381                           ;main.c: 60: TRISAbits.TRISA0 = 0;
   382  000F60  9092               	bcf	3986,0,c	;volatile
   383                           
   384                           ;main.c: 61: TRISAbits.TRISA1 = 0;
   385  000F62  9292               	bcf	3986,1,c	;volatile
   386                           
   387                           ;main.c: 62: LATAbits.LATA0 = 0;
   388  000F64  9089               	bcf	3977,0,c	;volatile
   389                           
   390                           ;main.c: 63: LATAbits.LATA1 = 0;
   391  000F66  9289               	bcf	3977,1,c	;volatile
   392                           
   393                           ;main.c: 64: TRISDbits.TRISD3 = 1;
   394  000F68  8695               	bsf	3989,3,c	;volatile
   395                           
   396                           ;main.c: 66: clearBuffer();
   397  000F6A  ECD3  F008         	call	_clearBuffer	;wreg free
   398  000F6E                     l1148:
   399                           
   400                           ;main.c: 71: if(isItLongEnough()){
   401  000F6E  EC9A  F009         	call	_isItLongEnough	;wreg free
   402  000F72  0900               	iorlw	0
   403  000F74  B4D8               	btfsc	status,2,c
   404  000F76  D014               	goto	l52
   405                           
   406                           ;main.c: 72: if(isValid()){
   407  000F78  EC16  F009         	call	_isValid	;wreg free
   408  000F7C  0900               	iorlw	0
   409  000F7E  B4D8               	btfsc	status,2,c
   410  000F80  D00C               	goto	l1160
   411                           
   412                           ;main.c: 73: LATAbits.LATA1 = 1;
   413  000F82  8289               	bsf	3977,1,c	;volatile
   414                           
   415                           ;main.c: 74: wait_ms(1000);
   416  000F84  0E03               	movlw	3
   417  000F86  6E2F               	movwf	wait_ms@time+1,c
   418  000F88  0EE8               	movlw	232
   419  000F8A  6E2E               	movwf	wait_ms@time,c
   420  000F8C  EC53  F008         	call	_wait_ms	;wreg free
   421                           
   422                           ;main.c: 75: copyTmpBuffer();
   423  000F90  ECF6  F008         	call	_copyTmpBuffer	;wreg free
   424                           
   425                           ;main.c: 76: clearBuffer();
   426  000F94  ECD3  F008         	call	_clearBuffer	;wreg free
   427                           
   428                           ;main.c: 77: }else{
   429  000F98  D004               	goto	l55
   430  000F9A                     l1160:
   431                           
   432                           ;main.c: 78: clearBuffer();
   433  000F9A  ECD3  F008         	call	_clearBuffer	;wreg free
   434                           
   435                           ;main.c: 79: }
   436                           ;main.c: 80: }else{
   437  000F9E  D001               	goto	l55
   438  000FA0                     l52:
   439                           
   440                           ;main.c: 81: LATAbits.LATA1 = 0;
   441  000FA0  9289               	bcf	3977,1,c	;volatile
   442  000FA2                     l55:
   443                           
   444                           ;main.c: 82: }
   445                           ;main.c: 84: if(!PORTDbits.RD3){
   446  000FA2  B683               	btfsc	3971,3,c	;volatile
   447  000FA4  D7E4               	goto	l1148
   448                           
   449                           ;main.c: 85: writeResult(2);
   450  000FA6  0E02               	movlw	2
   451  000FA8  EC61  F009         	call	_writeResult
   452  000FAC  D7E0               	goto	l1148
   453  000FAE                     __end_of_main:
   454                           	opt stack 0
   455                           tblptru	equ	0xFF8
   456                           postinc0	equ	0xFEE
   457                           wreg	equ	0xFE8
   458                           status	equ	0xFD8
   459                           
   460 ;; *************** function _writeResult *****************
   461 ;; Defined at:
   462 ;;		line 48 in file "bufferhandler.c"
   463 ;; Parameters:    Size  Location     Type
   464 ;;  dev             1    wreg     unsigned char 
   465 ;; Auto vars:     Size  Location     Type
   466 ;;  dev             1   47[COMRAM] unsigned char 
   467 ;; Return value:  Size  Location     Type
   468 ;;                  1    wreg      void 
   469 ;; Registers used:
   470 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   471 ;; Tracked objects:
   472 ;;		On entry : 0/0
   473 ;;		On exit  : 0/0
   474 ;;		Unchanged: 0/0
   475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   477 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   479 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   480 ;;Total ram usage:        1 bytes
   481 ;; Hardware stack levels used:    1
   482 ;; Hardware stack levels required when called:    5
   483 ;; This function calls:
   484 ;;		_wait_ms
   485 ;;		_writeString
   486 ;; This function is called by:
   487 ;;		_main
   488 ;; This function uses a non-reentrant model
   489 ;;
   490                           
   491                           	psect	text1
   492  0012C2                     __ptext1:
   493                           	opt stack 0
   494  0012C2                     _writeResult:
   495                           	opt stack 25
   496                           
   497                           ;incstack = 0
   498                           ;writeResult@dev stored from wreg
   499  0012C2  6E30               	movwf	writeResult@dev,c
   500                           
   501                           ;bufferhandler.c: 50: writeString(realString, dev);
   502  0012C4  0E60               	movlw	low _realString
   503  0012C6  6E28               	movwf	writeString@str,c
   504  0012C8  0E00               	movlw	high _realString
   505  0012CA  6E29               	movwf	writeString@str+1,c
   506  0012CC  C030  F02A         	movff	writeResult@dev,writeString@dev
   507  0012D0  EC24  F008         	call	_writeString	;wreg free
   508                           
   509                           ;bufferhandler.c: 51: wait_ms(1000);
   510  0012D4  0E03               	movlw	3
   511  0012D6  6E2F               	movwf	wait_ms@time+1,c
   512  0012D8  0EE8               	movlw	232
   513  0012DA  6E2E               	movwf	wait_ms@time,c
   514  0012DC  EC53  F008         	call	_wait_ms	;wreg free
   515  0012E0  0012               	return		;funcret
   516  0012E2                     __end_of_writeResult:
   517                           	opt stack 0
   518                           tblptru	equ	0xFF8
   519                           postinc0	equ	0xFEE
   520                           wreg	equ	0xFE8
   521                           status	equ	0xFD8
   522                           
   523 ;; *************** function _writeString *****************
   524 ;; Defined at:
   525 ;;		line 97 in file "uart.c"
   526 ;; Parameters:    Size  Location     Type
   527 ;;  str             2   39[COMRAM] PTR unsigned char 
   528 ;;		 -> realString(70), STR_2(4), STR_1(5), 
   529 ;;  dev             1   41[COMRAM] unsigned char 
   530 ;; Auto vars:     Size  Location     Type
   531 ;;  i               2   44[COMRAM] int 
   532 ;; Return value:  Size  Location     Type
   533 ;;                  1    wreg      void 
   534 ;; Registers used:
   535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   541 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   542 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   543 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   544 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   545 ;;Total ram usage:        7 bytes
   546 ;; Hardware stack levels used:    1
   547 ;; Hardware stack levels required when called:    4
   548 ;; This function calls:
   549 ;;		_UART_Write
   550 ;;		_strlen
   551 ;; This function is called by:
   552 ;;		_main
   553 ;;		_writeResult
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557                           	psect	text2
   558  001048                     __ptext2:
   559                           	opt stack 0
   560  001048                     _writeString:
   561                           	opt stack 26
   562                           
   563                           ;uart.c: 99: for(int i = 0; i<strlen(str); i++)
   564                           
   565                           ;incstack = 0
   566  001048  0E00               	movlw	0
   567  00104A  6E2E               	movwf	writeString@i+1,c
   568  00104C  0E00               	movlw	0
   569  00104E  6E2D               	movwf	writeString@i,c
   570  001050  D01D               	goto	l1044
   571  001052                     l1040:
   572                           
   573                           ;uart.c: 100: {
   574                           ;uart.c: 101: UART_Write(str[i], dev);
   575  001052  C02A  F022         	movff	writeString@dev,UART_Write@dev
   576  001056  502D               	movf	writeString@i,w,c
   577  001058  2428               	addwf	writeString@str,w,c
   578  00105A  6E2B               	movwf	??_writeString& (0+255),c
   579  00105C  502E               	movf	writeString@i+1,w,c
   580  00105E  2029               	addwfc	writeString@str+1,w,c
   581  001060  6E2C               	movwf	(??_writeString+1)& (0+255),c
   582  001062  C02B  FFF6         	movff	??_writeString,tblptrl
   583  001066  C02C  FFF7         	movff	??_writeString+1,tblptrh
   584  00106A  0E00               	movlw	low (__smallconst shr (0+16))
   585  00106C  6EF8               	movwf	tblptru,c
   586  00106E  0E0E               	movlw	(high __ramtop+-1)
   587  001070  64F7               	cpfsgt	tblptrh,c
   588  001072  D003               	bra	u377
   589  001074  0008               	tblrd		*
   590  001076  50F5               	movf	tablat,w,c
   591  001078  D005               	bra	u370
   592  00107A                     u377:
   593  00107A  CFF6 FFE9          	movff	tblptrl,fsr0l
   594  00107E  CFF7 FFEA          	movff	tblptrh,fsr0h
   595  001082  50EF               	movf	indf0,w,c
   596  001084                     u370:
   597  001084  EC80  F009         	call	_UART_Write
   598  001088  4A2D               	infsnz	writeString@i,f,c
   599  00108A  2A2E               	incf	writeString@i+1,f,c
   600  00108C                     l1044:
   601  00108C  C028  F022         	movff	writeString@str,strlen@s
   602  001090  C029  F023         	movff	writeString@str+1,strlen@s+1
   603  001094  ECA9  F008         	call	_strlen	;wreg free
   604  001098  5022               	movf	?_strlen,w,c
   605  00109A  5C2D               	subwf	writeString@i,w,c
   606  00109C  5023               	movf	?_strlen+1,w,c
   607  00109E  582E               	subwfb	writeString@i+1,w,c
   608  0010A0  B0D8               	btfsc	status,0,c
   609  0010A2  0012               	return	
   610  0010A4  D7D6               	goto	l1040
   611  0010A6                     __end_of_writeString:
   612                           	opt stack 0
   613                           tblptru	equ	0xFF8
   614                           tblptrh	equ	0xFF7
   615                           tblptrl	equ	0xFF6
   616                           tablat	equ	0xFF5
   617                           indf0	equ	0xFEF
   618                           postinc0	equ	0xFEE
   619                           fsr0h	equ	0xFEA
   620                           fsr0l	equ	0xFE9
   621                           wreg	equ	0xFE8
   622                           status	equ	0xFD8
   623                           
   624 ;; *************** function _UART_Write *****************
   625 ;; Defined at:
   626 ;;		line 61 in file "uart.c"
   627 ;; Parameters:    Size  Location     Type
   628 ;;  data            1    wreg     unsigned char 
   629 ;;  dev             1   33[COMRAM] unsigned char 
   630 ;; Auto vars:     Size  Location     Type
   631 ;;  data            1   34[COMRAM] unsigned char 
   632 ;; Return value:  Size  Location     Type
   633 ;;                  1    wreg      void 
   634 ;; Registers used:
   635 ;;		wreg, status,2, status,0
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   641 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   642 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   644 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   645 ;;Total ram usage:        2 bytes
   646 ;; Hardware stack levels used:    1
   647 ;; Hardware stack levels required when called:    3
   648 ;; This function calls:
   649 ;;		Nothing
   650 ;; This function is called by:
   651 ;;		_main
   652 ;;		_writeString
   653 ;; This function uses a non-reentrant model
   654 ;;
   655                           
   656                           	psect	text3
   657  001300                     __ptext3:
   658                           	opt stack 0
   659  001300                     _UART_Write:
   660                           	opt stack 26
   661                           
   662                           ;incstack = 0
   663                           ;UART_Write@data stored from wreg
   664  001300  6E23               	movwf	UART_Write@data,c
   665                           
   666                           ;uart.c: 63: if (dev == 1)
   667  001302  0422               	decf	UART_Write@dev,w,c
   668  001304  A4D8               	btfss	status,2,c
   669  001306  D005               	goto	l148
   670  001308                     l144:
   671  001308  A2AD               	btfss	4013,1,c	;volatile
   672  00130A  D7FE               	goto	l144
   673                           
   674                           ;uart.c: 66: TXREG1 = data;
   675  00130C  C023  FFAE         	movff	UART_Write@data,4014	;volatile
   676                           
   677                           ;uart.c: 67: }
   678  001310  0012               	return	
   679  001312                     l148:
   680  001312  A2A8               	btfss	4008,1,c	;volatile
   681  001314  D7FE               	goto	l148
   682                           
   683                           ;uart.c: 71: TXREG2 = data;
   684  001316  C023  FFA9         	movff	UART_Write@data,4009	;volatile
   685  00131A  0012               	return	
   686  00131C                     __end_of_UART_Write:
   687                           	opt stack 0
   688                           tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           indf0	equ	0xFEF
   693                           postinc0	equ	0xFEE
   694                           fsr0h	equ	0xFEA
   695                           fsr0l	equ	0xFE9
   696                           wreg	equ	0xFE8
   697                           status	equ	0xFD8
   698                           
   699 ;; *************** function _wait_ms *****************
   700 ;; Defined at:
   701 ;;		line 35 in file "system.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;  time            2   45[COMRAM] int 
   704 ;; Auto vars:     Size  Location     Type
   705 ;;		None
   706 ;; Return value:  Size  Location     Type
   707 ;;                  1    wreg      void 
   708 ;; Registers used:
   709 ;;		wreg, status,2, status,0, cstack
   710 ;; Tracked objects:
   711 ;;		On entry : 0/0
   712 ;;		On exit  : 0/0
   713 ;;		Unchanged: 0/0
   714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   715 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   718 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   719 ;;Total ram usage:        2 bytes
   720 ;; Hardware stack levels used:    1
   721 ;; Hardware stack levels required when called:    4
   722 ;; This function calls:
   723 ;;		___lmul
   724 ;; This function is called by:
   725 ;;		_main
   726 ;;		_writeResult
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730                           	psect	text4
   731  0010A6                     __ptext4:
   732                           	opt stack 0
   733  0010A6                     _wait_ms:
   734                           	opt stack 25
   735                           
   736                           ;system.c: 37: static long timel = 0;
   737                           ;system.c: 38: timel = time * 1000l;
   738                           
   739                           ;incstack = 0
   740  0010A6  C02E  F022         	movff	wait_ms@time,___lmul@multiplier
   741  0010AA  C02F  F023         	movff	wait_ms@time+1,___lmul@multiplier+1
   742  0010AE  0E00               	movlw	0
   743  0010B0  BE23               	btfsc	___lmul@multiplier+1,7,c
   744  0010B2  0EFF               	movlw	-1
   745  0010B4  6E24               	movwf	___lmul@multiplier+2,c
   746  0010B6  6E25               	movwf	___lmul@multiplier+3,c
   747  0010B8  0EE8               	movlw	232
   748  0010BA  6E26               	movwf	___lmul@multiplicand,c
   749  0010BC  0E03               	movlw	3
   750  0010BE  6E27               	movwf	___lmul@multiplicand+1,c
   751  0010C0  0E00               	movlw	0
   752  0010C2  6E28               	movwf	___lmul@multiplicand+2,c
   753  0010C4  0E00               	movlw	0
   754  0010C6  6E29               	movwf	___lmul@multiplicand+3,c
   755  0010C8  EC7E  F008         	call	___lmul	;wreg free
   756  0010CC  C022  F032         	movff	?___lmul,wait_ms@timel
   757  0010D0  C023  F033         	movff	?___lmul+1,wait_ms@timel+1
   758  0010D4  C024  F034         	movff	?___lmul+2,wait_ms@timel+2
   759  0010D8  C025  F035         	movff	?___lmul+3,wait_ms@timel+3
   760                           
   761                           ;system.c: 39: for( ; timel; timel--);
   762  0010DC  D008               	goto	l71
   763  0010DE                     l1048:
   764  0010DE  0EFF               	movlw	255
   765  0010E0  2632               	addwf	wait_ms@timel,f,c
   766  0010E2  0EFF               	movlw	255
   767  0010E4  2233               	addwfc	wait_ms@timel+1,f,c
   768  0010E6  0EFF               	movlw	255
   769  0010E8  2234               	addwfc	wait_ms@timel+2,f,c
   770  0010EA  0EFF               	movlw	255
   771  0010EC  2235               	addwfc	wait_ms@timel+3,f,c
   772  0010EE                     l71:
   773  0010EE  5032               	movf	wait_ms@timel,w,c
   774  0010F0  1033               	iorwf	wait_ms@timel+1,w,c
   775  0010F2  1034               	iorwf	wait_ms@timel+2,w,c
   776  0010F4  1035               	iorwf	wait_ms@timel+3,w,c
   777  0010F6  B4D8               	btfsc	status,2,c
   778  0010F8  0012               	return	
   779  0010FA  D7F1               	goto	l1048
   780  0010FC                     __end_of_wait_ms:
   781                           	opt stack 0
   782                           tblptru	equ	0xFF8
   783                           tblptrh	equ	0xFF7
   784                           tblptrl	equ	0xFF6
   785                           tablat	equ	0xFF5
   786                           indf0	equ	0xFEF
   787                           postinc0	equ	0xFEE
   788                           fsr0h	equ	0xFEA
   789                           fsr0l	equ	0xFE9
   790                           wreg	equ	0xFE8
   791                           status	equ	0xFD8
   792                           
   793 ;; *************** function ___lmul *****************
   794 ;; Defined at:
   795 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;  multiplier      4   33[COMRAM] unsigned long 
   798 ;;  multiplicand    4   37[COMRAM] unsigned long 
   799 ;; Auto vars:     Size  Location     Type
   800 ;;  product         4   41[COMRAM] unsigned long 
   801 ;; Return value:  Size  Location     Type
   802 ;;                  4   33[COMRAM] unsigned long 
   803 ;; Registers used:
   804 ;;		wreg, status,2, status,0
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   810 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   811 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   813 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   814 ;;Total ram usage:       12 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; Hardware stack levels required when called:    3
   817 ;; This function calls:
   818 ;;		Nothing
   819 ;; This function is called by:
   820 ;;		_wait_ms
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           	psect	text5
   825  0010FC                     __ptext5:
   826                           	opt stack 0
   827  0010FC                     ___lmul:
   828                           	opt stack 25
   829                           
   830                           ;incstack = 0
   831  0010FC  0E00               	movlw	0
   832  0010FE  6E2A               	movwf	___lmul@product,c
   833  001100  0E00               	movlw	0
   834  001102  6E2B               	movwf	___lmul@product+1,c
   835  001104  0E00               	movlw	0
   836  001106  6E2C               	movwf	___lmul@product+2,c
   837  001108  0E00               	movlw	0
   838  00110A  6E2D               	movwf	___lmul@product+3,c
   839  00110C                     l1030:
   840  00110C  A022               	btfss	___lmul@multiplier,0,c
   841  00110E  D008               	goto	l1034
   842  001110  5026               	movf	___lmul@multiplicand,w,c
   843  001112  262A               	addwf	___lmul@product,f,c
   844  001114  5027               	movf	___lmul@multiplicand+1,w,c
   845  001116  222B               	addwfc	___lmul@product+1,f,c
   846  001118  5028               	movf	___lmul@multiplicand+2,w,c
   847  00111A  222C               	addwfc	___lmul@product+2,f,c
   848  00111C  5029               	movf	___lmul@multiplicand+3,w,c
   849  00111E  222D               	addwfc	___lmul@product+3,f,c
   850  001120                     l1034:
   851  001120  90D8               	bcf	status,0,c
   852  001122  3626               	rlcf	___lmul@multiplicand,f,c
   853  001124  3627               	rlcf	___lmul@multiplicand+1,f,c
   854  001126  3628               	rlcf	___lmul@multiplicand+2,f,c
   855  001128  3629               	rlcf	___lmul@multiplicand+3,f,c
   856  00112A  90D8               	bcf	status,0,c
   857  00112C  3225               	rrcf	___lmul@multiplier+3,f,c
   858  00112E  3224               	rrcf	___lmul@multiplier+2,f,c
   859  001130  3223               	rrcf	___lmul@multiplier+1,f,c
   860  001132  3222               	rrcf	___lmul@multiplier,f,c
   861  001134  5022               	movf	___lmul@multiplier,w,c
   862  001136  1023               	iorwf	___lmul@multiplier+1,w,c
   863  001138  1024               	iorwf	___lmul@multiplier+2,w,c
   864  00113A  1025               	iorwf	___lmul@multiplier+3,w,c
   865  00113C  A4D8               	btfss	status,2,c
   866  00113E  D7E6               	goto	l1030
   867  001140  C02A  F022         	movff	___lmul@product,?___lmul
   868  001144  C02B  F023         	movff	___lmul@product+1,?___lmul+1
   869  001148  C02C  F024         	movff	___lmul@product+2,?___lmul+2
   870  00114C  C02D  F025         	movff	___lmul@product+3,?___lmul+3
   871  001150  0012               	return		;funcret
   872  001152                     __end_of___lmul:
   873                           	opt stack 0
   874                           tblptru	equ	0xFF8
   875                           tblptrh	equ	0xFF7
   876                           tblptrl	equ	0xFF6
   877                           tablat	equ	0xFF5
   878                           indf0	equ	0xFEF
   879                           postinc0	equ	0xFEE
   880                           fsr0h	equ	0xFEA
   881                           fsr0l	equ	0xFE9
   882                           wreg	equ	0xFE8
   883                           status	equ	0xFD8
   884                           
   885 ;; *************** function _isValid *****************
   886 ;; Defined at:
   887 ;;		line 58 in file "bufferhandler.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;		None
   890 ;; Auto vars:     Size  Location     Type
   891 ;;		None
   892 ;; Return value:  Size  Location     Type
   893 ;;                  1    wreg      unsigned char 
   894 ;; Registers used:
   895 ;;		wreg, status,2, status,0
   896 ;; Tracked objects:
   897 ;;		On entry : 0/0
   898 ;;		On exit  : 0/0
   899 ;;		Unchanged: 0/0
   900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   902 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   904 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   905 ;;Total ram usage:        1 bytes
   906 ;; Hardware stack levels used:    1
   907 ;; Hardware stack levels required when called:    3
   908 ;; This function calls:
   909 ;;		Nothing
   910 ;; This function is called by:
   911 ;;		_main
   912 ;; This function uses a non-reentrant model
   913 ;;
   914                           
   915                           	psect	text6
   916  00122C                     __ptext6:
   917                           	opt stack 0
   918  00122C                     _isValid:
   919                           	opt stack 27
   920                           
   921                           ;bufferhandler.c: 59: return tmpString[0] == 0x54 &&
   922                           ;bufferhandler.c: 60: tmpString[1] == 0x59 &&
   923                           ;bufferhandler.c: 61: tmpString[2] == 0x52 &&
   924                           ;bufferhandler.c: 62: tmpString[3] == 0x49 &&
   925                           ;bufferhandler.c: 63: tmpString[4] == 0x5F;
   926                           
   927                           ;incstack = 0
   928  00122C  0E00               	movlw	0
   929  00122E  6E22               	movwf	_isValid$699,c
   930  001230  0E54               	movlw	84
   931  001232  0100               	movlb	0	; () banked
   932  001234  19A6               	xorwf	_tmpString& (0+255),w,b
   933  001236  A4D8               	btfss	status,2,c
   934  001238  D016               	goto	l214
   935                           
   936                           ; BSR set to: 0
   937  00123A  0E59               	movlw	89
   938  00123C  0100               	movlb	0	; () banked
   939  00123E  19A7               	xorwf	(_tmpString+1)& (0+255),w,b
   940  001240  A4D8               	btfss	status,2,c
   941  001242  D011               	goto	l214
   942                           
   943                           ; BSR set to: 0
   944  001244  0E52               	movlw	82
   945  001246  0100               	movlb	0	; () banked
   946  001248  19A8               	xorwf	(_tmpString+2)& (0+255),w,b
   947  00124A  A4D8               	btfss	status,2,c
   948  00124C  D00C               	goto	l214
   949                           
   950                           ; BSR set to: 0
   951  00124E  0E49               	movlw	73
   952  001250  0100               	movlb	0	; () banked
   953  001252  19A9               	xorwf	(_tmpString+3)& (0+255),w,b
   954  001254  A4D8               	btfss	status,2,c
   955  001256  D007               	goto	l214
   956                           
   957                           ; BSR set to: 0
   958  001258  0E5F               	movlw	95
   959  00125A  0100               	movlb	0	; () banked
   960  00125C  19AA               	xorwf	(_tmpString+4)& (0+255),w,b
   961  00125E  A4D8               	btfss	status,2,c
   962  001260  D002               	goto	l214
   963                           
   964                           ; BSR set to: 0
   965  001262  0E01               	movlw	1
   966  001264  6E22               	movwf	_isValid$699,c
   967  001266                     l214:
   968                           
   969                           ; BSR set to: 0
   970  001266  5022               	movf	_isValid$699,w,c
   971  001268  0012               	return	
   972  00126A                     __end_of_isValid:
   973                           	opt stack 0
   974                           tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           indf0	equ	0xFEF
   979                           postinc0	equ	0xFEE
   980                           fsr0h	equ	0xFEA
   981                           fsr0l	equ	0xFE9
   982                           wreg	equ	0xFE8
   983                           status	equ	0xFD8
   984                           
   985 ;; *************** function _isItLongEnough *****************
   986 ;; Defined at:
   987 ;;		line 29 in file "bufferhandler.c"
   988 ;; Parameters:    Size  Location     Type
   989 ;;		None
   990 ;; Auto vars:     Size  Location     Type
   991 ;;		None
   992 ;; Return value:  Size  Location     Type
   993 ;;                  1    wreg      unsigned char 
   994 ;; Registers used:
   995 ;;		wreg, status,2, status,0
   996 ;; Tracked objects:
   997 ;;		On entry : 0/0
   998 ;;		On exit  : 0/0
   999 ;;		Unchanged: 0/0
  1000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1005 ;;Total ram usage:        0 bytes
  1006 ;; Hardware stack levels used:    1
  1007 ;; Hardware stack levels required when called:    3
  1008 ;; This function calls:
  1009 ;;		Nothing
  1010 ;; This function is called by:
  1011 ;;		_main
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           	psect	text7
  1016  001334                     __ptext7:
  1017                           	opt stack 0
  1018  001334                     _isItLongEnough:
  1019                           	opt stack 27
  1020                           
  1021                           ;bufferhandler.c: 31: return index == 64;
  1022                           
  1023                           ; BSR set to: 0
  1024                           ;incstack = 0
  1025  001334  0E40               	movlw	64
  1026  001336  1836               	xorwf	_index,w,c
  1027  001338  1037               	iorwf	_index+1,w,c
  1028  00133A  A4D8               	btfss	status,2,c
  1029  00133C  D002               	goto	u120
  1030  00133E  0E01               	movlw	1
  1031  001340  0012               	return	
  1032  001342                     u120:
  1033  001342  0E00               	movlw	0
  1034  001344  0012               	return	
  1035  001346                     __end_of_isItLongEnough:
  1036                           	opt stack 0
  1037                           tblptru	equ	0xFF8
  1038                           tblptrh	equ	0xFF7
  1039                           tblptrl	equ	0xFF6
  1040                           tablat	equ	0xFF5
  1041                           indf0	equ	0xFEF
  1042                           postinc0	equ	0xFEE
  1043                           fsr0h	equ	0xFEA
  1044                           fsr0l	equ	0xFE9
  1045                           wreg	equ	0xFE8
  1046                           status	equ	0xFD8
  1047                           
  1048 ;; *************** function _copyTmpBuffer *****************
  1049 ;; Defined at:
  1050 ;;		line 42 in file "bufferhandler.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;		None
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;  i               2   34[COMRAM] int 
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  1    wreg      void 
  1057 ;; Registers used:
  1058 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1065 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1066 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1067 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1068 ;;Total ram usage:        3 bytes
  1069 ;; Hardware stack levels used:    1
  1070 ;; Hardware stack levels required when called:    3
  1071 ;; This function calls:
  1072 ;;		Nothing
  1073 ;; This function is called by:
  1074 ;;		_main
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text8
  1079  0011EC                     __ptext8:
  1080                           	opt stack 0
  1081  0011EC                     _copyTmpBuffer:
  1082                           	opt stack 27
  1083                           
  1084                           ;bufferhandler.c: 43: for(int i = 0; i<index; i++){
  1085                           
  1086                           ;incstack = 0
  1087  0011EC  0E00               	movlw	0
  1088  0011EE  6E24               	movwf	copyTmpBuffer@i+1,c
  1089  0011F0  0E00               	movlw	0
  1090  0011F2  6E23               	movwf	copyTmpBuffer@i,c
  1091  0011F4  D010               	goto	l1106
  1092  0011F6                     l1102:
  1093                           
  1094                           ;bufferhandler.c: 44: realString[i] = tmpString[i];
  1095  0011F6  0EA6               	movlw	low _tmpString
  1096  0011F8  2423               	addwf	copyTmpBuffer@i,w,c
  1097  0011FA  6ED9               	movwf	fsr2l,c
  1098  0011FC  0E00               	movlw	high _tmpString
  1099  0011FE  2024               	addwfc	copyTmpBuffer@i+1,w,c
  1100  001200  6EDA               	movwf	fsr2h,c
  1101  001202  0E60               	movlw	low _realString
  1102  001204  2423               	addwf	copyTmpBuffer@i,w,c
  1103  001206  6EE1               	movwf	fsr1l,c
  1104  001208  0E00               	movlw	high _realString
  1105  00120A  2024               	addwfc	copyTmpBuffer@i+1,w,c
  1106  00120C  6EE2               	movwf	fsr1h,c
  1107  00120E  CFDF FFE7          	movff	indf2,indf1
  1108  001212  4A23               	infsnz	copyTmpBuffer@i,f,c
  1109  001214  2A24               	incf	copyTmpBuffer@i+1,f,c
  1110  001216                     l1106:
  1111  001216  5036               	movf	_index,w,c
  1112  001218  5C23               	subwf	copyTmpBuffer@i,w,c
  1113  00121A  5024               	movf	copyTmpBuffer@i+1,w,c
  1114  00121C  0A80               	xorlw	128
  1115  00121E  6E22               	movwf	??_copyTmpBuffer& (0+255),c
  1116  001220  5037               	movf	_index+1,w,c
  1117  001222  0A80               	xorlw	128
  1118  001224  5822               	subwfb	??_copyTmpBuffer& (0+255),w,c
  1119  001226  B0D8               	btfsc	status,0,c
  1120  001228  0012               	return	
  1121  00122A  D7E5               	goto	l1102
  1122  00122C                     __end_of_copyTmpBuffer:
  1123                           	opt stack 0
  1124                           tblptru	equ	0xFF8
  1125                           tblptrh	equ	0xFF7
  1126                           tblptrl	equ	0xFF6
  1127                           tablat	equ	0xFF5
  1128                           indf0	equ	0xFEF
  1129                           postinc0	equ	0xFEE
  1130                           fsr0h	equ	0xFEA
  1131                           fsr0l	equ	0xFE9
  1132                           wreg	equ	0xFE8
  1133                           indf1	equ	0xFE7
  1134                           fsr1h	equ	0xFE2
  1135                           fsr1l	equ	0xFE1
  1136                           indf2	equ	0xFDF
  1137                           fsr2h	equ	0xFDA
  1138                           fsr2l	equ	0xFD9
  1139                           status	equ	0xFD8
  1140                           
  1141 ;; *************** function _clearBuffer *****************
  1142 ;; Defined at:
  1143 ;;		line 34 in file "bufferhandler.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;		None
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;  i               2   39[COMRAM] int 
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  1    wreg      void 
  1150 ;; Registers used:
  1151 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1158 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1160 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1161 ;;Total ram usage:        2 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; Hardware stack levels required when called:    4
  1164 ;; This function calls:
  1165 ;;		_strlen
  1166 ;; This function is called by:
  1167 ;;		_main
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text9
  1172  0011A6                     __ptext9:
  1173                           	opt stack 0
  1174  0011A6                     _clearBuffer:
  1175                           	opt stack 26
  1176                           
  1177                           ;bufferhandler.c: 35: for(int i = 0; i<strlen(tmpString); i++){
  1178                           
  1179                           ;incstack = 0
  1180  0011A6  0E00               	movlw	0
  1181  0011A8  6E29               	movwf	clearBuffer@i+1,c
  1182  0011AA  0E00               	movlw	0
  1183  0011AC  6E28               	movwf	clearBuffer@i,c
  1184  0011AE  D00A               	goto	l1080
  1185  0011B0                     l1076:
  1186                           
  1187                           ;bufferhandler.c: 36: tmpString[i] = "";
  1188  0011B0  0EA6               	movlw	low _tmpString
  1189  0011B2  2428               	addwf	clearBuffer@i,w,c
  1190  0011B4  6ED9               	movwf	fsr2l,c
  1191  0011B6  0E00               	movlw	high _tmpString
  1192  0011B8  2029               	addwfc	clearBuffer@i+1,w,c
  1193  0011BA  6EDA               	movwf	fsr2h,c
  1194  0011BC  0E05               	movlw	low (STR_1+4)
  1195  0011BE  6EDF               	movwf	indf2,c
  1196  0011C0  4A28               	infsnz	clearBuffer@i,f,c
  1197  0011C2  2A29               	incf	clearBuffer@i+1,f,c
  1198  0011C4                     l1080:
  1199  0011C4  0EA6               	movlw	low _tmpString
  1200  0011C6  6E22               	movwf	strlen@s,c
  1201  0011C8  0E00               	movlw	high _tmpString
  1202  0011CA  6E23               	movwf	strlen@s+1,c
  1203  0011CC  ECA9  F008         	call	_strlen	;wreg free
  1204  0011D0  5022               	movf	?_strlen,w,c
  1205  0011D2  5C28               	subwf	clearBuffer@i,w,c
  1206  0011D4  5023               	movf	?_strlen+1,w,c
  1207  0011D6  5829               	subwfb	clearBuffer@i+1,w,c
  1208  0011D8  A0D8               	btfss	status,0,c
  1209  0011DA  D7EA               	goto	l1076
  1210                           
  1211                           ;bufferhandler.c: 37: }
  1212                           ;bufferhandler.c: 38: tmpString[0] = '\0';
  1213  0011DC  0E00               	movlw	0
  1214  0011DE  0100               	movlb	0	; () banked
  1215  0011E0  6FA6               	movwf	_tmpString& (0+255),b
  1216                           
  1217                           ;bufferhandler.c: 39: index = 0;
  1218  0011E2  0E00               	movlw	0
  1219  0011E4  6E37               	movwf	_index+1,c
  1220  0011E6  0E00               	movlw	0
  1221  0011E8  6E36               	movwf	_index,c
  1222                           
  1223                           ; BSR set to: 0
  1224  0011EA  0012               	return		;funcret
  1225  0011EC                     __end_of_clearBuffer:
  1226                           	opt stack 0
  1227                           tblptru	equ	0xFF8
  1228                           tblptrh	equ	0xFF7
  1229                           tblptrl	equ	0xFF6
  1230                           tablat	equ	0xFF5
  1231                           indf0	equ	0xFEF
  1232                           postinc0	equ	0xFEE
  1233                           fsr0h	equ	0xFEA
  1234                           fsr0l	equ	0xFE9
  1235                           wreg	equ	0xFE8
  1236                           indf1	equ	0xFE7
  1237                           fsr1h	equ	0xFE2
  1238                           fsr1l	equ	0xFE1
  1239                           indf2	equ	0xFDF
  1240                           fsr2h	equ	0xFDA
  1241                           fsr2l	equ	0xFD9
  1242                           status	equ	0xFD8
  1243                           
  1244 ;; *************** function _strlen *****************
  1245 ;; Defined at:
  1246 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;  s               2   33[COMRAM] PTR const unsigned char 
  1249 ;;		 -> realString(70), tmpString(70), STR_2(4), STR_1(5), 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;  cp              2   37[COMRAM] PTR const unsigned char 
  1252 ;;		 -> realString(70), tmpString(70), STR_2(4), STR_1(5), 
  1253 ;; Return value:  Size  Location     Type
  1254 ;;                  2   33[COMRAM] unsigned int 
  1255 ;; Registers used:
  1256 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  1257 ;; Tracked objects:
  1258 ;;		On entry : 0/0
  1259 ;;		On exit  : 0/0
  1260 ;;		Unchanged: 0/0
  1261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1262 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1263 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1264 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1265 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1266 ;;Total ram usage:        6 bytes
  1267 ;; Hardware stack levels used:    1
  1268 ;; Hardware stack levels required when called:    3
  1269 ;; This function calls:
  1270 ;;		Nothing
  1271 ;; This function is called by:
  1272 ;;		_writeString
  1273 ;;		_clearBuffer
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           	psect	text10
  1278  001152                     __ptext10:
  1279                           	opt stack 0
  1280  001152                     _strlen:
  1281                           	opt stack 26
  1282                           
  1283                           ; BSR set to: 0
  1284                           ;incstack = 0
  1285  001152  C022  F026         	movff	strlen@s,strlen@cp
  1286  001156  C023  F027         	movff	strlen@s+1,strlen@cp+1
  1287  00115A  D002               	goto	l1022
  1288  00115C                     l1020:
  1289  00115C  4A26               	infsnz	strlen@cp,f,c
  1290  00115E  2A27               	incf	strlen@cp+1,f,c
  1291  001160                     l1022:
  1292  001160  C026  FFF6         	movff	strlen@cp,tblptrl
  1293  001164  C027  FFF7         	movff	strlen@cp+1,tblptrh
  1294  001168  0E00               	movlw	low (__smallconst shr (0+16))
  1295  00116A  6EF8               	movwf	tblptru,c
  1296  00116C  0E0E               	movlw	(high __ramtop+-1)
  1297  00116E  64F7               	cpfsgt	tblptrh,c
  1298  001170  D003               	bra	u337
  1299  001172  0008               	tblrd		*
  1300  001174  50F5               	movf	tablat,w,c
  1301  001176  D005               	bra	u330
  1302  001178                     u337:
  1303  001178  CFF6 FFE9          	movff	tblptrl,fsr0l
  1304  00117C  CFF7 FFEA          	movff	tblptrh,fsr0h
  1305  001180  50EF               	movf	indf0,w,c
  1306  001182                     u330:
  1307  001182  0900               	iorlw	0
  1308  001184  A4D8               	btfss	status,2,c
  1309  001186  D7EA               	goto	l1020
  1310  001188  C022  F024         	movff	strlen@s,??_strlen
  1311  00118C  C023  F025         	movff	strlen@s+1,??_strlen+1
  1312  001190  1E24               	comf	??_strlen,f,c
  1313  001192  1E25               	comf	??_strlen+1,f,c
  1314  001194  4A24               	infsnz	??_strlen,f,c
  1315  001196  2A25               	incf	??_strlen+1,f,c
  1316  001198  5026               	movf	strlen@cp,w,c
  1317  00119A  2424               	addwf	??_strlen,w,c
  1318  00119C  6E22               	movwf	?_strlen,c
  1319  00119E  5027               	movf	strlen@cp+1,w,c
  1320  0011A0  2025               	addwfc	??_strlen+1,w,c
  1321  0011A2  6E23               	movwf	?_strlen+1,c
  1322  0011A4  0012               	return	
  1323  0011A6                     __end_of_strlen:
  1324                           	opt stack 0
  1325                           tblptru	equ	0xFF8
  1326                           tblptrh	equ	0xFF7
  1327                           tblptrl	equ	0xFF6
  1328                           tablat	equ	0xFF5
  1329                           indf0	equ	0xFEF
  1330                           postinc0	equ	0xFEE
  1331                           fsr0h	equ	0xFEA
  1332                           fsr0l	equ	0xFE9
  1333                           wreg	equ	0xFE8
  1334                           indf1	equ	0xFE7
  1335                           fsr1h	equ	0xFE2
  1336                           fsr1l	equ	0xFE1
  1337                           indf2	equ	0xFDF
  1338                           fsr2h	equ	0xFDA
  1339                           fsr2l	equ	0xFD9
  1340                           status	equ	0xFD8
  1341                           
  1342 ;; *************** function _UART_Init *****************
  1343 ;; Defined at:
  1344 ;;		line 31 in file "uart.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  baudrate        4   33[COMRAM] const long 
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;		None
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  1    wreg      unsigned char 
  1351 ;; Registers used:
  1352 ;;		wreg, status,2
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1358 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1361 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1362 ;;Total ram usage:        4 bytes
  1363 ;; Hardware stack levels used:    1
  1364 ;; Hardware stack levels required when called:    3
  1365 ;; This function calls:
  1366 ;;		Nothing
  1367 ;; This function is called by:
  1368 ;;		_main
  1369 ;; This function uses a non-reentrant model
  1370 ;;
  1371                           
  1372                           	psect	text11
  1373  00126A                     __ptext11:
  1374                           	opt stack 0
  1375  00126A                     _UART_Init:
  1376                           	opt stack 27
  1377                           
  1378                           ;uart.c: 35: TXSTA1 = 0x24;
  1379                           
  1380                           ;incstack = 0
  1381  00126A  0E24               	movlw	36
  1382  00126C  6EAD               	movwf	4013,c	;volatile
  1383                           
  1384                           ;uart.c: 36: RCSTA1 = 0x90;
  1385  00126E  0E90               	movlw	144
  1386  001270  6EAC               	movwf	4012,c	;volatile
  1387                           
  1388                           ;uart.c: 37: RC1IE = 1;
  1389  001272  8A9D               	bsf	3997,5,c	;volatile
  1390                           
  1391                           ;uart.c: 38: BAUDCON1bits.BRG16 = 0;
  1392  001274  967E               	bcf	3966,3,c	;volatile
  1393                           
  1394                           ;uart.c: 39: SPBRG1 = 155;
  1395  001276  0E9B               	movlw	155
  1396  001278  6EB0               	movwf	4016,c	;volatile
  1397                           
  1398                           ;uart.c: 40: SPBRGH1 = 155;
  1399  00127A  0E9B               	movlw	155
  1400  00127C  6E7F               	movwf	3967,c	;volatile
  1401                           
  1402                           ;uart.c: 41: TRISC7 = 1;
  1403  00127E  8E94               	bsf	3988,7,c	;volatile
  1404                           
  1405                           ;uart.c: 42: TRISC6 = 0;
  1406  001280  9C94               	bcf	3988,6,c	;volatile
  1407                           
  1408                           ;uart.c: 46: RCSTA2 = 0b10010000;
  1409  001282  0E90               	movlw	144
  1410  001284  6E9C               	movwf	3996,c	;volatile
  1411                           
  1412                           ;uart.c: 47: TXSTA2 = 0b00100100;
  1413  001286  0E24               	movlw	36
  1414  001288  6EA8               	movwf	4008,c	;volatile
  1415                           
  1416                           ;uart.c: 48: RC2IE = 1;
  1417  00128A  8AA3               	bsf	4003,5,c	;volatile
  1418                           
  1419                           ;uart.c: 49: BAUDCON2bits.BRG16 = 0;
  1420  00128C  967C               	bcf	3964,3,c	;volatile
  1421                           
  1422                           ;uart.c: 50: SPBRG2 = 25;
  1423  00128E  0E19               	movlw	25
  1424  001290  6EAB               	movwf	4011,c	;volatile
  1425                           
  1426                           ;uart.c: 51: SPBRGH2 = 25;
  1427  001292  0E19               	movlw	25
  1428  001294  6E7D               	movwf	3965,c	;volatile
  1429                           
  1430                           ;uart.c: 52: TRISB4 = 1;
  1431  001296  8893               	bsf	3987,4,c	;volatile
  1432                           
  1433                           ;uart.c: 53: TRISB5 = 0;
  1434  001298  9A93               	bcf	3987,5,c	;volatile
  1435  00129A  0012               	return	
  1436  00129C                     __end_of_UART_Init:
  1437                           	opt stack 0
  1438                           tblptru	equ	0xFF8
  1439                           tblptrh	equ	0xFF7
  1440                           tblptrl	equ	0xFF6
  1441                           tablat	equ	0xFF5
  1442                           indf0	equ	0xFEF
  1443                           postinc0	equ	0xFEE
  1444                           fsr0h	equ	0xFEA
  1445                           fsr0l	equ	0xFE9
  1446                           wreg	equ	0xFE8
  1447                           indf1	equ	0xFE7
  1448                           fsr1h	equ	0xFE2
  1449                           fsr1l	equ	0xFE1
  1450                           indf2	equ	0xFDF
  1451                           fsr2h	equ	0xFDA
  1452                           fsr2l	equ	0xFD9
  1453                           status	equ	0xFD8
  1454                           
  1455 ;; *************** function _InitApp *****************
  1456 ;; Defined at:
  1457 ;;		line 29 in file "user.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;		None
  1460 ;; Auto vars:     Size  Location     Type
  1461 ;;		None
  1462 ;; Return value:  Size  Location     Type
  1463 ;;                  1    wreg      void 
  1464 ;; Registers used:
  1465 ;;		wreg, status,2
  1466 ;; Tracked objects:
  1467 ;;		On entry : 0/0
  1468 ;;		On exit  : 0/0
  1469 ;;		Unchanged: 0/0
  1470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1475 ;;Total ram usage:        0 bytes
  1476 ;; Hardware stack levels used:    1
  1477 ;; Hardware stack levels required when called:    3
  1478 ;; This function calls:
  1479 ;;		Nothing
  1480 ;; This function is called by:
  1481 ;;		_main
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           	psect	text12
  1486  0012E2                     __ptext12:
  1487                           	opt stack 0
  1488  0012E2                     _InitApp:
  1489                           	opt stack 27
  1490                           
  1491                           ;user.c: 33: PPSCON = 0b00000000;
  1492                           
  1493                           ;incstack = 0
  1494  0012E2  0E00               	movlw	0
  1495  0012E4  010E               	movlb	14	; () banked
  1496  0012E6  6FBF               	movwf	191,b	;volatile
  1497                           
  1498                           ;user.c: 34: RPOR8 = 0b00000110;
  1499  0012E8  0E06               	movlw	6
  1500  0012EA  010E               	movlb	14	; () banked
  1501  0012EC  6FC8               	movwf	200,b	;volatile
  1502                           
  1503                           ;user.c: 35: RPINR16 = 0b00000111;
  1504  0012EE  0E07               	movlw	7
  1505  0012F0  010E               	movlb	14	; () banked
  1506  0012F2  6FF7               	movwf	247,b	;volatile
  1507                           
  1508                           ;user.c: 36: PPSCON = 0b00000001;
  1509  0012F4  0E01               	movlw	1
  1510  0012F6  010E               	movlb	14	; () banked
  1511  0012F8  6FBF               	movwf	191,b	;volatile
  1512                           
  1513                           ;user.c: 39: INTCON = 0xC0;
  1514  0012FA  0EC0               	movlw	192
  1515  0012FC  6EF2               	movwf	intcon,c	;volatile
  1516                           
  1517                           ; BSR set to: 14
  1518  0012FE  0012               	return		;funcret
  1519  001300                     __end_of_InitApp:
  1520                           	opt stack 0
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           intcon	equ	0xFF2
  1526                           indf0	equ	0xFEF
  1527                           postinc0	equ	0xFEE
  1528                           fsr0h	equ	0xFEA
  1529                           fsr0l	equ	0xFE9
  1530                           wreg	equ	0xFE8
  1531                           indf1	equ	0xFE7
  1532                           fsr1h	equ	0xFE2
  1533                           fsr1l	equ	0xFE1
  1534                           indf2	equ	0xFDF
  1535                           fsr2h	equ	0xFDA
  1536                           fsr2l	equ	0xFD9
  1537                           status	equ	0xFD8
  1538                           
  1539 ;; *************** function _ConfigureOscillator *****************
  1540 ;; Defined at:
  1541 ;;		line 24 in file "system.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;		None
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;		None
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      void 
  1548 ;; Registers used:
  1549 ;;		wreg, status,2
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1559 ;;Total ram usage:        0 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    3
  1562 ;; This function calls:
  1563 ;;		Nothing
  1564 ;; This function is called by:
  1565 ;;		_main
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           	psect	text13
  1570  001346                     __ptext13:
  1571                           	opt stack 0
  1572  001346                     _ConfigureOscillator:
  1573                           	opt stack 27
  1574                           
  1575                           ;system.c: 26: OSCCONbits.IRCF = 0b110;
  1576                           
  1577                           ; BSR set to: 14
  1578                           ;incstack = 0
  1579  001346  50D3               	movf	4051,w,c	;volatile
  1580  001348  0B8F               	andlw	-113
  1581  00134A  0960               	iorlw	96
  1582  00134C  6ED3               	movwf	4051,c	;volatile
  1583                           
  1584                           ;system.c: 27: OSCTUNEbits.PLLEN = 0b1;
  1585  00134E  8C9B               	bsf	3995,6,c	;volatile
  1586  001350  0012               	return		;funcret
  1587  001352                     __end_of_ConfigureOscillator:
  1588                           	opt stack 0
  1589                           tblptru	equ	0xFF8
  1590                           tblptrh	equ	0xFF7
  1591                           tblptrl	equ	0xFF6
  1592                           tablat	equ	0xFF5
  1593                           intcon	equ	0xFF2
  1594                           indf0	equ	0xFEF
  1595                           postinc0	equ	0xFEE
  1596                           fsr0h	equ	0xFEA
  1597                           fsr0l	equ	0xFE9
  1598                           wreg	equ	0xFE8
  1599                           indf1	equ	0xFE7
  1600                           fsr1h	equ	0xFE2
  1601                           fsr1l	equ	0xFE1
  1602                           indf2	equ	0xFDF
  1603                           fsr2h	equ	0xFDA
  1604                           fsr2l	equ	0xFD9
  1605                           status	equ	0xFD8
  1606                           
  1607 ;; *************** function _low_isr *****************
  1608 ;; Defined at:
  1609 ;;		line 66 in file "interrupts.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;		None
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;		None
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      void 
  1616 ;; Registers used:
  1617 ;;		None
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1625 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1626 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1627 ;;Total ram usage:       17 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; Hardware stack levels required when called:    2
  1630 ;; This function calls:
  1631 ;;		Nothing
  1632 ;; This function is called by:
  1633 ;;		Interrupt level 1
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           	psect	intcodelo
  1638  000018                     __pintcodelo:
  1639                           	opt stack 0
  1640  000018                     _low_isr:
  1641                           	opt stack 25
  1642                           
  1643                           ;incstack = 0
  1644  000018  8038               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1645  00001A  CFD8 F011          	movff	status,??_low_isr
  1646  00001E  CFE8 F012          	movff	wreg,??_low_isr+1
  1647  000022  CFE0 F013          	movff	bsr,??_low_isr+2
  1648  000026  CFFA F014          	movff	pclath,??_low_isr+3
  1649  00002A  CFFB F015          	movff	pclatu,??_low_isr+4
  1650  00002E  CFE9 F016          	movff	fsr0l,??_low_isr+5
  1651  000032  CFEA F017          	movff	fsr0h,??_low_isr+6
  1652  000036  CFE1 F018          	movff	fsr1l,??_low_isr+7
  1653  00003A  CFE2 F019          	movff	fsr1h,??_low_isr+8
  1654  00003E  CFD9 F01A          	movff	fsr2l,??_low_isr+9
  1655  000042  CFDA F01B          	movff	fsr2h,??_low_isr+10
  1656  000046  CFF3 F01C          	movff	prodl,??_low_isr+11
  1657  00004A  CFF4 F01D          	movff	prodh,??_low_isr+12
  1658  00004E  CFF6 F01E          	movff	tblptrl,??_low_isr+13
  1659  000052  CFF7 F01F          	movff	tblptrh,??_low_isr+14
  1660  000056  CFF8 F020          	movff	tblptru,??_low_isr+15
  1661  00005A  CFF5 F021          	movff	tablat,??_low_isr+16
  1662  00005E  C021  FFF5         	movff	??_low_isr+16,tablat
  1663  000062  C020  FFF8         	movff	??_low_isr+15,tblptru
  1664  000066  C01F  FFF7         	movff	??_low_isr+14,tblptrh
  1665  00006A  C01E  FFF6         	movff	??_low_isr+13,tblptrl
  1666  00006E  C01D  FFF4         	movff	??_low_isr+12,prodh
  1667  000072  C01C  FFF3         	movff	??_low_isr+11,prodl
  1668  000076  C01B  FFDA         	movff	??_low_isr+10,fsr2h
  1669  00007A  C01A  FFD9         	movff	??_low_isr+9,fsr2l
  1670  00007E  C019  FFE2         	movff	??_low_isr+8,fsr1h
  1671  000082  C018  FFE1         	movff	??_low_isr+7,fsr1l
  1672  000086  C017  FFEA         	movff	??_low_isr+6,fsr0h
  1673  00008A  C016  FFE9         	movff	??_low_isr+5,fsr0l
  1674  00008E  C015  FFFB         	movff	??_low_isr+4,pclatu
  1675  000092  C014  FFFA         	movff	??_low_isr+3,pclath
  1676  000096  C013  FFE0         	movff	??_low_isr+2,bsr
  1677  00009A  C012  FFE8         	movff	??_low_isr+1,wreg
  1678  00009E  C011  FFD8         	movff	??_low_isr,status
  1679  0000A2  9038               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1680  0000A4  0010               	retfie	
  1681  0000A6                     __end_of_low_isr:
  1682                           	opt stack 0
  1683                           pclatu	equ	0xFFB
  1684                           pclath	equ	0xFFA
  1685                           tblptru	equ	0xFF8
  1686                           tblptrh	equ	0xFF7
  1687                           tblptrl	equ	0xFF6
  1688                           tablat	equ	0xFF5
  1689                           prodh	equ	0xFF4
  1690                           prodl	equ	0xFF3
  1691                           intcon	equ	0xFF2
  1692                           indf0	equ	0xFEF
  1693                           postinc0	equ	0xFEE
  1694                           fsr0h	equ	0xFEA
  1695                           fsr0l	equ	0xFE9
  1696                           wreg	equ	0xFE8
  1697                           indf1	equ	0xFE7
  1698                           fsr1h	equ	0xFE2
  1699                           fsr1l	equ	0xFE1
  1700                           bsr	equ	0xFE0
  1701                           indf2	equ	0xFDF
  1702                           fsr2h	equ	0xFDA
  1703                           fsr2l	equ	0xFD9
  1704                           status	equ	0xFD8
  1705                           
  1706 ;; *************** function _high_isr *****************
  1707 ;; Defined at:
  1708 ;;		line 30 in file "interrupts.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;		None
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;		None
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      void 
  1715 ;; Registers used:
  1716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1724 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1725 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1726 ;;Total ram usage:       15 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    1
  1729 ;; This function calls:
  1730 ;;		_appendChar
  1731 ;; This function is called by:
  1732 ;;		Interrupt level 2
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	intcode
  1737  000008                     __pintcode:
  1738                           	opt stack 0
  1739  000008                     _high_isr:
  1740                           	opt stack 25
  1741                           
  1742                           ;incstack = 0
  1743  000008  8238               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1744  00000A  EFD7  F007         	goto	int_func
  1745                           pclatu	equ	0xFFB
  1746                           pclath	equ	0xFFA
  1747                           tblptru	equ	0xFF8
  1748                           tblptrh	equ	0xFF7
  1749                           tblptrl	equ	0xFF6
  1750                           tablat	equ	0xFF5
  1751                           prodh	equ	0xFF4
  1752                           prodl	equ	0xFF3
  1753                           intcon	equ	0xFF2
  1754                           indf0	equ	0xFEF
  1755                           postinc0	equ	0xFEE
  1756                           fsr0h	equ	0xFEA
  1757                           fsr0l	equ	0xFE9
  1758                           wreg	equ	0xFE8
  1759                           indf1	equ	0xFE7
  1760                           fsr1h	equ	0xFE2
  1761                           fsr1l	equ	0xFE1
  1762                           bsr	equ	0xFE0
  1763                           indf2	equ	0xFDF
  1764                           fsr2h	equ	0xFDA
  1765                           fsr2l	equ	0xFD9
  1766                           status	equ	0xFD8
  1767                           
  1768                           	psect	intcode_body
  1769  000FAE                     __pintcode_body:
  1770                           	opt stack 25
  1771  000FAE                     int_func:
  1772                           	opt stack 25
  1773  000FAE  CFFA F003          	movff	pclath,??_high_isr+1
  1774  000FB2  CFFB F004          	movff	pclatu,??_high_isr+2
  1775  000FB6  CFE9 F005          	movff	fsr0l,??_high_isr+3
  1776  000FBA  CFEA F006          	movff	fsr0h,??_high_isr+4
  1777  000FBE  CFE1 F007          	movff	fsr1l,??_high_isr+5
  1778  000FC2  CFE2 F008          	movff	fsr1h,??_high_isr+6
  1779  000FC6  CFD9 F009          	movff	fsr2l,??_high_isr+7
  1780  000FCA  CFDA F00A          	movff	fsr2h,??_high_isr+8
  1781  000FCE  CFF3 F00B          	movff	prodl,??_high_isr+9
  1782  000FD2  CFF4 F00C          	movff	prodh,??_high_isr+10
  1783  000FD6  CFF6 F00D          	movff	tblptrl,??_high_isr+11
  1784  000FDA  CFF7 F00E          	movff	tblptrh,??_high_isr+12
  1785  000FDE  CFF8 F00F          	movff	tblptru,??_high_isr+13
  1786  000FE2  CFF5 F010          	movff	tablat,??_high_isr+14
  1787                           
  1788                           ;interrupts.c: 45: if(RC1IF){
  1789  000FE6  AA9E               	btfss	3998,5,c	;volatile
  1790  000FE8  D00F               	goto	i2l1120
  1791                           
  1792                           ;interrupts.c: 46: LATAbits.LATA0 = !LATAbits.LATA0;
  1793  000FEA  B089               	btfsc	3977,0,c	;volatile
  1794  000FEC  D003               	goto	i2u48_40
  1795  000FEE  6A02               	clrf	??_high_isr& (0+255),c
  1796  000FF0  2A02               	incf	??_high_isr& (0+255),f,c
  1797  000FF2  D001               	goto	i2u49_48
  1798  000FF4                     i2u48_40:
  1799  000FF4  6A02               	clrf	??_high_isr& (0+255),c
  1800  000FF6                     i2u49_48:
  1801  000FF6  5089               	movf	3977,w,c	;volatile
  1802  000FF8  1802               	xorwf	??_high_isr,w,c
  1803  000FFA  0BFE               	andlw	-2
  1804  000FFC  1802               	xorwf	??_high_isr,w,c
  1805  000FFE  6E89               	movwf	3977,c	;volatile
  1806                           
  1807                           ;interrupts.c: 47: appendChar(RCREG1);
  1808  001000  50AF               	movf	4015,w,c	;volatile
  1809  001002  EC8E  F009         	call	_appendChar
  1810                           
  1811                           ;interrupts.c: 49: RC1IF = 0;
  1812  001006  9A9E               	bcf	3998,5,c	;volatile
  1813  001008                     i2l1120:
  1814                           
  1815                           ;interrupts.c: 50: }
  1816                           ;interrupts.c: 52: if(RC2IF){
  1817  001008  BAA4               	btfsc	4004,5,c	;volatile
  1818                           
  1819                           ;interrupts.c: 57: RC2IF = 0;
  1820  00100A  9AA4               	bcf	4004,5,c	;volatile
  1821  00100C  C010  FFF5         	movff	??_high_isr+14,tablat
  1822  001010  C00F  FFF8         	movff	??_high_isr+13,tblptru
  1823  001014  C00E  FFF7         	movff	??_high_isr+12,tblptrh
  1824  001018  C00D  FFF6         	movff	??_high_isr+11,tblptrl
  1825  00101C  C00C  FFF4         	movff	??_high_isr+10,prodh
  1826  001020  C00B  FFF3         	movff	??_high_isr+9,prodl
  1827  001024  C00A  FFDA         	movff	??_high_isr+8,fsr2h
  1828  001028  C009  FFD9         	movff	??_high_isr+7,fsr2l
  1829  00102C  C008  FFE2         	movff	??_high_isr+6,fsr1h
  1830  001030  C007  FFE1         	movff	??_high_isr+5,fsr1l
  1831  001034  C006  FFEA         	movff	??_high_isr+4,fsr0h
  1832  001038  C005  FFE9         	movff	??_high_isr+3,fsr0l
  1833  00103C  C004  FFFB         	movff	??_high_isr+2,pclatu
  1834  001040  C003  FFFA         	movff	??_high_isr+1,pclath
  1835  001044  9238               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1836  001046  0011               	retfie		f
  1837  001048                     __end_of_high_isr:
  1838                           	opt stack 0
  1839                           pclatu	equ	0xFFB
  1840                           pclath	equ	0xFFA
  1841                           tblptru	equ	0xFF8
  1842                           tblptrh	equ	0xFF7
  1843                           tblptrl	equ	0xFF6
  1844                           tablat	equ	0xFF5
  1845                           prodh	equ	0xFF4
  1846                           prodl	equ	0xFF3
  1847                           intcon	equ	0xFF2
  1848                           indf0	equ	0xFEF
  1849                           postinc0	equ	0xFEE
  1850                           fsr0h	equ	0xFEA
  1851                           fsr0l	equ	0xFE9
  1852                           wreg	equ	0xFE8
  1853                           indf1	equ	0xFE7
  1854                           fsr1h	equ	0xFE2
  1855                           fsr1l	equ	0xFE1
  1856                           bsr	equ	0xFE0
  1857                           indf2	equ	0xFDF
  1858                           fsr2h	equ	0xFDA
  1859                           fsr2l	equ	0xFD9
  1860                           status	equ	0xFD8
  1861                           
  1862 ;; *************** function _appendChar *****************
  1863 ;; Defined at:
  1864 ;;		line 23 in file "bufferhandler.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;  data            1    wreg     unsigned char 
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;  data            1    0[COMRAM] unsigned char 
  1869 ;; Return value:  Size  Location     Type
  1870 ;;                  1    wreg      void 
  1871 ;; Registers used:
  1872 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1873 ;; Tracked objects:
  1874 ;;		On entry : 0/0
  1875 ;;		On exit  : 0/0
  1876 ;;		Unchanged: 0/0
  1877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1881 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1882 ;;Total ram usage:        1 bytes
  1883 ;; Hardware stack levels used:    1
  1884 ;; This function calls:
  1885 ;;		Nothing
  1886 ;; This function is called by:
  1887 ;;		_high_isr
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891                           	psect	text16
  1892  00131C                     __ptext16:
  1893                           	opt stack 0
  1894  00131C                     _appendChar:
  1895                           	opt stack 25
  1896                           
  1897                           ;incstack = 0
  1898                           ;appendChar@data stored from wreg
  1899  00131C  6E01               	movwf	appendChar@data,c
  1900                           
  1901                           ;bufferhandler.c: 24: tmpString[index] = data;
  1902  00131E  0EA6               	movlw	low _tmpString
  1903  001320  2436               	addwf	_index,w,c
  1904  001322  6ED9               	movwf	fsr2l,c
  1905  001324  0E00               	movlw	high _tmpString
  1906  001326  2037               	addwfc	_index+1,w,c
  1907  001328  6EDA               	movwf	fsr2h,c
  1908  00132A  C001  FFDF         	movff	appendChar@data,indf2
  1909                           
  1910                           ;bufferhandler.c: 25: index++;
  1911  00132E  4A36               	infsnz	_index,f,c
  1912  001330  2A37               	incf	_index+1,f,c
  1913  001332  0012               	return		;funcret
  1914  001334                     __end_of_appendChar:
  1915                           	opt stack 0
  1916                           pclatu	equ	0xFFB
  1917                           pclath	equ	0xFFA
  1918                           tblptru	equ	0xFF8
  1919                           tblptrh	equ	0xFF7
  1920                           tblptrl	equ	0xFF6
  1921                           tablat	equ	0xFF5
  1922                           prodh	equ	0xFF4
  1923                           prodl	equ	0xFF3
  1924                           intcon	equ	0xFF2
  1925                           indf0	equ	0xFEF
  1926                           postinc0	equ	0xFEE
  1927                           fsr0h	equ	0xFEA
  1928                           fsr0l	equ	0xFE9
  1929                           wreg	equ	0xFE8
  1930                           indf1	equ	0xFE7
  1931                           fsr1h	equ	0xFE2
  1932                           fsr1l	equ	0xFE1
  1933                           bsr	equ	0xFE0
  1934                           indf2	equ	0xFDF
  1935                           fsr2h	equ	0xFDA
  1936                           fsr2l	equ	0xFD9
  1937                           status	equ	0xFD8
  1938                           pclatu	equ	0xFFB
  1939                           pclath	equ	0xFFA
  1940                           tblptru	equ	0xFF8
  1941                           tblptrh	equ	0xFF7
  1942                           tblptrl	equ	0xFF6
  1943                           tablat	equ	0xFF5
  1944                           prodh	equ	0xFF4
  1945                           prodl	equ	0xFF3
  1946                           intcon	equ	0xFF2
  1947                           indf0	equ	0xFEF
  1948                           postinc0	equ	0xFEE
  1949                           fsr0h	equ	0xFEA
  1950                           fsr0l	equ	0xFE9
  1951                           wreg	equ	0xFE8
  1952                           indf1	equ	0xFE7
  1953                           fsr1h	equ	0xFE2
  1954                           fsr1l	equ	0xFE1
  1955                           bsr	equ	0xFE0
  1956                           indf2	equ	0xFDF
  1957                           fsr2h	equ	0xFDA
  1958                           fsr2l	equ	0xFD9
  1959                           status	equ	0xFD8
  1960                           
  1961                           	psect	rparam
  1962  0000                     pclatu	equ	0xFFB
  1963                           pclath	equ	0xFFA
  1964                           tblptru	equ	0xFF8
  1965                           tblptrh	equ	0xFF7
  1966                           tblptrl	equ	0xFF6
  1967                           tablat	equ	0xFF5
  1968                           prodh	equ	0xFF4
  1969                           prodl	equ	0xFF3
  1970                           intcon	equ	0xFF2
  1971                           indf0	equ	0xFEF
  1972                           postinc0	equ	0xFEE
  1973                           fsr0h	equ	0xFEA
  1974                           fsr0l	equ	0xFE9
  1975                           wreg	equ	0xFE8
  1976                           indf1	equ	0xFE7
  1977                           fsr1h	equ	0xFE2
  1978                           fsr1l	equ	0xFE1
  1979                           bsr	equ	0xFE0
  1980                           indf2	equ	0xFDF
  1981                           fsr2h	equ	0xFDA
  1982                           fsr2l	equ	0xFD9
  1983                           status	equ	0xFD8
  1984                           
  1985                           	psect	temp
  1986  000038                     btemp:
  1987                           	opt stack 0
  1988  000038                     	ds	1
  1989  0000                     int$flags	set	btemp
  1990                           pclatu	equ	0xFFB
  1991                           pclath	equ	0xFFA
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           tblptrl	equ	0xFF6
  1995                           tablat	equ	0xFF5
  1996                           prodh	equ	0xFF4
  1997                           prodl	equ	0xFF3
  1998                           intcon	equ	0xFF2
  1999                           indf0	equ	0xFEF
  2000                           postinc0	equ	0xFEE
  2001                           fsr0h	equ	0xFEA
  2002                           fsr0l	equ	0xFE9
  2003                           wreg	equ	0xFE8
  2004                           indf1	equ	0xFE7
  2005                           fsr1h	equ	0xFE2
  2006                           fsr1l	equ	0xFE1
  2007                           bsr	equ	0xFE0
  2008                           indf2	equ	0xFDF
  2009                           fsr2h	equ	0xFDA
  2010                           fsr2l	equ	0xFD9
  2011                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    0
    Data        0
    BSS         146
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      55
    BANK0           160      0     140
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 70
		 -> realString(BANK0[70]), tmpString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 70
		 -> realString(BANK0[70]), tmpString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 

    writeString@str	PTR unsigned char  size(2) Largest target is 70
		 -> realString(BANK0[70]), STR_2(CODE[4]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_writeResult
    _writeResult->_wait_ms
    _writeString->_strlen
    _wait_ms->___lmul
    _clearBuffer->_strlen

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_appendChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3589
                                             48 COMRAM     1     1      0
                _ConfigureOscillator
                            _InitApp
                          _UART_Init
                         _UART_Write
                        _clearBuffer
                      _copyTmpBuffer
                     _isItLongEnough
                            _isValid
                            _wait_ms
                        _writeResult
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeResult                                          1     1      0    1466
                                             47 COMRAM     1     1      0
                            _wait_ms
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeString                                          7     4      3     972
                                             39 COMRAM     7     4      3
                         _UART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           2     1      1     258
                                             33 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _wait_ms                                              2     0      2     472
                                             45 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     322
                                             33 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _isValid                                              1     1      0      24
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _isItLongEnough                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _copyTmpBuffer                                        3     3      0      68
                                             33 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _clearBuffer                                          2     2      0     264
                                             39 COMRAM     2     2      0
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     218
                                             33 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4      64
                                             33 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                             16 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            15    15      0      22
                                              1 COMRAM    15    15      0
                         _appendChar
 ---------------------------------------------------------------------------------
 (6) _appendChar                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _UART_Init
   _UART_Write
   _clearBuffer
     _strlen
   _copyTmpBuffer
   _isItLongEnough
   _isValid
   _wait_ms
     ___lmul
   _writeResult
     _wait_ms
       ___lmul
     _writeString
       _UART_Write
       _strlen
   _writeString
     _UART_Write
     _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)
   _appendChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      8C       5       87.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      37       1       58.5%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C3       6        0.0%
DATA                 0      0      C3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Apr 02 13:49:03 2017

                          l52 0FA0                            l71 10EE                            l55 0FA2  
              writeResult@dev 0030                            bsr 000FE0                  __CFG_CP0$OFF 000000  
                         l214 1266                           l144 1308                           l148 1312  
                         u120 1342                           u330 1182                           u337 1178  
                         u370 1084                           u377 107A                           wreg 000FE8  
                  _TXSTA1bits 000FAD                  __CFG_IESO$ON 000000                    _TXSTA2bits 000FA8  
                        l1020 115C                          l1022 1160                          l1102 11F6  
                        l1030 110C                          l1040 1052                          l1106 1216  
                        l1034 1120                          l1044 108C                          l1080 11C4  
                        l1048 10DE                          l1160 0F9A                          l1076 11B0  
                        l1148 0F6E            __CFG_WPFP$PAGE_127 000000                 _copyTmpBuffer 11EC  
                        STR_1 0F01                          STR_2 0F06                          STR_3 0F05  
                        _RCIF 007CF5                 __CFG_FCMEN$ON 000000                          _main 0F0C  
                        fsr0h 000FEA                          fsr1h 000FE2                          indf0 000FEF  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf1 000FE7  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 0038                          prodh 000FF4                          prodl 000FF3  
                        start 00A6                writeString@dev 002A                  ___param_bank 000000  
              writeString@str 0028               __end_of_InitApp 1300                 __CFG_PLLDIV$1 000000  
                _BAUDCON1bits 000F7E                  _BAUDCON2bits 000F7C                         ?_main 0001  
                       _RC1IE 007CED                         _RC1IF 007CF5                         _RC2IE 007D1D  
                       _RC2IF 007D25                   _writeResult 12C2                         _RPOR8 000EC8  
         _ConfigureOscillator 1346                   _writeString 1048           ___lmul@multiplicand 0026  
            ??_isItLongEnough 0022                   ?_UART_Write 0022            __size_of_UART_Init 0032  
             __end_of_isValid 126A                         _index 0036                ?_copyTmpBuffer 0001  
              __CFG_CLKOEC$ON 000000               __end_of_low_isr 00A6                         pclath 000FFA  
                       tablat 000FF5               __end_of_wait_ms 10FC                         status 000FD8  
        ?_ConfigureOscillator 0001          __size_of_clearBuffer 0046       __CFG_DSWDTOSC$INTOSCREF 000000  
             __initialization 129C                  __end_of_main 0FAE                        ??_main 0031  
               __activetblptr 000002                        i2l1120 1008                __CFG_WDTEN$OFF 000000  
                      _INTCON 000FF2                        _RCREG1 000FAF                        _RCREG2 000FAA  
                      _RCSTA1 000FAC                        _RCSTA2 000F9C                        _SPBRG1 000FB0  
                      _SPBRG2 000FAB                        _PPSCON 000EBF                        _TRISB4 007C9C  
                      _TRISB5 007C9D                __CFG_WPCFG$OFF 000000                        _TRISC6 007CA6  
                      _TRISC7 007CA7                        _TXREG1 000FAE                        _TXREG2 000FA9  
                      _TXSTA1 000FAD                        _TXSTA2 000FA8                     ??_InitApp 0022  
       ??_ConfigureOscillator 0022                __CFG_WPDIS$OFF 000000                __CFG_XINST$OFF 000000  
           __end_of_UART_Init 129C              __end_of_high_isr 1048                        ___lmul 10FC  
         __size_of_UART_Write 001C                __CFG_STVREN$ON 000000                        clear_0 12A2  
                      _strlen 1152                     ??_isValid 0022                  __mediumconst 0000  
                   ??_low_isr 0011                        tblptrh 000FF7               ??_copyTmpBuffer 0022  
                      tblptrl 000FF6                        tblptru 000FF8                     ??_wait_ms 0030  
             __CFG_DSBOREN$ON 000000          __CFG_LS48MHZ$SYS48X8 000000                    __accesstop 0060  
     __end_of__initialization 12B4                 ___rparam_used 000001               __CFG_IOL1WAY$ON 000000  
        __CFG_WPEND$PAGE_WPFP 000000                __pcstackCOMRAM 0001               __CFG_DSWDTEN$ON 000000  
             __CFG_DSWDTPS$G2 000000               __CFG_OSC$INTOSC 000000                    __pbssBANK0 0060  
                     ?___lmul 0022                ___lmul@product 002A                    _appendChar 131C  
                     ?_strlen 0022                  ?_writeResult 0001                  ?_writeString 0028  
                ??_UART_Write 0023                       i2u48_40 0FF4                       i2u49_48 0FF6  
                     _SPBRGH1 000F7F                       _SPBRGH2 000F7D                       _RPINR16 000EF7  
                   ?_high_isr 0001                       _InitApp 12E2                       __Hparam 0000  
                     __Lparam 0000               __size_of___lmul 0056            __end_of_UART_Write 131C  
                __psmallconst 0F00                       __pcinit 129C                       __ramtop 0F00  
                     __ptext0 0F0C                       __ptext1 12C2                       __ptext2 1048  
                     __ptext3 1300                       __ptext4 10A6                       __ptext5 10FC  
                     __ptext6 122C                       __ptext7 1334                       __ptext8 11EC  
                     __ptext9 11A6                       _isValid 122C               __size_of_strlen 0054  
                  _realString 0060                       _low_isr 0018                       _wait_ms 10A6  
                     main@var 0031                    ??_high_isr 0002                __pintcode_body 0FAE  
        end_of_initialization 12B4                 ??_clearBuffer 0028                 __Lmediumconst 0000  
                     int_func 0FAE                       postinc0 000FEE                   wait_ms@time 002E  
                     strlen@s 0022                     _UART_Init 126A                     _PORTDbits 000F83  
                 ?_appendChar 0001                UART_Write@data 0023              __CFG_CPUDIV$OSC1 000000  
                   _TRISAbits 000F92                     _TRISDbits 000F95             __CFG_SOSCSEL$HIGH 000000  
 __end_of_ConfigureOscillator 1352                  writeString@i 002D       __size_of_isItLongEnough 0012  
         __CFG_MSSP7B_EN$MSK7 000000           __end_of_clearBuffer 11EC                __end_of___lmul 1152  
                  ?_UART_Init 0022                __end_of_strlen 11A6           start_initialization 129C  
        __size_of_writeResult 0020          __size_of_writeString 005E         __end_of_copyTmpBuffer 122C  
         __size_of_appendChar 0018                      ??___lmul 002A             __CFG_ADCSEL$BIT10 000000  
                    ??_strlen 0024                   __pbssCOMRAM 0032             __size_of_high_isr 1040  
                 _clearBuffer 11A6                      ?_InitApp 0001                     __pintcode 0008  
                 __pintcodelo 0018                   ??_UART_Init 0026                      ?_isValid 0001  
                 __smallconst 0F00          __CFG_RTCOSC$T1OSCREF 000000                      ?_low_isr 0001  
                    ?_wait_ms 002E                copyTmpBuffer@i 0023                _isItLongEnough 1334  
                    _LATAbits 000F89              __CFG_WDTPS$32768 000000                  clearBuffer@i 0028  
               UART_Write@dev 0022                   _isValid$699 0022                     _tmpString 00A6  
           UART_Init@baudrate 0022                  ??_appendChar 0001             __CFG_CFGPLLEN$OFF 000000  
           ___lmul@multiplier 0022        __end_of_isItLongEnough 1346            __end_of_appendChar 1334  
            __size_of_InitApp 001E                      __Hrparam 0000                      __Lrparam 0000  
            __size_of_isValid 003E              __size_of_low_isr 008E                      __ptext10 1152  
                    __ptext11 126A                      __ptext12 12E2                      __ptext13 1346  
                    __ptext16 131C              __size_of_wait_ms 0056                      _high_isr 0008  
             ?_isItLongEnough 0001                 __size_of_main 00A2                appendChar@data 0001  
__size_of_ConfigureOscillator 000C                      int$flags 0038                 ??_writeResult 0030  
               ??_writeString 002B                   _OSCTUNEbits 000F9B                      intlevel1 0000  
                    intlevel2 0000                  ?_clearBuffer 0001                    _OSCCONbits 000FD3  
      __size_of_copyTmpBuffer 0040                  wait_ms@timel 0032                      strlen@cp 0026  
                  _UART_Write 1300           __end_of_writeResult 12E2           __end_of_writeString 10A6  
