

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Mar 20 15:20:48 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F47J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32  0000                     
    33                           ; Version 1.41
    34                           ; Generated 25/01/2017 GMT
    35                           ; 
    36                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F47J53 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     _RPINR16	set	3831
    68  0000                     _RPOR8	set	3784
    69  0000                     _PPSCON	set	3775
    70  0000                     _TXREG2	set	4009
    71  0000                     _TXSTA2bits	set	4008
    72  0000                     _SPBRGH2	set	3965
    73  0000                     _SPBRG2	set	4011
    74  0000                     _BAUDCON2bits	set	3964
    75  0000                     _TXSTA2	set	4008
    76  0000                     _RCSTA2	set	3996
    77  0000                     _SPBRGH1	set	3967
    78  0000                     _SPBRG1	set	4016
    79  0000                     _BAUDCON1bits	set	3966
    80  0000                     _RCSTA1	set	4012
    81  0000                     _TXSTA1	set	4013
    82  0000                     _INTCON	set	4082
    83  0000                     _OSCTUNEbits	set	3995
    84  0000                     _OSCCONbits	set	4051
    85  0000                     _PORTDbits	set	3971
    86  0000                     _TRISDbits	set	3989
    87  0000                     _TRISAbits	set	3986
    88  0000                     _RCREG2	set	4010
    89  0000                     _TXREG1	set	4014
    90  0000                     _TXSTA1bits	set	4013
    91  0000                     _RCREG1	set	4015
    92  0000                     _LATAbits	set	3977
    93  0000                     _RCIF	set	31989
    94  0000                     _TRISB5	set	31901
    95  0000                     _TRISB4	set	31900
    96  0000                     _RC2IE	set	32029
    97  0000                     _TRISC6	set	31910
    98  0000                     _TRISC7	set	31911
    99  0000                     _RC1IE	set	31981
   100  0000                     _RC2IF	set	32037
   101  0000                     _RC1IF	set	31989
   102                           
   103                           	psect	smallconst
   104  000F00                     __psmallconst:
   105                           	opt stack 0
   106  000F00  00                 	db	0
   107  000F01                     STR_1:
   108  000F01  00                 	db	0
   109                           
   110                           ; #config settings
   111  000F02  00                 	db	0	; dummy byte at the end
   112  0000                     
   113                           	psect	cinit
   114  001310                     __pcinit:
   115                           	opt stack 0
   116  001310                     start_initialization:
   117                           	opt stack 0
   118  001310                     __initialization:
   119                           	opt stack 0
   120                           
   121                           ; Clear objects allocated to BANK0 (100 bytes)
   122  001310  EE00  F060         	lfsr	0,__pbssBANK0
   123  001314  0E64               	movlw	100
   124  001316                     clear_0:
   125  001316  6AEE               	clrf	postinc0,c
   126  001318  06E8               	decf	wreg,f,c
   127  00131A  E1FD               	bnz	clear_0
   128                           
   129                           ; Clear objects allocated to COMRAM (7 bytes)
   130  00131C  EE00  F035         	lfsr	0,__pbssCOMRAM
   131  001320  0E07               	movlw	7
   132  001322                     clear_1:
   133  001322  6AEE               	clrf	postinc0,c
   134  001324  06E8               	decf	wreg,f,c
   135  001326  E1FD               	bnz	clear_1
   136  001328                     end_of_initialization:
   137                           	opt stack 0
   138  001328                     __end_of__initialization:
   139                           	opt stack 0
   140  001328  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   141  00132A  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   142  00132C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   143  00132E  6EF8               	movwf	tblptru,c
   144  001330  0E0F               	movlw	high __Lsmallconst
   145  001332  6EF7               	movwf	tblptrh,c
   146  001334  0100               	movlb	0
   147  001336  EF87  F008         	goto	_main	;jump to C main() function
   148                           tblptru	equ	0xFF8
   149                           tblptrh	equ	0xFF7
   150                           postinc0	equ	0xFEE
   151                           wreg	equ	0xFE8
   152                           
   153                           	psect	bssCOMRAM
   154  000035                     __pbssCOMRAM:
   155                           	opt stack 0
   156  000035                     wait_ms@timel:
   157                           	opt stack 0
   158  000035                     	ds	4
   159  000039                     _index:
   160                           	opt stack 0
   161  000039                     	ds	2
   162  00003B                     _flaggan:
   163                           	opt stack 0
   164  00003B                     	ds	1
   165                           tblptru	equ	0xFF8
   166                           tblptrh	equ	0xFF7
   167                           postinc0	equ	0xFEE
   168                           wreg	equ	0xFE8
   169                           
   170                           	psect	bssBANK0
   171  000060                     __pbssBANK0:
   172                           	opt stack 0
   173  000060                     _realString:
   174                           	opt stack 0
   175  000060                     	ds	50
   176  000092                     _tmpString:
   177                           	opt stack 0
   178  000092                     	ds	50
   179                           tblptru	equ	0xFF8
   180                           tblptrh	equ	0xFF7
   181                           postinc0	equ	0xFEE
   182                           wreg	equ	0xFE8
   183                           
   184                           	psect	cstackBANK0
   185  0000C4                     __pcstackBANK0:
   186                           	opt stack 0
   187  0000C4                     UART_Init@x:
   188                           	opt stack 0
   189                           
   190                           ; 2 bytes @ 0x0
   191  0000C4                     	ds	2
   192  0000C6                     _UART_Init$1265:
   193                           	opt stack 0
   194                           
   195                           ; 4 bytes @ 0x2
   196  0000C6                     	ds	4
   197                           tblptru	equ	0xFF8
   198                           tblptrh	equ	0xFF7
   199                           postinc0	equ	0xFEE
   200                           wreg	equ	0xFE8
   201                           
   202                           	psect	cstackCOMRAM
   203  000001                     __pcstackCOMRAM:
   204                           	opt stack 0
   205  000001                     appendChar@data:
   206                           	opt stack 0
   207                           
   208                           ; 1 bytes @ 0x0
   209  000001                     	ds	1
   210  000002                     ??_high_isr:
   211                           
   212                           ; 1 bytes @ 0x1
   213  000002                     	ds	15
   214  000011                     ??_low_isr:
   215                           
   216                           ; 1 bytes @ 0x10
   217  000011                     	ds	17
   218  000022                     ??_copyTmpBuffer:
   219  000022                     ?_strlen:
   220                           	opt stack 0
   221  000022                     ?___lmul:
   222                           	opt stack 0
   223  000022                     ?___aldiv:
   224                           	opt stack 0
   225  000022                     UART_Write@dev:
   226                           	opt stack 0
   227  000022                     strlen@s:
   228                           	opt stack 0
   229  000022                     ___lmul@multiplier:
   230                           	opt stack 0
   231  000022                     ___aldiv@dividend:
   232                           	opt stack 0
   233                           
   234                           ; 4 bytes @ 0x21
   235  000022                     	ds	1
   236  000023                     UART_Write@data:
   237                           	opt stack 0
   238  000023                     copyTmpBuffer@i:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x22
   242  000023                     	ds	1
   243  000024                     ??_strlen:
   244                           
   245                           ; 1 bytes @ 0x23
   246  000024                     	ds	2
   247  000026                     strlen@cp:
   248                           	opt stack 0
   249  000026                     ___lmul@multiplicand:
   250                           	opt stack 0
   251  000026                     ___aldiv@divisor:
   252                           	opt stack 0
   253                           
   254                           ; 4 bytes @ 0x25
   255  000026                     	ds	2
   256  000028                     writeString@str:
   257                           	opt stack 0
   258  000028                     clearBuffer@i:
   259                           	opt stack 0
   260                           
   261                           ; 2 bytes @ 0x27
   262  000028                     	ds	2
   263  00002A                     writeString@dev:
   264                           	opt stack 0
   265  00002A                     ___aldiv@counter:
   266                           	opt stack 0
   267  00002A                     ___lmul@product:
   268                           	opt stack 0
   269                           
   270                           ; 4 bytes @ 0x29
   271  00002A                     	ds	1
   272  00002B                     ___aldiv@sign:
   273                           	opt stack 0
   274  00002B                     writeString@i:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x2A
   278  00002B                     	ds	1
   279  00002C                     ___aldiv@quotient:
   280                           	opt stack 0
   281                           
   282                           ; 4 bytes @ 0x2B
   283  00002C                     	ds	2
   284  00002E                     wait_ms@time:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x2D
   288  00002E                     	ds	2
   289  000030                     writeResult@dev:
   290                           	opt stack 0
   291  000030                     UART_Init@baudrate:
   292                           	opt stack 0
   293                           
   294                           ; 4 bytes @ 0x2F
   295  000030                     	ds	4
   296  000034                     main@var:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0x33
   300  000034                     	ds	1
   301                           tblptru	equ	0xFF8
   302                           tblptrh	equ	0xFF7
   303                           postinc0	equ	0xFEE
   304                           wreg	equ	0xFE8
   305                           
   306 ;;
   307 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   308 ;;
   309 ;; *************** function _main *****************
   310 ;; Defined at:
   311 ;;		line 38 in file "main.c"
   312 ;; Parameters:    Size  Location     Type
   313 ;;		None
   314 ;; Auto vars:     Size  Location     Type
   315 ;;  var             1   51[COMRAM] unsigned char 
   316 ;;  result          1    0        unsigned char 
   317 ;; Return value:  Size  Location     Type
   318 ;;                  1    wreg      void 
   319 ;; Registers used:
   320 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   321 ;; Tracked objects:
   322 ;;		On entry : 0/0
   323 ;;		On exit  : 0/0
   324 ;;		Unchanged: 0/0
   325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   327 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   329 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   330 ;;Total ram usage:        1 bytes
   331 ;; Hardware stack levels required when called:    6
   332 ;; This function calls:
   333 ;;		_ConfigureOscillator
   334 ;;		_InitApp
   335 ;;		_UART_Init
   336 ;;		_clearBuffer
   337 ;;		_copyTmpBuffer
   338 ;;		_isItLongEnough
   339 ;;		_wait_ms
   340 ;;		_writeResult
   341 ;; This function is called by:
   342 ;;		Startup code after reset
   343 ;; This function uses a non-reentrant model
   344 ;;
   345                           
   346                           	psect	text0
   347  00110E                     __ptext0:
   348                           	opt stack 0
   349  00110E                     _main:
   350                           	opt stack 25
   351                           
   352                           ;main.c: 44: ConfigureOscillator();
   353                           
   354                           ;incstack = 0
   355  00110E  ECDF  F009         	call	_ConfigureOscillator	;wreg free
   356                           
   357                           ;main.c: 47: InitApp();
   358  001112  ECAD  F009         	call	_InitApp	;wreg free
   359                           
   360                           ;main.c: 49: UART_Init(19200);
   361  001116  0E00               	movlw	0
   362  001118  6E30               	movwf	UART_Init@baudrate,c
   363  00111A  0E4B               	movlw	75
   364  00111C  6E31               	movwf	UART_Init@baudrate+1,c
   365  00111E  0E00               	movlw	0
   366  001120  6E32               	movwf	UART_Init@baudrate+2,c
   367  001122  0E00               	movlw	0
   368  001124  6E33               	movwf	UART_Init@baudrate+3,c
   369  001126  EC3A  F008         	call	_UART_Init	;wreg free
   370                           
   371                           ;main.c: 51: uint8_t var = 0;
   372  00112A  0E00               	movlw	0
   373  00112C  6E34               	movwf	main@var,c
   374                           
   375                           ;main.c: 52: char result;
   376                           ;main.c: 55: TRISAbits.TRISA0 = 0;
   377  00112E  9092               	bcf	3986,0,c	;volatile
   378                           
   379                           ;main.c: 56: TRISAbits.TRISA1 = 0;
   380  001130  9292               	bcf	3986,1,c	;volatile
   381                           
   382                           ;main.c: 57: LATAbits.LATA0 = 0;
   383  001132  9089               	bcf	3977,0,c	;volatile
   384                           
   385                           ;main.c: 58: LATAbits.LATA1 = 0;
   386  001134  9289               	bcf	3977,1,c	;volatile
   387                           
   388                           ;main.c: 59: TRISDbits.TRISD3 = 1;
   389  001136  8695               	bsf	3989,3,c	;volatile
   390                           
   391                           ;main.c: 61: clearBuffer();
   392  001138  EC09  F009         	call	_clearBuffer	;wreg free
   393  00113C                     l1341:
   394                           
   395                           ;main.c: 66: if(isItLongEnough()){
   396  00113C  ECD6  F009         	call	_isItLongEnough	;wreg free
   397  001140  0900               	iorlw	0
   398  001142  B4D8               	btfsc	status,2,c
   399  001144  D00C               	goto	l57
   400                           
   401                           ;main.c: 67: LATAbits.LATA1 = 1;
   402  001146  8289               	bsf	3977,1,c	;volatile
   403                           
   404                           ;main.c: 68: wait_ms(1000);
   405  001148  0E03               	movlw	3
   406  00114A  6E2F               	movwf	wait_ms@time+1,c
   407  00114C  0EE8               	movlw	232
   408  00114E  6E2E               	movwf	wait_ms@time,c
   409  001150  ECE1  F008         	call	_wait_ms	;wreg free
   410                           
   411                           ;main.c: 69: copyTmpBuffer();
   412  001154  EC2C  F009         	call	_copyTmpBuffer	;wreg free
   413                           
   414                           ;main.c: 70: clearBuffer();
   415  001158  EC09  F009         	call	_clearBuffer	;wreg free
   416                           
   417                           ;main.c: 71: }else{
   418  00115C  D001               	goto	l58
   419  00115E                     l57:
   420                           
   421                           ;main.c: 72: LATAbits.LATA1 = 0;
   422  00115E  9289               	bcf	3977,1,c	;volatile
   423  001160                     l58:
   424                           
   425                           ;main.c: 73: }
   426                           ;main.c: 75: if(!PORTDbits.RD3){
   427  001160  B683               	btfsc	3971,3,c	;volatile
   428  001162  D7EC               	goto	l1341
   429                           
   430                           ;main.c: 76: writeResult(2);
   431  001164  0E02               	movlw	2
   432  001166  EC9D  F009         	call	_writeResult
   433  00116A  D7E8               	goto	l1341
   434  00116C                     __end_of_main:
   435                           	opt stack 0
   436                           tblptru	equ	0xFF8
   437                           tblptrh	equ	0xFF7
   438                           postinc0	equ	0xFEE
   439                           wreg	equ	0xFE8
   440                           status	equ	0xFD8
   441                           
   442 ;; *************** function _writeResult *****************
   443 ;; Defined at:
   444 ;;		line 155 in file "uart.c"
   445 ;; Parameters:    Size  Location     Type
   446 ;;  dev             1    wreg     unsigned char 
   447 ;; Auto vars:     Size  Location     Type
   448 ;;  dev             1   47[COMRAM] unsigned char 
   449 ;; Return value:  Size  Location     Type
   450 ;;                  1    wreg      void 
   451 ;; Registers used:
   452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   453 ;; Tracked objects:
   454 ;;		On entry : 0/0
   455 ;;		On exit  : 0/0
   456 ;;		Unchanged: 0/0
   457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   459 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   461 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   462 ;;Total ram usage:        1 bytes
   463 ;; Hardware stack levels used:    1
   464 ;; Hardware stack levels required when called:    5
   465 ;; This function calls:
   466 ;;		_wait_ms
   467 ;;		_writeString
   468 ;; This function is called by:
   469 ;;		_main
   470 ;; This function uses a non-reentrant model
   471 ;;
   472                           
   473                           	psect	text1
   474  00133A                     __ptext1:
   475                           	opt stack 0
   476  00133A                     _writeResult:
   477                           	opt stack 25
   478                           
   479                           ;incstack = 0
   480                           ;writeResult@dev stored from wreg
   481  00133A  6E30               	movwf	writeResult@dev,c
   482                           
   483                           ;uart.c: 157: writeString(realString, dev);
   484  00133C  0E60               	movlw	low _realString
   485  00133E  6E28               	movwf	writeString@str,c
   486  001340  0E00               	movlw	high _realString
   487  001342  6E29               	movwf	writeString@str+1,c
   488  001344  C030  F02A         	movff	writeResult@dev,writeString@dev
   489  001348  EC4C  F009         	call	_writeString	;wreg free
   490                           
   491                           ;uart.c: 158: wait_ms(1000);
   492  00134C  0E03               	movlw	3
   493  00134E  6E2F               	movwf	wait_ms@time+1,c
   494  001350  0EE8               	movlw	232
   495  001352  6E2E               	movwf	wait_ms@time,c
   496  001354  ECE1  F008         	call	_wait_ms	;wreg free
   497  001358  0012               	return		;funcret
   498  00135A                     __end_of_writeResult:
   499                           	opt stack 0
   500                           tblptru	equ	0xFF8
   501                           tblptrh	equ	0xFF7
   502                           postinc0	equ	0xFEE
   503                           wreg	equ	0xFE8
   504                           status	equ	0xFD8
   505                           
   506 ;; *************** function _writeString *****************
   507 ;; Defined at:
   508 ;;		line 117 in file "uart.c"
   509 ;; Parameters:    Size  Location     Type
   510 ;;  str             2   39[COMRAM] PTR unsigned char 
   511 ;;		 -> realString(50), 
   512 ;;  dev             1   41[COMRAM] unsigned char 
   513 ;; Auto vars:     Size  Location     Type
   514 ;;  i               2   42[COMRAM] int 
   515 ;; Return value:  Size  Location     Type
   516 ;;                  1    wreg      void 
   517 ;; Registers used:
   518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   519 ;; Tracked objects:
   520 ;;		On entry : 0/0
   521 ;;		On exit  : 0/0
   522 ;;		Unchanged: 0/0
   523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   524 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   527 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   528 ;;Total ram usage:        5 bytes
   529 ;; Hardware stack levels used:    1
   530 ;; Hardware stack levels required when called:    4
   531 ;; This function calls:
   532 ;;		_UART_Write
   533 ;;		_strlen
   534 ;; This function is called by:
   535 ;;		_writeResult
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539                           	psect	text2
   540  001298                     __ptext2:
   541                           	opt stack 0
   542  001298                     _writeString:
   543                           	opt stack 25
   544                           
   545                           ;uart.c: 119: for(int i = 0; i<strlen(str); i++)
   546                           
   547                           ;incstack = 0
   548  001298  0E00               	movlw	0
   549  00129A  6E2C               	movwf	writeString@i+1,c
   550  00129C  0E00               	movlw	0
   551  00129E  6E2B               	movwf	writeString@i,c
   552  0012A0  D00D               	goto	l1087
   553  0012A2                     l1083:
   554                           
   555                           ;uart.c: 120: {
   556                           ;uart.c: 121: UART_Write(str[i], dev);
   557  0012A2  C02A  F022         	movff	writeString@dev,UART_Write@dev
   558  0012A6  502B               	movf	writeString@i,w,c
   559  0012A8  2428               	addwf	writeString@str,w,c
   560  0012AA  6ED9               	movwf	fsr2l,c
   561  0012AC  502C               	movf	writeString@i+1,w,c
   562  0012AE  2029               	addwfc	writeString@str+1,w,c
   563  0012B0  6EDA               	movwf	fsr2h,c
   564  0012B2  50DF               	movf	indf2,w,c
   565  0012B4  ECBC  F009         	call	_UART_Write
   566  0012B8  4A2B               	infsnz	writeString@i,f,c
   567  0012BA  2A2C               	incf	writeString@i+1,f,c
   568  0012BC                     l1087:
   569  0012BC  C028  F022         	movff	writeString@str,strlen@s
   570  0012C0  C029  F023         	movff	writeString@str+1,strlen@s+1
   571  0012C4  EC6B  F009         	call	_strlen	;wreg free
   572  0012C8  5022               	movf	?_strlen,w,c
   573  0012CA  5C2B               	subwf	writeString@i,w,c
   574  0012CC  5023               	movf	?_strlen+1,w,c
   575  0012CE  582C               	subwfb	writeString@i+1,w,c
   576  0012D0  B0D8               	btfsc	status,0,c
   577  0012D2  0012               	return	
   578  0012D4  D7E6               	goto	l1083
   579  0012D6                     __end_of_writeString:
   580                           	opt stack 0
   581                           tblptru	equ	0xFF8
   582                           tblptrh	equ	0xFF7
   583                           postinc0	equ	0xFEE
   584                           wreg	equ	0xFE8
   585                           indf2	equ	0xFDF
   586                           fsr2h	equ	0xFDA
   587                           fsr2l	equ	0xFD9
   588                           status	equ	0xFD8
   589                           
   590 ;; *************** function _UART_Write *****************
   591 ;; Defined at:
   592 ;;		line 81 in file "uart.c"
   593 ;; Parameters:    Size  Location     Type
   594 ;;  data            1    wreg     unsigned char 
   595 ;;  dev             1   33[COMRAM] unsigned char 
   596 ;; Auto vars:     Size  Location     Type
   597 ;;  data            1   34[COMRAM] unsigned char 
   598 ;; Return value:  Size  Location     Type
   599 ;;                  1    wreg      void 
   600 ;; Registers used:
   601 ;;		wreg, status,2, status,0
   602 ;; Tracked objects:
   603 ;;		On entry : 0/0
   604 ;;		On exit  : 0/0
   605 ;;		Unchanged: 0/0
   606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   607 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   608 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   610 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   611 ;;Total ram usage:        2 bytes
   612 ;; Hardware stack levels used:    1
   613 ;; Hardware stack levels required when called:    3
   614 ;; This function calls:
   615 ;;		Nothing
   616 ;; This function is called by:
   617 ;;		_writeString
   618 ;; This function uses a non-reentrant model
   619 ;;
   620                           
   621                           	psect	text3
   622  001378                     __ptext3:
   623                           	opt stack 0
   624  001378                     _UART_Write:
   625                           	opt stack 25
   626                           
   627                           ;incstack = 0
   628                           ;UART_Write@data stored from wreg
   629  001378  6E23               	movwf	UART_Write@data,c
   630                           
   631                           ;uart.c: 83: if (dev == 1)
   632  00137A  0422               	decf	UART_Write@dev,w,c
   633  00137C  A4D8               	btfss	status,2,c
   634  00137E  D005               	goto	l159
   635  001380                     l155:
   636  001380  A2AD               	btfss	4013,1,c	;volatile
   637  001382  D7FE               	goto	l155
   638                           
   639                           ;uart.c: 86: TXREG1 = data;
   640  001384  C023  FFAE         	movff	UART_Write@data,4014	;volatile
   641                           
   642                           ;uart.c: 87: }
   643  001388  0012               	return	
   644  00138A                     l159:
   645  00138A  A2A8               	btfss	4008,1,c	;volatile
   646  00138C  D7FE               	goto	l159
   647                           
   648                           ;uart.c: 91: TXREG2 = data;
   649  00138E  C023  FFA9         	movff	UART_Write@data,4009	;volatile
   650  001392  0012               	return	
   651  001394                     __end_of_UART_Write:
   652                           	opt stack 0
   653                           tblptru	equ	0xFF8
   654                           tblptrh	equ	0xFF7
   655                           postinc0	equ	0xFEE
   656                           wreg	equ	0xFE8
   657                           indf2	equ	0xFDF
   658                           fsr2h	equ	0xFDA
   659                           fsr2l	equ	0xFD9
   660                           status	equ	0xFD8
   661                           
   662 ;; *************** function _wait_ms *****************
   663 ;; Defined at:
   664 ;;		line 35 in file "system.c"
   665 ;; Parameters:    Size  Location     Type
   666 ;;  time            2   45[COMRAM] unsigned int 
   667 ;; Auto vars:     Size  Location     Type
   668 ;;		None
   669 ;; Return value:  Size  Location     Type
   670 ;;                  1    wreg      void 
   671 ;; Registers used:
   672 ;;		wreg, status,2, status,0, cstack
   673 ;; Tracked objects:
   674 ;;		On entry : 0/0
   675 ;;		On exit  : 0/0
   676 ;;		Unchanged: 0/0
   677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   678 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   681 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   682 ;;Total ram usage:        2 bytes
   683 ;; Hardware stack levels used:    1
   684 ;; Hardware stack levels required when called:    4
   685 ;; This function calls:
   686 ;;		___lmul
   687 ;; This function is called by:
   688 ;;		_main
   689 ;;		_writeResult
   690 ;; This function uses a non-reentrant model
   691 ;;
   692                           
   693                           	psect	text4
   694  0011C2                     __ptext4:
   695                           	opt stack 0
   696  0011C2                     _wait_ms:
   697                           	opt stack 25
   698                           
   699                           ;system.c: 37: static long timel = 0;
   700                           ;system.c: 38: timel = time * 1000l;
   701                           
   702                           ;incstack = 0
   703  0011C2  C02E  F022         	movff	wait_ms@time,___lmul@multiplier
   704  0011C6  C02F  F023         	movff	wait_ms@time+1,___lmul@multiplier+1
   705  0011CA  6A24               	clrf	___lmul@multiplier+2,c
   706  0011CC  6A25               	clrf	___lmul@multiplier+3,c
   707  0011CE  0EE8               	movlw	232
   708  0011D0  6E26               	movwf	___lmul@multiplicand,c
   709  0011D2  0E03               	movlw	3
   710  0011D4  6E27               	movwf	___lmul@multiplicand+1,c
   711  0011D6  0E00               	movlw	0
   712  0011D8  6E28               	movwf	___lmul@multiplicand+2,c
   713  0011DA  0E00               	movlw	0
   714  0011DC  6E29               	movwf	___lmul@multiplicand+3,c
   715  0011DE  ECB6  F008         	call	___lmul	;wreg free
   716  0011E2  C022  F035         	movff	?___lmul,wait_ms@timel
   717  0011E6  C023  F036         	movff	?___lmul+1,wait_ms@timel+1
   718  0011EA  C024  F037         	movff	?___lmul+2,wait_ms@timel+2
   719  0011EE  C025  F038         	movff	?___lmul+3,wait_ms@timel+3
   720                           
   721                           ;system.c: 39: for( ; timel; timel--);
   722  0011F2  D008               	goto	l74
   723  0011F4                     l1079:
   724  0011F4  0EFF               	movlw	255
   725  0011F6  2635               	addwf	wait_ms@timel,f,c
   726  0011F8  0EFF               	movlw	255
   727  0011FA  2236               	addwfc	wait_ms@timel+1,f,c
   728  0011FC  0EFF               	movlw	255
   729  0011FE  2237               	addwfc	wait_ms@timel+2,f,c
   730  001200  0EFF               	movlw	255
   731  001202  2238               	addwfc	wait_ms@timel+3,f,c
   732  001204                     l74:
   733  001204  5035               	movf	wait_ms@timel,w,c
   734  001206  1036               	iorwf	wait_ms@timel+1,w,c
   735  001208  1037               	iorwf	wait_ms@timel+2,w,c
   736  00120A  1038               	iorwf	wait_ms@timel+3,w,c
   737  00120C  B4D8               	btfsc	status,2,c
   738  00120E  0012               	return	
   739  001210  D7F1               	goto	l1079
   740  001212                     __end_of_wait_ms:
   741                           	opt stack 0
   742                           tblptru	equ	0xFF8
   743                           tblptrh	equ	0xFF7
   744                           postinc0	equ	0xFEE
   745                           wreg	equ	0xFE8
   746                           indf2	equ	0xFDF
   747                           fsr2h	equ	0xFDA
   748                           fsr2l	equ	0xFD9
   749                           status	equ	0xFD8
   750                           
   751 ;; *************** function ___lmul *****************
   752 ;; Defined at:
   753 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
   754 ;; Parameters:    Size  Location     Type
   755 ;;  multiplier      4   33[COMRAM] unsigned long 
   756 ;;  multiplicand    4   37[COMRAM] unsigned long 
   757 ;; Auto vars:     Size  Location     Type
   758 ;;  product         4   41[COMRAM] unsigned long 
   759 ;; Return value:  Size  Location     Type
   760 ;;                  4   33[COMRAM] unsigned long 
   761 ;; Registers used:
   762 ;;		wreg, status,2, status,0
   763 ;; Tracked objects:
   764 ;;		On entry : 0/0
   765 ;;		On exit  : 0/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   768 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   769 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   771 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   772 ;;Total ram usage:       12 bytes
   773 ;; Hardware stack levels used:    1
   774 ;; Hardware stack levels required when called:    3
   775 ;; This function calls:
   776 ;;		Nothing
   777 ;; This function is called by:
   778 ;;		_wait_ms
   779 ;; This function uses a non-reentrant model
   780 ;;
   781                           
   782                           	psect	text5
   783  00116C                     __ptext5:
   784                           	opt stack 0
   785  00116C                     ___lmul:
   786                           	opt stack 25
   787                           
   788                           ;incstack = 0
   789  00116C  0E00               	movlw	0
   790  00116E  6E2A               	movwf	___lmul@product,c
   791  001170  0E00               	movlw	0
   792  001172  6E2B               	movwf	___lmul@product+1,c
   793  001174  0E00               	movlw	0
   794  001176  6E2C               	movwf	___lmul@product+2,c
   795  001178  0E00               	movlw	0
   796  00117A  6E2D               	movwf	___lmul@product+3,c
   797  00117C                     l1069:
   798  00117C  A022               	btfss	___lmul@multiplier,0,c
   799  00117E  D008               	goto	l1073
   800  001180  5026               	movf	___lmul@multiplicand,w,c
   801  001182  262A               	addwf	___lmul@product,f,c
   802  001184  5027               	movf	___lmul@multiplicand+1,w,c
   803  001186  222B               	addwfc	___lmul@product+1,f,c
   804  001188  5028               	movf	___lmul@multiplicand+2,w,c
   805  00118A  222C               	addwfc	___lmul@product+2,f,c
   806  00118C  5029               	movf	___lmul@multiplicand+3,w,c
   807  00118E  222D               	addwfc	___lmul@product+3,f,c
   808  001190                     l1073:
   809  001190  90D8               	bcf	status,0,c
   810  001192  3626               	rlcf	___lmul@multiplicand,f,c
   811  001194  3627               	rlcf	___lmul@multiplicand+1,f,c
   812  001196  3628               	rlcf	___lmul@multiplicand+2,f,c
   813  001198  3629               	rlcf	___lmul@multiplicand+3,f,c
   814  00119A  90D8               	bcf	status,0,c
   815  00119C  3225               	rrcf	___lmul@multiplier+3,f,c
   816  00119E  3224               	rrcf	___lmul@multiplier+2,f,c
   817  0011A0  3223               	rrcf	___lmul@multiplier+1,f,c
   818  0011A2  3222               	rrcf	___lmul@multiplier,f,c
   819  0011A4  5022               	movf	___lmul@multiplier,w,c
   820  0011A6  1023               	iorwf	___lmul@multiplier+1,w,c
   821  0011A8  1024               	iorwf	___lmul@multiplier+2,w,c
   822  0011AA  1025               	iorwf	___lmul@multiplier+3,w,c
   823  0011AC  A4D8               	btfss	status,2,c
   824  0011AE  D7E6               	goto	l1069
   825  0011B0  C02A  F022         	movff	___lmul@product,?___lmul
   826  0011B4  C02B  F023         	movff	___lmul@product+1,?___lmul+1
   827  0011B8  C02C  F024         	movff	___lmul@product+2,?___lmul+2
   828  0011BC  C02D  F025         	movff	___lmul@product+3,?___lmul+3
   829  0011C0  0012               	return		;funcret
   830  0011C2                     __end_of___lmul:
   831                           	opt stack 0
   832                           tblptru	equ	0xFF8
   833                           tblptrh	equ	0xFF7
   834                           postinc0	equ	0xFEE
   835                           wreg	equ	0xFE8
   836                           indf2	equ	0xFDF
   837                           fsr2h	equ	0xFDA
   838                           fsr2l	equ	0xFD9
   839                           status	equ	0xFD8
   840                           
   841 ;; *************** function _isItLongEnough *****************
   842 ;; Defined at:
   843 ;;		line 132 in file "uart.c"
   844 ;; Parameters:    Size  Location     Type
   845 ;;		None
   846 ;; Auto vars:     Size  Location     Type
   847 ;;		None
   848 ;; Return value:  Size  Location     Type
   849 ;;                  1    wreg      unsigned char 
   850 ;; Registers used:
   851 ;;		wreg, status,2, status,0
   852 ;; Tracked objects:
   853 ;;		On entry : 0/0
   854 ;;		On exit  : 0/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   861 ;;Total ram usage:        0 bytes
   862 ;; Hardware stack levels used:    1
   863 ;; Hardware stack levels required when called:    3
   864 ;; This function calls:
   865 ;;		Nothing
   866 ;; This function is called by:
   867 ;;		_main
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           	psect	text6
   872  0013AC                     __ptext6:
   873                           	opt stack 0
   874  0013AC                     _isItLongEnough:
   875                           	opt stack 27
   876                           
   877                           ;uart.c: 133: if(index == 3)
   878                           
   879                           ;incstack = 0
   880  0013AC  0E03               	movlw	3
   881  0013AE  1839               	xorwf	_index,w,c
   882  0013B0  103A               	iorwf	_index+1,w,c
   883  0013B2  A4D8               	btfss	status,2,c
   884  0013B4  D002               	goto	l977
   885                           
   886                           ;uart.c: 134: {
   887                           ;uart.c: 135: return 1;
   888  0013B6  0E01               	movlw	1
   889                           
   890                           ;uart.c: 136: }else{
   891  0013B8  0012               	return	
   892  0013BA                     l977:
   893                           
   894                           ;uart.c: 137: return 0;
   895  0013BA  0E00               	movlw	0
   896  0013BC  0012               	return	
   897  0013BE                     __end_of_isItLongEnough:
   898                           	opt stack 0
   899                           tblptru	equ	0xFF8
   900                           tblptrh	equ	0xFF7
   901                           postinc0	equ	0xFEE
   902                           wreg	equ	0xFE8
   903                           indf2	equ	0xFDF
   904                           fsr2h	equ	0xFDA
   905                           fsr2l	equ	0xFD9
   906                           status	equ	0xFD8
   907                           
   908 ;; *************** function _copyTmpBuffer *****************
   909 ;; Defined at:
   910 ;;		line 149 in file "uart.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;		None
   913 ;; Auto vars:     Size  Location     Type
   914 ;;  i               2   34[COMRAM] int 
   915 ;; Return value:  Size  Location     Type
   916 ;;                  1    wreg      void 
   917 ;; Registers used:
   918 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   925 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   926 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   927 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   928 ;;Total ram usage:        3 bytes
   929 ;; Hardware stack levels used:    1
   930 ;; Hardware stack levels required when called:    3
   931 ;; This function calls:
   932 ;;		Nothing
   933 ;; This function is called by:
   934 ;;		_main
   935 ;; This function uses a non-reentrant model
   936 ;;
   937                           
   938                           	psect	text7
   939  001258                     __ptext7:
   940                           	opt stack 0
   941  001258                     _copyTmpBuffer:
   942                           	opt stack 27
   943                           
   944                           ;uart.c: 150: for(int i = 0; i<index; i++){
   945                           
   946                           ;incstack = 0
   947  001258  0E00               	movlw	0
   948  00125A  6E24               	movwf	copyTmpBuffer@i+1,c
   949  00125C  0E00               	movlw	0
   950  00125E  6E23               	movwf	copyTmpBuffer@i,c
   951  001260  D010               	goto	l1189
   952  001262                     l1185:
   953                           
   954                           ;uart.c: 151: realString[i] = tmpString[i];
   955  001262  0E92               	movlw	low _tmpString
   956  001264  2423               	addwf	copyTmpBuffer@i,w,c
   957  001266  6ED9               	movwf	fsr2l,c
   958  001268  0E00               	movlw	high _tmpString
   959  00126A  2024               	addwfc	copyTmpBuffer@i+1,w,c
   960  00126C  6EDA               	movwf	fsr2h,c
   961  00126E  0E60               	movlw	low _realString
   962  001270  2423               	addwf	copyTmpBuffer@i,w,c
   963  001272  6EE1               	movwf	fsr1l,c
   964  001274  0E00               	movlw	high _realString
   965  001276  2024               	addwfc	copyTmpBuffer@i+1,w,c
   966  001278  6EE2               	movwf	fsr1h,c
   967  00127A  CFDF FFE7          	movff	indf2,indf1
   968  00127E  4A23               	infsnz	copyTmpBuffer@i,f,c
   969  001280  2A24               	incf	copyTmpBuffer@i+1,f,c
   970  001282                     l1189:
   971  001282  5039               	movf	_index,w,c
   972  001284  5C23               	subwf	copyTmpBuffer@i,w,c
   973  001286  5024               	movf	copyTmpBuffer@i+1,w,c
   974  001288  0A80               	xorlw	128
   975  00128A  6E22               	movwf	??_copyTmpBuffer& (0+255),c
   976  00128C  503A               	movf	_index+1,w,c
   977  00128E  0A80               	xorlw	128
   978  001290  5822               	subwfb	??_copyTmpBuffer& (0+255),w,c
   979  001292  B0D8               	btfsc	status,0,c
   980  001294  0012               	return	
   981  001296  D7E5               	goto	l1185
   982  001298                     __end_of_copyTmpBuffer:
   983                           	opt stack 0
   984                           tblptru	equ	0xFF8
   985                           tblptrh	equ	0xFF7
   986                           postinc0	equ	0xFEE
   987                           wreg	equ	0xFE8
   988                           indf1	equ	0xFE7
   989                           fsr1h	equ	0xFE2
   990                           fsr1l	equ	0xFE1
   991                           indf2	equ	0xFDF
   992                           fsr2h	equ	0xFDA
   993                           fsr2l	equ	0xFD9
   994                           status	equ	0xFD8
   995                           
   996 ;; *************** function _clearBuffer *****************
   997 ;; Defined at:
   998 ;;		line 141 in file "uart.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;		None
  1001 ;; Auto vars:     Size  Location     Type
  1002 ;;  i               2   39[COMRAM] int 
  1003 ;; Return value:  Size  Location     Type
  1004 ;;                  1    wreg      void 
  1005 ;; Registers used:
  1006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1007 ;; Tracked objects:
  1008 ;;		On entry : 0/0
  1009 ;;		On exit  : 0/0
  1010 ;;		Unchanged: 0/0
  1011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1013 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1015 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1016 ;;Total ram usage:        2 bytes
  1017 ;; Hardware stack levels used:    1
  1018 ;; Hardware stack levels required when called:    4
  1019 ;; This function calls:
  1020 ;;		_strlen
  1021 ;; This function is called by:
  1022 ;;		_main
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           	psect	text8
  1027  001212                     __ptext8:
  1028                           	opt stack 0
  1029  001212                     _clearBuffer:
  1030                           	opt stack 26
  1031                           
  1032                           ;uart.c: 142: for(int i = 0; i<strlen(tmpString); i++){
  1033                           
  1034                           ;incstack = 0
  1035  001212  0E00               	movlw	0
  1036  001214  6E29               	movwf	clearBuffer@i+1,c
  1037  001216  0E00               	movlw	0
  1038  001218  6E28               	movwf	clearBuffer@i,c
  1039  00121A  D00A               	goto	l1179
  1040  00121C                     l1175:
  1041                           
  1042                           ;uart.c: 143: tmpString[i] = "";
  1043  00121C  0E92               	movlw	low _tmpString
  1044  00121E  2428               	addwf	clearBuffer@i,w,c
  1045  001220  6ED9               	movwf	fsr2l,c
  1046  001222  0E00               	movlw	high _tmpString
  1047  001224  2029               	addwfc	clearBuffer@i+1,w,c
  1048  001226  6EDA               	movwf	fsr2h,c
  1049  001228  0E01               	movlw	low STR_1
  1050  00122A  6EDF               	movwf	indf2,c
  1051  00122C  4A28               	infsnz	clearBuffer@i,f,c
  1052  00122E  2A29               	incf	clearBuffer@i+1,f,c
  1053  001230                     l1179:
  1054  001230  0E92               	movlw	low _tmpString
  1055  001232  6E22               	movwf	strlen@s,c
  1056  001234  0E00               	movlw	high _tmpString
  1057  001236  6E23               	movwf	strlen@s+1,c
  1058  001238  EC6B  F009         	call	_strlen	;wreg free
  1059  00123C  5022               	movf	?_strlen,w,c
  1060  00123E  5C28               	subwf	clearBuffer@i,w,c
  1061  001240  5023               	movf	?_strlen+1,w,c
  1062  001242  5829               	subwfb	clearBuffer@i+1,w,c
  1063  001244  A0D8               	btfss	status,0,c
  1064  001246  D7EA               	goto	l1175
  1065                           
  1066                           ;uart.c: 144: }
  1067                           ;uart.c: 145: tmpString[0] = '\0';
  1068  001248  0E00               	movlw	0
  1069  00124A  0100               	movlb	0	; () banked
  1070  00124C  6F92               	movwf	_tmpString& (0+255),b
  1071                           
  1072                           ;uart.c: 146: index = 0;
  1073  00124E  0E00               	movlw	0
  1074  001250  6E3A               	movwf	_index+1,c
  1075  001252  0E00               	movlw	0
  1076  001254  6E39               	movwf	_index,c
  1077                           
  1078                           ; BSR set to: 0
  1079  001256  0012               	return		;funcret
  1080  001258                     __end_of_clearBuffer:
  1081                           	opt stack 0
  1082                           tblptru	equ	0xFF8
  1083                           tblptrh	equ	0xFF7
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           indf1	equ	0xFE7
  1087                           fsr1h	equ	0xFE2
  1088                           fsr1l	equ	0xFE1
  1089                           indf2	equ	0xFDF
  1090                           fsr2h	equ	0xFDA
  1091                           fsr2l	equ	0xFD9
  1092                           status	equ	0xFD8
  1093                           
  1094 ;; *************** function _strlen *****************
  1095 ;; Defined at:
  1096 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  1097 ;; Parameters:    Size  Location     Type
  1098 ;;  s               2   33[COMRAM] PTR const unsigned char 
  1099 ;;		 -> realString(50), tmpString(50), 
  1100 ;; Auto vars:     Size  Location     Type
  1101 ;;  cp              2   37[COMRAM] PTR const unsigned char 
  1102 ;;		 -> realString(50), tmpString(50), 
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  2   33[COMRAM] unsigned int 
  1105 ;; Registers used:
  1106 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1112 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1113 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1114 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1115 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1116 ;;Total ram usage:        6 bytes
  1117 ;; Hardware stack levels used:    1
  1118 ;; Hardware stack levels required when called:    3
  1119 ;; This function calls:
  1120 ;;		Nothing
  1121 ;; This function is called by:
  1122 ;;		_writeString
  1123 ;;		_clearBuffer
  1124 ;; This function uses a non-reentrant model
  1125 ;;
  1126                           
  1127                           	psect	text9
  1128  0012D6                     __ptext9:
  1129                           	opt stack 0
  1130  0012D6                     _strlen:
  1131                           	opt stack 25
  1132                           
  1133                           ; BSR set to: 0
  1134                           ;incstack = 0
  1135  0012D6  C022  F026         	movff	strlen@s,strlen@cp
  1136  0012DA  C023  F027         	movff	strlen@s+1,strlen@cp+1
  1137  0012DE  D002               	goto	l1061
  1138  0012E0                     l1059:
  1139  0012E0  4A26               	infsnz	strlen@cp,f,c
  1140  0012E2  2A27               	incf	strlen@cp+1,f,c
  1141  0012E4                     l1061:
  1142  0012E4  C026  FFD9         	movff	strlen@cp,fsr2l
  1143  0012E8  C027  FFDA         	movff	strlen@cp+1,fsr2h
  1144  0012EC  50DF               	movf	indf2,w,c
  1145  0012EE  A4D8               	btfss	status,2,c
  1146  0012F0  D7F7               	goto	l1059
  1147  0012F2  C022  F024         	movff	strlen@s,??_strlen
  1148  0012F6  C023  F025         	movff	strlen@s+1,??_strlen+1
  1149  0012FA  1E24               	comf	??_strlen,f,c
  1150  0012FC  1E25               	comf	??_strlen+1,f,c
  1151  0012FE  4A24               	infsnz	??_strlen,f,c
  1152  001300  2A25               	incf	??_strlen+1,f,c
  1153  001302  5026               	movf	strlen@cp,w,c
  1154  001304  2424               	addwf	??_strlen,w,c
  1155  001306  6E22               	movwf	?_strlen,c
  1156  001308  5027               	movf	strlen@cp+1,w,c
  1157  00130A  2025               	addwfc	??_strlen+1,w,c
  1158  00130C  6E23               	movwf	?_strlen+1,c
  1159  00130E  0012               	return	
  1160  001310                     __end_of_strlen:
  1161                           	opt stack 0
  1162                           tblptru	equ	0xFF8
  1163                           tblptrh	equ	0xFF7
  1164                           postinc0	equ	0xFEE
  1165                           wreg	equ	0xFE8
  1166                           indf1	equ	0xFE7
  1167                           fsr1h	equ	0xFE2
  1168                           fsr1l	equ	0xFE1
  1169                           indf2	equ	0xFDF
  1170                           fsr2h	equ	0xFDA
  1171                           fsr2l	equ	0xFD9
  1172                           status	equ	0xFD8
  1173                           
  1174 ;; *************** function _UART_Init *****************
  1175 ;; Defined at:
  1176 ;;		line 35 in file "uart.c"
  1177 ;; Parameters:    Size  Location     Type
  1178 ;;  baudrate        4   47[COMRAM] const long 
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;  x               2    0[BANK0 ] unsigned int 
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      unsigned char 
  1183 ;; Registers used:
  1184 ;;		wreg, status,2, status,0, cstack
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1190 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1191 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1193 ;;      Totals:         4       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1194 ;;Total ram usage:       10 bytes
  1195 ;; Hardware stack levels used:    1
  1196 ;; Hardware stack levels required when called:    4
  1197 ;; This function calls:
  1198 ;;		___aldiv
  1199 ;; This function is called by:
  1200 ;;		_main
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           	psect	text10
  1205  001074                     __ptext10:
  1206                           	opt stack 0
  1207  001074                     _UART_Init:
  1208                           	opt stack 26
  1209                           
  1210                           ;uart.c: 37: unsigned int x;
  1211                           ;uart.c: 39: x = (8000000/baudrate)/16 -1;
  1212                           
  1213                           ;incstack = 0
  1214  001074  C030  F026         	movff	UART_Init@baudrate,___aldiv@divisor
  1215  001078  C031  F027         	movff	UART_Init@baudrate+1,___aldiv@divisor+1
  1216  00107C  C032  F028         	movff	UART_Init@baudrate+2,___aldiv@divisor+2
  1217  001080  C033  F029         	movff	UART_Init@baudrate+3,___aldiv@divisor+3
  1218  001084  0E00               	movlw	0
  1219  001086  6E22               	movwf	___aldiv@dividend,c
  1220  001088  0E12               	movlw	18
  1221  00108A  6E23               	movwf	___aldiv@dividend+1,c
  1222  00108C  0E7A               	movlw	122
  1223  00108E  6E24               	movwf	___aldiv@dividend+2,c
  1224  001090  0E00               	movlw	0
  1225  001092  6E25               	movwf	___aldiv@dividend+3,c
  1226  001094  EC82  F007         	call	___aldiv	;wreg free
  1227  001098  C022  F0C6         	movff	?___aldiv,_UART_Init$1265
  1228  00109C  C023  F0C7         	movff	?___aldiv+1,_UART_Init$1265+1
  1229  0010A0  C024  F0C8         	movff	?___aldiv+2,_UART_Init$1265+2
  1230  0010A4  C025  F0C9         	movff	?___aldiv+3,_UART_Init$1265+3
  1231                           
  1232                           ;uart.c: 37: unsigned int x;
  1233                           ;uart.c: 39: x = (8000000/baudrate)/16 -1;
  1234  0010A8  C0C6  F022         	movff	_UART_Init$1265,___aldiv@dividend
  1235  0010AC  C0C7  F023         	movff	_UART_Init$1265+1,___aldiv@dividend+1
  1236  0010B0  C0C8  F024         	movff	_UART_Init$1265+2,___aldiv@dividend+2
  1237  0010B4  C0C9  F025         	movff	_UART_Init$1265+3,___aldiv@dividend+3
  1238  0010B8  0E10               	movlw	16
  1239  0010BA  6E26               	movwf	___aldiv@divisor,c
  1240  0010BC  0E00               	movlw	0
  1241  0010BE  6E27               	movwf	___aldiv@divisor+1,c
  1242  0010C0  0E00               	movlw	0
  1243  0010C2  6E28               	movwf	___aldiv@divisor+2,c
  1244  0010C4  0E00               	movlw	0
  1245  0010C6  6E29               	movwf	___aldiv@divisor+3,c
  1246  0010C8  EC82  F007         	call	___aldiv	;wreg free
  1247  0010CC  0EFF               	movlw	255
  1248  0010CE  2422               	addwf	?___aldiv,w,c
  1249  0010D0  0100               	movlb	0	; () banked
  1250  0010D2  6FC4               	movwf	UART_Init@x& (0+255),b
  1251  0010D4  0EFF               	movlw	255
  1252  0010D6  2023               	addwfc	?___aldiv+1,w,c
  1253  0010D8  0100               	movlb	0	; () banked
  1254  0010DA  6FC5               	movwf	(UART_Init@x+1)& (0+255),b
  1255                           
  1256                           ; BSR set to: 0
  1257                           ;uart.c: 42: TXSTA1 = 0b00100100;
  1258  0010DC  0E24               	movlw	36
  1259  0010DE  6EAD               	movwf	4013,c	;volatile
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;uart.c: 43: RCSTA1 = 0b10010000;
  1263  0010E0  0E90               	movlw	144
  1264  0010E2  6EAC               	movwf	4012,c	;volatile
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;uart.c: 44: RC1IE = 1;
  1268  0010E4  8A9D               	bsf	3997,5,c	;volatile
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;uart.c: 45: BAUDCON1bits.BRG16 = 0;
  1272  0010E6  967E               	bcf	3966,3,c	;volatile
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;uart.c: 47: SPBRG1 = 155;
  1276  0010E8  0E9B               	movlw	155
  1277  0010EA  6EB0               	movwf	4016,c	;volatile
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;uart.c: 48: SPBRGH1 = 155;
  1281  0010EC  0E9B               	movlw	155
  1282  0010EE  6E7F               	movwf	3967,c	;volatile
  1283                           
  1284                           ; BSR set to: 0
  1285                           ;uart.c: 52: TRISC7 = 1;
  1286  0010F0  8E94               	bsf	3988,7,c	;volatile
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;uart.c: 53: TRISC6 = 0;
  1290  0010F2  9C94               	bcf	3988,6,c	;volatile
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;uart.c: 59: RCSTA2 = 0b10010000;
  1294  0010F4  0E90               	movlw	144
  1295  0010F6  6E9C               	movwf	3996,c	;volatile
  1296                           
  1297                           ; BSR set to: 0
  1298                           ;uart.c: 60: TXSTA2 = 0b00100100;
  1299  0010F8  0E24               	movlw	36
  1300  0010FA  6EA8               	movwf	4008,c	;volatile
  1301                           
  1302                           ; BSR set to: 0
  1303                           ;uart.c: 62: RC2IE = 1;
  1304  0010FC  8AA3               	bsf	4003,5,c	;volatile
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;uart.c: 63: BAUDCON2bits.BRG16 = 0;
  1308  0010FE  967C               	bcf	3964,3,c	;volatile
  1309                           
  1310                           ; BSR set to: 0
  1311                           ;uart.c: 65: SPBRG2 = 25;
  1312  001100  0E19               	movlw	25
  1313  001102  6EAB               	movwf	4011,c	;volatile
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;uart.c: 66: SPBRGH2 = 25;
  1317  001104  0E19               	movlw	25
  1318  001106  6E7D               	movwf	3965,c	;volatile
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;uart.c: 69: TRISB4 = 1;
  1322  001108  8893               	bsf	3987,4,c	;volatile
  1323                           
  1324                           ; BSR set to: 0
  1325                           ;uart.c: 70: TRISB5 = 0;
  1326  00110A  9A93               	bcf	3987,5,c	;volatile
  1327  00110C  0012               	return	
  1328  00110E                     __end_of_UART_Init:
  1329                           	opt stack 0
  1330                           tblptru	equ	0xFF8
  1331                           tblptrh	equ	0xFF7
  1332                           postinc0	equ	0xFEE
  1333                           wreg	equ	0xFE8
  1334                           indf1	equ	0xFE7
  1335                           fsr1h	equ	0xFE2
  1336                           fsr1l	equ	0xFE1
  1337                           indf2	equ	0xFDF
  1338                           fsr2h	equ	0xFDA
  1339                           fsr2l	equ	0xFD9
  1340                           status	equ	0xFD8
  1341                           
  1342 ;; *************** function ___aldiv *****************
  1343 ;; Defined at:
  1344 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  dividend        4   33[COMRAM] long 
  1347 ;;  divisor         4   37[COMRAM] long 
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;  quotient        4   43[COMRAM] long 
  1350 ;;  sign            1   42[COMRAM] unsigned char 
  1351 ;;  counter         1   41[COMRAM] unsigned char 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  4   33[COMRAM] long 
  1354 ;; Registers used:
  1355 ;;		wreg, status,2, status,0
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1361 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1362 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1364 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1365 ;;Total ram usage:       14 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    3
  1368 ;; This function calls:
  1369 ;;		Nothing
  1370 ;; This function is called by:
  1371 ;;		_UART_Init
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text11
  1376  000F04                     __ptext11:
  1377                           	opt stack 0
  1378  000F04                     ___aldiv:
  1379                           	opt stack 26
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;incstack = 0
  1383  000F04  0E00               	movlw	0
  1384  000F06  6E2B               	movwf	___aldiv@sign,c
  1385  000F08  AE29               	btfss	___aldiv@divisor+3,7,c
  1386  000F0A  D00A               	goto	l1251
  1387  000F0C  1E29               	comf	___aldiv@divisor+3,f,c
  1388  000F0E  1E28               	comf	___aldiv@divisor+2,f,c
  1389  000F10  1E27               	comf	___aldiv@divisor+1,f,c
  1390  000F12  6C26               	negf	___aldiv@divisor,c
  1391  000F14  0E00               	movlw	0
  1392  000F16  2227               	addwfc	___aldiv@divisor+1,f,c
  1393  000F18  2228               	addwfc	___aldiv@divisor+2,f,c
  1394  000F1A  2229               	addwfc	___aldiv@divisor+3,f,c
  1395  000F1C  0E01               	movlw	1
  1396  000F1E  6E2B               	movwf	___aldiv@sign,c
  1397  000F20                     l1251:
  1398  000F20  AE25               	btfss	___aldiv@dividend+3,7,c
  1399  000F22  D00A               	goto	l1257
  1400  000F24  1E25               	comf	___aldiv@dividend+3,f,c
  1401  000F26  1E24               	comf	___aldiv@dividend+2,f,c
  1402  000F28  1E23               	comf	___aldiv@dividend+1,f,c
  1403  000F2A  6C22               	negf	___aldiv@dividend,c
  1404  000F2C  0E00               	movlw	0
  1405  000F2E  2223               	addwfc	___aldiv@dividend+1,f,c
  1406  000F30  2224               	addwfc	___aldiv@dividend+2,f,c
  1407  000F32  2225               	addwfc	___aldiv@dividend+3,f,c
  1408  000F34  0E01               	movlw	1
  1409  000F36  1A2B               	xorwf	___aldiv@sign,f,c
  1410  000F38                     l1257:
  1411  000F38  0E00               	movlw	0
  1412  000F3A  6E2C               	movwf	___aldiv@quotient,c
  1413  000F3C  0E00               	movlw	0
  1414  000F3E  6E2D               	movwf	___aldiv@quotient+1,c
  1415  000F40  0E00               	movlw	0
  1416  000F42  6E2E               	movwf	___aldiv@quotient+2,c
  1417  000F44  0E00               	movlw	0
  1418  000F46  6E2F               	movwf	___aldiv@quotient+3,c
  1419  000F48  5026               	movf	___aldiv@divisor,w,c
  1420  000F4A  1027               	iorwf	___aldiv@divisor+1,w,c
  1421  000F4C  1028               	iorwf	___aldiv@divisor+2,w,c
  1422  000F4E  1029               	iorwf	___aldiv@divisor+3,w,c
  1423  000F50  B4D8               	btfsc	status,2,c
  1424  000F52  D02A               	goto	l1279
  1425  000F54  0E01               	movlw	1
  1426  000F56  6E2A               	movwf	___aldiv@counter,c
  1427  000F58  D006               	goto	l1265
  1428  000F5A                     l1263:
  1429  000F5A  90D8               	bcf	status,0,c
  1430  000F5C  3626               	rlcf	___aldiv@divisor,f,c
  1431  000F5E  3627               	rlcf	___aldiv@divisor+1,f,c
  1432  000F60  3628               	rlcf	___aldiv@divisor+2,f,c
  1433  000F62  3629               	rlcf	___aldiv@divisor+3,f,c
  1434  000F64  2A2A               	incf	___aldiv@counter,f,c
  1435  000F66                     l1265:
  1436  000F66  AE29               	btfss	___aldiv@divisor+3,7,c
  1437  000F68  D7F8               	goto	l1263
  1438  000F6A                     l1267:
  1439  000F6A  90D8               	bcf	status,0,c
  1440  000F6C  362C               	rlcf	___aldiv@quotient,f,c
  1441  000F6E  362D               	rlcf	___aldiv@quotient+1,f,c
  1442  000F70  362E               	rlcf	___aldiv@quotient+2,f,c
  1443  000F72  362F               	rlcf	___aldiv@quotient+3,f,c
  1444  000F74  5026               	movf	___aldiv@divisor,w,c
  1445  000F76  5C22               	subwf	___aldiv@dividend,w,c
  1446  000F78  5027               	movf	___aldiv@divisor+1,w,c
  1447  000F7A  5823               	subwfb	___aldiv@dividend+1,w,c
  1448  000F7C  5028               	movf	___aldiv@divisor+2,w,c
  1449  000F7E  5824               	subwfb	___aldiv@dividend+2,w,c
  1450  000F80  5029               	movf	___aldiv@divisor+3,w,c
  1451  000F82  5825               	subwfb	___aldiv@dividend+3,w,c
  1452  000F84  A0D8               	btfss	status,0,c
  1453  000F86  D009               	goto	l1275
  1454  000F88  5026               	movf	___aldiv@divisor,w,c
  1455  000F8A  5E22               	subwf	___aldiv@dividend,f,c
  1456  000F8C  5027               	movf	___aldiv@divisor+1,w,c
  1457  000F8E  5A23               	subwfb	___aldiv@dividend+1,f,c
  1458  000F90  5028               	movf	___aldiv@divisor+2,w,c
  1459  000F92  5A24               	subwfb	___aldiv@dividend+2,f,c
  1460  000F94  5029               	movf	___aldiv@divisor+3,w,c
  1461  000F96  5A25               	subwfb	___aldiv@dividend+3,f,c
  1462  000F98  802C               	bsf	___aldiv@quotient,0,c
  1463  000F9A                     l1275:
  1464  000F9A  90D8               	bcf	status,0,c
  1465  000F9C  3229               	rrcf	___aldiv@divisor+3,f,c
  1466  000F9E  3228               	rrcf	___aldiv@divisor+2,f,c
  1467  000FA0  3227               	rrcf	___aldiv@divisor+1,f,c
  1468  000FA2  3226               	rrcf	___aldiv@divisor,f,c
  1469  000FA4  2E2A               	decfsz	___aldiv@counter,f,c
  1470  000FA6  D7E1               	goto	l1267
  1471  000FA8                     l1279:
  1472  000FA8  502B               	movf	___aldiv@sign,w,c
  1473  000FAA  B4D8               	btfsc	status,2,c
  1474  000FAC  D008               	goto	l1283
  1475  000FAE  1E2F               	comf	___aldiv@quotient+3,f,c
  1476  000FB0  1E2E               	comf	___aldiv@quotient+2,f,c
  1477  000FB2  1E2D               	comf	___aldiv@quotient+1,f,c
  1478  000FB4  6C2C               	negf	___aldiv@quotient,c
  1479  000FB6  0E00               	movlw	0
  1480  000FB8  222D               	addwfc	___aldiv@quotient+1,f,c
  1481  000FBA  222E               	addwfc	___aldiv@quotient+2,f,c
  1482  000FBC  222F               	addwfc	___aldiv@quotient+3,f,c
  1483  000FBE                     l1283:
  1484  000FBE  C02C  F022         	movff	___aldiv@quotient,?___aldiv
  1485  000FC2  C02D  F023         	movff	___aldiv@quotient+1,?___aldiv+1
  1486  000FC6  C02E  F024         	movff	___aldiv@quotient+2,?___aldiv+2
  1487  000FCA  C02F  F025         	movff	___aldiv@quotient+3,?___aldiv+3
  1488  000FCE  0012               	return	
  1489  000FD0                     __end_of___aldiv:
  1490                           	opt stack 0
  1491                           tblptru	equ	0xFF8
  1492                           tblptrh	equ	0xFF7
  1493                           postinc0	equ	0xFEE
  1494                           wreg	equ	0xFE8
  1495                           indf1	equ	0xFE7
  1496                           fsr1h	equ	0xFE2
  1497                           fsr1l	equ	0xFE1
  1498                           indf2	equ	0xFDF
  1499                           fsr2h	equ	0xFDA
  1500                           fsr2l	equ	0xFD9
  1501                           status	equ	0xFD8
  1502                           
  1503 ;; *************** function _InitApp *****************
  1504 ;; Defined at:
  1505 ;;		line 29 in file "user.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;		None
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;		None
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  1    wreg      void 
  1512 ;; Registers used:
  1513 ;;		wreg, status,2
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1523 ;;Total ram usage:        0 bytes
  1524 ;; Hardware stack levels used:    1
  1525 ;; Hardware stack levels required when called:    3
  1526 ;; This function calls:
  1527 ;;		Nothing
  1528 ;; This function is called by:
  1529 ;;		_main
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           	psect	text12
  1534  00135A                     __ptext12:
  1535                           	opt stack 0
  1536  00135A                     _InitApp:
  1537                           	opt stack 27
  1538                           
  1539                           ;user.c: 33: PPSCON = 0b00000000;
  1540                           
  1541                           ;incstack = 0
  1542  00135A  0E00               	movlw	0
  1543  00135C  010E               	movlb	14	; () banked
  1544  00135E  6FBF               	movwf	191,b	;volatile
  1545                           
  1546                           ;user.c: 34: RPOR8 = 0b00000110;
  1547  001360  0E06               	movlw	6
  1548  001362  010E               	movlb	14	; () banked
  1549  001364  6FC8               	movwf	200,b	;volatile
  1550                           
  1551                           ;user.c: 35: RPINR16 = 0b00000111;
  1552  001366  0E07               	movlw	7
  1553  001368  010E               	movlb	14	; () banked
  1554  00136A  6FF7               	movwf	247,b	;volatile
  1555                           
  1556                           ;user.c: 36: PPSCON = 0b00000001;
  1557  00136C  0E01               	movlw	1
  1558  00136E  010E               	movlb	14	; () banked
  1559  001370  6FBF               	movwf	191,b	;volatile
  1560                           
  1561                           ;user.c: 39: INTCON = 0xC0;
  1562  001372  0EC0               	movlw	192
  1563  001374  6EF2               	movwf	intcon,c	;volatile
  1564                           
  1565                           ; BSR set to: 14
  1566  001376  0012               	return		;funcret
  1567  001378                     __end_of_InitApp:
  1568                           	opt stack 0
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           intcon	equ	0xFF2
  1572                           postinc0	equ	0xFEE
  1573                           wreg	equ	0xFE8
  1574                           indf1	equ	0xFE7
  1575                           fsr1h	equ	0xFE2
  1576                           fsr1l	equ	0xFE1
  1577                           indf2	equ	0xFDF
  1578                           fsr2h	equ	0xFDA
  1579                           fsr2l	equ	0xFD9
  1580                           status	equ	0xFD8
  1581                           
  1582 ;; *************** function _ConfigureOscillator *****************
  1583 ;; Defined at:
  1584 ;;		line 24 in file "system.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;		None
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;		None
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      void 
  1591 ;; Registers used:
  1592 ;;		wreg, status,2
  1593 ;; Tracked objects:
  1594 ;;		On entry : 0/0
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1602 ;;Total ram usage:        0 bytes
  1603 ;; Hardware stack levels used:    1
  1604 ;; Hardware stack levels required when called:    3
  1605 ;; This function calls:
  1606 ;;		Nothing
  1607 ;; This function is called by:
  1608 ;;		_main
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612                           	psect	text13
  1613  0013BE                     __ptext13:
  1614                           	opt stack 0
  1615  0013BE                     _ConfigureOscillator:
  1616                           	opt stack 27
  1617                           
  1618                           ;system.c: 26: OSCCONbits.IRCF = 0b110;
  1619                           
  1620                           ; BSR set to: 14
  1621                           ;incstack = 0
  1622  0013BE  50D3               	movf	4051,w,c	;volatile
  1623  0013C0  0B8F               	andlw	-113
  1624  0013C2  0960               	iorlw	96
  1625  0013C4  6ED3               	movwf	4051,c	;volatile
  1626                           
  1627                           ;system.c: 27: OSCTUNEbits.PLLEN = 0b1;
  1628  0013C6  8C9B               	bsf	3995,6,c	;volatile
  1629  0013C8  0012               	return		;funcret
  1630  0013CA                     __end_of_ConfigureOscillator:
  1631                           	opt stack 0
  1632                           tblptru	equ	0xFF8
  1633                           tblptrh	equ	0xFF7
  1634                           intcon	equ	0xFF2
  1635                           postinc0	equ	0xFEE
  1636                           wreg	equ	0xFE8
  1637                           indf1	equ	0xFE7
  1638                           fsr1h	equ	0xFE2
  1639                           fsr1l	equ	0xFE1
  1640                           indf2	equ	0xFDF
  1641                           fsr2h	equ	0xFDA
  1642                           fsr2l	equ	0xFD9
  1643                           status	equ	0xFD8
  1644                           
  1645 ;; *************** function _low_isr *****************
  1646 ;; Defined at:
  1647 ;;		line 65 in file "interrupts.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;		None
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;		None
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  1    wreg      void 
  1654 ;; Registers used:
  1655 ;;		None
  1656 ;; Tracked objects:
  1657 ;;		On entry : 0/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1663 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1664 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1665 ;;Total ram usage:       17 bytes
  1666 ;; Hardware stack levels used:    1
  1667 ;; Hardware stack levels required when called:    2
  1668 ;; This function calls:
  1669 ;;		Nothing
  1670 ;; This function is called by:
  1671 ;;		Interrupt level 1
  1672 ;; This function uses a non-reentrant model
  1673 ;;
  1674                           
  1675                           	psect	intcodelo
  1676  000018                     __pintcodelo:
  1677                           	opt stack 0
  1678  000018                     _low_isr:
  1679                           	opt stack 25
  1680                           
  1681                           ;incstack = 0
  1682  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1683  00001A  CFD8 F011          	movff	status,??_low_isr
  1684  00001E  CFE8 F012          	movff	wreg,??_low_isr+1
  1685  000022  CFE0 F013          	movff	bsr,??_low_isr+2
  1686  000026  CFFA F014          	movff	pclath,??_low_isr+3
  1687  00002A  CFFB F015          	movff	pclatu,??_low_isr+4
  1688  00002E  CFE9 F016          	movff	fsr0l,??_low_isr+5
  1689  000032  CFEA F017          	movff	fsr0h,??_low_isr+6
  1690  000036  CFE1 F018          	movff	fsr1l,??_low_isr+7
  1691  00003A  CFE2 F019          	movff	fsr1h,??_low_isr+8
  1692  00003E  CFD9 F01A          	movff	fsr2l,??_low_isr+9
  1693  000042  CFDA F01B          	movff	fsr2h,??_low_isr+10
  1694  000046  CFF3 F01C          	movff	prodl,??_low_isr+11
  1695  00004A  CFF4 F01D          	movff	prodh,??_low_isr+12
  1696  00004E  CFF6 F01E          	movff	tblptrl,??_low_isr+13
  1697  000052  CFF7 F01F          	movff	tblptrh,??_low_isr+14
  1698  000056  CFF8 F020          	movff	tblptru,??_low_isr+15
  1699  00005A  CFF5 F021          	movff	tablat,??_low_isr+16
  1700  00005E  C021  FFF5         	movff	??_low_isr+16,tablat
  1701  000062  C020  FFF8         	movff	??_low_isr+15,tblptru
  1702  000066  C01F  FFF7         	movff	??_low_isr+14,tblptrh
  1703  00006A  C01E  FFF6         	movff	??_low_isr+13,tblptrl
  1704  00006E  C01D  FFF4         	movff	??_low_isr+12,prodh
  1705  000072  C01C  FFF3         	movff	??_low_isr+11,prodl
  1706  000076  C01B  FFDA         	movff	??_low_isr+10,fsr2h
  1707  00007A  C01A  FFD9         	movff	??_low_isr+9,fsr2l
  1708  00007E  C019  FFE2         	movff	??_low_isr+8,fsr1h
  1709  000082  C018  FFE1         	movff	??_low_isr+7,fsr1l
  1710  000086  C017  FFEA         	movff	??_low_isr+6,fsr0h
  1711  00008A  C016  FFE9         	movff	??_low_isr+5,fsr0l
  1712  00008E  C015  FFFB         	movff	??_low_isr+4,pclatu
  1713  000092  C014  FFFA         	movff	??_low_isr+3,pclath
  1714  000096  C013  FFE0         	movff	??_low_isr+2,bsr
  1715  00009A  C012  FFE8         	movff	??_low_isr+1,wreg
  1716  00009E  C011  FFD8         	movff	??_low_isr,status
  1717  0000A2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1718  0000A4  0010               	retfie	
  1719  0000A6                     __end_of_low_isr:
  1720                           	opt stack 0
  1721                           pclatu	equ	0xFFB
  1722                           pclath	equ	0xFFA
  1723                           tblptru	equ	0xFF8
  1724                           tblptrh	equ	0xFF7
  1725                           tblptrl	equ	0xFF6
  1726                           tablat	equ	0xFF5
  1727                           prodh	equ	0xFF4
  1728                           prodl	equ	0xFF3
  1729                           intcon	equ	0xFF2
  1730                           postinc0	equ	0xFEE
  1731                           fsr0h	equ	0xFEA
  1732                           fsr0l	equ	0xFE9
  1733                           wreg	equ	0xFE8
  1734                           indf1	equ	0xFE7
  1735                           fsr1h	equ	0xFE2
  1736                           fsr1l	equ	0xFE1
  1737                           bsr	equ	0xFE0
  1738                           indf2	equ	0xFDF
  1739                           fsr2h	equ	0xFDA
  1740                           fsr2l	equ	0xFD9
  1741                           status	equ	0xFD8
  1742                           
  1743 ;; *************** function _high_isr *****************
  1744 ;; Defined at:
  1745 ;;		line 31 in file "interrupts.c"
  1746 ;; Parameters:    Size  Location     Type
  1747 ;;		None
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;		None
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      void 
  1752 ;; Registers used:
  1753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1761 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1762 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1763 ;;Total ram usage:       15 bytes
  1764 ;; Hardware stack levels used:    1
  1765 ;; Hardware stack levels required when called:    1
  1766 ;; This function calls:
  1767 ;;		_appendChar
  1768 ;; This function is called by:
  1769 ;;		Interrupt level 2
  1770 ;; This function uses a non-reentrant model
  1771 ;;
  1772                           
  1773                           	psect	intcode
  1774  000008                     __pintcode:
  1775                           	opt stack 0
  1776  000008                     _high_isr:
  1777                           	opt stack 25
  1778                           
  1779                           ;incstack = 0
  1780  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1781  00000A  EFE8  F007         	goto	int_func
  1782                           pclatu	equ	0xFFB
  1783                           pclath	equ	0xFFA
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           prodh	equ	0xFF4
  1789                           prodl	equ	0xFF3
  1790                           intcon	equ	0xFF2
  1791                           postinc0	equ	0xFEE
  1792                           fsr0h	equ	0xFEA
  1793                           fsr0l	equ	0xFE9
  1794                           wreg	equ	0xFE8
  1795                           indf1	equ	0xFE7
  1796                           fsr1h	equ	0xFE2
  1797                           fsr1l	equ	0xFE1
  1798                           bsr	equ	0xFE0
  1799                           indf2	equ	0xFDF
  1800                           fsr2h	equ	0xFDA
  1801                           fsr2l	equ	0xFD9
  1802                           status	equ	0xFD8
  1803                           
  1804                           	psect	intcode_body
  1805  000FD0                     __pintcode_body:
  1806                           	opt stack 25
  1807  000FD0                     int_func:
  1808                           	opt stack 25
  1809  000FD0  CFFA F003          	movff	pclath,??_high_isr+1
  1810  000FD4  CFFB F004          	movff	pclatu,??_high_isr+2
  1811  000FD8  CFE9 F005          	movff	fsr0l,??_high_isr+3
  1812  000FDC  CFEA F006          	movff	fsr0h,??_high_isr+4
  1813  000FE0  CFE1 F007          	movff	fsr1l,??_high_isr+5
  1814  000FE4  CFE2 F008          	movff	fsr1h,??_high_isr+6
  1815  000FE8  CFD9 F009          	movff	fsr2l,??_high_isr+7
  1816  000FEC  CFDA F00A          	movff	fsr2h,??_high_isr+8
  1817  000FF0  CFF3 F00B          	movff	prodl,??_high_isr+9
  1818  000FF4  CFF4 F00C          	movff	prodh,??_high_isr+10
  1819  000FF8  CFF6 F00D          	movff	tblptrl,??_high_isr+11
  1820  000FFC  CFF7 F00E          	movff	tblptrh,??_high_isr+12
  1821  001000  CFF8 F00F          	movff	tblptru,??_high_isr+13
  1822  001004  CFF5 F010          	movff	tablat,??_high_isr+14
  1823                           
  1824                           ;interrupts.c: 46: if(RC1IF){
  1825  001008  AA9E               	btfss	3998,5,c	;volatile
  1826  00100A  D00F               	goto	i2l1203
  1827                           
  1828                           ;interrupts.c: 47: LATAbits.LATA0 = !LATAbits.LATA0;
  1829  00100C  B089               	btfsc	3977,0,c	;volatile
  1830  00100E  D003               	goto	i2u45_40
  1831  001010  6A02               	clrf	??_high_isr& (0+255),c
  1832  001012  2A02               	incf	??_high_isr& (0+255),f,c
  1833  001014  D001               	goto	i2u46_48
  1834  001016                     i2u45_40:
  1835  001016  6A02               	clrf	??_high_isr& (0+255),c
  1836  001018                     i2u46_48:
  1837  001018  5089               	movf	3977,w,c	;volatile
  1838  00101A  1802               	xorwf	??_high_isr,w,c
  1839  00101C  0BFE               	andlw	-2
  1840  00101E  1802               	xorwf	??_high_isr,w,c
  1841  001020  6E89               	movwf	3977,c	;volatile
  1842                           
  1843                           ;interrupts.c: 48: appendChar(RCREG1);
  1844  001022  50AF               	movf	4015,w,c	;volatile
  1845  001024  ECCA  F009         	call	_appendChar
  1846                           
  1847                           ;interrupts.c: 50: RC1IF = 0;
  1848  001028  9A9E               	bcf	3998,5,c	;volatile
  1849  00102A                     i2l1203:
  1850                           
  1851                           ;interrupts.c: 51: }
  1852                           ;interrupts.c: 53: if(RC2IF){
  1853  00102A  AAA4               	btfss	4004,5,c	;volatile
  1854  00102C  D005               	goto	i2l26
  1855  00102E                     i2l23:
  1856  00102E  A2AD               	btfss	4013,1,c	;volatile
  1857  001030  D7FE               	goto	i2l23
  1858                           
  1859                           ;interrupts.c: 55: TXREG1 = RCREG2;
  1860  001032  CFAA FFAE          	movff	4010,4014	;volatile
  1861                           
  1862                           ;interrupts.c: 56: RC2IF = 0;
  1863  001036  9AA4               	bcf	4004,5,c	;volatile
  1864  001038                     i2l26:
  1865  001038  C010  FFF5         	movff	??_high_isr+14,tablat
  1866  00103C  C00F  FFF8         	movff	??_high_isr+13,tblptru
  1867  001040  C00E  FFF7         	movff	??_high_isr+12,tblptrh
  1868  001044  C00D  FFF6         	movff	??_high_isr+11,tblptrl
  1869  001048  C00C  FFF4         	movff	??_high_isr+10,prodh
  1870  00104C  C00B  FFF3         	movff	??_high_isr+9,prodl
  1871  001050  C00A  FFDA         	movff	??_high_isr+8,fsr2h
  1872  001054  C009  FFD9         	movff	??_high_isr+7,fsr2l
  1873  001058  C008  FFE2         	movff	??_high_isr+6,fsr1h
  1874  00105C  C007  FFE1         	movff	??_high_isr+5,fsr1l
  1875  001060  C006  FFEA         	movff	??_high_isr+4,fsr0h
  1876  001064  C005  FFE9         	movff	??_high_isr+3,fsr0l
  1877  001068  C004  FFFB         	movff	??_high_isr+2,pclatu
  1878  00106C  C003  FFFA         	movff	??_high_isr+1,pclath
  1879  001070  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1880  001072  0011               	retfie		f
  1881  001074                     __end_of_high_isr:
  1882                           	opt stack 0
  1883                           pclatu	equ	0xFFB
  1884                           pclath	equ	0xFFA
  1885                           tblptru	equ	0xFF8
  1886                           tblptrh	equ	0xFF7
  1887                           tblptrl	equ	0xFF6
  1888                           tablat	equ	0xFF5
  1889                           prodh	equ	0xFF4
  1890                           prodl	equ	0xFF3
  1891                           intcon	equ	0xFF2
  1892                           postinc0	equ	0xFEE
  1893                           fsr0h	equ	0xFEA
  1894                           fsr0l	equ	0xFE9
  1895                           wreg	equ	0xFE8
  1896                           indf1	equ	0xFE7
  1897                           fsr1h	equ	0xFE2
  1898                           fsr1l	equ	0xFE1
  1899                           bsr	equ	0xFE0
  1900                           indf2	equ	0xFDF
  1901                           fsr2h	equ	0xFDA
  1902                           fsr2l	equ	0xFD9
  1903                           status	equ	0xFD8
  1904                           
  1905 ;; *************** function _appendChar *****************
  1906 ;; Defined at:
  1907 ;;		line 125 in file "uart.c"
  1908 ;; Parameters:    Size  Location     Type
  1909 ;;  data            1    wreg     unsigned char 
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;  data            1    0[COMRAM] unsigned char 
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  1    wreg      void 
  1914 ;; Registers used:
  1915 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1922 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1924 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1925 ;;Total ram usage:        1 bytes
  1926 ;; Hardware stack levels used:    1
  1927 ;; This function calls:
  1928 ;;		Nothing
  1929 ;; This function is called by:
  1930 ;;		_high_isr
  1931 ;; This function uses a non-reentrant model
  1932 ;;
  1933                           
  1934                           	psect	text16
  1935  001394                     __ptext16:
  1936                           	opt stack 0
  1937  001394                     _appendChar:
  1938                           	opt stack 25
  1939                           
  1940                           ;incstack = 0
  1941                           ;appendChar@data stored from wreg
  1942  001394  6E01               	movwf	appendChar@data,c
  1943                           
  1944                           ;uart.c: 126: tmpString[index] = data;
  1945  001396  0E92               	movlw	low _tmpString
  1946  001398  2439               	addwf	_index,w,c
  1947  00139A  6ED9               	movwf	fsr2l,c
  1948  00139C  0E00               	movlw	high _tmpString
  1949  00139E  203A               	addwfc	_index+1,w,c
  1950  0013A0  6EDA               	movwf	fsr2h,c
  1951  0013A2  C001  FFDF         	movff	appendChar@data,indf2
  1952                           
  1953                           ;uart.c: 127: index++;
  1954  0013A6  4A39               	infsnz	_index,f,c
  1955  0013A8  2A3A               	incf	_index+1,f,c
  1956  0013AA  0012               	return		;funcret
  1957  0013AC                     __end_of_appendChar:
  1958                           	opt stack 0
  1959                           pclatu	equ	0xFFB
  1960                           pclath	equ	0xFFA
  1961                           tblptru	equ	0xFF8
  1962                           tblptrh	equ	0xFF7
  1963                           tblptrl	equ	0xFF6
  1964                           tablat	equ	0xFF5
  1965                           prodh	equ	0xFF4
  1966                           prodl	equ	0xFF3
  1967                           intcon	equ	0xFF2
  1968                           postinc0	equ	0xFEE
  1969                           fsr0h	equ	0xFEA
  1970                           fsr0l	equ	0xFE9
  1971                           wreg	equ	0xFE8
  1972                           indf1	equ	0xFE7
  1973                           fsr1h	equ	0xFE2
  1974                           fsr1l	equ	0xFE1
  1975                           bsr	equ	0xFE0
  1976                           indf2	equ	0xFDF
  1977                           fsr2h	equ	0xFDA
  1978                           fsr2l	equ	0xFD9
  1979                           status	equ	0xFD8
  1980                           pclatu	equ	0xFFB
  1981                           pclath	equ	0xFFA
  1982                           tblptru	equ	0xFF8
  1983                           tblptrh	equ	0xFF7
  1984                           tblptrl	equ	0xFF6
  1985                           tablat	equ	0xFF5
  1986                           prodh	equ	0xFF4
  1987                           prodl	equ	0xFF3
  1988                           intcon	equ	0xFF2
  1989                           postinc0	equ	0xFEE
  1990                           fsr0h	equ	0xFEA
  1991                           fsr0l	equ	0xFE9
  1992                           wreg	equ	0xFE8
  1993                           indf1	equ	0xFE7
  1994                           fsr1h	equ	0xFE2
  1995                           fsr1l	equ	0xFE1
  1996                           bsr	equ	0xFE0
  1997                           indf2	equ	0xFDF
  1998                           fsr2h	equ	0xFDA
  1999                           fsr2l	equ	0xFD9
  2000                           status	equ	0xFD8
  2001                           
  2002                           	psect	rparam
  2003  0000                     pclatu	equ	0xFFB
  2004                           pclath	equ	0xFFA
  2005                           tblptru	equ	0xFF8
  2006                           tblptrh	equ	0xFF7
  2007                           tblptrl	equ	0xFF6
  2008                           tablat	equ	0xFF5
  2009                           prodh	equ	0xFF4
  2010                           prodl	equ	0xFF3
  2011                           intcon	equ	0xFF2
  2012                           postinc0	equ	0xFEE
  2013                           fsr0h	equ	0xFEA
  2014                           fsr0l	equ	0xFE9
  2015                           wreg	equ	0xFE8
  2016                           indf1	equ	0xFE7
  2017                           fsr1h	equ	0xFE2
  2018                           fsr1l	equ	0xFE1
  2019                           bsr	equ	0xFE0
  2020                           indf2	equ	0xFDF
  2021                           fsr2h	equ	0xFDA
  2022                           fsr2l	equ	0xFD9
  2023                           status	equ	0xFD8
  2024                           
  2025                           	psect	temp
  2026  00003C                     btemp:
  2027                           	opt stack 0
  2028  00003C                     	ds	1
  2029  0000                     int$flags	set	btemp
  2030                           pclatu	equ	0xFFB
  2031                           pclath	equ	0xFFA
  2032                           tblptru	equ	0xFF8
  2033                           tblptrh	equ	0xFF7
  2034                           tblptrl	equ	0xFF6
  2035                           tablat	equ	0xFF5
  2036                           prodh	equ	0xFF4
  2037                           prodl	equ	0xFF3
  2038                           intcon	equ	0xFF2
  2039                           postinc0	equ	0xFEE
  2040                           fsr0h	equ	0xFEA
  2041                           fsr0l	equ	0xFE9
  2042                           wreg	equ	0xFE8
  2043                           indf1	equ	0xFE7
  2044                           fsr1h	equ	0xFE2
  2045                           fsr1l	equ	0xFE1
  2046                           bsr	equ	0xFE0
  2047                           indf2	equ	0xFDF
  2048                           fsr2h	equ	0xFDA
  2049                           fsr2l	equ	0xFD9
  2050                           status	equ	0xFD8


Data Sizes:
    Strings     1
    Constant    0
    Data        0
    BSS         107
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     52      59
    BANK0           160      6     106
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 50
		 -> realString(BANK0[50]), tmpString(BANK0[50]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 50
		 -> realString(BANK0[50]), tmpString(BANK0[50]), 

    writeString@str	PTR unsigned char  size(2) Largest target is 50
		 -> realString(BANK0[50]), 


Critical Paths under _main in COMRAM

    _main->_UART_Init
    _writeResult->_wait_ms
    _writeString->_strlen
    _wait_ms->___lmul
    _clearBuffer->_strlen
    _UART_Init->___aldiv

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_appendChar

Critical Paths under _main in BANK0

    _main->_UART_Init

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2787
                                             51 COMRAM     1     1      0
                _ConfigureOscillator
                            _InitApp
                          _UART_Init
                        _clearBuffer
                      _copyTmpBuffer
                     _isItLongEnough
                            _wait_ms
                        _writeResult
 ---------------------------------------------------------------------------------
 (1) _writeResult                                          1     1      0    1082
                                             47 COMRAM     1     1      0
                            _wait_ms
                        _writeString
 ---------------------------------------------------------------------------------
 (2) _writeString                                          5     2      3     588
                                             39 COMRAM     5     2      3
                         _UART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _UART_Write                                           2     1      1     130
                                             33 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _wait_ms                                              2     0      2     472
                                             45 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     322
                                             33 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _isItLongEnough                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _copyTmpBuffer                                        3     3      0      68
                                             33 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _clearBuffer                                          2     2      0     264
                                             39 COMRAM     2     2      0
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     218
                                             33 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           10     6      4     898
                                             47 COMRAM     4     0      4
                                              0 BANK0      6     6      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     753
                                             33 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                             16 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            15    15      0      22
                                              1 COMRAM    15    15      0
                         _appendChar
 ---------------------------------------------------------------------------------
 (6) _appendChar                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _UART_Init
     ___aldiv
   _clearBuffer
     _strlen
   _copyTmpBuffer
   _isItLongEnough
   _wait_ms
     ___lmul
   _writeResult
     _wait_ms
       ___lmul
     _writeString
       _UART_Write
       _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)
   _appendChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      6      6A       5       66.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     34      3B       1       62.8%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A5       6        0.0%
DATA                 0      0      A5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Mar 20 15:20:48 2017

                          l57 115E                            l74 1204                            l58 1160  
              writeResult@dev 0030                            bsr 000FE0                  __CFG_CP0$OFF 000000  
                         l155 1380                           l159 138A                           l977 13BA  
                         wreg 000FE8                    _TXSTA1bits 000FAD                  __CFG_IESO$ON 000000  
                  _TXSTA2bits 000FA8                          l1061 12E4                          l1073 1190  
                        l1251 0F20                          l1059 12E0                          l1083 12A2  
                        l1069 117C                          l1341 113C                          l1263 0F5A  
                        l1175 121C                          l1079 11F4                          l1087 12BC  
                        l1265 0F66                          l1257 0F38                          l1185 1262  
                        l1283 0FBE                          l1275 0F9A                          l1267 0F6A  
                        l1179 1230                          l1189 1282                          l1279 0FA8  
          __CFG_WPFP$PAGE_127 000000                 _copyTmpBuffer 1258                          STR_1 0F01  
                        _RCIF 007CF5                          i2l23 102E                          i2l26 1038  
               __CFG_FCMEN$ON 000000                          _main 110E                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf1 000FE7                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                          btemp 003C                          prodh 000FF4  
                        prodl 000FF3                          start 00A6                writeString@dev 002A  
                ___param_bank 000000                writeString@str 0028               __end_of_InitApp 1378  
               __CFG_PLLDIV$1 000000                  _BAUDCON1bits 000F7E                  _BAUDCON2bits 000F7C  
             __end_of___aldiv 0FD0                         ?_main 0001                         _RC1IE 007CED  
                       _RC1IF 007CF5                         _RC2IE 007D1D                         _RC2IF 007D25  
                 _writeResult 133A                         _RPOR8 000EC8           _ConfigureOscillator 13BE  
                 _writeString 1298           ___lmul@multiplicand 0026              ??_isItLongEnough 0022  
                 ?_UART_Write 0022            __size_of_UART_Init 009A                         _index 0039  
              ?_copyTmpBuffer 0001                __CFG_CLKOEC$ON 000000               __end_of_low_isr 00A6  
                       pclath 000FFA                         tablat 000FF5               __end_of_wait_ms 1212  
                       status 000FD8          ?_ConfigureOscillator 0001          __size_of_clearBuffer 0046  
     __CFG_DSWDTOSC$INTOSCREF 000000               __initialization 1310                  __end_of_main 116C  
                      ??_main 0034                 __activetblptr 000001                        i2l1203 102A  
              __CFG_WDTEN$OFF 000000                        _INTCON 000FF2                        _RCREG1 000FAF  
                      _RCREG2 000FAA                        _RCSTA1 000FAC                        _RCSTA2 000F9C  
                      _SPBRG1 000FB0                        _SPBRG2 000FAB                        _PPSCON 000EBF  
                      _TRISB4 007C9C                        _TRISB5 007C9D                __CFG_WPCFG$OFF 000000  
                      _TRISC6 007CA6                        _TRISC7 007CA7                        _TXREG1 000FAE  
                      _TXREG2 000FA9                        _TXSTA1 000FAD                        _TXSTA2 000FA8  
                   ??_InitApp 0022         ??_ConfigureOscillator 0022                __CFG_WPDIS$OFF 000000  
              __CFG_XINST$OFF 000000             __end_of_UART_Init 110E              __end_of_high_isr 1074  
                      ___lmul 116C           __size_of_UART_Write 001C                     ??___aldiv 002A  
              __CFG_STVREN$ON 000000                        clear_0 1316                        clear_1 1322  
                      _strlen 12D6                  __mediumconst 0000                     ??_low_isr 0011  
                      tblptrh 000FF7               ??_copyTmpBuffer 0022                        tblptrl 000FF6  
                      tblptru 000FF8                     ??_wait_ms 0030               __CFG_DSBOREN$ON 000000  
        __CFG_LS48MHZ$SYS48X8 000000                    __accesstop 0060       __end_of__initialization 1328  
               ___rparam_used 000001               __CFG_IOL1WAY$ON 000000          __CFG_WPEND$PAGE_WPFP 000000  
              __pcstackCOMRAM 0001               __CFG_DSWDTEN$ON 000000               __CFG_DSWDTPS$G2 000000  
             __CFG_OSC$INTOSC 000000                    __pbssBANK0 0060                       ?___lmul 0022  
              ___lmul@product 002A                    _appendChar 1394                       ?_strlen 0022  
                ?_writeResult 0001                  ?_writeString 0028                  ??_UART_Write 0023  
                     i2u45_40 1016                       i2u46_48 1018                       _SPBRGH1 000F7F  
                     _SPBRGH2 000F7D                       _RPINR16 000EF7                     ?_high_isr 0001  
              _UART_Init$1265 00C6                       _InitApp 135A                       __Hparam 0000  
                     __Lparam 0000                       ___aldiv 0F04               __size_of___lmul 0056  
          __end_of_UART_Write 1394                  __psmallconst 0F00                       __pcinit 1310  
                     __ramtop 0F00                       _flaggan 003B                       __ptext0 110E  
                     __ptext1 133A                       __ptext2 1298                       __ptext3 1378  
                     __ptext4 11C2                       __ptext5 116C                       __ptext6 13AC  
                     __ptext7 1258                       __ptext8 1212                       __ptext9 12D6  
             __size_of_strlen 003A                    _realString 0060              ___aldiv@dividend 0022  
                     _low_isr 0018                       _wait_ms 11C2                       main@var 0034  
                  ??_high_isr 0002                __pintcode_body 0FD0          end_of_initialization 1328  
               ??_clearBuffer 0028                       int_func 0FD0              ___aldiv@quotient 002C  
                     postinc0 000FEE                   wait_ms@time 002E                       strlen@s 0022  
                   _UART_Init 1074                     _PORTDbits 000F83                   ?_appendChar 0001  
              UART_Write@data 0023              __CFG_CPUDIV$OSC1 000000                     _TRISAbits 000F92  
                   _TRISDbits 000F95             __CFG_SOSCSEL$HIGH 000000   __end_of_ConfigureOscillator 13CA  
                writeString@i 002B       __size_of_isItLongEnough 0012           __CFG_MSSP7B_EN$MSK7 000000  
         __end_of_clearBuffer 1258                __end_of___lmul 11C2                    ?_UART_Init 0030  
              __end_of_strlen 1310           start_initialization 1310          __size_of_writeResult 0020  
        __size_of_writeString 003E         __end_of_copyTmpBuffer 1298           __size_of_appendChar 0018  
                    ??___lmul 002A             __CFG_ADCSEL$BIT10 000000                      ??_strlen 0024  
                 __pbssCOMRAM 0035                 __pcstackBANK0 00C4             __size_of_high_isr 106C  
                 _clearBuffer 1212                      ?_InitApp 0001                     __pintcode 0008  
                    ?___aldiv 0022                   __pintcodelo 0018                   ??_UART_Init 0034  
                 __smallconst 0F00          __CFG_RTCOSC$T1OSCREF 000000                      ?_low_isr 0001  
                    ?_wait_ms 002E                    UART_Init@x 00C4                copyTmpBuffer@i 0023  
             ___aldiv@divisor 0026               ___aldiv@counter 002A                _isItLongEnough 13AC  
                    _LATAbits 000F89              __CFG_WDTPS$32768 000000                  clearBuffer@i 0028  
               UART_Write@dev 0022                     _tmpString 0092             UART_Init@baudrate 0030  
                ??_appendChar 0001             __CFG_CFGPLLEN$OFF 000000             ___lmul@multiplier 0022  
      __end_of_isItLongEnough 13BE            __end_of_appendChar 13AC              __size_of_InitApp 001E  
                    __Hrparam 0000                      __Lrparam 0000                  __Lsmallconst 0F00  
            __size_of___aldiv 00CC              __size_of_low_isr 008E                      __ptext10 1074  
                    __ptext11 0F04                      __ptext12 135A                      __ptext13 13BE  
                    __ptext16 1394              __size_of_wait_ms 0050                      _high_isr 0008  
             ?_isItLongEnough 0001                 __size_of_main 005E                appendChar@data 0001  
__size_of_ConfigureOscillator 000C                      int$flags 003C                 ??_writeResult 0030  
               ??_writeString 002B                   _OSCTUNEbits 000F9B                      intlevel1 0000  
                    intlevel2 0000                  ?_clearBuffer 0001                    _OSCCONbits 000FD3  
      __size_of_copyTmpBuffer 0040                  wait_ms@timel 0035                      strlen@cp 0026  
                ___aldiv@sign 002B                    _UART_Write 1378           __end_of_writeResult 135A  
         __end_of_writeString 12D6  
